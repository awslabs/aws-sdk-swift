// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public enum AMITypes {
    case al2Arm64
    case al2X8664
    case al2X8664Gpu
    case custom
    case sdkUnknown(String)
}

extension AMITypes : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AMITypes] {
        return [
            .al2Arm64,
            .al2X8664,
            .al2X8664Gpu,
            .custom,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .al2Arm64: return "AL2_ARM_64"
        case .al2X8664: return "AL2_x86_64"
        case .al2X8664Gpu: return "AL2_x86_64_GPU"
        case .custom: return "CUSTOM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AMITypes(rawValue: rawValue) ?? AMITypes.sdkUnknown(rawValue)
    }
}

extension Addon: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonArn
        case addonName
        case addonVersion
        case clusterName
        case createdAt
        case health
        case modifiedAt
        case serviceAccountRoleArn
        case status
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonArn = addonArn {
            try encodeContainer.encode(addonArn, forKey: .addonArn)
        }
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let health = health {
            try encodeContainer.encode(health, forKey: .health)
        }
        if let modifiedAt = modifiedAt {
            try encodeContainer.encode(modifiedAt.timeIntervalSince1970, forKey: .modifiedAt)
        }
        if let serviceAccountRoleArn = serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AddonStatus.self, forKey: .status)
        status = statusDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let healthDecoded = try containerValues.decodeIfPresent(AddonHealth.self, forKey: .health)
        health = healthDecoded
        let addonArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonArn)
        addonArn = addonArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let modifiedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .modifiedAt)
        modifiedAt = modifiedAtDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension Addon: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Addon(addonArn: \(String(describing: addonArn)), addonName: \(String(describing: addonName)), addonVersion: \(String(describing: addonVersion)), clusterName: \(String(describing: clusterName)), createdAt: \(String(describing: createdAt)), health: \(String(describing: health)), modifiedAt: \(String(describing: modifiedAt)), serviceAccountRoleArn: \(String(describing: serviceAccountRoleArn)), status: \(String(describing: status)), tags: \(String(describing: tags)))"}
}

/// <p>An Amazon EKS add-on.</p>
public struct Addon: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the add-on.</p>
    public let addonArn: String?
    /// <p>The name of the add-on.</p>
    public let addonName: String?
    /// <p>The version of the add-on.</p>
    public let addonVersion: String?
    /// <p>The name of the cluster.</p>
    public let clusterName: String?
    /// <p>The date and time that the add-on was created.</p>
    public let createdAt: Date?
    /// <p>An object that represents the health of the add-on.</p>
    public let health: AddonHealth?
    /// <p>The date and time that the add-on was last modified.</p>
    public let modifiedAt: Date?
    /// <p>The Amazon Resource Name (ARN) of the IAM role that is bound to the Kubernetes service account used
    ///             by the add-on.</p>
    public let serviceAccountRoleArn: String?
    /// <p>The status of the add-on.</p>
    public let status: AddonStatus?
    /// <p>The metadata that you apply to the add-on to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             define. Add-on tags do not propagate to any other resources associated with the cluster.
    ///         </p>
    public let tags: [String:String]?

    public init (
        addonArn: String? = nil,
        addonName: String? = nil,
        addonVersion: String? = nil,
        clusterName: String? = nil,
        createdAt: Date? = nil,
        health: AddonHealth? = nil,
        modifiedAt: Date? = nil,
        serviceAccountRoleArn: String? = nil,
        status: AddonStatus? = nil,
        tags: [String:String]? = nil
    )
    {
        self.addonArn = addonArn
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clusterName = clusterName
        self.createdAt = createdAt
        self.health = health
        self.modifiedAt = modifiedAt
        self.serviceAccountRoleArn = serviceAccountRoleArn
        self.status = status
        self.tags = tags
    }
}

extension AddonHealth: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case issues
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for addonissuelist0 in issues {
                try issuesContainer.encode(addonissuelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuesContainer = try containerValues.decodeIfPresent([AddonIssue?].self, forKey: .issues)
        var issuesDecoded0:[AddonIssue]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [AddonIssue]()
            for structure0 in issuesContainer {
                if let structure0 = structure0 {
                    issuesDecoded0?.append(structure0)
                }
            }
        }
        issues = issuesDecoded0
    }
}

extension AddonHealth: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddonHealth(issues: \(String(describing: issues)))"}
}

/// <p>The health of the add-on.</p>
public struct AddonHealth: Equatable {
    /// <p>An object that represents the add-on's health issues.</p>
    public let issues: [AddonIssue]?

    public init (
        issues: [AddonIssue]? = nil
    )
    {
        self.issues = issues
    }
}

extension AddonInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersions
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersions = addonVersions {
            var addonVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addonVersions)
            for addonversioninfolist0 in addonVersions {
                try addonVersionsContainer.encode(addonversioninfolist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let addonVersionsContainer = try containerValues.decodeIfPresent([AddonVersionInfo?].self, forKey: .addonVersions)
        var addonVersionsDecoded0:[AddonVersionInfo]? = nil
        if let addonVersionsContainer = addonVersionsContainer {
            addonVersionsDecoded0 = [AddonVersionInfo]()
            for structure0 in addonVersionsContainer {
                if let structure0 = structure0 {
                    addonVersionsDecoded0?.append(structure0)
                }
            }
        }
        addonVersions = addonVersionsDecoded0
    }
}

extension AddonInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddonInfo(addonName: \(String(describing: addonName)), addonVersions: \(String(describing: addonVersions)), type: \(String(describing: type)))"}
}

/// <p>Information about an add-on.</p>
public struct AddonInfo: Equatable {
    /// <p>The name of the add-on.</p>
    public let addonName: String?
    /// <p>An object that represents information about available add-on versions and compatible
    ///             Kubernetes versions.</p>
    public let addonVersions: [AddonVersionInfo]?
    /// <p>The type of the add-on.</p>
    public let type: String?

    public init (
        addonName: String? = nil,
        addonVersions: [AddonVersionInfo]? = nil,
        type: String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersions = addonVersions
        self.type = type
    }
}

extension AddonIssue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code
        case message
        case resourceIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for stringlist0 in resourceIds {
                try resourceIdsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(AddonIssueCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension AddonIssue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddonIssue(code: \(String(describing: code)), message: \(String(describing: message)), resourceIds: \(String(describing: resourceIds)))"}
}

/// <p>An issue related to an add-on.</p>
public struct AddonIssue: Equatable {
    /// <p>A code that describes the type of issue.</p>
    public let code: AddonIssueCode?
    /// <p>A message that provides details about the issue and what might cause it.</p>
    public let message: String?
    /// <p>The resource IDs of the issue.</p>
    public let resourceIds: [String]?

    public init (
        code: AddonIssueCode? = nil,
        message: String? = nil,
        resourceIds: [String]? = nil
    )
    {
        self.code = code
        self.message = message
        self.resourceIds = resourceIds
    }
}

public enum AddonIssueCode {
    case accessDenied
    case admissionRequestDenied
    case clusterUnreachable
    case configurationConflict
    case insufficientNumberOfReplicas
    case internalFailure
    case sdkUnknown(String)
}

extension AddonIssueCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AddonIssueCode] {
        return [
            .accessDenied,
            .admissionRequestDenied,
            .clusterUnreachable,
            .configurationConflict,
            .insufficientNumberOfReplicas,
            .internalFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "AccessDenied"
        case .admissionRequestDenied: return "AdmissionRequestDenied"
        case .clusterUnreachable: return "ClusterUnreachable"
        case .configurationConflict: return "ConfigurationConflict"
        case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
        case .internalFailure: return "InternalFailure"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AddonIssueCode(rawValue: rawValue) ?? AddonIssueCode.sdkUnknown(rawValue)
    }
}

public enum AddonStatus {
    case active
    case createFailed
    case creating
    case degraded
    case deleteFailed
    case deleting
    case updating
    case sdkUnknown(String)
}

extension AddonStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AddonStatus] {
        return [
            .active,
            .createFailed,
            .creating,
            .degraded,
            .deleteFailed,
            .deleting,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .degraded: return "DEGRADED"
        case .deleteFailed: return "DELETE_FAILED"
        case .deleting: return "DELETING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AddonStatus(rawValue: rawValue) ?? AddonStatus.sdkUnknown(rawValue)
    }
}

extension AddonVersionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonVersion
        case architecture
        case compatibilities
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let architecture = architecture {
            var architectureContainer = encodeContainer.nestedUnkeyedContainer(forKey: .architecture)
            for stringlist0 in architecture {
                try architectureContainer.encode(stringlist0)
            }
        }
        if let compatibilities = compatibilities {
            var compatibilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibilities)
            for compatibilities0 in compatibilities {
                try compatibilitiesContainer.encode(compatibilities0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let architectureContainer = try containerValues.decodeIfPresent([String?].self, forKey: .architecture)
        var architectureDecoded0:[String]? = nil
        if let architectureContainer = architectureContainer {
            architectureDecoded0 = [String]()
            for string0 in architectureContainer {
                if let string0 = string0 {
                    architectureDecoded0?.append(string0)
                }
            }
        }
        architecture = architectureDecoded0
        let compatibilitiesContainer = try containerValues.decodeIfPresent([Compatibility?].self, forKey: .compatibilities)
        var compatibilitiesDecoded0:[Compatibility]? = nil
        if let compatibilitiesContainer = compatibilitiesContainer {
            compatibilitiesDecoded0 = [Compatibility]()
            for structure0 in compatibilitiesContainer {
                if let structure0 = structure0 {
                    compatibilitiesDecoded0?.append(structure0)
                }
            }
        }
        compatibilities = compatibilitiesDecoded0
    }
}

extension AddonVersionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddonVersionInfo(addonVersion: \(String(describing: addonVersion)), architecture: \(String(describing: architecture)), compatibilities: \(String(describing: compatibilities)))"}
}

/// <p>Information about an add-on version.</p>
public struct AddonVersionInfo: Equatable {
    /// <p>The version of the add-on.</p>
    public let addonVersion: String?
    /// <p>The architectures that the version supports.</p>
    public let architecture: [String]?
    /// <p>An object that represents the compatibilities of a version.</p>
    public let compatibilities: [Compatibility]?

    public init (
        addonVersion: String? = nil,
        architecture: [String]? = nil,
        compatibilities: [Compatibility]? = nil
    )
    {
        self.addonVersion = addonVersion
        self.architecture = architecture
        self.compatibilities = compatibilities
    }
}

public struct AssociateEncryptionConfigInputBodyMiddleware: Middleware {
    public let id: String = "AssociateEncryptionConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateEncryptionConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateEncryptionConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateEncryptionConfigInput>
    public typealias MOutput = OperationOutput<AssociateEncryptionConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateEncryptionConfigOutputError>
}

extension AssociateEncryptionConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateEncryptionConfigInput(clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), encryptionConfig: \(String(describing: encryptionConfig)))"}
}

extension AssociateEncryptionConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case encryptionConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfiglist0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfiglist0)
            }
        }
    }
}

public struct AssociateEncryptionConfigInputHeadersMiddleware: Middleware {
    public let id: String = "AssociateEncryptionConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateEncryptionConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateEncryptionConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateEncryptionConfigInput>
    public typealias MOutput = OperationOutput<AssociateEncryptionConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateEncryptionConfigOutputError>
}

public struct AssociateEncryptionConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "AssociateEncryptionConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateEncryptionConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateEncryptionConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateEncryptionConfigInput>
    public typealias MOutput = OperationOutput<AssociateEncryptionConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateEncryptionConfigOutputError>
}

public struct AssociateEncryptionConfigInput: Equatable {
    /// <p>The client request token you are using with the encryption configuration.</p>
    public var clientRequestToken: String?
    /// <p>The name of the cluster that you are associating with encryption configuration.</p>
    public let clusterName: String?
    /// <p>The configuration you are using for encryption.</p>
    public let encryptionConfig: [EncryptionConfig]?

    public init (
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        encryptionConfig: [EncryptionConfig]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.encryptionConfig = encryptionConfig
    }
}

struct AssociateEncryptionConfigInputBody: Equatable {
    public let encryptionConfig: [EncryptionConfig]?
    public let clientRequestToken: String?
}

extension AssociateEncryptionConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case encryptionConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension AssociateEncryptionConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateEncryptionConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateEncryptionConfigOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateEncryptionConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateEncryptionConfigOutputResponse(update: \(String(describing: update)))"}
}

extension AssociateEncryptionConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AssociateEncryptionConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct AssociateEncryptionConfigOutputResponse: Equatable {
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct AssociateEncryptionConfigOutputResponseBody: Equatable {
    public let update: Update?
}

extension AssociateEncryptionConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

public struct AssociateIdentityProviderConfigInputBodyMiddleware: Middleware {
    public let id: String = "AssociateIdentityProviderConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<AssociateIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateIdentityProviderConfigOutputError>
}

extension AssociateIdentityProviderConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateIdentityProviderConfigInput(clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), oidc: \(String(describing: oidc)), tags: \(String(describing: tags)))"}
}

extension AssociateIdentityProviderConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case oidc
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let oidc = oidc {
            try encodeContainer.encode(oidc, forKey: .oidc)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct AssociateIdentityProviderConfigInputHeadersMiddleware: Middleware {
    public let id: String = "AssociateIdentityProviderConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<AssociateIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateIdentityProviderConfigOutputError>
}

public struct AssociateIdentityProviderConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "AssociateIdentityProviderConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<AssociateIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateIdentityProviderConfigOutputError>
}

public struct AssociateIdentityProviderConfigInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the cluster to associate the configuration to.</p>
    public let clusterName: String?
    /// <p>An object that represents an OpenID Connect (OIDC) identity provider
    ///             configuration.</p>
    public let oidc: OidcIdentityProviderConfigRequest?
    /// <p>The metadata to apply to the configuration to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             define.</p>
    public let tags: [String:String]?

    public init (
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        oidc: OidcIdentityProviderConfigRequest? = nil,
        tags: [String:String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.oidc = oidc
        self.tags = tags
    }
}

struct AssociateIdentityProviderConfigInputBody: Equatable {
    public let oidc: OidcIdentityProviderConfigRequest?
    public let tags: [String:String]?
    public let clientRequestToken: String?
}

extension AssociateIdentityProviderConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case oidc
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oidcDecoded = try containerValues.decodeIfPresent(OidcIdentityProviderConfigRequest.self, forKey: .oidc)
        oidc = oidcDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension AssociateIdentityProviderConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateIdentityProviderConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateIdentityProviderConfigOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateIdentityProviderConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateIdentityProviderConfigOutputResponse(tags: \(String(describing: tags)), update: \(String(describing: update)))"}
}

extension AssociateIdentityProviderConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AssociateIdentityProviderConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
            self.update = output.update
        } else {
            self.tags = nil
            self.update = nil
        }
    }
}

public struct AssociateIdentityProviderConfigOutputResponse: Equatable {
    /// <p>The tags for the resource.</p>
    public let tags: [String:String]?
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        tags: [String:String]? = nil,
        update: Update? = nil
    )
    {
        self.tags = tags
        self.update = update
    }
}

struct AssociateIdentityProviderConfigOutputResponseBody: Equatable {
    public let update: Update?
    public let tags: [String:String]?
}

extension AssociateIdentityProviderConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AutoScalingGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension AutoScalingGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingGroup(name: \(String(describing: name)))"}
}

/// <p>An Auto Scaling group that is associated with an Amazon EKS managed node group.</p>
public struct AutoScalingGroup: Equatable {
    /// <p>The name of the Auto Scaling group associated with an Amazon EKS managed node group.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

extension BadRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BadRequestException(message: \(String(describing: message)))"}
}

extension BadRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This exception is thrown if the request contains a semantic error. The precise meaning
///             will depend on the API, and will be documented in the error message.</p>
public struct BadRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Equatable {
    public let message: String?
}

extension BadRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum CapacityTypes {
    case onDemand
    case spot
    case sdkUnknown(String)
}

extension CapacityTypes : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CapacityTypes] {
        return [
            .onDemand,
            .spot,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .onDemand: return "ON_DEMAND"
        case .spot: return "SPOT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CapacityTypes(rawValue: rawValue) ?? CapacityTypes.sdkUnknown(rawValue)
    }
}

extension Certificate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case data
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .data)
        data = dataDecoded
    }
}

extension Certificate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Certificate(data: \(String(describing: data)))"}
}

/// <p>An object representing the <code>certificate-authority-data</code> for your
///             cluster.</p>
public struct Certificate: Equatable {
    /// <p>The Base64-encoded certificate data required to communicate with your cluster. Add
    ///             this to the <code>certificate-authority-data</code> section of the
    ///                 <code>kubeconfig</code> file for your cluster.</p>
    public let data: String?

    public init (
        data: String? = nil
    )
    {
        self.data = data
    }
}

extension ClientException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClientException(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension ClientException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ClientExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>These errors are usually caused by a client action. Actions can include using an
///             action or resource on behalf of a user that doesn't have permissions to use the action
///             or resource or specifying an identifier that is not valid.</p>
public struct ClientException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var addonName: String?
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ClientExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let addonName: String?
    public let message: String?
}

extension ClientExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Cluster: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case certificateAuthority
        case clientRequestToken
        case createdAt
        case encryptionConfig
        case endpoint
        case identity
        case kubernetesNetworkConfig
        case logging
        case name
        case platformVersion
        case resourcesVpcConfig
        case roleArn
        case status
        case tags
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthority = certificateAuthority {
            try encodeContainer.encode(certificateAuthority, forKey: .certificateAuthority)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfiglist0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfiglist0)
            }
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let identity = identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let kubernetesNetworkConfig = kubernetesNetworkConfig {
            try encodeContainer.encode(kubernetesNetworkConfig, forKey: .kubernetesNetworkConfig)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platformVersion = platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let resourcesVpcConfig = resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfigResponse.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let kubernetesNetworkConfigDecoded = try containerValues.decodeIfPresent(KubernetesNetworkConfigResponse.self, forKey: .kubernetesNetworkConfig)
        kubernetesNetworkConfig = kubernetesNetworkConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(Logging.self, forKey: .logging)
        logging = loggingDecoded
        let identityDecoded = try containerValues.decodeIfPresent(Identity.self, forKey: .identity)
        identity = identityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let certificateAuthorityDecoded = try containerValues.decodeIfPresent(Certificate.self, forKey: .certificateAuthority)
        certificateAuthority = certificateAuthorityDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
    }
}

extension Cluster: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Cluster(arn: \(String(describing: arn)), certificateAuthority: \(String(describing: certificateAuthority)), clientRequestToken: \(String(describing: clientRequestToken)), createdAt: \(String(describing: createdAt)), encryptionConfig: \(String(describing: encryptionConfig)), endpoint: \(String(describing: endpoint)), identity: \(String(describing: identity)), kubernetesNetworkConfig: \(String(describing: kubernetesNetworkConfig)), logging: \(String(describing: logging)), name: \(String(describing: name)), platformVersion: \(String(describing: platformVersion)), resourcesVpcConfig: \(String(describing: resourcesVpcConfig)), roleArn: \(String(describing: roleArn)), status: \(String(describing: status)), tags: \(String(describing: tags)), version: \(String(describing: version)))"}
}

/// <p>An object representing an Amazon EKS cluster.</p>
public struct Cluster: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    public let arn: String?
    /// <p>The <code>certificate-authority-data</code> for your cluster.</p>
    public let certificateAuthority: Certificate?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public let clientRequestToken: String?
    /// <p>The Unix epoch timestamp in seconds for when the cluster was created.</p>
    public let createdAt: Date?
    /// <p>The encryption configuration for the cluster.</p>
    public let encryptionConfig: [EncryptionConfig]?
    /// <p>The endpoint for your Kubernetes API server.</p>
    public let endpoint: String?
    /// <p>The identity provider information for the cluster.</p>
    public let identity: Identity?
    /// <p>The Kubernetes network configuration for the cluster.</p>
    public let kubernetesNetworkConfig: KubernetesNetworkConfigResponse?
    /// <p>The logging configuration for your cluster.</p>
    public let logging: Logging?
    /// <p>The name of the cluster.</p>
    public let name: String?
    /// <p>The platform version of your Amazon EKS cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html">Platform
    ///                 Versions</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let platformVersion: String?
    /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have
    ///             specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC
    ///                 Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the
    ///             <i>Amazon EKS User Guide</i>.</p>
    public let resourcesVpcConfig: VpcConfigResponse?
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control
    ///             plane to make calls to AWS API operations on your behalf.</p>
    public let roleArn: String?
    /// <p>The current status of the cluster.</p>
    public let status: ClusterStatus?
    /// <p>The metadata that you apply to the cluster to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             define. Cluster tags do not propagate to any other resources associated with the
    ///             cluster. </p>
    public let tags: [String:String]?
    /// <p>The Kubernetes server version for the cluster.</p>
    public let version: String?

    public init (
        arn: String? = nil,
        certificateAuthority: Certificate? = nil,
        clientRequestToken: String? = nil,
        createdAt: Date? = nil,
        encryptionConfig: [EncryptionConfig]? = nil,
        endpoint: String? = nil,
        identity: Identity? = nil,
        kubernetesNetworkConfig: KubernetesNetworkConfigResponse? = nil,
        logging: Logging? = nil,
        name: String? = nil,
        platformVersion: String? = nil,
        resourcesVpcConfig: VpcConfigResponse? = nil,
        roleArn: String? = nil,
        status: ClusterStatus? = nil,
        tags: [String:String]? = nil,
        version: String? = nil
    )
    {
        self.arn = arn
        self.certificateAuthority = certificateAuthority
        self.clientRequestToken = clientRequestToken
        self.createdAt = createdAt
        self.encryptionConfig = encryptionConfig
        self.endpoint = endpoint
        self.identity = identity
        self.kubernetesNetworkConfig = kubernetesNetworkConfig
        self.logging = logging
        self.name = name
        self.platformVersion = platformVersion
        self.resourcesVpcConfig = resourcesVpcConfig
        self.roleArn = roleArn
        self.status = status
        self.tags = tags
        self.version = version
    }
}

public enum ClusterStatus {
    case active
    case creating
    case deleting
    case failed
    case updating
    case sdkUnknown(String)
}

extension ClusterStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ClusterStatus] {
        return [
            .active,
            .creating,
            .deleting,
            .failed,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .creating: return "CREATING"
        case .deleting: return "DELETING"
        case .failed: return "FAILED"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ClusterStatus(rawValue: rawValue) ?? ClusterStatus.sdkUnknown(rawValue)
    }
}

extension Compatibility: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterVersion
        case defaultVersion
        case platformVersions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterVersion = clusterVersion {
            try encodeContainer.encode(clusterVersion, forKey: .clusterVersion)
        }
        if defaultVersion != false {
            try encodeContainer.encode(defaultVersion, forKey: .defaultVersion)
        }
        if let platformVersions = platformVersions {
            var platformVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformVersions)
            for stringlist0 in platformVersions {
                try platformVersionsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let platformVersionsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .platformVersions)
        var platformVersionsDecoded0:[String]? = nil
        if let platformVersionsContainer = platformVersionsContainer {
            platformVersionsDecoded0 = [String]()
            for string0 in platformVersionsContainer {
                if let string0 = string0 {
                    platformVersionsDecoded0?.append(string0)
                }
            }
        }
        platformVersions = platformVersionsDecoded0
        let defaultVersionDecoded = try containerValues.decode(Bool.self, forKey: .defaultVersion)
        defaultVersion = defaultVersionDecoded
    }
}

extension Compatibility: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Compatibility(clusterVersion: \(String(describing: clusterVersion)), defaultVersion: \(String(describing: defaultVersion)), platformVersions: \(String(describing: platformVersions)))"}
}

/// <p>Compatibility information.</p>
public struct Compatibility: Equatable {
    /// <p>The supported Kubernetes version of the cluster.</p>
    public let clusterVersion: String?
    /// <p>The supported default version.</p>
    public let defaultVersion: Bool
    /// <p>The supported compute platform.</p>
    public let platformVersions: [String]?

    public init (
        clusterVersion: String? = nil,
        defaultVersion: Bool = false,
        platformVersions: [String]? = nil
    )
    {
        self.clusterVersion = clusterVersion
        self.defaultVersion = defaultVersion
        self.platformVersions = platformVersions
    }
}

public enum ConfigStatus {
    case active
    case creating
    case deleting
    case sdkUnknown(String)
}

extension ConfigStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ConfigStatus] {
        return [
            .active,
            .creating,
            .deleting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .creating: return "CREATING"
        case .deleting: return "DELETING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ConfigStatus(rawValue: rawValue) ?? ConfigStatus.sdkUnknown(rawValue)
    }
}

public struct CreateAddonInputBodyMiddleware: Middleware {
    public let id: String = "CreateAddonInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAddonInput>
    public typealias MOutput = OperationOutput<CreateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAddonOutputError>
}

extension CreateAddonInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAddonInput(addonName: \(String(describing: addonName)), addonVersion: \(String(describing: addonVersion)), clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), resolveConflicts: \(String(describing: resolveConflicts)), serviceAccountRoleArn: \(String(describing: serviceAccountRoleArn)), tags: \(String(describing: tags)))"}
}

extension CreateAddonInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let resolveConflicts = resolveConflicts {
            try encodeContainer.encode(resolveConflicts.rawValue, forKey: .resolveConflicts)
        }
        if let serviceAccountRoleArn = serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateAddonInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAddonInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAddonInput>
    public typealias MOutput = OperationOutput<CreateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAddonOutputError>
}

public struct CreateAddonInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAddonInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAddonInput>
    public typealias MOutput = OperationOutput<CreateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAddonOutputError>
}

public struct CreateAddonInput: Equatable {
    /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
    ///                <code>ListAddons</code>
    ///             </a>.</p>
    public let addonName: String?
    /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
    ///                <code>DescribeAddonVersions</code>
    ///             </a>.</p>
    public let addonVersion: String?
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the cluster to create the add-on for.</p>
    public let clusterName: String?
    /// <p>How to resolve parameter value conflicts when migrating an existing add-on to an Amazon EKS
    ///             add-on.</p>
    public let resolveConflicts: ResolveConflicts?
    /// <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the
    ///      permissions assigned to the node IAM role. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p>
    ///         <note>
    ///             <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for
    ///                 your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html">Enabling
    ///                     IAM roles for service accounts on your cluster</a> in the
    ///                 <i>Amazon EKS User Guide</i>.</p>
    ///          </note>
    public let serviceAccountRoleArn: String?
    /// <p>The metadata to apply to the cluster to assist with categorization and organization.
    ///             Each tag consists of a key and an optional value, both of which you define. </p>
    public let tags: [String:String]?

    public init (
        addonName: String? = nil,
        addonVersion: String? = nil,
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        resolveConflicts: ResolveConflicts? = nil,
        serviceAccountRoleArn: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.resolveConflicts = resolveConflicts
        self.serviceAccountRoleArn = serviceAccountRoleArn
        self.tags = tags
    }
}

struct CreateAddonInputBody: Equatable {
    public let addonName: String?
    public let addonVersion: String?
    public let serviceAccountRoleArn: String?
    public let resolveConflicts: ResolveConflicts?
    public let clientRequestToken: String?
    public let tags: [String:String]?
}

extension CreateAddonInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let resolveConflictsDecoded = try containerValues.decodeIfPresent(ResolveConflicts.self, forKey: .resolveConflicts)
        resolveConflicts = resolveConflictsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAddonOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAddonOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAddonOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAddonOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAddonOutputResponse(addon: \(String(describing: addon)))"}
}

extension CreateAddonOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateAddonOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addon = output.addon
        } else {
            self.addon = nil
        }
    }
}

public struct CreateAddonOutputResponse: Equatable {
    /// <p>An Amazon EKS add-on.</p>
    public let addon: Addon?

    public init (
        addon: Addon? = nil
    )
    {
        self.addon = addon
    }
}

struct CreateAddonOutputResponseBody: Equatable {
    public let addon: Addon?
}

extension CreateAddonOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addon
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonDecoded = try containerValues.decodeIfPresent(Addon.self, forKey: .addon)
        addon = addonDecoded
    }
}

public struct CreateClusterInputBodyMiddleware: Middleware {
    public let id: String = "CreateClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateClusterInput>
    public typealias MOutput = OperationOutput<CreateClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateClusterOutputError>
}

extension CreateClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateClusterInput(clientRequestToken: \(String(describing: clientRequestToken)), encryptionConfig: \(String(describing: encryptionConfig)), kubernetesNetworkConfig: \(String(describing: kubernetesNetworkConfig)), logging: \(String(describing: logging)), name: \(String(describing: name)), resourcesVpcConfig: \(String(describing: resourcesVpcConfig)), roleArn: \(String(describing: roleArn)), tags: \(String(describing: tags)), version: \(String(describing: version)))"}
}

extension CreateClusterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case encryptionConfig
        case kubernetesNetworkConfig
        case logging
        case name
        case resourcesVpcConfig
        case roleArn
        case tags
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfiglist0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfiglist0)
            }
        }
        if let kubernetesNetworkConfig = kubernetesNetworkConfig {
            try encodeContainer.encode(kubernetesNetworkConfig, forKey: .kubernetesNetworkConfig)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourcesVpcConfig = resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct CreateClusterInputHeadersMiddleware: Middleware {
    public let id: String = "CreateClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateClusterInput>
    public typealias MOutput = OperationOutput<CreateClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateClusterOutputError>
}

public struct CreateClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateClusterInput>
    public typealias MOutput = OperationOutput<CreateClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateClusterOutputError>
}

public struct CreateClusterInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The encryption configuration for the cluster.</p>
    public let encryptionConfig: [EncryptionConfig]?
    /// <p>The Kubernetes network configuration for the cluster.</p>
    public let kubernetesNetworkConfig: KubernetesNetworkConfigRequest?
    /// <p>Enable or disable exporting the Kubernetes control plane logs for your cluster to
    ///             CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more
    ///             information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS Cluster Control Plane Logs</a> in the
    ///                 <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    ///         <note>
    ///             <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
    ///                 control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
    ///         </note>
    public let logging: Logging?
    /// <p>The unique name to give to your cluster.</p>
    public let name: String?
    /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have
    ///             specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC
    ///                 Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the
    ///             <i>Amazon EKS User Guide</i>. You must specify at least two subnets. You can specify up to five
    ///             security groups, but we recommend that you use a dedicated security group for your
    ///             cluster control plane.</p>
    public let resourcesVpcConfig: VpcConfigRequest?
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control
    ///             plane to make calls to AWS API operations on your behalf. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html">Amazon EKS
    ///                 Service IAM Role</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let roleArn: String?
    /// <p>The metadata to apply to the cluster to assist with categorization and organization.
    ///             Each tag consists of a key and an optional value, both of which you define.</p>
    public let tags: [String:String]?
    /// <p>The desired Kubernetes version for your cluster. If you don't specify a value here,
    ///             the latest version available in Amazon EKS is used.</p>
    public let version: String?

    public init (
        clientRequestToken: String? = nil,
        encryptionConfig: [EncryptionConfig]? = nil,
        kubernetesNetworkConfig: KubernetesNetworkConfigRequest? = nil,
        logging: Logging? = nil,
        name: String? = nil,
        resourcesVpcConfig: VpcConfigRequest? = nil,
        roleArn: String? = nil,
        tags: [String:String]? = nil,
        version: String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.encryptionConfig = encryptionConfig
        self.kubernetesNetworkConfig = kubernetesNetworkConfig
        self.logging = logging
        self.name = name
        self.resourcesVpcConfig = resourcesVpcConfig
        self.roleArn = roleArn
        self.tags = tags
        self.version = version
    }
}

struct CreateClusterInputBody: Equatable {
    public let name: String?
    public let version: String?
    public let roleArn: String?
    public let resourcesVpcConfig: VpcConfigRequest?
    public let kubernetesNetworkConfig: KubernetesNetworkConfigRequest?
    public let logging: Logging?
    public let clientRequestToken: String?
    public let tags: [String:String]?
    public let encryptionConfig: [EncryptionConfig]?
}

extension CreateClusterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case encryptionConfig
        case kubernetesNetworkConfig
        case logging
        case name
        case resourcesVpcConfig
        case roleArn
        case tags
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfigRequest.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let kubernetesNetworkConfigDecoded = try containerValues.decodeIfPresent(KubernetesNetworkConfigRequest.self, forKey: .kubernetesNetworkConfig)
        kubernetesNetworkConfig = kubernetesNetworkConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(Logging.self, forKey: .logging)
        logging = loggingDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
    }
}

extension CreateClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAvailabilityZoneException" : self = .unsupportedAvailabilityZoneException(try UnsupportedAvailabilityZoneException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateClusterOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unsupportedAvailabilityZoneException(UnsupportedAvailabilityZoneException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateClusterOutputResponse(cluster: \(String(describing: cluster)))"}
}

extension CreateClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct CreateClusterOutputResponse: Equatable {
    /// <p>The full description of your new cluster.</p>
    public let cluster: Cluster?

    public init (
        cluster: Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct CreateClusterOutputResponseBody: Equatable {
    public let cluster: Cluster?
}

extension CreateClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

public struct CreateFargateProfileInputBodyMiddleware: Middleware {
    public let id: String = "CreateFargateProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFargateProfileInput>
    public typealias MOutput = OperationOutput<CreateFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFargateProfileOutputError>
}

extension CreateFargateProfileInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateFargateProfileInput(clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), fargateProfileName: \(String(describing: fargateProfileName)), podExecutionRoleArn: \(String(describing: podExecutionRoleArn)), selectors: \(String(describing: selectors)), subnets: \(String(describing: subnets)), tags: \(String(describing: tags)))"}
}

extension CreateFargateProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case subnets
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fargateProfileName = fargateProfileName {
            try encodeContainer.encode(fargateProfileName, forKey: .fargateProfileName)
        }
        if let podExecutionRoleArn = podExecutionRoleArn {
            try encodeContainer.encode(podExecutionRoleArn, forKey: .podExecutionRoleArn)
        }
        if let selectors = selectors {
            var selectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectors)
            for fargateprofileselectors0 in selectors {
                try selectorsContainer.encode(fargateprofileselectors0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateFargateProfileInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFargateProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFargateProfileInput>
    public typealias MOutput = OperationOutput<CreateFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFargateProfileOutputError>
}

public struct CreateFargateProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFargateProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFargateProfileInput>
    public typealias MOutput = OperationOutput<CreateFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFargateProfileOutputError>
}

public struct CreateFargateProfileInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the Amazon EKS cluster to apply the Fargate profile to.</p>
    public let clusterName: String?
    /// <p>The name of the Fargate profile.</p>
    public let fargateProfileName: String?
    /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in
    ///             the Fargate profile. The pod execution role allows Fargate infrastructure to register with
    ///             your cluster as a node, and it provides read access to Amazon ECR image repositories. For
    ///             more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the
    ///             <i>Amazon EKS User Guide</i>.</p>
    public let podExecutionRoleArn: String?
    /// <p>The selectors to match for pods to use this Fargate profile. Each selector must have an
    ///             associated namespace. Optionally, you can also specify labels for a namespace. You may
    ///             specify up to five selectors in a Fargate profile.</p>
    public let selectors: [FargateProfileSelector]?
    /// <p>The IDs of subnets to launch your pods into. At this time, pods running on Fargate are
    ///             not assigned public IP addresses, so only private subnets (with no direct route to an
    ///             Internet Gateway) are accepted for this parameter.</p>
    public let subnets: [String]?
    /// <p>The metadata to apply to the Fargate profile to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             define. Fargate profile tags do not propagate to any other resources associated with the
    ///             Fargate profile, such as the pods that are scheduled with it.</p>
    public let tags: [String:String]?

    public init (
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        fargateProfileName: String? = nil,
        podExecutionRoleArn: String? = nil,
        selectors: [FargateProfileSelector]? = nil,
        subnets: [String]? = nil,
        tags: [String:String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.podExecutionRoleArn = podExecutionRoleArn
        self.selectors = selectors
        self.subnets = subnets
        self.tags = tags
    }
}

struct CreateFargateProfileInputBody: Equatable {
    public let fargateProfileName: String?
    public let podExecutionRoleArn: String?
    public let subnets: [String]?
    public let selectors: [FargateProfileSelector]?
    public let clientRequestToken: String?
    public let tags: [String:String]?
}

extension CreateFargateProfileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case subnets
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([FargateProfileSelector?].self, forKey: .selectors)
        var selectorsDecoded0:[FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [FargateProfileSelector]()
            for structure0 in selectorsContainer {
                if let structure0 = structure0 {
                    selectorsDecoded0?.append(structure0)
                }
            }
        }
        selectors = selectorsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateFargateProfileOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFargateProfileOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAvailabilityZoneException" : self = .unsupportedAvailabilityZoneException(try UnsupportedAvailabilityZoneException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateFargateProfileOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case serverException(ServerException)
    case unsupportedAvailabilityZoneException(UnsupportedAvailabilityZoneException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFargateProfileOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateFargateProfileOutputResponse(fargateProfile: \(String(describing: fargateProfile)))"}
}

extension CreateFargateProfileOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateFargateProfileOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fargateProfile = output.fargateProfile
        } else {
            self.fargateProfile = nil
        }
    }
}

public struct CreateFargateProfileOutputResponse: Equatable {
    /// <p>The full description of your new Fargate profile.</p>
    public let fargateProfile: FargateProfile?

    public init (
        fargateProfile: FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

struct CreateFargateProfileOutputResponseBody: Equatable {
    public let fargateProfile: FargateProfile?
}

extension CreateFargateProfileOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fargateProfile
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileDecoded = try containerValues.decodeIfPresent(FargateProfile.self, forKey: .fargateProfile)
        fargateProfile = fargateProfileDecoded
    }
}

public struct CreateNodegroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateNodegroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNodegroupInput>
    public typealias MOutput = OperationOutput<CreateNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNodegroupOutputError>
}

extension CreateNodegroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateNodegroupInput(amiType: \(String(describing: amiType)), capacityType: \(String(describing: capacityType)), clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), diskSize: \(String(describing: diskSize)), instanceTypes: \(String(describing: instanceTypes)), labels: \(String(describing: labels)), launchTemplate: \(String(describing: launchTemplate)), nodeRole: \(String(describing: nodeRole)), nodegroupName: \(String(describing: nodegroupName)), releaseVersion: \(String(describing: releaseVersion)), remoteAccess: \(String(describing: remoteAccess)), scalingConfig: \(String(describing: scalingConfig)), subnets: \(String(describing: subnets)), tags: \(String(describing: tags)), taints: \(String(describing: taints)), version: \(String(describing: version)))"}
}

extension CreateNodegroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amiType
        case capacityType
        case clientRequestToken
        case diskSize
        case instanceTypes
        case labels
        case launchTemplate
        case nodeRole
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case scalingConfig
        case subnets
        case tags
        case taints
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiType = amiType {
            try encodeContainer.encode(amiType.rawValue, forKey: .amiType)
        }
        if let capacityType = capacityType {
            try encodeContainer.encode(capacityType.rawValue, forKey: .capacityType)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let diskSize = diskSize {
            try encodeContainer.encode(diskSize, forKey: .diskSize)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for stringlist0 in instanceTypes {
                try instanceTypesContainer.encode(stringlist0)
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .labels)
            for (dictKey0, labelsmap0) in labels {
                try labelsContainer.encode(labelsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let launchTemplate = launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let nodeRole = nodeRole {
            try encodeContainer.encode(nodeRole, forKey: .nodeRole)
        }
        if let nodegroupName = nodegroupName {
            try encodeContainer.encode(nodegroupName, forKey: .nodegroupName)
        }
        if let releaseVersion = releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let remoteAccess = remoteAccess {
            try encodeContainer.encode(remoteAccess, forKey: .remoteAccess)
        }
        if let scalingConfig = scalingConfig {
            try encodeContainer.encode(scalingConfig, forKey: .scalingConfig)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let taints = taints {
            var taintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taints)
            for taintslist0 in taints {
                try taintsContainer.encode(taintslist0)
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct CreateNodegroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNodegroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNodegroupInput>
    public typealias MOutput = OperationOutput<CreateNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNodegroupOutputError>
}

public struct CreateNodegroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNodegroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNodegroupInput>
    public typealias MOutput = OperationOutput<CreateNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNodegroupOutputError>
}

public struct CreateNodegroupInput: Equatable {
    /// <p>The AMI type for your node group. GPU instance types should use the
    ///                 <code>AL2_x86_64_GPU</code> AMI type. Non-GPU instances should use the
    ///                 <code>AL2_x86_64</code> AMI type. Arm instances should use the
    ///                 <code>AL2_ARM_64</code> AMI type. All types use the Amazon EKS optimized Amazon Linux 2 AMI.
    ///             If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>amiType</code>,
    ///             or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let amiType: AMITypes?
    /// <p>The capacity type for your node group.</p>
    public let capacityType: CapacityTypes?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the cluster to create the node group in.</p>
    public let clusterName: String?
    /// <p>The root device disk size (in GiB) for your node group instances. The default disk
    ///             size is 20 GiB. If you specify <code>launchTemplate</code>, then don't specify  <code>diskSize</code>,
    ///             or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let diskSize: Int?
    /// <p>Specify the instance types for a node group. If you specify a GPU instance type, be
    ///             sure to specify <code>AL2_x86_64_GPU</code> with the <code>amiType</code> parameter. If
    ///             you specify <code>launchTemplate</code>, then you can specify zero or one instance type
    ///             in your launch template <i>or</i> you can specify 0-20 instance types for
    ///                 <code>instanceTypes</code>. If however, you specify an instance type in your launch
    ///             template <i>and</i> specify any <code>instanceTypes</code>, the node group
    ///             deployment will fail. If you don't specify an instance type in a launch template or for
    ///                 <code>instanceTypes</code>, then <code>t3.medium</code> is used, by default. If you
    ///             specify <code>Spot</code> for <code>capacityType</code>, then we recommend specifying
    ///             multiple values for <code>instanceTypes</code>. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types">Managed node group capacity types</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in
    ///             the <i>Amazon EKS User Guide</i>.</p>
    public let instanceTypes: [String]?
    /// <p>The Kubernetes labels to be applied to the nodes in the node group when they are
    ///             created.</p>
    public let labels: [String:String]?
    /// <p>An object representing a node group's launch template specification. If specified,
    ///             then do not specify <code>instanceTypes</code>, <code>diskSize</code>, or
    ///                 <code>remoteAccess</code> and make sure that the launch template meets the
    ///             requirements in <code>launchTemplateSpecification</code>.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker
    ///             node <code>kubelet</code> daemon makes calls to AWS APIs on your behalf. Nodes receive
    ///             permissions for these API calls through an IAM instance profile and associated
    ///             policies. Before you can launch nodes and register them into a cluster, you must create
    ///             an IAM role for those nodes to use when they are launched. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html">Amazon EKS node IAM role</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.
    ///             If you specify <code>launchTemplate</code>, then don't specify  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html">
    ///                <code>IamInstanceProfile</code>
    ///             </a> in your launch template,
    ///             or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let nodeRole: String?
    /// <p>The unique name to give your node group.</p>
    public let nodegroupName: String?
    /// <p>The AMI version of the Amazon EKS optimized AMI to use with your node group. By default,
    ///             the latest available AMI version for the node group's current Kubernetes version is
    ///             used. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS
    ///                 optimized Amazon Linux 2 AMI versions</a> in the <i>Amazon EKS User Guide</i>. If you specify <code>launchTemplate</code>,
    ///             and your launch template uses a custom AMI, then don't specify  <code>releaseVersion</code>, or the node group
    ///             deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let releaseVersion: String?
    /// <p>The remote access (SSH) configuration to use with your node group. If you specify <code>launchTemplate</code>,
    ///             then don't specify  <code>remoteAccess</code>, or the node group  deployment
    ///             will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let remoteAccess: RemoteAccessConfig?
    /// <p>The scaling configuration details for the Auto Scaling group that is created for your
    ///             node group.</p>
    public let scalingConfig: NodegroupScalingConfig?
    /// <p>The subnets to use for the Auto Scaling group that is created for your node group.
    ///             If you specify <code>launchTemplate</code>, then don't specify  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">
    ///                <code>SubnetId</code>
    ///             </a> in your launch template, or the node group
    ///             deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let subnets: [String]?
    /// <p>The metadata to apply to the node group to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             define. Node group tags do not propagate to any other resources associated with the node
    ///             group, such as the Amazon EC2 instances or subnets.</p>
    public let tags: [String:String]?
    /// <p>The Kubernetes taints to be applied to the nodes in the node group.</p>
    public let taints: [Taint]?
    /// <p>The Kubernetes version to use for your managed nodes. By default, the Kubernetes
    ///             version of the cluster is used, and this is the only accepted specified value.
    ///             If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify  <code>version</code>,
    ///             or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let version: String?

    public init (
        amiType: AMITypes? = nil,
        capacityType: CapacityTypes? = nil,
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        diskSize: Int? = nil,
        instanceTypes: [String]? = nil,
        labels: [String:String]? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        nodeRole: String? = nil,
        nodegroupName: String? = nil,
        releaseVersion: String? = nil,
        remoteAccess: RemoteAccessConfig? = nil,
        scalingConfig: NodegroupScalingConfig? = nil,
        subnets: [String]? = nil,
        tags: [String:String]? = nil,
        taints: [Taint]? = nil,
        version: String? = nil
    )
    {
        self.amiType = amiType
        self.capacityType = capacityType
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.diskSize = diskSize
        self.instanceTypes = instanceTypes
        self.labels = labels
        self.launchTemplate = launchTemplate
        self.nodeRole = nodeRole
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.remoteAccess = remoteAccess
        self.scalingConfig = scalingConfig
        self.subnets = subnets
        self.tags = tags
        self.taints = taints
        self.version = version
    }
}

struct CreateNodegroupInputBody: Equatable {
    public let nodegroupName: String?
    public let scalingConfig: NodegroupScalingConfig?
    public let diskSize: Int?
    public let subnets: [String]?
    public let instanceTypes: [String]?
    public let amiType: AMITypes?
    public let remoteAccess: RemoteAccessConfig?
    public let nodeRole: String?
    public let labels: [String:String]?
    public let taints: [Taint]?
    public let tags: [String:String]?
    public let clientRequestToken: String?
    public let launchTemplate: LaunchTemplateSpecification?
    public let capacityType: CapacityTypes?
    public let version: String?
    public let releaseVersion: String?
}

extension CreateNodegroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case amiType
        case capacityType
        case clientRequestToken
        case diskSize
        case instanceTypes
        case labels
        case launchTemplate
        case nodeRole
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case scalingConfig
        case subnets
        case tags
        case taints
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let diskSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .diskSize)
        diskSize = diskSizeDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let instanceTypesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let amiTypeDecoded = try containerValues.decodeIfPresent(AMITypes.self, forKey: .amiType)
        amiType = amiTypeDecoded
        let remoteAccessDecoded = try containerValues.decodeIfPresent(RemoteAccessConfig.self, forKey: .remoteAccess)
        remoteAccess = remoteAccessDecoded
        let nodeRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .labels)
        var labelsDecoded0: [String:String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String:String]()
            for (key0, labelvalue0) in labelsContainer {
                if let labelvalue0 = labelvalue0 {
                    labelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        labels = labelsDecoded0
        let taintsContainer = try containerValues.decodeIfPresent([Taint?].self, forKey: .taints)
        var taintsDecoded0:[Taint]? = nil
        if let taintsContainer = taintsContainer {
            taintsDecoded0 = [Taint]()
            for structure0 in taintsContainer {
                if let structure0 = structure0 {
                    taintsDecoded0?.append(structure0)
                }
            }
        }
        taints = taintsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let capacityTypeDecoded = try containerValues.decodeIfPresent(CapacityTypes.self, forKey: .capacityType)
        capacityType = capacityTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
    }
}

extension CreateNodegroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNodegroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNodegroupOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNodegroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateNodegroupOutputResponse(nodegroup: \(String(describing: nodegroup)))"}
}

extension CreateNodegroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateNodegroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nodegroup = output.nodegroup
        } else {
            self.nodegroup = nil
        }
    }
}

public struct CreateNodegroupOutputResponse: Equatable {
    /// <p>The full description of your new node group.</p>
    public let nodegroup: Nodegroup?

    public init (
        nodegroup: Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

struct CreateNodegroupOutputResponseBody: Equatable {
    public let nodegroup: Nodegroup?
}

extension CreateNodegroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nodegroup
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupDecoded = try containerValues.decodeIfPresent(Nodegroup.self, forKey: .nodegroup)
        nodegroup = nodegroupDecoded
    }
}

extension DeleteAddonInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteAddonInput(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)))"}
}

extension DeleteAddonInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteAddonInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteAddonInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAddonInput>
    public typealias MOutput = OperationOutput<DeleteAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAddonOutputError>
}

public struct DeleteAddonInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteAddonInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteAddonInput>
    public typealias MOutput = OperationOutput<DeleteAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteAddonOutputError>
}

public struct DeleteAddonInput: Equatable {
    /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
    ///                <code>ListAddons</code>
    ///             </a>.</p>
    public let addonName: String?
    /// <p>The name of the cluster to delete the add-on from.</p>
    public let clusterName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
    }
}

struct DeleteAddonInputBody: Equatable {
}

extension DeleteAddonInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteAddonOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAddonOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAddonOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAddonOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteAddonOutputResponse(addon: \(String(describing: addon)))"}
}

extension DeleteAddonOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteAddonOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addon = output.addon
        } else {
            self.addon = nil
        }
    }
}

public struct DeleteAddonOutputResponse: Equatable {
    /// <p>An Amazon EKS add-on.</p>
    public let addon: Addon?

    public init (
        addon: Addon? = nil
    )
    {
        self.addon = addon
    }
}

struct DeleteAddonOutputResponseBody: Equatable {
    public let addon: Addon?
}

extension DeleteAddonOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addon
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonDecoded = try containerValues.decodeIfPresent(Addon.self, forKey: .addon)
        addon = addonDecoded
    }
}

extension DeleteClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteClusterInput(name: \(String(describing: name)))"}
}

extension DeleteClusterInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteClusterInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteClusterInput>
    public typealias MOutput = OperationOutput<DeleteClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteClusterOutputError>
}

public struct DeleteClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteClusterInput>
    public typealias MOutput = OperationOutput<DeleteClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteClusterOutputError>
}

public struct DeleteClusterInput: Equatable {
    /// <p>The name of the cluster to delete.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteClusterInputBody: Equatable {
}

extension DeleteClusterInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteClusterOutputError: Equatable {
    case clientException(ClientException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteClusterOutputResponse(cluster: \(String(describing: cluster)))"}
}

extension DeleteClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DeleteClusterOutputResponse: Equatable {
    /// <p>The full description of the cluster to delete.</p>
    public let cluster: Cluster?

    public init (
        cluster: Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DeleteClusterOutputResponseBody: Equatable {
    public let cluster: Cluster?
}

extension DeleteClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DeleteFargateProfileInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteFargateProfileInput(clusterName: \(String(describing: clusterName)), fargateProfileName: \(String(describing: fargateProfileName)))"}
}

extension DeleteFargateProfileInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteFargateProfileInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteFargateProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFargateProfileInput>
    public typealias MOutput = OperationOutput<DeleteFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFargateProfileOutputError>
}

public struct DeleteFargateProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteFargateProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteFargateProfileInput>
    public typealias MOutput = OperationOutput<DeleteFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteFargateProfileOutputError>
}

public struct DeleteFargateProfileInput: Equatable {
    /// <p>The name of the Amazon EKS cluster associated with the Fargate profile to delete.</p>
    public let clusterName: String?
    /// <p>The name of the Fargate profile to delete.</p>
    public let fargateProfileName: String?

    public init (
        clusterName: String? = nil,
        fargateProfileName: String? = nil
    )
    {
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
    }
}

struct DeleteFargateProfileInputBody: Equatable {
}

extension DeleteFargateProfileInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteFargateProfileOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFargateProfileOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFargateProfileOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFargateProfileOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteFargateProfileOutputResponse(fargateProfile: \(String(describing: fargateProfile)))"}
}

extension DeleteFargateProfileOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteFargateProfileOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fargateProfile = output.fargateProfile
        } else {
            self.fargateProfile = nil
        }
    }
}

public struct DeleteFargateProfileOutputResponse: Equatable {
    /// <p>The deleted Fargate profile.</p>
    public let fargateProfile: FargateProfile?

    public init (
        fargateProfile: FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

struct DeleteFargateProfileOutputResponseBody: Equatable {
    public let fargateProfile: FargateProfile?
}

extension DeleteFargateProfileOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fargateProfile
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileDecoded = try containerValues.decodeIfPresent(FargateProfile.self, forKey: .fargateProfile)
        fargateProfile = fargateProfileDecoded
    }
}

extension DeleteNodegroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteNodegroupInput(clusterName: \(String(describing: clusterName)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension DeleteNodegroupInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteNodegroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteNodegroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNodegroupInput>
    public typealias MOutput = OperationOutput<DeleteNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNodegroupOutputError>
}

public struct DeleteNodegroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteNodegroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNodegroupInput>
    public typealias MOutput = OperationOutput<DeleteNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNodegroupOutputError>
}

public struct DeleteNodegroupInput: Equatable {
    /// <p>The name of the Amazon EKS cluster that is associated with your node group.</p>
    public let clusterName: String?
    /// <p>The name of the node group to delete.</p>
    public let nodegroupName: String?

    public init (
        clusterName: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodegroupName = nodegroupName
    }
}

struct DeleteNodegroupInputBody: Equatable {
}

extension DeleteNodegroupInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteNodegroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteNodegroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNodegroupOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNodegroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteNodegroupOutputResponse(nodegroup: \(String(describing: nodegroup)))"}
}

extension DeleteNodegroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteNodegroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nodegroup = output.nodegroup
        } else {
            self.nodegroup = nil
        }
    }
}

public struct DeleteNodegroupOutputResponse: Equatable {
    /// <p>The full description of your deleted node group.</p>
    public let nodegroup: Nodegroup?

    public init (
        nodegroup: Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

struct DeleteNodegroupOutputResponseBody: Equatable {
    public let nodegroup: Nodegroup?
}

extension DeleteNodegroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nodegroup
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupDecoded = try containerValues.decodeIfPresent(Nodegroup.self, forKey: .nodegroup)
        nodegroup = nodegroupDecoded
    }
}

extension DescribeAddonInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAddonInput(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)))"}
}

extension DescribeAddonInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeAddonInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAddonInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAddonInput>
    public typealias MOutput = OperationOutput<DescribeAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAddonOutputError>
}

public struct DescribeAddonInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAddonInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAddonInput>
    public typealias MOutput = OperationOutput<DescribeAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAddonOutputError>
}

public struct DescribeAddonInput: Equatable {
    /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
    ///                <code>ListAddons</code>
    ///             </a>.</p>
    public let addonName: String?
    /// <p>The name of the cluster.</p>
    public let clusterName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
    }
}

struct DescribeAddonInputBody: Equatable {
}

extension DescribeAddonInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeAddonOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAddonOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAddonOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAddonOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAddonOutputResponse(addon: \(String(describing: addon)))"}
}

extension DescribeAddonOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAddonOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addon = output.addon
        } else {
            self.addon = nil
        }
    }
}

public struct DescribeAddonOutputResponse: Equatable {
    /// <p>An Amazon EKS add-on.</p>
    public let addon: Addon?

    public init (
        addon: Addon? = nil
    )
    {
        self.addon = addon
    }
}

struct DescribeAddonOutputResponseBody: Equatable {
    public let addon: Addon?
}

extension DescribeAddonOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addon
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonDecoded = try containerValues.decodeIfPresent(Addon.self, forKey: .addon)
        addon = addonDecoded
    }
}

extension DescribeAddonVersionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAddonVersionsInput(addonName: \(String(describing: addonName)), kubernetesVersion: \(String(describing: kubernetesVersion)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeAddonVersionsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeAddonVersionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAddonVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAddonVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAddonVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAddonVersionsInput>
    public typealias MOutput = OperationOutput<DescribeAddonVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAddonVersionsOutputError>
}

public struct DescribeAddonVersionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAddonVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAddonVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAddonVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let addonName = input.operationInput.addonName {
            let addonNameQueryItem = URLQueryItem(name: "addonName".urlPercentEncoding(), value: String(addonName).urlPercentEncoding())
            input.builder.withQueryItem(addonNameQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let kubernetesVersion = input.operationInput.kubernetesVersion {
            let kubernetesVersionQueryItem = URLQueryItem(name: "kubernetesVersion".urlPercentEncoding(), value: String(kubernetesVersion).urlPercentEncoding())
            input.builder.withQueryItem(kubernetesVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAddonVersionsInput>
    public typealias MOutput = OperationOutput<DescribeAddonVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAddonVersionsOutputError>
}

public struct DescribeAddonVersionsInput: Equatable {
    /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
    ///                <code>ListAddons</code>
    ///             </a>.</p>
    public let addonName: String?
    /// <p>The Kubernetes versions that the add-on can be used with.</p>
    public let kubernetesVersion: String?
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>DescribeAddonVersionsRequest</code> where <code>maxResults</code> was used and
    ///             the results exceeded the value of that parameter. Pagination continues from the end of
    ///             the previous results that returned the <code>nextToken</code> value.</p>
    ///         <note>
    ///             <p>This token should be treated as an opaque identifier that is used only to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: String?

    public init (
        addonName: String? = nil,
        kubernetesVersion: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.addonName = addonName
        self.kubernetesVersion = kubernetesVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeAddonVersionsInputBody: Equatable {
}

extension DescribeAddonVersionsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeAddonVersionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAddonVersionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAddonVersionsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAddonVersionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAddonVersionsOutputResponse(addons: \(String(describing: addons)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeAddonVersionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAddonVersionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addons = output.addons
            self.nextToken = output.nextToken
        } else {
            self.addons = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAddonVersionsOutputResponse: Equatable {
    /// <p>The list of available versions with Kubernetes version compatibility.</p>
    public let addons: [AddonInfo]?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>DescribeAddonVersionsResponse</code> where <code>maxResults</code> was used
    ///             and the results exceeded the value of that parameter. Pagination continues from the end
    ///             of the previous results that returned the <code>nextToken</code> value.</p>
    ///         <note>
    ///             <p>This token should be treated as an opaque identifier that is used only to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: String?

    public init (
        addons: [AddonInfo]? = nil,
        nextToken: String? = nil
    )
    {
        self.addons = addons
        self.nextToken = nextToken
    }
}

struct DescribeAddonVersionsOutputResponseBody: Equatable {
    public let addons: [AddonInfo]?
    public let nextToken: String?
}

extension DescribeAddonVersionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addons
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonsContainer = try containerValues.decodeIfPresent([AddonInfo?].self, forKey: .addons)
        var addonsDecoded0:[AddonInfo]? = nil
        if let addonsContainer = addonsContainer {
            addonsDecoded0 = [AddonInfo]()
            for structure0 in addonsContainer {
                if let structure0 = structure0 {
                    addonsDecoded0?.append(structure0)
                }
            }
        }
        addons = addonsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeClusterInput(name: \(String(describing: name)))"}
}

extension DescribeClusterInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeClusterInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterOutputError>
}

public struct DescribeClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterOutputError>
}

public struct DescribeClusterInput: Equatable {
    /// <p>The name of the cluster to describe.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeClusterInputBody: Equatable {
}

extension DescribeClusterInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeClusterOutputError: Equatable {
    case clientException(ClientException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeClusterOutputResponse(cluster: \(String(describing: cluster)))"}
}

extension DescribeClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DescribeClusterOutputResponse: Equatable {
    /// <p>The full description of your specified cluster.</p>
    public let cluster: Cluster?

    public init (
        cluster: Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DescribeClusterOutputResponseBody: Equatable {
    public let cluster: Cluster?
}

extension DescribeClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DescribeFargateProfileInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFargateProfileInput(clusterName: \(String(describing: clusterName)), fargateProfileName: \(String(describing: fargateProfileName)))"}
}

extension DescribeFargateProfileInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeFargateProfileInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeFargateProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFargateProfileInput>
    public typealias MOutput = OperationOutput<DescribeFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFargateProfileOutputError>
}

public struct DescribeFargateProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFargateProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFargateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFargateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFargateProfileInput>
    public typealias MOutput = OperationOutput<DescribeFargateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeFargateProfileOutputError>
}

public struct DescribeFargateProfileInput: Equatable {
    /// <p>The name of the Amazon EKS cluster associated with the Fargate profile.</p>
    public let clusterName: String?
    /// <p>The name of the Fargate profile to describe.</p>
    public let fargateProfileName: String?

    public init (
        clusterName: String? = nil,
        fargateProfileName: String? = nil
    )
    {
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
    }
}

struct DescribeFargateProfileInputBody: Equatable {
}

extension DescribeFargateProfileInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeFargateProfileOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFargateProfileOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFargateProfileOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFargateProfileOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeFargateProfileOutputResponse(fargateProfile: \(String(describing: fargateProfile)))"}
}

extension DescribeFargateProfileOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeFargateProfileOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fargateProfile = output.fargateProfile
        } else {
            self.fargateProfile = nil
        }
    }
}

public struct DescribeFargateProfileOutputResponse: Equatable {
    /// <p>The full description of your Fargate profile.</p>
    public let fargateProfile: FargateProfile?

    public init (
        fargateProfile: FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

struct DescribeFargateProfileOutputResponseBody: Equatable {
    public let fargateProfile: FargateProfile?
}

extension DescribeFargateProfileOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fargateProfile
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileDecoded = try containerValues.decodeIfPresent(FargateProfile.self, forKey: .fargateProfile)
        fargateProfile = fargateProfileDecoded
    }
}

public struct DescribeIdentityProviderConfigInputBodyMiddleware: Middleware {
    public let id: String = "DescribeIdentityProviderConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<DescribeIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeIdentityProviderConfigOutputError>
}

extension DescribeIdentityProviderConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeIdentityProviderConfigInput(clusterName: \(String(describing: clusterName)), identityProviderConfig: \(String(describing: identityProviderConfig)))"}
}

extension DescribeIdentityProviderConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityProviderConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityProviderConfig = identityProviderConfig {
            try encodeContainer.encode(identityProviderConfig, forKey: .identityProviderConfig)
        }
    }
}

public struct DescribeIdentityProviderConfigInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeIdentityProviderConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<DescribeIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeIdentityProviderConfigOutputError>
}

public struct DescribeIdentityProviderConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeIdentityProviderConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<DescribeIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeIdentityProviderConfigOutputError>
}

public struct DescribeIdentityProviderConfigInput: Equatable {
    /// <p>The cluster name that the identity provider configuration is associated to.</p>
    public let clusterName: String?
    /// <p>An object that represents an identity provider configuration.</p>
    public let identityProviderConfig: IdentityProviderConfig?

    public init (
        clusterName: String? = nil,
        identityProviderConfig: IdentityProviderConfig? = nil
    )
    {
        self.clusterName = clusterName
        self.identityProviderConfig = identityProviderConfig
    }
}

struct DescribeIdentityProviderConfigInputBody: Equatable {
    public let identityProviderConfig: IdentityProviderConfig?
}

extension DescribeIdentityProviderConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityProviderConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigDecoded = try containerValues.decodeIfPresent(IdentityProviderConfig.self, forKey: .identityProviderConfig)
        identityProviderConfig = identityProviderConfigDecoded
    }
}

extension DescribeIdentityProviderConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeIdentityProviderConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeIdentityProviderConfigOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeIdentityProviderConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeIdentityProviderConfigOutputResponse(identityProviderConfig: \(String(describing: identityProviderConfig)))"}
}

extension DescribeIdentityProviderConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeIdentityProviderConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.identityProviderConfig = output.identityProviderConfig
        } else {
            self.identityProviderConfig = nil
        }
    }
}

public struct DescribeIdentityProviderConfigOutputResponse: Equatable {
    /// <p>The object that represents an OpenID Connect (OIDC) identity provider
    ///             configuration.</p>
    public let identityProviderConfig: IdentityProviderConfigResponse?

    public init (
        identityProviderConfig: IdentityProviderConfigResponse? = nil
    )
    {
        self.identityProviderConfig = identityProviderConfig
    }
}

struct DescribeIdentityProviderConfigOutputResponseBody: Equatable {
    public let identityProviderConfig: IdentityProviderConfigResponse?
}

extension DescribeIdentityProviderConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityProviderConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigDecoded = try containerValues.decodeIfPresent(IdentityProviderConfigResponse.self, forKey: .identityProviderConfig)
        identityProviderConfig = identityProviderConfigDecoded
    }
}

extension DescribeNodegroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeNodegroupInput(clusterName: \(String(describing: clusterName)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension DescribeNodegroupInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeNodegroupInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeNodegroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNodegroupInput>
    public typealias MOutput = OperationOutput<DescribeNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNodegroupOutputError>
}

public struct DescribeNodegroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeNodegroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNodegroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNodegroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNodegroupInput>
    public typealias MOutput = OperationOutput<DescribeNodegroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNodegroupOutputError>
}

public struct DescribeNodegroupInput: Equatable {
    /// <p>The name of the Amazon EKS cluster associated with the node group.</p>
    public let clusterName: String?
    /// <p>The name of the node group to describe.</p>
    public let nodegroupName: String?

    public init (
        clusterName: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodegroupName = nodegroupName
    }
}

struct DescribeNodegroupInputBody: Equatable {
}

extension DescribeNodegroupInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeNodegroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeNodegroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeNodegroupOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNodegroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeNodegroupOutputResponse(nodegroup: \(String(describing: nodegroup)))"}
}

extension DescribeNodegroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeNodegroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nodegroup = output.nodegroup
        } else {
            self.nodegroup = nil
        }
    }
}

public struct DescribeNodegroupOutputResponse: Equatable {
    /// <p>The full description of your node group.</p>
    public let nodegroup: Nodegroup?

    public init (
        nodegroup: Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

struct DescribeNodegroupOutputResponseBody: Equatable {
    public let nodegroup: Nodegroup?
}

extension DescribeNodegroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nodegroup
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupDecoded = try containerValues.decodeIfPresent(Nodegroup.self, forKey: .nodegroup)
        nodegroup = nodegroupDecoded
    }
}

extension DescribeUpdateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUpdateInput(addonName: \(String(describing: addonName)), name: \(String(describing: name)), nodegroupName: \(String(describing: nodegroupName)), updateId: \(String(describing: updateId)))"}
}

extension DescribeUpdateInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeUpdateInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeUpdateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUpdateInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUpdateInput>
    public typealias MOutput = OperationOutput<DescribeUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUpdateOutputError>
}

public struct DescribeUpdateInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeUpdateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeUpdateInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nodegroupName = input.operationInput.nodegroupName {
            let nodegroupNameQueryItem = URLQueryItem(name: "nodegroupName".urlPercentEncoding(), value: String(nodegroupName).urlPercentEncoding())
            input.builder.withQueryItem(nodegroupNameQueryItem)
        }
        if let addonName = input.operationInput.addonName {
            let addonNameQueryItem = URLQueryItem(name: "addonName".urlPercentEncoding(), value: String(addonName).urlPercentEncoding())
            input.builder.withQueryItem(addonNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeUpdateInput>
    public typealias MOutput = OperationOutput<DescribeUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeUpdateOutputError>
}

public struct DescribeUpdateInput: Equatable {
    /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
    ///                <code>ListAddons</code>
    ///             </a>.</p>
    public let addonName: String?
    /// <p>The name of the Amazon EKS cluster associated with the update.</p>
    public let name: String?
    /// <p>The name of the Amazon EKS node group associated with the update.</p>
    public let nodegroupName: String?
    /// <p>The ID of the update to describe.</p>
    public let updateId: String?

    public init (
        addonName: String? = nil,
        name: String? = nil,
        nodegroupName: String? = nil,
        updateId: String? = nil
    )
    {
        self.addonName = addonName
        self.name = name
        self.nodegroupName = nodegroupName
        self.updateId = updateId
    }
}

struct DescribeUpdateInputBody: Equatable {
}

extension DescribeUpdateInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeUpdateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUpdateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUpdateOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUpdateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeUpdateOutputResponse(update: \(String(describing: update)))"}
}

extension DescribeUpdateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeUpdateOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct DescribeUpdateOutputResponse: Equatable {
    /// <p>The full description of the specified update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct DescribeUpdateOutputResponseBody: Equatable {
    public let update: Update?
}

extension DescribeUpdateOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

public struct DisassociateIdentityProviderConfigInputBodyMiddleware: Middleware {
    public let id: String = "DisassociateIdentityProviderConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<DisassociateIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateIdentityProviderConfigOutputError>
}

extension DisassociateIdentityProviderConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateIdentityProviderConfigInput(clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), identityProviderConfig: \(String(describing: identityProviderConfig)))"}
}

extension DisassociateIdentityProviderConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case identityProviderConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let identityProviderConfig = identityProviderConfig {
            try encodeContainer.encode(identityProviderConfig, forKey: .identityProviderConfig)
        }
    }
}

public struct DisassociateIdentityProviderConfigInputHeadersMiddleware: Middleware {
    public let id: String = "DisassociateIdentityProviderConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<DisassociateIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateIdentityProviderConfigOutputError>
}

public struct DisassociateIdentityProviderConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "DisassociateIdentityProviderConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateIdentityProviderConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateIdentityProviderConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateIdentityProviderConfigInput>
    public typealias MOutput = OperationOutput<DisassociateIdentityProviderConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateIdentityProviderConfigOutputError>
}

public struct DisassociateIdentityProviderConfigInput: Equatable {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the cluster to disassociate an identity provider from.</p>
    public let clusterName: String?
    /// <p>An object that represents an identity provider configuration.</p>
    public let identityProviderConfig: IdentityProviderConfig?

    public init (
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        identityProviderConfig: IdentityProviderConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.identityProviderConfig = identityProviderConfig
    }
}

struct DisassociateIdentityProviderConfigInputBody: Equatable {
    public let identityProviderConfig: IdentityProviderConfig?
    public let clientRequestToken: String?
}

extension DisassociateIdentityProviderConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case identityProviderConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigDecoded = try containerValues.decodeIfPresent(IdentityProviderConfig.self, forKey: .identityProviderConfig)
        identityProviderConfig = identityProviderConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension DisassociateIdentityProviderConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateIdentityProviderConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateIdentityProviderConfigOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateIdentityProviderConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateIdentityProviderConfigOutputResponse(update: \(String(describing: update)))"}
}

extension DisassociateIdentityProviderConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DisassociateIdentityProviderConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct DisassociateIdentityProviderConfigOutputResponse: Equatable {
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct DisassociateIdentityProviderConfigOutputResponseBody: Equatable {
    public let update: Update?
}

extension DisassociateIdentityProviderConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension EncryptionConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case provider
        case resources
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provider = provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for stringlist0 in resources {
                try resourcesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .resources)
        var resourcesDecoded0:[String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [String]()
            for string0 in resourcesContainer {
                if let string0 = string0 {
                    resourcesDecoded0?.append(string0)
                }
            }
        }
        resources = resourcesDecoded0
        let providerDecoded = try containerValues.decodeIfPresent(Provider.self, forKey: .provider)
        provider = providerDecoded
    }
}

extension EncryptionConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EncryptionConfig(provider: \(String(describing: provider)), resources: \(String(describing: resources)))"}
}

/// <p>The encryption configuration for the cluster.</p>
public struct EncryptionConfig: Equatable {
    /// <p>AWS Key Management Service (AWS KMS) key. Either the ARN or the alias can be used.</p>
    public let provider: Provider?
    /// <p>Specifies the resources to be encrypted. The only supported value is "secrets".</p>
    public let resources: [String]?

    public init (
        provider: Provider? = nil,
        resources: [String]? = nil
    )
    {
        self.provider = provider
        self.resources = resources
    }
}

public enum ErrorCode {
    case accessDenied
    case admissionRequestDenied
    case clusterUnreachable
    case configurationConflict
    case eniLimitReached
    case insufficientFreeAddresses
    case insufficientNumberOfReplicas
    case ipNotAvailable
    case nodeCreationFailure
    case operationNotPermitted
    case podEvictionFailure
    case securityGroupNotFound
    case subnetNotFound
    case unknown
    case vpcIdNotFound
    case sdkUnknown(String)
}

extension ErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ErrorCode] {
        return [
            .accessDenied,
            .admissionRequestDenied,
            .clusterUnreachable,
            .configurationConflict,
            .eniLimitReached,
            .insufficientFreeAddresses,
            .insufficientNumberOfReplicas,
            .ipNotAvailable,
            .nodeCreationFailure,
            .operationNotPermitted,
            .podEvictionFailure,
            .securityGroupNotFound,
            .subnetNotFound,
            .unknown,
            .vpcIdNotFound,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "AccessDenied"
        case .admissionRequestDenied: return "AdmissionRequestDenied"
        case .clusterUnreachable: return "ClusterUnreachable"
        case .configurationConflict: return "ConfigurationConflict"
        case .eniLimitReached: return "EniLimitReached"
        case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
        case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
        case .ipNotAvailable: return "IpNotAvailable"
        case .nodeCreationFailure: return "NodeCreationFailure"
        case .operationNotPermitted: return "OperationNotPermitted"
        case .podEvictionFailure: return "PodEvictionFailure"
        case .securityGroupNotFound: return "SecurityGroupNotFound"
        case .subnetNotFound: return "SubnetNotFound"
        case .unknown: return "Unknown"
        case .vpcIdNotFound: return "VpcIdNotFound"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
    }
}

extension ErrorDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode
        case errorMessage
        case resourceIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for stringlist0 in resourceIds {
                try resourceIdsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension ErrorDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ErrorDetail(errorCode: \(String(describing: errorCode)), errorMessage: \(String(describing: errorMessage)), resourceIds: \(String(describing: resourceIds)))"}
}

/// <p>An object representing an error when an asynchronous operation fails.</p>
public struct ErrorDetail: Equatable {
    /// <p>A brief description of the error. </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>SubnetNotFound</b>: We couldn't find one of the
    ///                     subnets associated with the cluster.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>SecurityGroupNotFound</b>: We couldn't find one
    ///                     of the security groups associated with the cluster.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>EniLimitReached</b>: You have reached the elastic
    ///                     network interface limit for your account.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>IpNotAvailable</b>: A subnet associated with the
    ///                     cluster doesn't have any free IP addresses.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AccessDenied</b>: You don't have permissions to
    ///                     perform the specified operation.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>OperationNotPermitted</b>: The service role
    ///                     associated with the cluster doesn't have the required access permissions for
    ///                     Amazon EKS.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>VpcIdNotFound</b>: We couldn't find the VPC
    ///                     associated with the cluster.</p>
    ///             </li>
    ///          </ul>
    public let errorCode: ErrorCode?
    /// <p>A more complete description of the error.</p>
    public let errorMessage: String?
    /// <p>An optional field that contains the resource IDs associated with the error.</p>
    public let resourceIds: [String]?

    public init (
        errorCode: ErrorCode? = nil,
        errorMessage: String? = nil,
        resourceIds: [String]? = nil
    )
    {
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.resourceIds = resourceIds
    }
}

extension FargateProfile: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterName
        case createdAt
        case fargateProfileArn
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case status
        case subnets
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let fargateProfileArn = fargateProfileArn {
            try encodeContainer.encode(fargateProfileArn, forKey: .fargateProfileArn)
        }
        if let fargateProfileName = fargateProfileName {
            try encodeContainer.encode(fargateProfileName, forKey: .fargateProfileName)
        }
        if let podExecutionRoleArn = podExecutionRoleArn {
            try encodeContainer.encode(podExecutionRoleArn, forKey: .podExecutionRoleArn)
        }
        if let selectors = selectors {
            var selectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectors)
            for fargateprofileselectors0 in selectors {
                try selectorsContainer.encode(fargateprofileselectors0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let fargateProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileArn)
        fargateProfileArn = fargateProfileArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([FargateProfileSelector?].self, forKey: .selectors)
        var selectorsDecoded0:[FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [FargateProfileSelector]()
            for structure0 in selectorsContainer {
                if let structure0 = structure0 {
                    selectorsDecoded0?.append(structure0)
                }
            }
        }
        selectors = selectorsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(FargateProfileStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension FargateProfile: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FargateProfile(clusterName: \(String(describing: clusterName)), createdAt: \(String(describing: createdAt)), fargateProfileArn: \(String(describing: fargateProfileArn)), fargateProfileName: \(String(describing: fargateProfileName)), podExecutionRoleArn: \(String(describing: podExecutionRoleArn)), selectors: \(String(describing: selectors)), status: \(String(describing: status)), subnets: \(String(describing: subnets)), tags: \(String(describing: tags)))"}
}

/// <p>An object representing an AWS Fargate profile.</p>
public struct FargateProfile: Equatable {
    /// <p>The name of the Amazon EKS cluster that the Fargate profile belongs to.</p>
    public let clusterName: String?
    /// <p>The Unix epoch timestamp in seconds for when the Fargate profile was created.</p>
    public let createdAt: Date?
    /// <p>The full Amazon Resource Name (ARN) of the Fargate profile.</p>
    public let fargateProfileArn: String?
    /// <p>The name of the Fargate profile.</p>
    public let fargateProfileName: String?
    /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in
    ///             the Fargate profile. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod
    ///                 Execution Role</a> in the <i>Amazon EKS User Guide</i>.</p>
    public let podExecutionRoleArn: String?
    /// <p>The selectors to match for pods to use this Fargate profile.</p>
    public let selectors: [FargateProfileSelector]?
    /// <p>The current status of the Fargate profile.</p>
    public let status: FargateProfileStatus?
    /// <p>The IDs of subnets to launch pods into.</p>
    public let subnets: [String]?
    /// <p>The metadata applied to the Fargate profile to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             define. Fargate profile tags do not propagate to any other resources associated with the
    ///             Fargate profile, such as the pods that are scheduled with it.</p>
    public let tags: [String:String]?

    public init (
        clusterName: String? = nil,
        createdAt: Date? = nil,
        fargateProfileArn: String? = nil,
        fargateProfileName: String? = nil,
        podExecutionRoleArn: String? = nil,
        selectors: [FargateProfileSelector]? = nil,
        status: FargateProfileStatus? = nil,
        subnets: [String]? = nil,
        tags: [String:String]? = nil
    )
    {
        self.clusterName = clusterName
        self.createdAt = createdAt
        self.fargateProfileArn = fargateProfileArn
        self.fargateProfileName = fargateProfileName
        self.podExecutionRoleArn = podExecutionRoleArn
        self.selectors = selectors
        self.status = status
        self.subnets = subnets
        self.tags = tags
    }
}

extension FargateProfileSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case labels
        case namespace
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .labels)
            for (dictKey0, fargateprofilelabel0) in labels {
                try labelsContainer.encode(fargateprofilelabel0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .labels)
        var labelsDecoded0: [String:String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String:String]()
            for (key0, string0) in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?[key0] = string0
                }
            }
        }
        labels = labelsDecoded0
    }
}

extension FargateProfileSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FargateProfileSelector(labels: \(String(describing: labels)), namespace: \(String(describing: namespace)))"}
}

/// <p>An object representing an AWS Fargate profile selector.</p>
public struct FargateProfileSelector: Equatable {
    /// <p>The Kubernetes labels that the selector should match. A pod must contain all of the
    ///             labels that are specified in the selector for it to be considered a match.</p>
    public let labels: [String:String]?
    /// <p>The Kubernetes namespace that the selector should match.</p>
    public let namespace: String?

    public init (
        labels: [String:String]? = nil,
        namespace: String? = nil
    )
    {
        self.labels = labels
        self.namespace = namespace
    }
}

public enum FargateProfileStatus {
    case active
    case createFailed
    case creating
    case deleteFailed
    case deleting
    case sdkUnknown(String)
}

extension FargateProfileStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FargateProfileStatus] {
        return [
            .active,
            .createFailed,
            .creating,
            .deleteFailed,
            .deleting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .deleteFailed: return "DELETE_FAILED"
        case .deleting: return "DELETING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FargateProfileStatus(rawValue: rawValue) ?? FargateProfileStatus.sdkUnknown(rawValue)
    }
}

extension Identity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case oidc
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oidc = oidc {
            try encodeContainer.encode(oidc, forKey: .oidc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oidcDecoded = try containerValues.decodeIfPresent(OIDC.self, forKey: .oidc)
        oidc = oidcDecoded
    }
}

extension Identity: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Identity(oidc: \(String(describing: oidc)))"}
}

/// <p>An object representing an identity provider.</p>
public struct Identity: Equatable {
    /// <p>An object representing the <a href="https://openid.net/connect/">OpenID
    ///                 Connect</a> identity provider information.</p>
    public let oidc: OIDC?

    public init (
        oidc: OIDC? = nil
    )
    {
        self.oidc = oidc
    }
}

extension IdentityProviderConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension IdentityProviderConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IdentityProviderConfig(name: \(String(describing: name)), type: \(String(describing: type)))"}
}

/// <p>An object representing an identity provider configuration.</p>
public struct IdentityProviderConfig: Equatable {
    /// <p>The name of the identity provider configuration.</p>
    public let name: String?
    /// <p>The type of the identity provider configuration.</p>
    public let type: String?

    public init (
        name: String? = nil,
        type: String? = nil
    )
    {
        self.name = name
        self.type = type
    }
}

extension IdentityProviderConfigResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case oidc
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oidc = oidc {
            try encodeContainer.encode(oidc, forKey: .oidc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oidcDecoded = try containerValues.decodeIfPresent(OidcIdentityProviderConfig.self, forKey: .oidc)
        oidc = oidcDecoded
    }
}

extension IdentityProviderConfigResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IdentityProviderConfigResponse(oidc: \(String(describing: oidc)))"}
}

/// <p>An object that represents an identity configuration.</p>
public struct IdentityProviderConfigResponse: Equatable {
    /// <p>An object that represents an OpenID Connect (OIDC) identity provider
    ///             configuration.</p>
    public let oidc: OidcIdentityProviderConfig?

    public init (
        oidc: OidcIdentityProviderConfig? = nil
    )
    {
        self.oidc = oidc
    }
}

extension InvalidParameterException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidParameterException(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)), fargateProfileName: \(String(describing: fargateProfileName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension InvalidParameterException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.fargateProfileName = output.fargateProfileName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.fargateProfileName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified parameter is invalid. Review the available parameters for the API
///             request.</p>
public struct InvalidParameterException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var addonName: String?
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    /// <p>The Fargate profile associated with the exception.</p>
    public var fargateProfileName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil,
        fargateProfileName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct InvalidParameterExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let fargateProfileName: String?
    public let addonName: String?
    public let message: String?
}

extension InvalidParameterExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case clusterName
        case fargateProfileName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRequestException(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension InvalidRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request is invalid given the state of the cluster. Check the state of the cluster
///             and the associated operations.</p>
public struct InvalidRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var addonName: String?
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct InvalidRequestExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let addonName: String?
    public let message: String?
}

extension InvalidRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Issue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code
        case message
        case resourceIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for stringlist0 in resourceIds {
                try resourceIdsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(NodegroupIssueCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension Issue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Issue(code: \(String(describing: code)), message: \(String(describing: message)), resourceIds: \(String(describing: resourceIds)))"}
}

/// <p>An object representing an issue with an Amazon EKS resource.</p>
public struct Issue: Equatable {
    /// <p>A brief description of the error.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>AccessDenied</b>: Amazon EKS or one or more of your
    ///                     managed nodes is failing to authenticate or authorize with your Kubernetes
    ///                     cluster API server.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AsgInstanceLaunchFailures</b>: Your Auto Scaling group is
    ///                     experiencing failures while attempting to launch instances.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>AutoScalingGroupNotFound</b>: We couldn't find
    ///                     the Auto Scaling group associated with the managed node group. You may be able to
    ///                     recreate an Auto Scaling group with the same settings to recover.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ClusterUnreachable</b>: Amazon EKS or one or more of
    ///                     your managed nodes is unable to to communicate with your Kubernetes cluster API
    ///                     server. This can happen if there are network disruptions or if API servers are
    ///                     timing out processing requests. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Ec2LaunchTemplateNotFound</b>: We couldn't find
    ///                     the Amazon EC2 launch template for your managed node group. You may be able to
    ///                     recreate a launch template with the same settings to recover.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Ec2LaunchTemplateVersionMismatch</b>: The Amazon EC2
    ///                     launch template version for your managed node group does not match the version
    ///                     that Amazon EKS created. You may be able to revert to the version that Amazon EKS created
    ///                     to recover.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Ec2SecurityGroupDeletionFailure</b>: We could not
    ///                     delete the remote access security group for your managed node group. Remove any
    ///                     dependencies from the security group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Ec2SecurityGroupNotFound</b>: We couldn't find
    ///                     the cluster security group for the cluster. You must recreate your
    ///                     cluster.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Ec2SubnetInvalidConfiguration</b>: One or more
    ///                     Amazon EC2 subnets specified for a node group do not automatically assign public IP
    ///                     addresses to instances launched into it. If you want your instances to be
    ///                     assigned a public IP address, then you need to enable the <code>auto-assign
    ///                         public IP address</code> setting for the subnet. See <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#subnet-public-ip">Modifying
    ///                         the public IPv4 addressing attribute for your subnet</a> in the Amazon
    ///                     VPC User Guide.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>IamInstanceProfileNotFound</b>: We couldn't find
    ///                     the IAM instance profile for your managed node group. You may be able to
    ///                     recreate an instance profile with the same settings to recover.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>IamNodeRoleNotFound</b>: We couldn't find the
    ///                     IAM role for your managed node group. You may be able to recreate an IAM role
    ///                     with the same settings to recover.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>InstanceLimitExceeded</b>: Your AWS account is
    ///                     unable to launch any more instances of the specified instance type. You may be
    ///                     able to request an Amazon EC2 instance limit increase to recover.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>InsufficientFreeAddresses</b>: One or more of the
    ///                     subnets associated with your managed node group does not have enough available
    ///                     IP addresses for new nodes.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>InternalFailure</b>: These errors are usually
    ///                     caused by an Amazon EKS server-side issue.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>NodeCreationFailure</b>: Your launched instances
    ///                     are unable to register with your Amazon EKS cluster. Common causes of this failure
    ///                     are insufficient <a href="https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html">node IAM role</a>
    ///                     permissions or lack of outbound internet access for the nodes. </p>
    ///             </li>
    ///          </ul>
    public let code: NodegroupIssueCode?
    /// <p>The error message associated with the issue.</p>
    public let message: String?
    /// <p>The AWS resources that are afflicted by this issue.</p>
    public let resourceIds: [String]?

    public init (
        code: NodegroupIssueCode? = nil,
        message: String? = nil,
        resourceIds: [String]? = nil
    )
    {
        self.code = code
        self.message = message
        self.resourceIds = resourceIds
    }
}

extension KubernetesNetworkConfigRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case serviceIpv4Cidr
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serviceIpv4Cidr = serviceIpv4Cidr {
            try encodeContainer.encode(serviceIpv4Cidr, forKey: .serviceIpv4Cidr)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceIpv4CidrDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceIpv4Cidr)
        serviceIpv4Cidr = serviceIpv4CidrDecoded
    }
}

extension KubernetesNetworkConfigRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KubernetesNetworkConfigRequest(serviceIpv4Cidr: \(String(describing: serviceIpv4Cidr)))"}
}

/// <p>The Kubernetes network configuration for the cluster.</p>
public struct KubernetesNetworkConfigRequest: Equatable {
    /// <p>The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a
    ///             block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR
    ///             blocks. We recommend that you specify a block that does not overlap with resources in
    ///             other networks that are peered or connected to your VPC. The block must meet the
    ///             following requirements:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Within one of the following private IP address blocks: 10.0.0.0/8,
    ///                     172.16.0.0.0/12, or 192.168.0.0/16.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Doesn't overlap with any CIDR block assigned to the VPC that you selected for
    ///                     VPC.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Between /24 and /12.</p>
    ///             </li>
    ///          </ul>
    ///         <important>
    ///             <p>You can only specify a custom CIDR block when you create a cluster and can't
    ///                 change this value once the cluster is created.</p>
    ///         </important>
    public let serviceIpv4Cidr: String?

    public init (
        serviceIpv4Cidr: String? = nil
    )
    {
        self.serviceIpv4Cidr = serviceIpv4Cidr
    }
}

extension KubernetesNetworkConfigResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case serviceIpv4Cidr
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serviceIpv4Cidr = serviceIpv4Cidr {
            try encodeContainer.encode(serviceIpv4Cidr, forKey: .serviceIpv4Cidr)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceIpv4CidrDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceIpv4Cidr)
        serviceIpv4Cidr = serviceIpv4CidrDecoded
    }
}

extension KubernetesNetworkConfigResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KubernetesNetworkConfigResponse(serviceIpv4Cidr: \(String(describing: serviceIpv4Cidr)))"}
}

/// <p>The Kubernetes network configuration for the cluster.</p>
public struct KubernetesNetworkConfigResponse: Equatable {
    /// <p>The CIDR block that Kubernetes service IP addresses are assigned from. If you didn't
    ///             specify a CIDR block when you created the cluster, then Kubernetes assigns addresses
    ///             from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. If this was specified, then
    ///             it was specified when the cluster was created and it cannot be changed.</p>
    public let serviceIpv4Cidr: String?

    public init (
        serviceIpv4Cidr: String? = nil
    )
    {
        self.serviceIpv4Cidr = serviceIpv4Cidr
    }
}

extension LaunchTemplateSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
    }
}

extension LaunchTemplateSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LaunchTemplateSpecification(id: \(String(describing: id)), name: \(String(describing: name)), version: \(String(describing: version)))"}
}

/// <p>An object representing a node group launch template specification. The launch template
///             cannot include <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">
///                <code>SubnetId</code>
///             </a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html">
///                <code>IamInstanceProfile</code>
///             </a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html">
///                <code>RequestSpotInstances</code>
///             </a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_HibernationOptionsRequest.html">
///                <code>HibernationOptions</code>
///             </a>, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html">
///                <code>TerminateInstances</code>
///             </a>, or the node group  deployment or
///             update will fail. For more information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html">
///                <code>CreateLaunchTemplate</code>
///             </a> in the Amazon EC2 API Reference.
///             For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
///         <p>Specify either <code>name</code> or <code>id</code>, but not both.</p>
public struct LaunchTemplateSpecification: Equatable {
    /// <p>The ID of the launch template.</p>
    public let id: String?
    /// <p>The name of the launch template.</p>
    public let name: String?
    /// <p>The version of the launch template to use. If no version is specified, then the
    ///             template's default version is used.</p>
    public let version: String?

    public init (
        id: String? = nil,
        name: String? = nil,
        version: String? = nil
    )
    {
        self.id = id
        self.name = name
        self.version = version
    }
}

extension ListAddonsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAddonsInput(clusterName: \(String(describing: clusterName)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAddonsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListAddonsInputHeadersMiddleware: Middleware {
    public let id: String = "ListAddonsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAddonsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAddonsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAddonsInput>
    public typealias MOutput = OperationOutput<ListAddonsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAddonsOutputError>
}

public struct ListAddonsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAddonsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAddonsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAddonsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAddonsInput>
    public typealias MOutput = OperationOutput<ListAddonsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAddonsOutputError>
}

public struct ListAddonsInput: Equatable {
    /// <p>The name of the cluster.</p>
    public let clusterName: String?
    /// <p>The maximum number of add-on results returned by <code>ListAddonsRequest</code> in
    ///             paginated output. When you use this parameter, <code>ListAddonsRequest</code> returns
    ///             only <code>maxResults</code> results in a single page along with a
    ///                 <code>nextToken</code> response element. You can see the remaining results of the
    ///             initial request by sending another <code>ListAddonsRequest</code> request with the
    ///             returned <code>nextToken</code> value. This value can be between 1 and
    ///             100. If you don't use this parameter, <code>ListAddonsRequest</code>
    ///             returns up to 100 results and a <code>nextToken</code> value, if
    ///             applicable.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListAddonsRequest</code> where <code>maxResults</code> was used and the
    ///             results exceeded the value of that parameter. Pagination continues from the end of the
    ///             previous results that returned the <code>nextToken</code> value.</p>
    ///         <note>
    ///             <p>This token should be treated as an opaque identifier that is used only to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: String?

    public init (
        clusterName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAddonsInputBody: Equatable {
}

extension ListAddonsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListAddonsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAddonsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAddonsOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAddonsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAddonsOutputResponse(addons: \(String(describing: addons)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAddonsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListAddonsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addons = output.addons
            self.nextToken = output.nextToken
        } else {
            self.addons = nil
            self.nextToken = nil
        }
    }
}

public struct ListAddonsOutputResponse: Equatable {
    /// <p>A list of available add-ons.</p>
    public let addons: [String]?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListAddonsResponse</code> where <code>maxResults</code> was used and the
    ///             results exceeded the value of that parameter. Pagination continues from the end of the
    ///             previous results that returned the <code>nextToken</code> value.</p>
    ///         <note>
    ///             <p>This token should be treated as an opaque identifier that is used only to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: String?

    public init (
        addons: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.addons = addons
        self.nextToken = nextToken
    }
}

struct ListAddonsOutputResponseBody: Equatable {
    public let addons: [String]?
    public let nextToken: String?
}

extension ListAddonsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addons
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .addons)
        var addonsDecoded0:[String]? = nil
        if let addonsContainer = addonsContainer {
            addonsDecoded0 = [String]()
            for string0 in addonsContainer {
                if let string0 = string0 {
                    addonsDecoded0?.append(string0)
                }
            }
        }
        addons = addonsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListClustersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListClustersInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListClustersInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListClustersInputHeadersMiddleware: Middleware {
    public let id: String = "ListClustersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClustersInput>
    public typealias MOutput = OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClustersOutputError>
}

public struct ListClustersInputQueryItemMiddleware: Middleware {
    public let id: String = "ListClustersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClustersInput>
    public typealias MOutput = OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClustersOutputError>
}

public struct ListClustersInput: Equatable {
    /// <p>The maximum number of cluster results returned by <code>ListClusters</code> in
    ///             paginated output. When you use this parameter, <code>ListClusters</code> returns only
    ///                 <code>maxResults</code> results in a single page along with a <code>nextToken</code>
    ///             response element. You can see the remaining results of the initial request by sending
    ///             another <code>ListClusters</code> request with the returned <code>nextToken</code>
    ///             value. This value can be between 1 and 100. If you don't
    ///             use this parameter, <code>ListClusters</code> returns up to 100
    ///             results and a <code>nextToken</code> value if applicable.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListClusters</code> request where <code>maxResults</code> was used and the
    ///             results exceeded the value of that parameter. Pagination continues from the end of the
    ///             previous results that returned the <code>nextToken</code> value.</p>
    ///         <note>
    ///             <p>This token should be treated as an opaque identifier that is used only to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListClustersInputBody: Equatable {
}

extension ListClustersInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListClustersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClustersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListClustersOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClustersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListClustersOutputResponse(clusters: \(String(describing: clusters)), nextToken: \(String(describing: nextToken)))"}
}

extension ListClustersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListClustersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusters = output.clusters
            self.nextToken = output.nextToken
        } else {
            self.clusters = nil
            self.nextToken = nil
        }
    }
}

public struct ListClustersOutputResponse: Equatable {
    /// <p>A list of all of the clusters for your account in the specified Region.</p>
    public let clusters: [String]?
    /// <p>The <code>nextToken</code> value to include in a future <code>ListClusters</code>
    ///             request. When the results of a <code>ListClusters</code> request exceed
    ///                 <code>maxResults</code>, you can use this value to retrieve the next page of
    ///             results. This value is <code>null</code> when there are no more results to
    ///             return.</p>
    public let nextToken: String?

    public init (
        clusters: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

struct ListClustersOutputResponseBody: Equatable {
    public let clusters: [String]?
    public let nextToken: String?
}

extension ListClustersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusters
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clustersContainer = try containerValues.decodeIfPresent([String?].self, forKey: .clusters)
        var clustersDecoded0:[String]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [String]()
            for string0 in clustersContainer {
                if let string0 = string0 {
                    clustersDecoded0?.append(string0)
                }
            }
        }
        clusters = clustersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFargateProfilesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListFargateProfilesInput(clusterName: \(String(describing: clusterName)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListFargateProfilesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListFargateProfilesInputHeadersMiddleware: Middleware {
    public let id: String = "ListFargateProfilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListFargateProfilesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListFargateProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListFargateProfilesInput>
    public typealias MOutput = OperationOutput<ListFargateProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListFargateProfilesOutputError>
}

public struct ListFargateProfilesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListFargateProfilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListFargateProfilesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListFargateProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListFargateProfilesInput>
    public typealias MOutput = OperationOutput<ListFargateProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListFargateProfilesOutputError>
}

public struct ListFargateProfilesInput: Equatable {
    /// <p>The name of the Amazon EKS cluster that you would like to listFargate profiles in.</p>
    public let clusterName: String?
    /// <p>The maximum number of Fargate profile results returned by
    ///                 <code>ListFargateProfiles</code> in paginated output. When you use this parameter,
    ///                 <code>ListFargateProfiles</code> returns only <code>maxResults</code> results in a
    ///             single page along with a <code>nextToken</code> response element. You can see the
    ///             remaining results of the initial request by sending another
    ///                 <code>ListFargateProfiles</code> request with the returned <code>nextToken</code>
    ///             value. This value can be between 1 and 100. If you don't
    ///             use this parameter, <code>ListFargateProfiles</code> returns up to 100
    ///             results and a <code>nextToken</code> value if applicable.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListFargateProfiles</code> request where <code>maxResults</code> was used and
    ///             the results exceeded the value of that parameter. Pagination continues from the end of
    ///             the previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: String?

    public init (
        clusterName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListFargateProfilesInputBody: Equatable {
}

extension ListFargateProfilesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListFargateProfilesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFargateProfilesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListFargateProfilesOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFargateProfilesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListFargateProfilesOutputResponse(fargateProfileNames: \(String(describing: fargateProfileNames)), nextToken: \(String(describing: nextToken)))"}
}

extension ListFargateProfilesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListFargateProfilesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.fargateProfileNames = output.fargateProfileNames
            self.nextToken = output.nextToken
        } else {
            self.fargateProfileNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListFargateProfilesOutputResponse: Equatable {
    /// <p>A list of all of the Fargate profiles associated with the specified cluster.</p>
    public let fargateProfileNames: [String]?
    /// <p>The <code>nextToken</code> value to include in a future
    ///                 <code>ListFargateProfiles</code> request. When the results of a
    ///                 <code>ListFargateProfiles</code> request exceed <code>maxResults</code>, you can use
    ///             this value to retrieve the next page of results. This value is <code>null</code> when
    ///             there are no more results to return.</p>
    public let nextToken: String?

    public init (
        fargateProfileNames: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.fargateProfileNames = fargateProfileNames
        self.nextToken = nextToken
    }
}

struct ListFargateProfilesOutputResponseBody: Equatable {
    public let fargateProfileNames: [String]?
    public let nextToken: String?
}

extension ListFargateProfilesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fargateProfileNames
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .fargateProfileNames)
        var fargateProfileNamesDecoded0:[String]? = nil
        if let fargateProfileNamesContainer = fargateProfileNamesContainer {
            fargateProfileNamesDecoded0 = [String]()
            for string0 in fargateProfileNamesContainer {
                if let string0 = string0 {
                    fargateProfileNamesDecoded0?.append(string0)
                }
            }
        }
        fargateProfileNames = fargateProfileNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIdentityProviderConfigsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListIdentityProviderConfigsInput(clusterName: \(String(describing: clusterName)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListIdentityProviderConfigsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListIdentityProviderConfigsInputHeadersMiddleware: Middleware {
    public let id: String = "ListIdentityProviderConfigsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListIdentityProviderConfigsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListIdentityProviderConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListIdentityProviderConfigsInput>
    public typealias MOutput = OperationOutput<ListIdentityProviderConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListIdentityProviderConfigsOutputError>
}

public struct ListIdentityProviderConfigsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListIdentityProviderConfigsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListIdentityProviderConfigsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListIdentityProviderConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListIdentityProviderConfigsInput>
    public typealias MOutput = OperationOutput<ListIdentityProviderConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListIdentityProviderConfigsOutputError>
}

public struct ListIdentityProviderConfigsInput: Equatable {
    /// <p>The cluster name that you want to list identity provider configurations for.</p>
    public let clusterName: String?
    /// <p>The maximum number of identity provider configurations returned by
    ///                 <code>ListIdentityProviderConfigs</code> in paginated output. When you use this
    ///             parameter, <code>ListIdentityProviderConfigs</code> returns only <code>maxResults</code>
    ///             results in a single page along with a <code>nextToken</code> response element. You can
    ///             see the remaining results of the initial request by sending another
    ///                 <code>ListIdentityProviderConfigs</code> request with the returned
    ///                 <code>nextToken</code> value. This value can be between 1 and
    ///             100. If you don't use this parameter,
    ///                 <code>ListIdentityProviderConfigs</code> returns up to 100 results
    ///             and a <code>nextToken</code> value, if applicable.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>IdentityProviderConfigsRequest</code> where <code>maxResults</code> was used
    ///             and the results exceeded the value of that parameter. Pagination continues from the end
    ///             of the previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: String?

    public init (
        clusterName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListIdentityProviderConfigsInputBody: Equatable {
}

extension ListIdentityProviderConfigsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListIdentityProviderConfigsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIdentityProviderConfigsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIdentityProviderConfigsOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentityProviderConfigsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListIdentityProviderConfigsOutputResponse(identityProviderConfigs: \(String(describing: identityProviderConfigs)), nextToken: \(String(describing: nextToken)))"}
}

extension ListIdentityProviderConfigsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListIdentityProviderConfigsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.identityProviderConfigs = output.identityProviderConfigs
            self.nextToken = output.nextToken
        } else {
            self.identityProviderConfigs = nil
            self.nextToken = nil
        }
    }
}

public struct ListIdentityProviderConfigsOutputResponse: Equatable {
    /// <p>The identity provider configurations for the cluster.</p>
    public let identityProviderConfigs: [IdentityProviderConfig]?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListIdentityProviderConfigsResponse</code> where <code>maxResults</code> was
    ///             used and the results exceeded the value of that parameter. Pagination continues from the
    ///             end of the previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: String?

    public init (
        identityProviderConfigs: [IdentityProviderConfig]? = nil,
        nextToken: String? = nil
    )
    {
        self.identityProviderConfigs = identityProviderConfigs
        self.nextToken = nextToken
    }
}

struct ListIdentityProviderConfigsOutputResponseBody: Equatable {
    public let identityProviderConfigs: [IdentityProviderConfig]?
    public let nextToken: String?
}

extension ListIdentityProviderConfigsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityProviderConfigs
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigsContainer = try containerValues.decodeIfPresent([IdentityProviderConfig?].self, forKey: .identityProviderConfigs)
        var identityProviderConfigsDecoded0:[IdentityProviderConfig]? = nil
        if let identityProviderConfigsContainer = identityProviderConfigsContainer {
            identityProviderConfigsDecoded0 = [IdentityProviderConfig]()
            for structure0 in identityProviderConfigsContainer {
                if let structure0 = structure0 {
                    identityProviderConfigsDecoded0?.append(structure0)
                }
            }
        }
        identityProviderConfigs = identityProviderConfigsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNodegroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNodegroupsInput(clusterName: \(String(describing: clusterName)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListNodegroupsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListNodegroupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListNodegroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNodegroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNodegroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNodegroupsInput>
    public typealias MOutput = OperationOutput<ListNodegroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNodegroupsOutputError>
}

public struct ListNodegroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListNodegroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNodegroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNodegroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNodegroupsInput>
    public typealias MOutput = OperationOutput<ListNodegroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNodegroupsOutputError>
}

public struct ListNodegroupsInput: Equatable {
    /// <p>The name of the Amazon EKS cluster that you would like to list node groups in.</p>
    public let clusterName: String?
    /// <p>The maximum number of node group results returned by <code>ListNodegroups</code> in
    ///             paginated output. When you use this parameter, <code>ListNodegroups</code> returns only
    ///                 <code>maxResults</code> results in a single page along with a <code>nextToken</code>
    ///             response element. You can see the remaining results of the initial request by sending
    ///             another <code>ListNodegroups</code> request with the returned <code>nextToken</code>
    ///             value. This value can be between 1 and 100. If you don't
    ///             use this parameter, <code>ListNodegroups</code> returns up to 100
    ///             results and a <code>nextToken</code> value if applicable.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListNodegroups</code> request where <code>maxResults</code> was used and the
    ///             results exceeded the value of that parameter. Pagination continues from the end of the
    ///             previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: String?

    public init (
        clusterName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListNodegroupsInputBody: Equatable {
}

extension ListNodegroupsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListNodegroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNodegroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNodegroupsOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNodegroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNodegroupsOutputResponse(nextToken: \(String(describing: nextToken)), nodegroups: \(String(describing: nodegroups)))"}
}

extension ListNodegroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListNodegroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.nodegroups = output.nodegroups
        } else {
            self.nextToken = nil
            self.nodegroups = nil
        }
    }
}

public struct ListNodegroupsOutputResponse: Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListNodegroups</code>
    ///             request. When the results of a <code>ListNodegroups</code> request exceed
    ///                 <code>maxResults</code>, you can use this value to retrieve the next page of
    ///             results. This value is <code>null</code> when there are no more results to
    ///             return.</p>
    public let nextToken: String?
    /// <p>A list of all of the node groups associated with the specified cluster.</p>
    public let nodegroups: [String]?

    public init (
        nextToken: String? = nil,
        nodegroups: [String]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodegroups = nodegroups
    }
}

struct ListNodegroupsOutputResponseBody: Equatable {
    public let nodegroups: [String]?
    public let nextToken: String?
}

extension ListNodegroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case nodegroups
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .nodegroups)
        var nodegroupsDecoded0:[String]? = nil
        if let nodegroupsContainer = nodegroupsContainer {
            nodegroupsDecoded0 = [String]()
            for string0 in nodegroupsContainer {
                if let string0 = string0 {
                    nodegroupsDecoded0?.append(string0)
                }
            }
        }
        nodegroups = nodegroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(resourceArn: \(String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the
    ///             supported resources are Amazon EKS clusters and managed node groups.</p>
    public let resourceArn: String?

    public init (
        resourceArn: String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Equatable {
}

extension ListTagsForResourceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>The tags for the resource.</p>
    public let tags: [String:String]?

    public init (
        tags: [String:String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [String:String]?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListUpdatesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListUpdatesInput(addonName: \(String(describing: addonName)), maxResults: \(String(describing: maxResults)), name: \(String(describing: name)), nextToken: \(String(describing: nextToken)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension ListUpdatesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListUpdatesInputHeadersMiddleware: Middleware {
    public let id: String = "ListUpdatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListUpdatesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListUpdatesInput>
    public typealias MOutput = OperationOutput<ListUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListUpdatesOutputError>
}

public struct ListUpdatesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListUpdatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListUpdatesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nodegroupName = input.operationInput.nodegroupName {
            let nodegroupNameQueryItem = URLQueryItem(name: "nodegroupName".urlPercentEncoding(), value: String(nodegroupName).urlPercentEncoding())
            input.builder.withQueryItem(nodegroupNameQueryItem)
        }
        if let addonName = input.operationInput.addonName {
            let addonNameQueryItem = URLQueryItem(name: "addonName".urlPercentEncoding(), value: String(addonName).urlPercentEncoding())
            input.builder.withQueryItem(addonNameQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListUpdatesInput>
    public typealias MOutput = OperationOutput<ListUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListUpdatesOutputError>
}

public struct ListUpdatesInput: Equatable {
    /// <p>The names of the installed add-ons that have available updates.</p>
    public let addonName: String?
    /// <p>The maximum number of update results returned by <code>ListUpdates</code> in paginated
    ///             output. When you use this parameter, <code>ListUpdates</code> returns only
    ///                 <code>maxResults</code> results in a single page along with a <code>nextToken</code>
    ///             response element. You can see the remaining results of the initial request by sending
    ///             another <code>ListUpdates</code> request with the returned <code>nextToken</code> value.
    ///             This value can be between 1 and 100. If you don't use this
    ///             parameter, <code>ListUpdates</code> returns up to 100 results and a
    ///                 <code>nextToken</code> value if applicable.</p>
    public let maxResults: Int?
    /// <p>The name of the Amazon EKS cluster to list updates for.</p>
    public let name: String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///                 <code>ListUpdates</code> request where <code>maxResults</code> was used and the
    ///             results exceeded the value of that parameter. Pagination continues from the end of the
    ///             previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: String?
    /// <p>The name of the Amazon EKS managed node group to list updates for.</p>
    public let nodegroupName: String?

    public init (
        addonName: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.nodegroupName = nodegroupName
    }
}

struct ListUpdatesInputBody: Equatable {
}

extension ListUpdatesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListUpdatesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUpdatesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUpdatesOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUpdatesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListUpdatesOutputResponse(nextToken: \(String(describing: nextToken)), updateIds: \(String(describing: updateIds)))"}
}

extension ListUpdatesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListUpdatesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.updateIds = output.updateIds
        } else {
            self.nextToken = nil
            self.updateIds = nil
        }
    }
}

public struct ListUpdatesOutputResponse: Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListUpdates</code>
    ///             request. When the results of a <code>ListUpdates</code> request exceed
    ///                 <code>maxResults</code>, you can use this value to retrieve the next page of
    ///             results. This value is <code>null</code> when there are no more results to
    ///             return.</p>
    public let nextToken: String?
    /// <p>A list of all the updates for the specified cluster and Region.</p>
    public let updateIds: [String]?

    public init (
        nextToken: String? = nil,
        updateIds: [String]? = nil
    )
    {
        self.nextToken = nextToken
        self.updateIds = updateIds
    }
}

struct ListUpdatesOutputResponseBody: Equatable {
    public let updateIds: [String]?
    public let nextToken: String?
}

extension ListUpdatesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case updateIds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .updateIds)
        var updateIdsDecoded0:[String]? = nil
        if let updateIdsContainer = updateIdsContainer {
            updateIdsDecoded0 = [String]()
            for string0 in updateIdsContainer {
                if let string0 = string0 {
                    updateIdsDecoded0?.append(string0)
                }
            }
        }
        updateIds = updateIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension LogSetup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled
        case types
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for logtypes0 in types {
                try typesContainer.encode(logtypes0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typesContainer = try containerValues.decodeIfPresent([LogType?].self, forKey: .types)
        var typesDecoded0:[LogType]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [LogType]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension LogSetup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogSetup(enabled: \(String(describing: enabled)), types: \(String(describing: types)))"}
}

/// <p>An object representing the enabled or disabled Kubernetes control plane logs for your
///             cluster.</p>
public struct LogSetup: Equatable {
    /// <p>If a log type is enabled, that log type exports its control plane logs to CloudWatch Logs. If a
    ///             log type isn't enabled, that log type doesn't export its control plane logs. Each
    ///             individual log type can be enabled or disabled independently.</p>
    public let enabled: Bool?
    /// <p>The available cluster control plane log types.</p>
    public let types: [LogType]?

    public init (
        enabled: Bool? = nil,
        types: [LogType]? = nil
    )
    {
        self.enabled = enabled
        self.types = types
    }
}

public enum LogType {
    case api
    case audit
    case authenticator
    case controllerManager
    case scheduler
    case sdkUnknown(String)
}

extension LogType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LogType] {
        return [
            .api,
            .audit,
            .authenticator,
            .controllerManager,
            .scheduler,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .api: return "api"
        case .audit: return "audit"
        case .authenticator: return "authenticator"
        case .controllerManager: return "controllerManager"
        case .scheduler: return "scheduler"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
    }
}

extension Logging: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterLogging
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterLogging = clusterLogging {
            var clusterLoggingContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterLogging)
            for logsetups0 in clusterLogging {
                try clusterLoggingContainer.encode(logsetups0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterLoggingContainer = try containerValues.decodeIfPresent([LogSetup?].self, forKey: .clusterLogging)
        var clusterLoggingDecoded0:[LogSetup]? = nil
        if let clusterLoggingContainer = clusterLoggingContainer {
            clusterLoggingDecoded0 = [LogSetup]()
            for structure0 in clusterLoggingContainer {
                if let structure0 = structure0 {
                    clusterLoggingDecoded0?.append(structure0)
                }
            }
        }
        clusterLogging = clusterLoggingDecoded0
    }
}

extension Logging: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Logging(clusterLogging: \(String(describing: clusterLogging)))"}
}

/// <p>An object representing the logging configuration for resources in your cluster.</p>
public struct Logging: Equatable {
    /// <p>The cluster control plane logging configuration for your cluster.</p>
    public let clusterLogging: [LogSetup]?

    public init (
        clusterLogging: [LogSetup]? = nil
    )
    {
        self.clusterLogging = clusterLogging
    }
}

extension Nodegroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amiType
        case capacityType
        case clusterName
        case createdAt
        case diskSize
        case health
        case instanceTypes
        case labels
        case launchTemplate
        case modifiedAt
        case nodeRole
        case nodegroupArn
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case resources
        case scalingConfig
        case status
        case subnets
        case tags
        case taints
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiType = amiType {
            try encodeContainer.encode(amiType.rawValue, forKey: .amiType)
        }
        if let capacityType = capacityType {
            try encodeContainer.encode(capacityType.rawValue, forKey: .capacityType)
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let diskSize = diskSize {
            try encodeContainer.encode(diskSize, forKey: .diskSize)
        }
        if let health = health {
            try encodeContainer.encode(health, forKey: .health)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for stringlist0 in instanceTypes {
                try instanceTypesContainer.encode(stringlist0)
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .labels)
            for (dictKey0, labelsmap0) in labels {
                try labelsContainer.encode(labelsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let launchTemplate = launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let modifiedAt = modifiedAt {
            try encodeContainer.encode(modifiedAt.timeIntervalSince1970, forKey: .modifiedAt)
        }
        if let nodeRole = nodeRole {
            try encodeContainer.encode(nodeRole, forKey: .nodeRole)
        }
        if let nodegroupArn = nodegroupArn {
            try encodeContainer.encode(nodegroupArn, forKey: .nodegroupArn)
        }
        if let nodegroupName = nodegroupName {
            try encodeContainer.encode(nodegroupName, forKey: .nodegroupName)
        }
        if let releaseVersion = releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let remoteAccess = remoteAccess {
            try encodeContainer.encode(remoteAccess, forKey: .remoteAccess)
        }
        if let resources = resources {
            try encodeContainer.encode(resources, forKey: .resources)
        }
        if let scalingConfig = scalingConfig {
            try encodeContainer.encode(scalingConfig, forKey: .scalingConfig)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let taints = taints {
            var taintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taints)
            for taintslist0 in taints {
                try taintsContainer.encode(taintslist0)
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let nodegroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupArn)
        nodegroupArn = nodegroupArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let modifiedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .modifiedAt)
        modifiedAt = modifiedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NodegroupStatus.self, forKey: .status)
        status = statusDecoded
        let capacityTypeDecoded = try containerValues.decodeIfPresent(CapacityTypes.self, forKey: .capacityType)
        capacityType = capacityTypeDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let subnetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let remoteAccessDecoded = try containerValues.decodeIfPresent(RemoteAccessConfig.self, forKey: .remoteAccess)
        remoteAccess = remoteAccessDecoded
        let amiTypeDecoded = try containerValues.decodeIfPresent(AMITypes.self, forKey: .amiType)
        amiType = amiTypeDecoded
        let nodeRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .labels)
        var labelsDecoded0: [String:String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String:String]()
            for (key0, labelvalue0) in labelsContainer {
                if let labelvalue0 = labelvalue0 {
                    labelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        labels = labelsDecoded0
        let taintsContainer = try containerValues.decodeIfPresent([Taint?].self, forKey: .taints)
        var taintsDecoded0:[Taint]? = nil
        if let taintsContainer = taintsContainer {
            taintsDecoded0 = [Taint]()
            for structure0 in taintsContainer {
                if let structure0 = structure0 {
                    taintsDecoded0?.append(structure0)
                }
            }
        }
        taints = taintsDecoded0
        let resourcesDecoded = try containerValues.decodeIfPresent(NodegroupResources.self, forKey: .resources)
        resources = resourcesDecoded
        let diskSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .diskSize)
        diskSize = diskSizeDecoded
        let healthDecoded = try containerValues.decodeIfPresent(NodegroupHealth.self, forKey: .health)
        health = healthDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension Nodegroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Nodegroup(amiType: \(String(describing: amiType)), capacityType: \(String(describing: capacityType)), clusterName: \(String(describing: clusterName)), createdAt: \(String(describing: createdAt)), diskSize: \(String(describing: diskSize)), health: \(String(describing: health)), instanceTypes: \(String(describing: instanceTypes)), labels: \(String(describing: labels)), launchTemplate: \(String(describing: launchTemplate)), modifiedAt: \(String(describing: modifiedAt)), nodeRole: \(String(describing: nodeRole)), nodegroupArn: \(String(describing: nodegroupArn)), nodegroupName: \(String(describing: nodegroupName)), releaseVersion: \(String(describing: releaseVersion)), remoteAccess: \(String(describing: remoteAccess)), resources: \(String(describing: resources)), scalingConfig: \(String(describing: scalingConfig)), status: \(String(describing: status)), subnets: \(String(describing: subnets)), tags: \(String(describing: tags)), taints: \(String(describing: taints)), version: \(String(describing: version)))"}
}

/// <p>An object representing an Amazon EKS managed node group.</p>
public struct Nodegroup: Equatable {
    /// <p>If the node group was deployed using a launch template with a custom AMI, then this is
    ///                 <code>CUSTOM</code>. For node groups that weren't deployed using a launch template,
    ///             this is the AMI type that was specified in the node group configuration.</p>
    public let amiType: AMITypes?
    /// <p>The capacity type of your managed node group.</p>
    public let capacityType: CapacityTypes?
    /// <p>The name of the cluster that the managed node group resides in.</p>
    public let clusterName: String?
    /// <p>The Unix epoch timestamp in seconds for when the managed node group was
    ///             created.</p>
    public let createdAt: Date?
    /// <p>If the node group wasn't deployed with a launch template, then this is the disk size
    ///             in the node group configuration. If the node group was deployed with a launch template,
    ///             then this is <code>null</code>.</p>
    public let diskSize: Int?
    /// <p>The health status of the node group. If there are issues with your node group's
    ///             health, they are listed here.</p>
    public let health: NodegroupHealth?
    /// <p>If the node group wasn't deployed with a launch template, then this is the instance
    ///             type that is associated with the node group. If the node group was deployed with a
    ///             launch template, then this is <code>null</code>.</p>
    public let instanceTypes: [String]?
    /// <p>The Kubernetes labels applied to the nodes in the node group.</p>
    ///         <note>
    ///             <p>Only labels that are applied with the Amazon EKS API are shown here. There may be other
    ///                 Kubernetes labels applied to the nodes in this group.</p>
    ///         </note>
    public let labels: [String:String]?
    /// <p>If a launch template was used to create the node group, then this is the launch
    ///             template that was used.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The Unix epoch timestamp in seconds for when the managed node group was last
    ///             modified.</p>
    public let modifiedAt: Date?
    /// <p>The IAM role associated with your node group. The Amazon EKS node <code>kubelet</code>
    ///             daemon makes calls to AWS APIs on your behalf. Nodes receive permissions for these API
    ///             calls through an IAM instance profile and associated policies.</p>
    public let nodeRole: String?
    /// <p>The Amazon Resource Name (ARN) associated with the managed node group.</p>
    public let nodegroupArn: String?
    /// <p>The name associated with an Amazon EKS managed node group.</p>
    public let nodegroupName: String?
    /// <p>If the node group was deployed using a launch template with a custom AMI, then this is
    ///             the AMI ID that was specified in the launch template. For node groups that weren't
    ///             deployed using a launch template, this is the version of the Amazon EKS optimized AMI that
    ///             the node group was deployed with.</p>
    public let releaseVersion: String?
    /// <p>If the node group wasn't deployed with a launch template, then this is the remote
    ///             access configuration that is associated with the node group. If the node group was
    ///             deployed with a launch template, then this is <code>null</code>.</p>
    public let remoteAccess: RemoteAccessConfig?
    /// <p>The resources associated with the node group, such as Auto Scaling groups and security
    ///             groups for remote access.</p>
    public let resources: NodegroupResources?
    /// <p>The scaling configuration details for the Auto Scaling group that is associated with
    ///             your node group.</p>
    public let scalingConfig: NodegroupScalingConfig?
    /// <p>The current status of the managed node group.</p>
    public let status: NodegroupStatus?
    /// <p>The subnets that were specified for the Auto Scaling group that is associated with
    ///             your node group.</p>
    public let subnets: [String]?
    /// <p>The metadata applied to the node group to assist with categorization and organization.
    ///             Each tag consists of a key and an optional value, both of which you define. Node group
    ///             tags do not propagate to any other resources associated with the node group, such as the
    ///             Amazon EC2 instances or subnets. </p>
    public let tags: [String:String]?
    /// <p>The Kubernetes taints to be applied to the nodes in the node group when they are
    ///             created. Effect is one of <code>NoSchedule</code>, <code>PreferNoSchedule</code>, or <code>NoExecute</code>. Kubernetes taints
    ///             can be used together with tolerations to control how workloads are scheduled to your
    ///             nodes.</p>
    public let taints: [Taint]?
    /// <p>The Kubernetes version of the managed node group.</p>
    public let version: String?

    public init (
        amiType: AMITypes? = nil,
        capacityType: CapacityTypes? = nil,
        clusterName: String? = nil,
        createdAt: Date? = nil,
        diskSize: Int? = nil,
        health: NodegroupHealth? = nil,
        instanceTypes: [String]? = nil,
        labels: [String:String]? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        modifiedAt: Date? = nil,
        nodeRole: String? = nil,
        nodegroupArn: String? = nil,
        nodegroupName: String? = nil,
        releaseVersion: String? = nil,
        remoteAccess: RemoteAccessConfig? = nil,
        resources: NodegroupResources? = nil,
        scalingConfig: NodegroupScalingConfig? = nil,
        status: NodegroupStatus? = nil,
        subnets: [String]? = nil,
        tags: [String:String]? = nil,
        taints: [Taint]? = nil,
        version: String? = nil
    )
    {
        self.amiType = amiType
        self.capacityType = capacityType
        self.clusterName = clusterName
        self.createdAt = createdAt
        self.diskSize = diskSize
        self.health = health
        self.instanceTypes = instanceTypes
        self.labels = labels
        self.launchTemplate = launchTemplate
        self.modifiedAt = modifiedAt
        self.nodeRole = nodeRole
        self.nodegroupArn = nodegroupArn
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.remoteAccess = remoteAccess
        self.resources = resources
        self.scalingConfig = scalingConfig
        self.status = status
        self.subnets = subnets
        self.tags = tags
        self.taints = taints
        self.version = version
    }
}

extension NodegroupHealth: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case issues
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for issuelist0 in issues {
                try issuesContainer.encode(issuelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuesContainer = try containerValues.decodeIfPresent([Issue?].self, forKey: .issues)
        var issuesDecoded0:[Issue]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [Issue]()
            for structure0 in issuesContainer {
                if let structure0 = structure0 {
                    issuesDecoded0?.append(structure0)
                }
            }
        }
        issues = issuesDecoded0
    }
}

extension NodegroupHealth: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodegroupHealth(issues: \(String(describing: issues)))"}
}

/// <p>An object representing the health status of the node group.</p>
public struct NodegroupHealth: Equatable {
    /// <p>Any issues that are associated with the node group. </p>
    public let issues: [Issue]?

    public init (
        issues: [Issue]? = nil
    )
    {
        self.issues = issues
    }
}

public enum NodegroupIssueCode {
    case accessDenied
    case asgInstanceLaunchFailures
    case autoScalingGroupInvalidConfiguration
    case autoScalingGroupNotFound
    case clusterUnreachable
    case ec2LaunchTemplateNotFound
    case ec2LaunchTemplateVersionMismatch
    case ec2SecurityGroupDeletionFailure
    case ec2SecurityGroupNotFound
    case ec2SubnetInvalidConfiguration
    case ec2SubnetNotFound
    case iamInstanceProfileNotFound
    case iamLimitExceeded
    case iamNodeRoleNotFound
    case instanceLimitExceeded
    case insufficientFreeAddresses
    case internalFailure
    case nodeCreationFailure
    case sdkUnknown(String)
}

extension NodegroupIssueCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NodegroupIssueCode] {
        return [
            .accessDenied,
            .asgInstanceLaunchFailures,
            .autoScalingGroupInvalidConfiguration,
            .autoScalingGroupNotFound,
            .clusterUnreachable,
            .ec2LaunchTemplateNotFound,
            .ec2LaunchTemplateVersionMismatch,
            .ec2SecurityGroupDeletionFailure,
            .ec2SecurityGroupNotFound,
            .ec2SubnetInvalidConfiguration,
            .ec2SubnetNotFound,
            .iamInstanceProfileNotFound,
            .iamLimitExceeded,
            .iamNodeRoleNotFound,
            .instanceLimitExceeded,
            .insufficientFreeAddresses,
            .internalFailure,
            .nodeCreationFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "AccessDenied"
        case .asgInstanceLaunchFailures: return "AsgInstanceLaunchFailures"
        case .autoScalingGroupInvalidConfiguration: return "AutoScalingGroupInvalidConfiguration"
        case .autoScalingGroupNotFound: return "AutoScalingGroupNotFound"
        case .clusterUnreachable: return "ClusterUnreachable"
        case .ec2LaunchTemplateNotFound: return "Ec2LaunchTemplateNotFound"
        case .ec2LaunchTemplateVersionMismatch: return "Ec2LaunchTemplateVersionMismatch"
        case .ec2SecurityGroupDeletionFailure: return "Ec2SecurityGroupDeletionFailure"
        case .ec2SecurityGroupNotFound: return "Ec2SecurityGroupNotFound"
        case .ec2SubnetInvalidConfiguration: return "Ec2SubnetInvalidConfiguration"
        case .ec2SubnetNotFound: return "Ec2SubnetNotFound"
        case .iamInstanceProfileNotFound: return "IamInstanceProfileNotFound"
        case .iamLimitExceeded: return "IamLimitExceeded"
        case .iamNodeRoleNotFound: return "IamNodeRoleNotFound"
        case .instanceLimitExceeded: return "InstanceLimitExceeded"
        case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
        case .internalFailure: return "InternalFailure"
        case .nodeCreationFailure: return "NodeCreationFailure"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NodegroupIssueCode(rawValue: rawValue) ?? NodegroupIssueCode.sdkUnknown(rawValue)
    }
}

extension NodegroupResources: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroups
        case remoteAccessSecurityGroup
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggrouplist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggrouplist0)
            }
        }
        if let remoteAccessSecurityGroup = remoteAccessSecurityGroup {
            try encodeContainer.encode(remoteAccessSecurityGroup, forKey: .remoteAccessSecurityGroup)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([AutoScalingGroup?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[AutoScalingGroup]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [AutoScalingGroup]()
            for structure0 in autoScalingGroupsContainer {
                if let structure0 = structure0 {
                    autoScalingGroupsDecoded0?.append(structure0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let remoteAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .remoteAccessSecurityGroup)
        remoteAccessSecurityGroup = remoteAccessSecurityGroupDecoded
    }
}

extension NodegroupResources: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodegroupResources(autoScalingGroups: \(String(describing: autoScalingGroups)), remoteAccessSecurityGroup: \(String(describing: remoteAccessSecurityGroup)))"}
}

/// <p>An object representing the resources associated with the node group, such as Auto
///             Scaling groups and security groups for remote access.</p>
public struct NodegroupResources: Equatable {
    /// <p>The Auto Scaling groups associated with the node group.</p>
    public let autoScalingGroups: [AutoScalingGroup]?
    /// <p>The remote access security group associated with the node group. This security group
    ///             controls SSH access to the nodes.</p>
    public let remoteAccessSecurityGroup: String?

    public init (
        autoScalingGroups: [AutoScalingGroup]? = nil,
        remoteAccessSecurityGroup: String? = nil
    )
    {
        self.autoScalingGroups = autoScalingGroups
        self.remoteAccessSecurityGroup = remoteAccessSecurityGroup
    }
}

extension NodegroupScalingConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredSize
        case maxSize
        case minSize
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredSize = desiredSize {
            try encodeContainer.encode(desiredSize, forKey: .desiredSize)
        }
        if let maxSize = maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredSize)
        desiredSize = desiredSizeDecoded
    }
}

extension NodegroupScalingConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodegroupScalingConfig(desiredSize: \(String(describing: desiredSize)), maxSize: \(String(describing: maxSize)), minSize: \(String(describing: minSize)))"}
}

/// <p>An object representing the scaling configuration details for the Auto Scaling group
///             that is associated with your node group. When creating a node group, you must specify
///             all or none of the properties. When updating a node group, you can specify any or none
///             of the properties.</p>
public struct NodegroupScalingConfig: Equatable {
    /// <p>The current number of nodes that the managed node group should maintain.</p>
    public let desiredSize: Int?
    /// <p>The maximum number of nodes that the managed node group can scale out to. For
    ///             information about the maximum number that you can specify, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html">Amazon EKS service
    ///                 quotas</a> in the <i>Amazon EKS User Guide</i>.</p>
    public let maxSize: Int?
    /// <p>The minimum number of nodes that the managed node group can scale in to. This number
    ///             must be greater than zero.</p>
    public let minSize: Int?

    public init (
        desiredSize: Int? = nil,
        maxSize: Int? = nil,
        minSize: Int? = nil
    )
    {
        self.desiredSize = desiredSize
        self.maxSize = maxSize
        self.minSize = minSize
    }
}

public enum NodegroupStatus {
    case active
    case createFailed
    case creating
    case degraded
    case deleteFailed
    case deleting
    case updating
    case sdkUnknown(String)
}

extension NodegroupStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NodegroupStatus] {
        return [
            .active,
            .createFailed,
            .creating,
            .degraded,
            .deleteFailed,
            .deleting,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .degraded: return "DEGRADED"
        case .deleteFailed: return "DELETE_FAILED"
        case .deleting: return "DELETING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NodegroupStatus(rawValue: rawValue) ?? NodegroupStatus.sdkUnknown(rawValue)
    }
}

extension NotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotFoundException(message: \(String(describing: message)))"}
}

extension NotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A service resource associated with the request could not be found. Clients should not
///             retry such requests.</p>
public struct NotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Equatable {
    public let message: String?
}

extension NotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OIDC: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case issuer
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuer)
        issuer = issuerDecoded
    }
}

extension OIDC: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OIDC(issuer: \(String(describing: issuer)))"}
}

/// <p>An object representing the <a href="https://openid.net/connect/">OpenID
///                 Connect</a> (OIDC) identity provider information for the cluster.</p>
public struct OIDC: Equatable {
    /// <p>The issuer URL for the OIDC identity provider.</p>
    public let issuer: String?

    public init (
        issuer: String? = nil
    )
    {
        self.issuer = issuer
    }
}

extension OidcIdentityProviderConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientId
        case clusterName
        case groupsClaim
        case groupsPrefix
        case identityProviderConfigArn
        case identityProviderConfigName
        case issuerUrl
        case requiredClaims
        case status
        case tags
        case usernameClaim
        case usernamePrefix
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let groupsClaim = groupsClaim {
            try encodeContainer.encode(groupsClaim, forKey: .groupsClaim)
        }
        if let groupsPrefix = groupsPrefix {
            try encodeContainer.encode(groupsPrefix, forKey: .groupsPrefix)
        }
        if let identityProviderConfigArn = identityProviderConfigArn {
            try encodeContainer.encode(identityProviderConfigArn, forKey: .identityProviderConfigArn)
        }
        if let identityProviderConfigName = identityProviderConfigName {
            try encodeContainer.encode(identityProviderConfigName, forKey: .identityProviderConfigName)
        }
        if let issuerUrl = issuerUrl {
            try encodeContainer.encode(issuerUrl, forKey: .issuerUrl)
        }
        if let requiredClaims = requiredClaims {
            var requiredClaimsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requiredClaims)
            for (dictKey0, requiredclaimsmap0) in requiredClaims {
                try requiredClaimsContainer.encode(requiredclaimsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let usernameClaim = usernameClaim {
            try encodeContainer.encode(usernameClaim, forKey: .usernameClaim)
        }
        if let usernamePrefix = usernamePrefix {
            try encodeContainer.encode(usernamePrefix, forKey: .usernamePrefix)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityProviderConfigName)
        identityProviderConfigName = identityProviderConfigNameDecoded
        let identityProviderConfigArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityProviderConfigArn)
        identityProviderConfigArn = identityProviderConfigArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let issuerUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuerUrl)
        issuerUrl = issuerUrlDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let usernameClaimDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usernameClaim)
        usernameClaim = usernameClaimDecoded
        let usernamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usernamePrefix)
        usernamePrefix = usernamePrefixDecoded
        let groupsClaimDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupsClaim)
        groupsClaim = groupsClaimDecoded
        let groupsPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupsPrefix)
        groupsPrefix = groupsPrefixDecoded
        let requiredClaimsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .requiredClaims)
        var requiredClaimsDecoded0: [String:String]? = nil
        if let requiredClaimsContainer = requiredClaimsContainer {
            requiredClaimsDecoded0 = [String:String]()
            for (key0, requiredclaimsvalue0) in requiredClaimsContainer {
                if let requiredclaimsvalue0 = requiredclaimsvalue0 {
                    requiredClaimsDecoded0?[key0] = requiredclaimsvalue0
                }
            }
        }
        requiredClaims = requiredClaimsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ConfigStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OidcIdentityProviderConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OidcIdentityProviderConfig(clientId: \(String(describing: clientId)), clusterName: \(String(describing: clusterName)), groupsClaim: \(String(describing: groupsClaim)), groupsPrefix: \(String(describing: groupsPrefix)), identityProviderConfigArn: \(String(describing: identityProviderConfigArn)), identityProviderConfigName: \(String(describing: identityProviderConfigName)), issuerUrl: \(String(describing: issuerUrl)), requiredClaims: \(String(describing: requiredClaims)), status: \(String(describing: status)), tags: \(String(describing: tags)), usernameClaim: \(String(describing: usernameClaim)), usernamePrefix: \(String(describing: usernamePrefix)))"}
}

/// <p>An object that represents the configuration for an OpenID Connect (OIDC) identity
///             provider. </p>
public struct OidcIdentityProviderConfig: Equatable {
    /// <p>This is also known as <i>audience</i>. The ID of the client application
    ///             that makes authentication requests to the OIDC identity provider.</p>
    public let clientId: String?
    /// <p>The cluster that the configuration is associated to.</p>
    public let clusterName: String?
    /// <p>The JSON web token (JWT) claim that the provider uses to return your groups.</p>
    public let groupsClaim: String?
    /// <p>The prefix that is prepended to group claims to prevent clashes with existing names
    ///             (such as <code>system:</code> groups). For example, the value<code> oidc:</code> creates
    ///             group names like <code>oidc:engineering</code> and <code>oidc:infra</code>. The prefix
    ///             can't contain <code>system:</code>
    ///          </p>
    public let groupsPrefix: String?
    /// <p>The ARN of the configuration.</p>
    public let identityProviderConfigArn: String?
    /// <p>The name of the configuration.</p>
    public let identityProviderConfigName: String?
    /// <p>The URL of the OIDC identity provider that allows the API server to discover public
    ///             signing keys for verifying tokens.</p>
    public let issuerUrl: String?
    /// <p>The key-value pairs that describe required claims in the identity token. If set, each
    ///             claim is verified to be present in the token with a matching value.</p>
    public let requiredClaims: [String:String]?
    /// <p>The status of the OIDC identity provider.</p>
    public let status: ConfigStatus?
    /// <p>The metadata to apply to the provider configuration to assist with categorization and
    ///             organization. Each tag consists of a key and an optional value, both of which you
    ///             defined.</p>
    public let tags: [String:String]?
    /// <p>The JSON Web token (JWT) claim that is used as the username.</p>
    public let usernameClaim: String?
    /// <p>The prefix that is prepended to username claims to prevent clashes with existing
    ///             names. The prefix can't contain <code>system:</code>
    ///          </p>
    public let usernamePrefix: String?

    public init (
        clientId: String? = nil,
        clusterName: String? = nil,
        groupsClaim: String? = nil,
        groupsPrefix: String? = nil,
        identityProviderConfigArn: String? = nil,
        identityProviderConfigName: String? = nil,
        issuerUrl: String? = nil,
        requiredClaims: [String:String]? = nil,
        status: ConfigStatus? = nil,
        tags: [String:String]? = nil,
        usernameClaim: String? = nil,
        usernamePrefix: String? = nil
    )
    {
        self.clientId = clientId
        self.clusterName = clusterName
        self.groupsClaim = groupsClaim
        self.groupsPrefix = groupsPrefix
        self.identityProviderConfigArn = identityProviderConfigArn
        self.identityProviderConfigName = identityProviderConfigName
        self.issuerUrl = issuerUrl
        self.requiredClaims = requiredClaims
        self.status = status
        self.tags = tags
        self.usernameClaim = usernameClaim
        self.usernamePrefix = usernamePrefix
    }
}

extension OidcIdentityProviderConfigRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientId
        case groupsClaim
        case groupsPrefix
        case identityProviderConfigName
        case issuerUrl
        case requiredClaims
        case usernameClaim
        case usernamePrefix
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let groupsClaim = groupsClaim {
            try encodeContainer.encode(groupsClaim, forKey: .groupsClaim)
        }
        if let groupsPrefix = groupsPrefix {
            try encodeContainer.encode(groupsPrefix, forKey: .groupsPrefix)
        }
        if let identityProviderConfigName = identityProviderConfigName {
            try encodeContainer.encode(identityProviderConfigName, forKey: .identityProviderConfigName)
        }
        if let issuerUrl = issuerUrl {
            try encodeContainer.encode(issuerUrl, forKey: .issuerUrl)
        }
        if let requiredClaims = requiredClaims {
            var requiredClaimsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requiredClaims)
            for (dictKey0, requiredclaimsmap0) in requiredClaims {
                try requiredClaimsContainer.encode(requiredclaimsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let usernameClaim = usernameClaim {
            try encodeContainer.encode(usernameClaim, forKey: .usernameClaim)
        }
        if let usernamePrefix = usernamePrefix {
            try encodeContainer.encode(usernamePrefix, forKey: .usernamePrefix)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityProviderConfigName)
        identityProviderConfigName = identityProviderConfigNameDecoded
        let issuerUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuerUrl)
        issuerUrl = issuerUrlDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let usernameClaimDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usernameClaim)
        usernameClaim = usernameClaimDecoded
        let usernamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usernamePrefix)
        usernamePrefix = usernamePrefixDecoded
        let groupsClaimDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupsClaim)
        groupsClaim = groupsClaimDecoded
        let groupsPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupsPrefix)
        groupsPrefix = groupsPrefixDecoded
        let requiredClaimsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .requiredClaims)
        var requiredClaimsDecoded0: [String:String]? = nil
        if let requiredClaimsContainer = requiredClaimsContainer {
            requiredClaimsDecoded0 = [String:String]()
            for (key0, requiredclaimsvalue0) in requiredClaimsContainer {
                if let requiredclaimsvalue0 = requiredclaimsvalue0 {
                    requiredClaimsDecoded0?[key0] = requiredclaimsvalue0
                }
            }
        }
        requiredClaims = requiredClaimsDecoded0
    }
}

extension OidcIdentityProviderConfigRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OidcIdentityProviderConfigRequest(clientId: \(String(describing: clientId)), groupsClaim: \(String(describing: groupsClaim)), groupsPrefix: \(String(describing: groupsPrefix)), identityProviderConfigName: \(String(describing: identityProviderConfigName)), issuerUrl: \(String(describing: issuerUrl)), requiredClaims: \(String(describing: requiredClaims)), usernameClaim: \(String(describing: usernameClaim)), usernamePrefix: \(String(describing: usernamePrefix)))"}
}

/// <p>An object representing an OpenID Connect (OIDC) configuration. Before associating an
///             OIDC identity provider to your cluster, review the considerations in <a href="https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html">Authenticating
///                 users for your cluster from an OpenID Connect identity provider</a> in the
///             <i>Amazon EKS User Guide</i>.</p>
public struct OidcIdentityProviderConfigRequest: Equatable {
    /// <p>This is also known as <i>audience</i>. The ID for the client application
    ///             that makes authentication requests to the OpenID identity provider.</p>
    public let clientId: String?
    /// <p>The JWT claim that the provider uses to return your groups.</p>
    public let groupsClaim: String?
    /// <p>The prefix that is prepended to group claims to prevent clashes with existing names
    ///             (such as <code>system:</code> groups). For example, the value<code> oidc:</code> will
    ///             create group names like <code>oidc:engineering</code> and
    ///             <code>oidc:infra</code>.</p>
    public let groupsPrefix: String?
    /// <p>The name of the OIDC provider configuration.</p>
    public let identityProviderConfigName: String?
    /// <p>The URL of the OpenID identity provider that allows the API server to discover public
    ///             signing keys for verifying tokens. The URL must begin with <code>https://</code> and
    ///             should correspond to the <code>iss</code> claim in the provider's OIDC ID tokens. Per
    ///             the OIDC standard, path components are allowed but query parameters are not. Typically
    ///             the URL consists of only a hostname, like <code>https://server.example.org</code> or
    ///                 <code>https://example.com</code>. This URL should point to the level below
    ///                 <code>.well-known/openid-configuration</code> and must be publicly accessible over
    ///             the internet.</p>
    public let issuerUrl: String?
    /// <p>The key value pairs that describe required claims in the identity token. If set, each
    ///             claim is verified to be present in the token with a matching value. For the maximum
    ///             number of claims that you can require, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html">Amazon EKS service quotas</a> in the
    ///             <i>Amazon EKS User Guide</i>.</p>
    public let requiredClaims: [String:String]?
    /// <p>The JSON Web Token (JWT) claim to use as the username. The default is
    ///             <code>sub</code>, which is expected to be a unique identifier of the end user. You can
    ///             choose other claims, such as <code>email</code> or <code>name</code>, depending on the
    ///             OpenID identity provider. Claims other than <code>email</code> are prefixed with the
    ///             issuer URL to prevent naming clashes with other plug-ins.</p>
    public let usernameClaim: String?
    /// <p>The prefix that is prepended to username claims to prevent clashes with existing
    ///             names. If you do not provide this field, and <code>username</code> is a value other than
    ///                 <code>email</code>, the prefix defaults to <code>issuerurl#</code>. You can use the
    ///             value <code>-</code> to disable all prefixing.</p>
    public let usernamePrefix: String?

    public init (
        clientId: String? = nil,
        groupsClaim: String? = nil,
        groupsPrefix: String? = nil,
        identityProviderConfigName: String? = nil,
        issuerUrl: String? = nil,
        requiredClaims: [String:String]? = nil,
        usernameClaim: String? = nil,
        usernamePrefix: String? = nil
    )
    {
        self.clientId = clientId
        self.groupsClaim = groupsClaim
        self.groupsPrefix = groupsPrefix
        self.identityProviderConfigName = identityProviderConfigName
        self.issuerUrl = issuerUrl
        self.requiredClaims = requiredClaims
        self.usernameClaim = usernameClaim
        self.usernamePrefix = usernamePrefix
    }
}

extension Provider: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyArn = keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension Provider: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Provider(keyArn: \(String(describing: keyArn)))"}
}

/// <p>Identifies the AWS Key Management Service (AWS KMS) key used to encrypt the secrets.</p>
public struct Provider: Equatable {
    /// <p>Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same
    ///             region as the cluster, and if the KMS key was created in a different account, the user
    ///             must have access to the KMS key. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html">Allowing
    ///                 Users in Other Accounts to Use a KMS key</a> in the <i>AWS Key Management Service
    ///                 Developer Guide</i>.</p>
    public let keyArn: String?

    public init (
        keyArn: String? = nil
    )
    {
        self.keyArn = keyArn
    }
}

extension RemoteAccessConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ec2SshKey
        case sourceSecurityGroups
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2SshKey = ec2SshKey {
            try encodeContainer.encode(ec2SshKey, forKey: .ec2SshKey)
        }
        if let sourceSecurityGroups = sourceSecurityGroups {
            var sourceSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceSecurityGroups)
            for stringlist0 in sourceSecurityGroups {
                try sourceSecurityGroupsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2SshKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SshKey)
        ec2SshKey = ec2SshKeyDecoded
        let sourceSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .sourceSecurityGroups)
        var sourceSecurityGroupsDecoded0:[String]? = nil
        if let sourceSecurityGroupsContainer = sourceSecurityGroupsContainer {
            sourceSecurityGroupsDecoded0 = [String]()
            for string0 in sourceSecurityGroupsContainer {
                if let string0 = string0 {
                    sourceSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        sourceSecurityGroups = sourceSecurityGroupsDecoded0
    }
}

extension RemoteAccessConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoteAccessConfig(ec2SshKey: \(String(describing: ec2SshKey)), sourceSecurityGroups: \(String(describing: sourceSecurityGroups)))"}
}

/// <p>An object representing the remote access configuration for the managed node
///             group.</p>
public struct RemoteAccessConfig: Equatable {
    /// <p>The Amazon EC2 SSH key that provides access for SSH communication with the nodes in the
    ///             managed node group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key
    ///                 Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux Instances</i>.</p>
    public let ec2SshKey: String?
    /// <p>The security groups that are allowed SSH access (port 22) to the nodes. If you specify
    ///             an Amazon EC2 SSH key but do not specify a source security group when you create a managed
    ///             node group, then port 22 on the nodes is opened to the internet (0.0.0.0/0). For more
    ///             information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the
    ///             <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    public let sourceSecurityGroups: [String]?

    public init (
        ec2SshKey: String? = nil,
        sourceSecurityGroups: [String]? = nil
    )
    {
        self.ec2SshKey = ec2SshKey
        self.sourceSecurityGroups = sourceSecurityGroups
    }
}

public enum ResolveConflicts {
    case `none`
    case overwrite
    case sdkUnknown(String)
}

extension ResolveConflicts : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ResolveConflicts] {
        return [
            .none,
            .overwrite,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .overwrite: return "OVERWRITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ResolveConflicts(rawValue: rawValue) ?? ResolveConflicts.sdkUnknown(rawValue)
    }
}

extension ResourceInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceInUseException(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension ResourceInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource is in use.</p>
public struct ResourceInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var addonName: String?
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ResourceInUseExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let addonName: String?
    public let message: String?
}

extension ResourceInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceLimitExceededException(clusterName: \(String(describing: clusterName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension ResourceLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You have encountered a service limit on the specified resource.</p>
public struct ResourceLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        clusterName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ResourceLimitExceededExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let message: String?
}

extension ResourceLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceNotFoundException(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)), fargateProfileName: \(String(describing: fargateProfileName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension ResourceNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.fargateProfileName = output.fargateProfileName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.fargateProfileName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource could not be found. You can view your available clusters with
///                 <a>ListClusters</a>. You can view your available managed node groups with
///                 <a>ListNodegroups</a>. Amazon EKS clusters and node groups are
///             Region-specific.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var addonName: String?
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    /// <p>The Fargate profile associated with the exception.</p>
    public var fargateProfileName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil,
        fargateProfileName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ResourceNotFoundExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let fargateProfileName: String?
    public let addonName: String?
    public let message: String?
}

extension ResourceNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case clusterName
        case fargateProfileName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServerException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServerException(addonName: \(String(describing: addonName)), clusterName: \(String(describing: clusterName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)))"}
}

extension ServerException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ServerExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>These errors are usually caused by a server-side issue.</p>
public struct ServerException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var addonName: String?
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?

    public init (
        addonName: String? = nil,
        clusterName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ServerExceptionBody: Equatable {
    public let clusterName: String?
    public let nodegroupName: String?
    public let addonName: String?
    public let message: String?
}

extension ServerExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUnavailableException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceUnavailableException(message: \(String(describing: message)))"}
}

extension ServiceUnavailableException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service is unavailable. Back off and retry the operation.</p>
public struct ServiceUnavailableException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Equatable {
    public let message: String?
}

extension ServiceUnavailableExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceArn: \(String(describing: resourceArn)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the supported resources
    ///             are Amazon EKS clusters and managed node groups.</p>
    public let resourceArn: String?
    /// <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
    public let tags: [String:String]?

    public init (
        resourceArn: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let tags: [String:String]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Taint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case effect
        case key
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let effect = effect {
            try encodeContainer.encode(effect.rawValue, forKey: .effect)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let effectDecoded = try containerValues.decodeIfPresent(TaintEffect.self, forKey: .effect)
        effect = effectDecoded
    }
}

extension Taint: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Taint(effect: \(String(describing: effect)), key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>A property that allows a node to repel a set of pods.</p>
public struct Taint: Equatable {
    /// <p>The effect of the taint.</p>
    public let effect: TaintEffect?
    /// <p>The key of the taint.</p>
    public let key: String?
    /// <p>The value of the taint.</p>
    public let value: String?

    public init (
        effect: TaintEffect? = nil,
        key: String? = nil,
        value: String? = nil
    )
    {
        self.effect = effect
        self.key = key
        self.value = value
    }
}

public enum TaintEffect {
    case noExecute
    case noSchedule
    case preferNoSchedule
    case sdkUnknown(String)
}

extension TaintEffect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TaintEffect] {
        return [
            .noExecute,
            .noSchedule,
            .preferNoSchedule,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noExecute: return "NO_EXECUTE"
        case .noSchedule: return "NO_SCHEDULE"
        case .preferNoSchedule: return "PREFER_NO_SCHEDULE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TaintEffect(rawValue: rawValue) ?? TaintEffect.sdkUnknown(rawValue)
    }
}

extension UnsupportedAvailabilityZoneException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnsupportedAvailabilityZoneException(clusterName: \(String(describing: clusterName)), message: \(String(describing: message)), nodegroupName: \(String(describing: nodegroupName)), validZones: \(String(describing: validZones)))"}
}

extension UnsupportedAvailabilityZoneException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnsupportedAvailabilityZoneExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
            self.validZones = output.validZones
        } else {
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
            self.validZones = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>At least one of your specified cluster subnets is in an Availability Zone that does
///             not support Amazon EKS. The exception output specifies the supported Availability Zones for
///             your account, from which you can choose subnets for your cluster.</p>
public struct UnsupportedAvailabilityZoneException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The Amazon EKS cluster associated with the exception.</p>
    public var clusterName: String?
    public var message: String?
    /// <p>The Amazon EKS managed node group associated with the exception.</p>
    public var nodegroupName: String?
    /// <p>The supported Availability Zones for your account. Choose subnets in these
    ///             Availability Zones for your cluster.</p>
    public var validZones: [String]?

    public init (
        clusterName: String? = nil,
        message: String? = nil,
        nodegroupName: String? = nil,
        validZones: [String]? = nil
    )
    {
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
        self.validZones = validZones
    }
}

struct UnsupportedAvailabilityZoneExceptionBody: Equatable {
    public let message: String?
    public let clusterName: String?
    public let nodegroupName: String?
    public let validZones: [String]?
}

extension UnsupportedAvailabilityZoneExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterName
        case message
        case nodegroupName
        case validZones
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let validZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .validZones)
        var validZonesDecoded0:[String]? = nil
        if let validZonesContainer = validZonesContainer {
            validZonesDecoded0 = [String]()
            for string0 in validZonesContainer {
                if let string0 = string0 {
                    validZonesDecoded0?.append(string0)
                }
            }
        }
        validZones = validZonesDecoded0
    }
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceArn: \(String(describing: resourceArn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently, the supported
    ///             resources are Amazon EKS clusters and managed node groups.</p>
    public let resourceArn: String?
    /// <p>The keys of the tags to be removed.</p>
    public let tagKeys: [String]?

    public init (
        resourceArn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
}

extension UntagResourceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Update: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case errors
        case id
        case params
        case status
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errors = errors {
            var errorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errors)
            for errordetails0 in errors {
                try errorsContainer.encode(errordetails0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let params = params {
            var paramsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .params)
            for updateparams0 in params {
                try paramsContainer.encode(updateparams0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(UpdateStatus.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(UpdateType.self, forKey: .type)
        type = typeDecoded
        let paramsContainer = try containerValues.decodeIfPresent([UpdateParam?].self, forKey: .params)
        var paramsDecoded0:[UpdateParam]? = nil
        if let paramsContainer = paramsContainer {
            paramsDecoded0 = [UpdateParam]()
            for structure0 in paramsContainer {
                if let structure0 = structure0 {
                    paramsDecoded0?.append(structure0)
                }
            }
        }
        params = paramsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let errorsContainer = try containerValues.decodeIfPresent([ErrorDetail?].self, forKey: .errors)
        var errorsDecoded0:[ErrorDetail]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ErrorDetail]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension Update: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Update(createdAt: \(String(describing: createdAt)), errors: \(String(describing: errors)), id: \(String(describing: id)), params: \(String(describing: params)), status: \(String(describing: status)), type: \(String(describing: type)))"}
}

/// <p>An object representing an asynchronous update.</p>
public struct Update: Equatable {
    /// <p>The Unix epoch timestamp in seconds for when the update was created.</p>
    public let createdAt: Date?
    /// <p>Any errors associated with a <code>Failed</code> update.</p>
    public let errors: [ErrorDetail]?
    /// <p>A UUID that is used to track the update.</p>
    public let id: String?
    /// <p>A key-value map that contains the parameters associated with the update.</p>
    public let params: [UpdateParam]?
    /// <p>The current status of the update.</p>
    public let status: UpdateStatus?
    /// <p>The type of the update.</p>
    public let type: UpdateType?

    public init (
        createdAt: Date? = nil,
        errors: [ErrorDetail]? = nil,
        id: String? = nil,
        params: [UpdateParam]? = nil,
        status: UpdateStatus? = nil,
        type: UpdateType? = nil
    )
    {
        self.createdAt = createdAt
        self.errors = errors
        self.id = id
        self.params = params
        self.status = status
        self.type = type
    }
}

public struct UpdateAddonInputBodyMiddleware: Middleware {
    public let id: String = "UpdateAddonInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAddonInput>
    public typealias MOutput = OperationOutput<UpdateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAddonOutputError>
}

extension UpdateAddonInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAddonInput(addonName: \(String(describing: addonName)), addonVersion: \(String(describing: addonVersion)), clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), resolveConflicts: \(String(describing: resolveConflicts)), serviceAccountRoleArn: \(String(describing: serviceAccountRoleArn)))"}
}

extension UpdateAddonInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let resolveConflicts = resolveConflicts {
            try encodeContainer.encode(resolveConflicts.rawValue, forKey: .resolveConflicts)
        }
        if let serviceAccountRoleArn = serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
    }
}

public struct UpdateAddonInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateAddonInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAddonInput>
    public typealias MOutput = OperationOutput<UpdateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAddonOutputError>
}

public struct UpdateAddonInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateAddonInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAddonInput>
    public typealias MOutput = OperationOutput<UpdateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAddonOutputError>
}

public struct UpdateAddonInput: Equatable {
    /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
    ///                <code>ListAddons</code>
    ///             </a>.</p>
    public let addonName: String?
    /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
    ///                <code>DescribeAddonVersions</code>
    ///             </a>.</p>
    public let addonVersion: String?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the cluster.</p>
    public let clusterName: String?
    /// <p>How to resolve parameter value conflicts when applying the new version of the add-on
    ///             to the cluster.</p>
    public let resolveConflicts: ResolveConflicts?
    /// <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the
    ///      permissions assigned to the node IAM role. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p>
    ///         <note>
    ///             <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for
    ///                 your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html">Enabling
    ///                     IAM roles for service accounts on your cluster</a> in the
    ///                 <i>Amazon EKS User Guide</i>.</p>
    ///          </note>
    public let serviceAccountRoleArn: String?

    public init (
        addonName: String? = nil,
        addonVersion: String? = nil,
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        resolveConflicts: ResolveConflicts? = nil,
        serviceAccountRoleArn: String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.resolveConflicts = resolveConflicts
        self.serviceAccountRoleArn = serviceAccountRoleArn
    }
}

struct UpdateAddonInputBody: Equatable {
    public let addonVersion: String?
    public let serviceAccountRoleArn: String?
    public let resolveConflicts: ResolveConflicts?
    public let clientRequestToken: String?
}

extension UpdateAddonInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let resolveConflictsDecoded = try containerValues.decodeIfPresent(ResolveConflicts.self, forKey: .resolveConflicts)
        resolveConflicts = resolveConflictsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateAddonOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAddonOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAddonOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAddonOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateAddonOutputResponse(update: \(String(describing: update)))"}
}

extension UpdateAddonOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateAddonOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateAddonOutputResponse: Equatable {
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateAddonOutputResponseBody: Equatable {
    public let update: Update?
}

extension UpdateAddonOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

public struct UpdateClusterConfigInputBodyMiddleware: Middleware {
    public let id: String = "UpdateClusterConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateClusterConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateClusterConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateClusterConfigInput>
    public typealias MOutput = OperationOutput<UpdateClusterConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateClusterConfigOutputError>
}

extension UpdateClusterConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateClusterConfigInput(clientRequestToken: \(String(describing: clientRequestToken)), logging: \(String(describing: logging)), name: \(String(describing: name)), resourcesVpcConfig: \(String(describing: resourcesVpcConfig)))"}
}

extension UpdateClusterConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case logging
        case resourcesVpcConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let resourcesVpcConfig = resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
    }
}

public struct UpdateClusterConfigInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateClusterConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateClusterConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateClusterConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateClusterConfigInput>
    public typealias MOutput = OperationOutput<UpdateClusterConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateClusterConfigOutputError>
}

public struct UpdateClusterConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateClusterConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateClusterConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateClusterConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateClusterConfigInput>
    public typealias MOutput = OperationOutput<UpdateClusterConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateClusterConfigOutputError>
}

public struct UpdateClusterConfigInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>Enable or disable exporting the Kubernetes control plane logs for your cluster to
    ///             CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more
    ///             information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS Cluster Control Plane Logs</a> in the
    ///                 <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    ///         <note>
    ///             <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
    ///                 control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
    ///         </note>
    public let logging: Logging?
    /// <p>The name of the Amazon EKS cluster to update.</p>
    public let name: String?
    /// <p>An object representing the VPC configuration to use for an Amazon EKS cluster.</p>
    public let resourcesVpcConfig: VpcConfigRequest?

    public init (
        clientRequestToken: String? = nil,
        logging: Logging? = nil,
        name: String? = nil,
        resourcesVpcConfig: VpcConfigRequest? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.logging = logging
        self.name = name
        self.resourcesVpcConfig = resourcesVpcConfig
    }
}

struct UpdateClusterConfigInputBody: Equatable {
    public let resourcesVpcConfig: VpcConfigRequest?
    public let logging: Logging?
    public let clientRequestToken: String?
}

extension UpdateClusterConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case logging
        case resourcesVpcConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfigRequest.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(Logging.self, forKey: .logging)
        logging = loggingDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateClusterConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateClusterConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateClusterConfigOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateClusterConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateClusterConfigOutputResponse(update: \(String(describing: update)))"}
}

extension UpdateClusterConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateClusterConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateClusterConfigOutputResponse: Equatable {
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateClusterConfigOutputResponseBody: Equatable {
    public let update: Update?
}

extension UpdateClusterConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

public struct UpdateClusterVersionInputBodyMiddleware: Middleware {
    public let id: String = "UpdateClusterVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateClusterVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateClusterVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateClusterVersionInput>
    public typealias MOutput = OperationOutput<UpdateClusterVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateClusterVersionOutputError>
}

extension UpdateClusterVersionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateClusterVersionInput(clientRequestToken: \(String(describing: clientRequestToken)), name: \(String(describing: name)), version: \(String(describing: version)))"}
}

extension UpdateClusterVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct UpdateClusterVersionInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateClusterVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateClusterVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateClusterVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateClusterVersionInput>
    public typealias MOutput = OperationOutput<UpdateClusterVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateClusterVersionOutputError>
}

public struct UpdateClusterVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateClusterVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateClusterVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateClusterVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateClusterVersionInput>
    public typealias MOutput = OperationOutput<UpdateClusterVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateClusterVersionOutputError>
}

public struct UpdateClusterVersionInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the Amazon EKS cluster to update.</p>
    public let name: String?
    /// <p>The desired Kubernetes version following a successful update.</p>
    public let version: String?

    public init (
        clientRequestToken: String? = nil,
        name: String? = nil,
        version: String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.version = version
    }
}

struct UpdateClusterVersionInputBody: Equatable {
    public let version: String?
    public let clientRequestToken: String?
}

extension UpdateClusterVersionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateClusterVersionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateClusterVersionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateClusterVersionOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateClusterVersionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateClusterVersionOutputResponse(update: \(String(describing: update)))"}
}

extension UpdateClusterVersionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateClusterVersionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateClusterVersionOutputResponse: Equatable {
    /// <p>The full description of the specified update</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateClusterVersionOutputResponseBody: Equatable {
    public let update: Update?
}

extension UpdateClusterVersionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension UpdateLabelsPayload: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addOrUpdateLabels
        case removeLabels
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOrUpdateLabels = addOrUpdateLabels {
            var addOrUpdateLabelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .addOrUpdateLabels)
            for (dictKey0, labelsmap0) in addOrUpdateLabels {
                try addOrUpdateLabelsContainer.encode(labelsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let removeLabels = removeLabels {
            var removeLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeLabels)
            for labelskeylist0 in removeLabels {
                try removeLabelsContainer.encode(labelskeylist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOrUpdateLabelsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .addOrUpdateLabels)
        var addOrUpdateLabelsDecoded0: [String:String]? = nil
        if let addOrUpdateLabelsContainer = addOrUpdateLabelsContainer {
            addOrUpdateLabelsDecoded0 = [String:String]()
            for (key0, labelvalue0) in addOrUpdateLabelsContainer {
                if let labelvalue0 = labelvalue0 {
                    addOrUpdateLabelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        addOrUpdateLabels = addOrUpdateLabelsDecoded0
        let removeLabelsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .removeLabels)
        var removeLabelsDecoded0:[String]? = nil
        if let removeLabelsContainer = removeLabelsContainer {
            removeLabelsDecoded0 = [String]()
            for string0 in removeLabelsContainer {
                if let string0 = string0 {
                    removeLabelsDecoded0?.append(string0)
                }
            }
        }
        removeLabels = removeLabelsDecoded0
    }
}

extension UpdateLabelsPayload: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateLabelsPayload(addOrUpdateLabels: \(String(describing: addOrUpdateLabels)), removeLabels: \(String(describing: removeLabels)))"}
}

/// <p>An object representing a Kubernetes label change for a managed node group.</p>
public struct UpdateLabelsPayload: Equatable {
    /// <p>Kubernetes labels to be added or updated.</p>
    public let addOrUpdateLabels: [String:String]?
    /// <p>Kubernetes labels to be removed.</p>
    public let removeLabels: [String]?

    public init (
        addOrUpdateLabels: [String:String]? = nil,
        removeLabels: [String]? = nil
    )
    {
        self.addOrUpdateLabels = addOrUpdateLabels
        self.removeLabels = removeLabels
    }
}

public struct UpdateNodegroupConfigInputBodyMiddleware: Middleware {
    public let id: String = "UpdateNodegroupConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodegroupConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodegroupConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodegroupConfigInput>
    public typealias MOutput = OperationOutput<UpdateNodegroupConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodegroupConfigOutputError>
}

extension UpdateNodegroupConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateNodegroupConfigInput(clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), labels: \(String(describing: labels)), nodegroupName: \(String(describing: nodegroupName)), scalingConfig: \(String(describing: scalingConfig)), taints: \(String(describing: taints)))"}
}

extension UpdateNodegroupConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case labels
        case scalingConfig
        case taints
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let labels = labels {
            try encodeContainer.encode(labels, forKey: .labels)
        }
        if let scalingConfig = scalingConfig {
            try encodeContainer.encode(scalingConfig, forKey: .scalingConfig)
        }
        if let taints = taints {
            try encodeContainer.encode(taints, forKey: .taints)
        }
    }
}

public struct UpdateNodegroupConfigInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateNodegroupConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodegroupConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodegroupConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodegroupConfigInput>
    public typealias MOutput = OperationOutput<UpdateNodegroupConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodegroupConfigOutputError>
}

public struct UpdateNodegroupConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateNodegroupConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodegroupConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodegroupConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodegroupConfigInput>
    public typealias MOutput = OperationOutput<UpdateNodegroupConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodegroupConfigOutputError>
}

public struct UpdateNodegroupConfigInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
    public let clusterName: String?
    /// <p>The Kubernetes labels to be applied to the nodes in the node group after the
    ///             update.</p>
    public let labels: UpdateLabelsPayload?
    /// <p>The name of the managed node group to update.</p>
    public let nodegroupName: String?
    /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
    public let scalingConfig: NodegroupScalingConfig?
    /// <p>The Kubernetes taints to be applied to the nodes in the node group after the
    ///             update.</p>
    public let taints: UpdateTaintsPayload?

    public init (
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        labels: UpdateLabelsPayload? = nil,
        nodegroupName: String? = nil,
        scalingConfig: NodegroupScalingConfig? = nil,
        taints: UpdateTaintsPayload? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.labels = labels
        self.nodegroupName = nodegroupName
        self.scalingConfig = scalingConfig
        self.taints = taints
    }
}

struct UpdateNodegroupConfigInputBody: Equatable {
    public let labels: UpdateLabelsPayload?
    public let taints: UpdateTaintsPayload?
    public let scalingConfig: NodegroupScalingConfig?
    public let clientRequestToken: String?
}

extension UpdateNodegroupConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case labels
        case scalingConfig
        case taints
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsDecoded = try containerValues.decodeIfPresent(UpdateLabelsPayload.self, forKey: .labels)
        labels = labelsDecoded
        let taintsDecoded = try containerValues.decodeIfPresent(UpdateTaintsPayload.self, forKey: .taints)
        taints = taintsDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateNodegroupConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNodegroupConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNodegroupConfigOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNodegroupConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateNodegroupConfigOutputResponse(update: \(String(describing: update)))"}
}

extension UpdateNodegroupConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateNodegroupConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateNodegroupConfigOutputResponse: Equatable {
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateNodegroupConfigOutputResponseBody: Equatable {
    public let update: Update?
}

extension UpdateNodegroupConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

public struct UpdateNodegroupVersionInputBodyMiddleware: Middleware {
    public let id: String = "UpdateNodegroupVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodegroupVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodegroupVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodegroupVersionInput>
    public typealias MOutput = OperationOutput<UpdateNodegroupVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodegroupVersionOutputError>
}

extension UpdateNodegroupVersionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateNodegroupVersionInput(clientRequestToken: \(String(describing: clientRequestToken)), clusterName: \(String(describing: clusterName)), force: \(String(describing: force)), launchTemplate: \(String(describing: launchTemplate)), nodegroupName: \(String(describing: nodegroupName)), releaseVersion: \(String(describing: releaseVersion)), version: \(String(describing: version)))"}
}

extension UpdateNodegroupVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case force
        case launchTemplate
        case releaseVersion
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if force != false {
            try encodeContainer.encode(force, forKey: .force)
        }
        if let launchTemplate = launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let releaseVersion = releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct UpdateNodegroupVersionInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateNodegroupVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodegroupVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodegroupVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodegroupVersionInput>
    public typealias MOutput = OperationOutput<UpdateNodegroupVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodegroupVersionOutputError>
}

public struct UpdateNodegroupVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateNodegroupVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodegroupVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodegroupVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodegroupVersionInput>
    public typealias MOutput = OperationOutput<UpdateNodegroupVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodegroupVersionOutputError>
}

public struct UpdateNodegroupVersionInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request.</p>
    public var clientRequestToken: String?
    /// <p>The name of the Amazon EKS cluster that is associated with the managed node group to
    ///             update.</p>
    public let clusterName: String?
    /// <p>Force the update if the existing node group's pods are unable to be drained due to a
    ///             pod disruption budget issue. If an update fails because pods could not be drained, you
    ///             can force the update after it fails to terminate the old node whether or not any pods
    ///             are running on the node.</p>
    public let force: Bool
    /// <p>An object representing a node group's launch template specification. You can only
    ///             update a node group using a launch template if the node group was originally deployed
    ///             with a launch template.</p>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The name of the managed node group to update.</p>
    public let nodegroupName: String?
    /// <p>The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the
    ///             latest available AMI version for the node group's Kubernetes version is used. For more
    ///             information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS optimized Amazon Linux 2 AMI versions </a> in the
    ///             <i>Amazon EKS User Guide</i>. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify
    ///                 <code>releaseVersion</code>, or the node group  update will fail.
    ///             For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let releaseVersion: String?
    /// <p>The Kubernetes version to update to. If no version is specified, then the Kubernetes
    ///             version of the node group does not change. You can specify the Kubernetes version of the
    ///             cluster to update the node group to the latest AMI version of the cluster's Kubernetes
    ///             version. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify
    ///                 <code>version</code>, or the node group  update will fail.
    ///             For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
    public let version: String?

    public init (
        clientRequestToken: String? = nil,
        clusterName: String? = nil,
        force: Bool = false,
        launchTemplate: LaunchTemplateSpecification? = nil,
        nodegroupName: String? = nil,
        releaseVersion: String? = nil,
        version: String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.force = force
        self.launchTemplate = launchTemplate
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.version = version
    }
}

struct UpdateNodegroupVersionInputBody: Equatable {
    public let version: String?
    public let releaseVersion: String?
    public let launchTemplate: LaunchTemplateSpecification?
    public let force: Bool
    public let clientRequestToken: String?
}

extension UpdateNodegroupVersionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case force
        case launchTemplate
        case releaseVersion
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let forceDecoded = try containerValues.decode(Bool.self, forKey: .force)
        force = forceDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateNodegroupVersionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNodegroupVersionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNodegroupVersionOutputError: Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNodegroupVersionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateNodegroupVersionOutputResponse(update: \(String(describing: update)))"}
}

extension UpdateNodegroupVersionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateNodegroupVersionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateNodegroupVersionOutputResponse: Equatable {
    /// <p>An object representing an asynchronous update.</p>
    public let update: Update?

    public init (
        update: Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateNodegroupVersionOutputResponseBody: Equatable {
    public let update: Update?
}

extension UpdateNodegroupVersionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case update
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension UpdateParam: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(UpdateParamType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension UpdateParam: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateParam(type: \(String(describing: type)), value: \(String(describing: value)))"}
}

/// <p>An object representing the details of an update request.</p>
public struct UpdateParam: Equatable {
    /// <p>The keys associated with an update request.</p>
    public let type: UpdateParamType?
    /// <p>The value of the keys submitted as part of an update request.</p>
    public let value: String?

    public init (
        type: UpdateParamType? = nil,
        value: String? = nil
    )
    {
        self.type = type
        self.value = value
    }
}

public enum UpdateParamType {
    case addonVersion
    case clusterLogging
    case desiredSize
    case encryptionConfig
    case endpointPrivateAccess
    case endpointPublicAccess
    case identityProviderConfig
    case labelsToAdd
    case labelsToRemove
    case launchTemplateName
    case launchTemplateVersion
    case maxSize
    case minSize
    case platformVersion
    case publicAccessCidrs
    case releaseVersion
    case resolveConflicts
    case serviceAccountRoleArn
    case taintsToAdd
    case taintsToRemove
    case version
    case sdkUnknown(String)
}

extension UpdateParamType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [UpdateParamType] {
        return [
            .addonVersion,
            .clusterLogging,
            .desiredSize,
            .encryptionConfig,
            .endpointPrivateAccess,
            .endpointPublicAccess,
            .identityProviderConfig,
            .labelsToAdd,
            .labelsToRemove,
            .launchTemplateName,
            .launchTemplateVersion,
            .maxSize,
            .minSize,
            .platformVersion,
            .publicAccessCidrs,
            .releaseVersion,
            .resolveConflicts,
            .serviceAccountRoleArn,
            .taintsToAdd,
            .taintsToRemove,
            .version,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .addonVersion: return "AddonVersion"
        case .clusterLogging: return "ClusterLogging"
        case .desiredSize: return "DesiredSize"
        case .encryptionConfig: return "EncryptionConfig"
        case .endpointPrivateAccess: return "EndpointPrivateAccess"
        case .endpointPublicAccess: return "EndpointPublicAccess"
        case .identityProviderConfig: return "IdentityProviderConfig"
        case .labelsToAdd: return "LabelsToAdd"
        case .labelsToRemove: return "LabelsToRemove"
        case .launchTemplateName: return "LaunchTemplateName"
        case .launchTemplateVersion: return "LaunchTemplateVersion"
        case .maxSize: return "MaxSize"
        case .minSize: return "MinSize"
        case .platformVersion: return "PlatformVersion"
        case .publicAccessCidrs: return "PublicAccessCidrs"
        case .releaseVersion: return "ReleaseVersion"
        case .resolveConflicts: return "ResolveConflicts"
        case .serviceAccountRoleArn: return "ServiceAccountRoleArn"
        case .taintsToAdd: return "TaintsToAdd"
        case .taintsToRemove: return "TaintsToRemove"
        case .version: return "Version"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = UpdateParamType(rawValue: rawValue) ?? UpdateParamType.sdkUnknown(rawValue)
    }
}

public enum UpdateStatus {
    case cancelled
    case failed
    case inProgress
    case successful
    case sdkUnknown(String)
}

extension UpdateStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [UpdateStatus] {
        return [
            .cancelled,
            .failed,
            .inProgress,
            .successful,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "Cancelled"
        case .failed: return "Failed"
        case .inProgress: return "InProgress"
        case .successful: return "Successful"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = UpdateStatus(rawValue: rawValue) ?? UpdateStatus.sdkUnknown(rawValue)
    }
}

extension UpdateTaintsPayload: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addOrUpdateTaints
        case removeTaints
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOrUpdateTaints = addOrUpdateTaints {
            var addOrUpdateTaintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOrUpdateTaints)
            for taintslist0 in addOrUpdateTaints {
                try addOrUpdateTaintsContainer.encode(taintslist0)
            }
        }
        if let removeTaints = removeTaints {
            var removeTaintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeTaints)
            for taintslist0 in removeTaints {
                try removeTaintsContainer.encode(taintslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOrUpdateTaintsContainer = try containerValues.decodeIfPresent([Taint?].self, forKey: .addOrUpdateTaints)
        var addOrUpdateTaintsDecoded0:[Taint]? = nil
        if let addOrUpdateTaintsContainer = addOrUpdateTaintsContainer {
            addOrUpdateTaintsDecoded0 = [Taint]()
            for structure0 in addOrUpdateTaintsContainer {
                if let structure0 = structure0 {
                    addOrUpdateTaintsDecoded0?.append(structure0)
                }
            }
        }
        addOrUpdateTaints = addOrUpdateTaintsDecoded0
        let removeTaintsContainer = try containerValues.decodeIfPresent([Taint?].self, forKey: .removeTaints)
        var removeTaintsDecoded0:[Taint]? = nil
        if let removeTaintsContainer = removeTaintsContainer {
            removeTaintsDecoded0 = [Taint]()
            for structure0 in removeTaintsContainer {
                if let structure0 = structure0 {
                    removeTaintsDecoded0?.append(structure0)
                }
            }
        }
        removeTaints = removeTaintsDecoded0
    }
}

extension UpdateTaintsPayload: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTaintsPayload(addOrUpdateTaints: \(String(describing: addOrUpdateTaints)), removeTaints: \(String(describing: removeTaints)))"}
}

/// <p>An object representing the details of an update to a taints payload.</p>
public struct UpdateTaintsPayload: Equatable {
    /// <p>Kubernetes taints to be added or updated.</p>
    public let addOrUpdateTaints: [Taint]?
    /// <p>Kubernetes taints to be removed.</p>
    public let removeTaints: [Taint]?

    public init (
        addOrUpdateTaints: [Taint]? = nil,
        removeTaints: [Taint]? = nil
    )
    {
        self.addOrUpdateTaints = addOrUpdateTaints
        self.removeTaints = removeTaints
    }
}

public enum UpdateType {
    case addonUpdate
    case associateEncryptionConfig
    case associateIdentityProviderConfig
    case configUpdate
    case disassociateIdentityProviderConfig
    case endpointAccessUpdate
    case loggingUpdate
    case versionUpdate
    case sdkUnknown(String)
}

extension UpdateType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [UpdateType] {
        return [
            .addonUpdate,
            .associateEncryptionConfig,
            .associateIdentityProviderConfig,
            .configUpdate,
            .disassociateIdentityProviderConfig,
            .endpointAccessUpdate,
            .loggingUpdate,
            .versionUpdate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .addonUpdate: return "AddonUpdate"
        case .associateEncryptionConfig: return "AssociateEncryptionConfig"
        case .associateIdentityProviderConfig: return "AssociateIdentityProviderConfig"
        case .configUpdate: return "ConfigUpdate"
        case .disassociateIdentityProviderConfig: return "DisassociateIdentityProviderConfig"
        case .endpointAccessUpdate: return "EndpointAccessUpdate"
        case .loggingUpdate: return "LoggingUpdate"
        case .versionUpdate: return "VersionUpdate"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = UpdateType(rawValue: rawValue) ?? UpdateType.sdkUnknown(rawValue)
    }
}

extension VpcConfigRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endpointPrivateAccess
        case endpointPublicAccess
        case publicAccessCidrs
        case securityGroupIds
        case subnetIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointPrivateAccess = endpointPrivateAccess {
            try encodeContainer.encode(endpointPrivateAccess, forKey: .endpointPrivateAccess)
        }
        if let endpointPublicAccess = endpointPublicAccess {
            try encodeContainer.encode(endpointPublicAccess, forKey: .endpointPublicAccess)
        }
        if let publicAccessCidrs = publicAccessCidrs {
            var publicAccessCidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAccessCidrs)
            for stringlist0 in publicAccessCidrs {
                try publicAccessCidrsContainer.encode(stringlist0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for stringlist0 in subnetIds {
                try subnetIdsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let endpointPublicAccessDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .endpointPublicAccess)
        endpointPublicAccess = endpointPublicAccessDecoded
        let endpointPrivateAccessDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .endpointPrivateAccess)
        endpointPrivateAccess = endpointPrivateAccessDecoded
        let publicAccessCidrsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .publicAccessCidrs)
        var publicAccessCidrsDecoded0:[String]? = nil
        if let publicAccessCidrsContainer = publicAccessCidrsContainer {
            publicAccessCidrsDecoded0 = [String]()
            for string0 in publicAccessCidrsContainer {
                if let string0 = string0 {
                    publicAccessCidrsDecoded0?.append(string0)
                }
            }
        }
        publicAccessCidrs = publicAccessCidrsDecoded0
    }
}

extension VpcConfigRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcConfigRequest(endpointPrivateAccess: \(String(describing: endpointPrivateAccess)), endpointPublicAccess: \(String(describing: endpointPublicAccess)), publicAccessCidrs: \(String(describing: publicAccessCidrs)), securityGroupIds: \(String(describing: securityGroupIds)), subnetIds: \(String(describing: subnetIds)))"}
}

/// <p>An object representing the VPC configuration to use for an Amazon EKS cluster.</p>
public struct VpcConfigRequest: Equatable {
    /// <p>Set this value to <code>true</code> to enable private access for your cluster's
    ///             Kubernetes API server endpoint. If you enable private access, Kubernetes API requests
    ///             from within your cluster's VPC use the private VPC endpoint. The default value for this
    ///             parameter is <code>false</code>, which disables private access for your Kubernetes API
    ///             server. If you disable private access and you have nodes or AWS Fargate pods in the
    ///             cluster, then ensure that <code>publicAccessCidrs</code> includes the necessary CIDR
    ///             blocks for communication with the nodes or Fargate pods. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html">Amazon EKS Cluster
    ///                 Endpoint Access Control</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let endpointPrivateAccess: Bool?
    /// <p>Set this value to <code>false</code> to disable public access to your cluster's
    ///             Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes
    ///             API server can only receive requests from within the cluster VPC. The default value for
    ///             this parameter is <code>true</code>, which enables public access for your Kubernetes API
    ///             server. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html">Amazon EKS Cluster
    ///                 Endpoint Access Control</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let endpointPublicAccess: Bool?
    /// <p>The CIDR blocks that are allowed access to your cluster's public Kubernetes API server
    ///             endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that
    ///             you specify is denied. The default value is <code>0.0.0.0/0</code>. If you've disabled
    ///             private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure
    ///             that you specify the necessary CIDR blocks. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html">Amazon EKS Cluster
    ///                 Endpoint Access Control</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let publicAccessCidrs: [String]?
    /// <p>Specify one or more security groups for the cross-account elastic network interfaces
    ///             that Amazon EKS creates to use to allow communication between your nodes and the Kubernetes
    ///             control plane. If you don't specify any security groups, then familiarize yourself with
    ///             the difference between Amazon EKS defaults for clusters deployed with Kubernetes:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>1.14 Amazon EKS platform version <code>eks.2</code> and earlier</p>
    ///             </li>
    ///             <li>
    ///                 <p>1.14 Amazon EKS platform version <code>eks.3</code> and later </p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Amazon EKS security group
    ///                 considerations</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let securityGroupIds: [String]?
    /// <p>Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network
    ///             interfaces in these subnets to allow communication between your nodes and the Kubernetes
    ///             control plane.</p>
    public let subnetIds: [String]?

    public init (
        endpointPrivateAccess: Bool? = nil,
        endpointPublicAccess: Bool? = nil,
        publicAccessCidrs: [String]? = nil,
        securityGroupIds: [String]? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.endpointPrivateAccess = endpointPrivateAccess
        self.endpointPublicAccess = endpointPublicAccess
        self.publicAccessCidrs = publicAccessCidrs
        self.securityGroupIds = securityGroupIds
        self.subnetIds = subnetIds
    }
}

extension VpcConfigResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterSecurityGroupId
        case endpointPrivateAccess
        case endpointPublicAccess
        case publicAccessCidrs
        case securityGroupIds
        case subnetIds
        case vpcId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterSecurityGroupId = clusterSecurityGroupId {
            try encodeContainer.encode(clusterSecurityGroupId, forKey: .clusterSecurityGroupId)
        }
        if endpointPrivateAccess != false {
            try encodeContainer.encode(endpointPrivateAccess, forKey: .endpointPrivateAccess)
        }
        if endpointPublicAccess != false {
            try encodeContainer.encode(endpointPublicAccess, forKey: .endpointPublicAccess)
        }
        if let publicAccessCidrs = publicAccessCidrs {
            var publicAccessCidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAccessCidrs)
            for stringlist0 in publicAccessCidrs {
                try publicAccessCidrsContainer.encode(stringlist0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for stringlist0 in subnetIds {
                try subnetIdsContainer.encode(stringlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let clusterSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterSecurityGroupId)
        clusterSecurityGroupId = clusterSecurityGroupIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let endpointPublicAccessDecoded = try containerValues.decode(Bool.self, forKey: .endpointPublicAccess)
        endpointPublicAccess = endpointPublicAccessDecoded
        let endpointPrivateAccessDecoded = try containerValues.decode(Bool.self, forKey: .endpointPrivateAccess)
        endpointPrivateAccess = endpointPrivateAccessDecoded
        let publicAccessCidrsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .publicAccessCidrs)
        var publicAccessCidrsDecoded0:[String]? = nil
        if let publicAccessCidrsContainer = publicAccessCidrsContainer {
            publicAccessCidrsDecoded0 = [String]()
            for string0 in publicAccessCidrsContainer {
                if let string0 = string0 {
                    publicAccessCidrsDecoded0?.append(string0)
                }
            }
        }
        publicAccessCidrs = publicAccessCidrsDecoded0
    }
}

extension VpcConfigResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VpcConfigResponse(clusterSecurityGroupId: \(String(describing: clusterSecurityGroupId)), endpointPrivateAccess: \(String(describing: endpointPrivateAccess)), endpointPublicAccess: \(String(describing: endpointPublicAccess)), publicAccessCidrs: \(String(describing: publicAccessCidrs)), securityGroupIds: \(String(describing: securityGroupIds)), subnetIds: \(String(describing: subnetIds)), vpcId: \(String(describing: vpcId)))"}
}

/// <p>An object representing an Amazon EKS cluster VPC configuration response.</p>
public struct VpcConfigResponse: Equatable {
    /// <p>The cluster security group that was created by Amazon EKS for the cluster. Managed node
    ///             groups use this security group for control-plane-to-data-plane communication.</p>
    public let clusterSecurityGroupId: String?
    /// <p>This parameter indicates whether the Amazon EKS private API server endpoint is enabled. If
    ///             the Amazon EKS private API server endpoint is enabled, Kubernetes API requests that originate
    ///             from within your cluster's VPC use the private VPC endpoint instead of traversing the
    ///             internet. If this value is disabled and you have nodes or AWS Fargate pods in the cluster,
    ///             then ensure that <code>publicAccessCidrs</code> includes the necessary CIDR blocks for
    ///             communication with the nodes or Fargate pods. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html">Amazon EKS Cluster
    ///                 Endpoint Access Control</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let endpointPrivateAccess: Bool
    /// <p>This parameter indicates whether the Amazon EKS public API server endpoint is enabled. If
    ///             the Amazon EKS public API server endpoint is disabled, your cluster's Kubernetes API server
    ///             can only receive requests that originate from within the cluster VPC.</p>
    public let endpointPublicAccess: Bool
    /// <p>The CIDR blocks that are allowed access to your cluster's public Kubernetes API server
    ///             endpoint. Communication to the endpoint from addresses outside of the listed CIDR blocks
    ///             is denied. The default value is <code>0.0.0.0/0</code>. If you've disabled private
    ///             endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that the
    ///             necessary CIDR blocks are listed. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html">Amazon EKS Cluster
    ///                 Endpoint Access Control</a> in the <i>
    ///                <i>Amazon EKS User Guide</i>
    ///             </i>.</p>
    public let publicAccessCidrs: [String]?
    /// <p>The security groups associated with the cross-account elastic network interfaces that
    ///             are used to allow communication between your nodes and the Kubernetes control
    ///             plane.</p>
    public let securityGroupIds: [String]?
    /// <p>The subnets associated with your cluster.</p>
    public let subnetIds: [String]?
    /// <p>The VPC associated with your cluster.</p>
    public let vpcId: String?

    public init (
        clusterSecurityGroupId: String? = nil,
        endpointPrivateAccess: Bool = false,
        endpointPublicAccess: Bool = false,
        publicAccessCidrs: [String]? = nil,
        securityGroupIds: [String]? = nil,
        subnetIds: [String]? = nil,
        vpcId: String? = nil
    )
    {
        self.clusterSecurityGroupId = clusterSecurityGroupId
        self.endpointPrivateAccess = endpointPrivateAccess
        self.endpointPublicAccess = endpointPublicAccess
        self.publicAccessCidrs = publicAccessCidrs
        self.securityGroupIds = securityGroupIds
        self.subnetIds = subnetIds
        self.vpcId = vpcId
    }
}
