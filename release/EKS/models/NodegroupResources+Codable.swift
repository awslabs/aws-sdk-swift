// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NodegroupResources: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroups
        case remoteAccessSecurityGroup
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggrouplist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggrouplist0)
            }
        }
        if let remoteAccessSecurityGroup = remoteAccessSecurityGroup {
            try encodeContainer.encode(remoteAccessSecurityGroup, forKey: .remoteAccessSecurityGroup)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([AutoScalingGroup].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[AutoScalingGroup]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [AutoScalingGroup]()
            for structure0 in autoScalingGroupsContainer {
                autoScalingGroupsDecoded0?.append(structure0)
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let remoteAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .remoteAccessSecurityGroup)
        remoteAccessSecurityGroup = remoteAccessSecurityGroupDecoded
    }
}
