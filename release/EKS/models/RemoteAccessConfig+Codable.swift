// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RemoteAccessConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ec2SshKey
        case sourceSecurityGroups
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2SshKey = ec2SshKey {
            try encodeContainer.encode(ec2SshKey, forKey: .ec2SshKey)
        }
        if let sourceSecurityGroups = sourceSecurityGroups {
            var sourceSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceSecurityGroups)
            for stringlist0 in sourceSecurityGroups {
                try sourceSecurityGroupsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2SshKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SshKey)
        ec2SshKey = ec2SshKeyDecoded
        let sourceSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .sourceSecurityGroups)
        var sourceSecurityGroupsDecoded0:[String]? = nil
        if let sourceSecurityGroupsContainer = sourceSecurityGroupsContainer {
            sourceSecurityGroupsDecoded0 = [String]()
            for string0 in sourceSecurityGroupsContainer {
                sourceSecurityGroupsDecoded0?.append(string0)
            }
        }
        sourceSecurityGroups = sourceSecurityGroupsDecoded0
    }
}
