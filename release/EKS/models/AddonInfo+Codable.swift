// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AddonInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersions
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersions = addonVersions {
            var addonVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addonVersions)
            for addonversioninfolist0 in addonVersions {
                try addonVersionsContainer.encode(addonversioninfolist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let addonVersionsContainer = try containerValues.decodeIfPresent([AddonVersionInfo].self, forKey: .addonVersions)
        var addonVersionsDecoded0:[AddonVersionInfo]? = nil
        if let addonVersionsContainer = addonVersionsContainer {
            addonVersionsDecoded0 = [AddonVersionInfo]()
            for structure0 in addonVersionsContainer {
                addonVersionsDecoded0?.append(structure0)
            }
        }
        addonVersions = addonVersionsDecoded0
    }
}
