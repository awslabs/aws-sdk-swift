// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object representing an OpenID Connect (OIDC) configuration. Before associating an
///             OIDC identity provider to your cluster, review the considerations in <a href="https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html">Authenticating
///                 users for your cluster from an OpenID Connect identity provider</a> in the
///             <i>Amazon EKS User Guide</i>.</p>
public struct OidcIdentityProviderConfigRequest: Equatable {
    /// <p>This is also known as <i>audience</i>. The ID for the client application
    ///             that makes authentication requests to the OpenID identity provider.</p>
    public let clientId: String?
    /// <p>The JWT claim that the provider uses to return your groups.</p>
    public let groupsClaim: String?
    /// <p>The prefix that is prepended to group claims to prevent clashes with existing names
    ///             (such as <code>system:</code> groups). For example, the value<code> oidc:</code> will
    ///             create group names like <code>oidc:engineering</code> and
    ///             <code>oidc:infra</code>.</p>
    public let groupsPrefix: String?
    /// <p>The name of the OIDC provider configuration.</p>
    public let identityProviderConfigName: String?
    /// <p>The URL of the OpenID identity provider that allows the API server to discover public
    ///             signing keys for verifying tokens. The URL must begin with <code>https://</code> and
    ///             should correspond to the <code>iss</code> claim in the provider's OIDC ID tokens. Per
    ///             the OIDC standard, path components are allowed but query parameters are not. Typically
    ///             the URL consists of only a hostname, like <code>https://server.example.org</code> or
    ///                 <code>https://example.com</code>. This URL should point to the level below
    ///                 <code>.well-known/openid-configuration</code> and must be publicly accessible over
    ///             the internet.</p>
    public let issuerUrl: String?
    /// <p>The key value pairs that describe required claims in the identity token. If set, each
    ///             claim is verified to be present in the token with a matching value. For the maximum
    ///             number of claims that you can require, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html">Amazon EKS service quotas</a> in the
    ///             <i>Amazon EKS User Guide</i>.</p>
    public let requiredClaims: [String:String]?
    /// <p>The JSON Web Token (JWT) claim to use as the username. The default is
    ///             <code>sub</code>, which is expected to be a unique identifier of the end user. You can
    ///             choose other claims, such as <code>email</code> or <code>name</code>, depending on the
    ///             OpenID identity provider. Claims other than <code>email</code> are prefixed with the
    ///             issuer URL to prevent naming clashes with other plug-ins.</p>
    public let usernameClaim: String?
    /// <p>The prefix that is prepended to username claims to prevent clashes with existing
    ///             names. If you do not provide this field, and <code>username</code> is a value other than
    ///                 <code>email</code>, the prefix defaults to <code>issuerurl#</code>. You can use the
    ///             value <code>-</code> to disable all prefixing.</p>
    public let usernamePrefix: String?

    public init (
        clientId: String? = nil,
        groupsClaim: String? = nil,
        groupsPrefix: String? = nil,
        identityProviderConfigName: String? = nil,
        issuerUrl: String? = nil,
        requiredClaims: [String:String]? = nil,
        usernameClaim: String? = nil,
        usernamePrefix: String? = nil
    )
    {
        self.clientId = clientId
        self.groupsClaim = groupsClaim
        self.groupsPrefix = groupsPrefix
        self.identityProviderConfigName = identityProviderConfigName
        self.issuerUrl = issuerUrl
        self.requiredClaims = requiredClaims
        self.usernameClaim = usernameClaim
        self.usernamePrefix = usernamePrefix
    }
}
