// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Cluster: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case certificateAuthority
        case clientRequestToken
        case createdAt
        case encryptionConfig
        case endpoint
        case identity
        case kubernetesNetworkConfig
        case logging
        case name
        case platformVersion
        case resourcesVpcConfig
        case roleArn
        case status
        case tags
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthority = certificateAuthority {
            try encodeContainer.encode(certificateAuthority, forKey: .certificateAuthority)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfiglist0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfiglist0)
            }
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let identity = identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let kubernetesNetworkConfig = kubernetesNetworkConfig {
            try encodeContainer.encode(kubernetesNetworkConfig, forKey: .kubernetesNetworkConfig)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platformVersion = platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let resourcesVpcConfig = resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfigResponse.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let kubernetesNetworkConfigDecoded = try containerValues.decodeIfPresent(KubernetesNetworkConfigResponse.self, forKey: .kubernetesNetworkConfig)
        kubernetesNetworkConfig = kubernetesNetworkConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(Logging.self, forKey: .logging)
        logging = loggingDecoded
        let identityDecoded = try containerValues.decodeIfPresent(Identity.self, forKey: .identity)
        identity = identityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let certificateAuthorityDecoded = try containerValues.decodeIfPresent(Certificate.self, forKey: .certificateAuthority)
        certificateAuthority = certificateAuthorityDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EncryptionConfig].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                encryptionConfigDecoded0?.append(structure0)
            }
        }
        encryptionConfig = encryptionConfigDecoded0
    }
}
