// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VpcConfigRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endpointPrivateAccess
        case endpointPublicAccess
        case publicAccessCidrs
        case securityGroupIds
        case subnetIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointPrivateAccess = endpointPrivateAccess {
            try encodeContainer.encode(endpointPrivateAccess, forKey: .endpointPrivateAccess)
        }
        if let endpointPublicAccess = endpointPublicAccess {
            try encodeContainer.encode(endpointPublicAccess, forKey: .endpointPublicAccess)
        }
        if let publicAccessCidrs = publicAccessCidrs {
            var publicAccessCidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAccessCidrs)
            for stringlist0 in publicAccessCidrs {
                try publicAccessCidrsContainer.encode(stringlist0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for stringlist0 in subnetIds {
                try subnetIdsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let endpointPublicAccessDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .endpointPublicAccess)
        endpointPublicAccess = endpointPublicAccessDecoded
        let endpointPrivateAccessDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .endpointPrivateAccess)
        endpointPrivateAccess = endpointPrivateAccessDecoded
        let publicAccessCidrsContainer = try containerValues.decodeIfPresent([String].self, forKey: .publicAccessCidrs)
        var publicAccessCidrsDecoded0:[String]? = nil
        if let publicAccessCidrsContainer = publicAccessCidrsContainer {
            publicAccessCidrsDecoded0 = [String]()
            for string0 in publicAccessCidrsContainer {
                publicAccessCidrsDecoded0?.append(string0)
            }
        }
        publicAccessCidrs = publicAccessCidrsDecoded0
    }
}
