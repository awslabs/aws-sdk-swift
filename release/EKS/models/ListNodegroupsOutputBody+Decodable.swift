// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNodegroupsOutputBody: Equatable {
    public let nodegroups: [String]?
    public let nextToken: String?
}

extension ListNodegroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case nodegroups
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .nodegroups)
        var nodegroupsDecoded0:[String]? = nil
        if let nodegroupsContainer = nodegroupsContainer {
            nodegroupsDecoded0 = [String]()
            for string0 in nodegroupsContainer {
                nodegroupsDecoded0?.append(string0)
            }
        }
        nodegroups = nodegroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
