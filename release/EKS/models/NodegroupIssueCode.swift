// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum NodegroupIssueCode {
    case accessDenied
    case asgInstanceLaunchFailures
    case autoScalingGroupInvalidConfiguration
    case autoScalingGroupNotFound
    case clusterUnreachable
    case ec2LaunchTemplateNotFound
    case ec2LaunchTemplateVersionMismatch
    case ec2SecurityGroupDeletionFailure
    case ec2SecurityGroupNotFound
    case ec2SubnetInvalidConfiguration
    case ec2SubnetNotFound
    case iamInstanceProfileNotFound
    case iamLimitExceeded
    case iamNodeRoleNotFound
    case instanceLimitExceeded
    case insufficientFreeAddresses
    case internalFailure
    case nodeCreationFailure
    case sdkUnknown(String)
}

extension NodegroupIssueCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NodegroupIssueCode] {
        return [
            .accessDenied,
            .asgInstanceLaunchFailures,
            .autoScalingGroupInvalidConfiguration,
            .autoScalingGroupNotFound,
            .clusterUnreachable,
            .ec2LaunchTemplateNotFound,
            .ec2LaunchTemplateVersionMismatch,
            .ec2SecurityGroupDeletionFailure,
            .ec2SecurityGroupNotFound,
            .ec2SubnetInvalidConfiguration,
            .ec2SubnetNotFound,
            .iamInstanceProfileNotFound,
            .iamLimitExceeded,
            .iamNodeRoleNotFound,
            .instanceLimitExceeded,
            .insufficientFreeAddresses,
            .internalFailure,
            .nodeCreationFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "AccessDenied"
        case .asgInstanceLaunchFailures: return "AsgInstanceLaunchFailures"
        case .autoScalingGroupInvalidConfiguration: return "AutoScalingGroupInvalidConfiguration"
        case .autoScalingGroupNotFound: return "AutoScalingGroupNotFound"
        case .clusterUnreachable: return "ClusterUnreachable"
        case .ec2LaunchTemplateNotFound: return "Ec2LaunchTemplateNotFound"
        case .ec2LaunchTemplateVersionMismatch: return "Ec2LaunchTemplateVersionMismatch"
        case .ec2SecurityGroupDeletionFailure: return "Ec2SecurityGroupDeletionFailure"
        case .ec2SecurityGroupNotFound: return "Ec2SecurityGroupNotFound"
        case .ec2SubnetInvalidConfiguration: return "Ec2SubnetInvalidConfiguration"
        case .ec2SubnetNotFound: return "Ec2SubnetNotFound"
        case .iamInstanceProfileNotFound: return "IamInstanceProfileNotFound"
        case .iamLimitExceeded: return "IamLimitExceeded"
        case .iamNodeRoleNotFound: return "IamNodeRoleNotFound"
        case .instanceLimitExceeded: return "InstanceLimitExceeded"
        case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
        case .internalFailure: return "InternalFailure"
        case .nodeCreationFailure: return "NodeCreationFailure"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NodegroupIssueCode(rawValue: rawValue) ?? NodegroupIssueCode.sdkUnknown(rawValue)
    }
}
