// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Update: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case errors
        case id
        case params
        case status
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errors = errors {
            var errorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errors)
            for errordetails0 in errors {
                try errorsContainer.encode(errordetails0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let params = params {
            var paramsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .params)
            for updateparams0 in params {
                try paramsContainer.encode(updateparams0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(UpdateStatus.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(UpdateType.self, forKey: .type)
        type = typeDecoded
        let paramsContainer = try containerValues.decodeIfPresent([UpdateParam].self, forKey: .params)
        var paramsDecoded0:[UpdateParam]? = nil
        if let paramsContainer = paramsContainer {
            paramsDecoded0 = [UpdateParam]()
            for structure0 in paramsContainer {
                paramsDecoded0?.append(structure0)
            }
        }
        params = paramsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let errorsContainer = try containerValues.decodeIfPresent([ErrorDetail].self, forKey: .errors)
        var errorsDecoded0:[ErrorDetail]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ErrorDetail]()
            for structure0 in errorsContainer {
                errorsDecoded0?.append(structure0)
            }
        }
        errors = errorsDecoded0
    }
}
