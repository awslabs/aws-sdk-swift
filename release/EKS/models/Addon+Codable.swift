// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Addon: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonArn
        case addonName
        case addonVersion
        case clusterName
        case createdAt
        case health
        case modifiedAt
        case serviceAccountRoleArn
        case status
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonArn = addonArn {
            try encodeContainer.encode(addonArn, forKey: .addonArn)
        }
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let health = health {
            try encodeContainer.encode(health, forKey: .health)
        }
        if let modifiedAt = modifiedAt {
            try encodeContainer.encode(modifiedAt.timeIntervalSince1970, forKey: .modifiedAt)
        }
        if let serviceAccountRoleArn = serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AddonStatus.self, forKey: .status)
        status = statusDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let healthDecoded = try containerValues.decodeIfPresent(AddonHealth.self, forKey: .health)
        health = healthDecoded
        let addonArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonArn)
        addonArn = addonArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let modifiedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .modifiedAt)
        modifiedAt = modifiedAtDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
