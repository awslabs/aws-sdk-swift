// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecordsOutputBody: Equatable {
    public let records: [Record]?
    public let nextToken: String?
    public let count: Int
    public let datasetSyncCount: Int?
    public let lastModifiedBy: String?
    public let mergedDatasetNames: [String]?
    public let datasetExists: Bool
    public let datasetDeletedAfterRequestedSyncCount: Bool
    public let syncSessionToken: String?
}

extension ListRecordsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count = "Count"
        case datasetDeletedAfterRequestedSyncCount = "DatasetDeletedAfterRequestedSyncCount"
        case datasetExists = "DatasetExists"
        case datasetSyncCount = "DatasetSyncCount"
        case lastModifiedBy = "LastModifiedBy"
        case mergedDatasetNames = "MergedDatasetNames"
        case nextToken = "NextToken"
        case records = "Records"
        case syncSessionToken = "SyncSessionToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([Record].self, forKey: .records)
        var recordsDecoded0:[Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [Record]()
            for structure0 in recordsContainer {
                recordsDecoded0?.append(structure0)
            }
        }
        records = recordsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let datasetSyncCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .datasetSyncCount)
        datasetSyncCount = datasetSyncCountDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let mergedDatasetNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .mergedDatasetNames)
        var mergedDatasetNamesDecoded0:[String]? = nil
        if let mergedDatasetNamesContainer = mergedDatasetNamesContainer {
            mergedDatasetNamesDecoded0 = [String]()
            for string0 in mergedDatasetNamesContainer {
                mergedDatasetNamesDecoded0?.append(string0)
            }
        }
        mergedDatasetNames = mergedDatasetNamesDecoded0
        let datasetExistsDecoded = try containerValues.decode(Bool.self, forKey: .datasetExists)
        datasetExists = datasetExistsDecoded
        let datasetDeletedAfterRequestedSyncCountDecoded = try containerValues.decode(Bool.self, forKey: .datasetDeletedAfterRequestedSyncCount)
        datasetDeletedAfterRequestedSyncCount = datasetDeletedAfterRequestedSyncCountDecoded
        let syncSessionTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .syncSessionToken)
        syncSessionToken = syncSessionTokenDecoded
    }
}
