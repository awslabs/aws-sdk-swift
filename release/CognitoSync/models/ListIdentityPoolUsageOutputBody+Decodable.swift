// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListIdentityPoolUsageOutputBody: Equatable {
    public let identityPoolUsages: [IdentityPoolUsage]?
    public let maxResults: Int
    public let count: Int
    public let nextToken: String?
}

extension ListIdentityPoolUsageOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count = "Count"
        case identityPoolUsages = "IdentityPoolUsages"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityPoolUsagesContainer = try containerValues.decodeIfPresent([IdentityPoolUsage].self, forKey: .identityPoolUsages)
        var identityPoolUsagesDecoded0:[IdentityPoolUsage]? = nil
        if let identityPoolUsagesContainer = identityPoolUsagesContainer {
            identityPoolUsagesDecoded0 = [IdentityPoolUsage]()
            for structure0 in identityPoolUsagesContainer {
                identityPoolUsagesDecoded0?.append(structure0)
            }
        }
        identityPoolUsages = identityPoolUsagesDecoded0
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
