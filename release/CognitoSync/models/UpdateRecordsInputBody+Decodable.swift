// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRecordsInputBody: Equatable {
    public let deviceId: String?
    public let recordPatches: [RecordPatch]?
    public let syncSessionToken: String?
}

extension UpdateRecordsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deviceId = "DeviceId"
        case recordPatches = "RecordPatches"
        case syncSessionToken = "SyncSessionToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let recordPatchesContainer = try containerValues.decodeIfPresent([RecordPatch].self, forKey: .recordPatches)
        var recordPatchesDecoded0:[RecordPatch]? = nil
        if let recordPatchesContainer = recordPatchesContainer {
            recordPatchesDecoded0 = [RecordPatch]()
            for structure0 in recordPatchesContainer {
                recordPatchesDecoded0?.append(structure0)
            }
        }
        recordPatches = recordPatchesDecoded0
        let syncSessionTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .syncSessionToken)
        syncSessionToken = syncSessionTokenDecoded
    }
}
