// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Record: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deviceLastModifiedDate = "DeviceLastModifiedDate"
        case key = "Key"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case syncCount = "SyncCount"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceLastModifiedDate = deviceLastModifiedDate {
            try encodeContainer.encode(deviceLastModifiedDate.timeIntervalSince1970, forKey: .deviceLastModifiedDate)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let syncCount = syncCount {
            try encodeContainer.encode(syncCount, forKey: .syncCount)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let syncCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .syncCount)
        syncCount = syncCountDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let deviceLastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deviceLastModifiedDate)
        deviceLastModifiedDate = deviceLastModifiedDateDecoded
    }
}
