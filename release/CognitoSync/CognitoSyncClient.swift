// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class CognitoSyncClient {
    let client: SdkHttpClient
    let config: CognitoSyncClientConfiguration
    let serviceName = "Cognito Sync"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: CognitoSyncClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class CognitoSyncClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> CognitoSyncClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try CognitoSyncClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension CognitoSyncClient: CognitoSyncClientProtocol {
    /// <p>Initiates a bulk publish of all existing datasets for an Identity Pool to the configured stream. Customers are limited to one successful bulk publish per 24 hours. Bulk publish is an asynchronous request, customers can see the status of the request via the GetBulkPublishDetails operation.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    public func bulkPublish(input: BulkPublishInput, completion: @escaping (SdkResult<BulkPublishOutputResponse, BulkPublishOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/bulkpublish"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "bulkPublish")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BulkPublishInput, BulkPublishOutputResponse, BulkPublishOutputError>(id: "bulkPublish")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BulkPublishInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BulkPublishInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BulkPublishInput, BulkPublishOutputResponse, BulkPublishOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specific dataset. The dataset will be deleted permanently, and the action can't
    ///          be undone. Datasets that this dataset was merged with will no longer report the merge. Any
    ///          subsequent operation on this dataset will result in a
    ///             ResourceNotFoundException.</p>
    ///           <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
    public func deleteDataset(input: DeleteDatasetInput, completion: @escaping (SdkResult<DeleteDatasetOutputResponse, DeleteDatasetOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        guard let datasetName = input.datasetName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component datasetName unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets/\(datasetName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDatasetInput, DeleteDatasetOutputResponse, DeleteDatasetOutputError>(id: "deleteDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDatasetInput, DeleteDatasetOutputResponse, DeleteDatasetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets meta data about a dataset by identity and dataset name. With Amazon Cognito Sync, each
    ///          identity has access only to its own data. Thus, the credentials used to make this API call
    ///          need to have access to the identity data.</p>
    ///       <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
    public func describeDataset(input: DescribeDatasetInput, completion: @escaping (SdkResult<DescribeDatasetOutputResponse, DescribeDatasetOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        guard let datasetName = input.datasetName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component datasetName unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets/\(datasetName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDatasetInput, DescribeDatasetOutputResponse, DescribeDatasetOutputError>(id: "describeDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDatasetInput, DescribeDatasetOutputResponse, DescribeDatasetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets usage details (for example, data storage) about a particular identity pool.</p>
    ///       <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    ///
    ///       <examples>
    ///          <example>
    ///             <name>DescribeIdentityPoolUsage</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: 8dc0e749-c8cd-48bd-8520-da6be00d528b
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.DescribeIdentityPoolUsage
    /// HOST: cognito-sync.us-east-1.amazonaws.com:443
    /// X-AMZ-DATE: 20141111T205737Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#DescribeIdentityPoolUsage",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "IDENTITY_POOL_ID"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: 8dc0e749-c8cd-48bd-8520-da6be00d528b
    /// content-type: application/json
    /// content-length: 271
    /// date: Tue, 11 Nov 2014 20:57:37 GMT
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#DescribeIdentityPoolUsageResponse",
    ///         "IdentityPoolUsage":
    ///         {
    ///             "DataStorage": 0,
    ///             "IdentityPoolId": "IDENTITY_POOL_ID",
    ///             "LastModifiedDate": 1.413231134115E9,
    ///             "SyncSessionsCount": null
    ///         }
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func describeIdentityPoolUsage(input: DescribeIdentityPoolUsageInput, completion: @escaping (SdkResult<DescribeIdentityPoolUsageOutputResponse, DescribeIdentityPoolUsageOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeIdentityPoolUsage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeIdentityPoolUsageInput, DescribeIdentityPoolUsageOutputResponse, DescribeIdentityPoolUsageOutputError>(id: "describeIdentityPoolUsage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityPoolUsageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityPoolUsageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeIdentityPoolUsageInput, DescribeIdentityPoolUsageOutputResponse, DescribeIdentityPoolUsageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets usage information for an identity, including number of datasets and data usage.</p>
    ///       <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
    ///       <examples>
    ///          <example>
    ///             <name>DescribeIdentityUsage</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: 33f9b4e4-a177-4aad-a3bb-6edb7980b283
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.DescribeIdentityUsage
    /// HOST: cognito-sync.us-east-1.amazonaws.com:443
    /// X-AMZ-DATE: 20141111T215129Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#DescribeIdentityUsage",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "IDENTITY_POOL_ID",
    ///         "IdentityId": "IDENTITY_ID"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    ///                1.1 200 OK
    /// x-amzn-requestid: 33f9b4e4-a177-4aad-a3bb-6edb7980b283
    /// content-type: application/json
    /// content-length: 318
    /// date: Tue, 11 Nov 2014 21:51:29 GMT
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#DescribeIdentityUsageResponse",
    ///         "IdentityUsage":
    ///         {
    ///             "DataStorage": 16,
    ///             "DatasetCount": 1,
    ///             "IdentityId": "IDENTITY_ID",
    ///             "IdentityPoolId": "IDENTITY_POOL_ID",
    ///             "LastModifiedDate": 1.412974081336E9
    ///         }
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func describeIdentityUsage(input: DescribeIdentityUsageInput, completion: @escaping (SdkResult<DescribeIdentityUsageOutputResponse, DescribeIdentityUsageOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeIdentityUsage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeIdentityUsageInput, DescribeIdentityUsageOutputResponse, DescribeIdentityUsageOutputError>(id: "describeIdentityUsage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityUsageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityUsageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeIdentityUsageInput, DescribeIdentityUsageOutputResponse, DescribeIdentityUsageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get the status of the last BulkPublish operation for an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    public func getBulkPublishDetails(input: GetBulkPublishDetailsInput, completion: @escaping (SdkResult<GetBulkPublishDetailsOutputResponse, GetBulkPublishDetailsOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/getBulkPublishDetails"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getBulkPublishDetails")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetBulkPublishDetailsInput, GetBulkPublishDetailsOutputResponse, GetBulkPublishDetailsOutputError>(id: "getBulkPublishDetails")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetBulkPublishDetailsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetBulkPublishDetailsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetBulkPublishDetailsInput, GetBulkPublishDetailsOutputResponse, GetBulkPublishDetailsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the events and the corresponding Lambda functions associated with an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    public func getCognitoEvents(input: GetCognitoEventsInput, completion: @escaping (SdkResult<GetCognitoEventsOutputResponse, GetCognitoEventsOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/events"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getCognitoEvents")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetCognitoEventsInput, GetCognitoEventsOutputResponse, GetCognitoEventsOutputError>(id: "getCognitoEvents")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetCognitoEventsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetCognitoEventsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetCognitoEventsInput, GetCognitoEventsOutputResponse, GetCognitoEventsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the configuration settings of an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    ///       <examples>
    ///          <example>
    ///             <name>GetIdentityPoolConfiguration</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: b1cfdd4b-f620-4fe4-be0f-02024a1d33da
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.GetIdentityPoolConfiguration
    /// HOST: cognito-sync.us-east-1.amazonaws.com
    /// X-AMZ-DATE: 20141004T195722Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#GetIdentityPoolConfiguration",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "ID_POOL_ID"
    ///     }
    /// }
    ///
    ///             </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: b1cfdd4b-f620-4fe4-be0f-02024a1d33da
    /// date: Sat, 04 Oct 2014 19:57:22 GMT
    /// content-type: application/json
    /// content-length: 332
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#GetIdentityPoolConfigurationResponse",
    ///         "IdentityPoolId": "ID_POOL_ID",
    ///         "PushSync":
    ///         {
    ///             "ApplicationArns": ["PLATFORMARN1", "PLATFORMARN2"],
    ///             "RoleArn": "ROLEARN"
    ///         }
    ///     },
    ///     "Version": "1.0"
    /// }
    ///  </response>
    ///          </example>
    ///       </examples>
    public func getIdentityPoolConfiguration(input: GetIdentityPoolConfigurationInput, completion: @escaping (SdkResult<GetIdentityPoolConfigurationOutputResponse, GetIdentityPoolConfigurationOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getIdentityPoolConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetIdentityPoolConfigurationInput, GetIdentityPoolConfigurationOutputResponse, GetIdentityPoolConfigurationOutputError>(id: "getIdentityPoolConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetIdentityPoolConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetIdentityPoolConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetIdentityPoolConfigurationInput, GetIdentityPoolConfigurationOutputResponse, GetIdentityPoolConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists datasets for an identity. With Amazon Cognito Sync, each identity has access only to
    ///          its own data. Thus, the credentials used to make this API call need to have access to the
    ///          identity data.</p>
    ///       <p>ListDatasets can be called with temporary user credentials provided by Cognito
    ///          Identity or with developer credentials. You should use the Cognito Identity credentials to
    ///          make this API call.</p>
    ///       <examples>
    ///          <example>
    ///             <name>ListDatasets</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: 15225768-209f-4078-aaed-7494ace9f2db
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.ListDatasets
    /// HOST: cognito-sync.us-east-1.amazonaws.com:443
    /// X-AMZ-DATE: 20141111T215640Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#ListDatasets",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "IDENTITY_POOL_ID",
    ///         "IdentityId": "IDENTITY_ID",
    ///         "MaxResults": "3"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: 15225768-209f-4078-aaed-7494ace9f2db, 15225768-209f-4078-aaed-7494ace9f2db
    /// content-type: application/json
    /// content-length: 355
    /// date: Tue, 11 Nov 2014 21:56:40 GMT
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#ListDatasetsResponse",
    ///         "Count": 1,
    ///         "Datasets": [
    ///         {
    ///             "CreationDate": 1.412974057151E9,
    ///             "DataStorage": 16,
    ///             "DatasetName": "my_list",
    ///             "IdentityId": "IDENTITY_ID",
    ///             "LastModifiedBy": "123456789012",
    ///             "LastModifiedDate": 1.412974057244E9,
    ///             "NumRecords": 1
    ///         }],
    ///         "NextToken": null
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func listDatasets(input: ListDatasetsInput, completion: @escaping (SdkResult<ListDatasetsOutputResponse, ListDatasetsOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDatasets")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDatasetsInput, ListDatasetsOutputResponse, ListDatasetsOutputError>(id: "listDatasets")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDatasetsInput, ListDatasetsOutputResponse, ListDatasetsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets a list of identity pools registered with Cognito.</p>
    ///       <p>ListIdentityPoolUsage can only be called with developer credentials. You
    ///          cannot make this API call with the temporary user credentials provided by Cognito
    ///          Identity.</p>
    ///       <examples>
    ///          <example>
    ///             <name>ListIdentityPoolUsage</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: 9be7c425-ef05-48c0-aef3-9f0ff2fe17d3
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.ListIdentityPoolUsage
    /// HOST: cognito-sync.us-east-1.amazonaws.com:443
    /// X-AMZ-DATE: 20141111T211414Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#ListIdentityPoolUsage",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "MaxResults": "2"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: 9be7c425-ef05-48c0-aef3-9f0ff2fe17d3
    /// content-type: application/json
    /// content-length: 519
    /// date: Tue, 11 Nov 2014 21:14:14 GMT
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#ListIdentityPoolUsageResponse",
    ///         "Count": 2,
    ///         "IdentityPoolUsages": [
    ///         {
    ///             "DataStorage": 0,
    ///             "IdentityPoolId": "IDENTITY_POOL_ID",
    ///             "LastModifiedDate": 1.413836234607E9,
    ///             "SyncSessionsCount": null
    ///         },
    ///         {
    ///             "DataStorage": 0,
    ///             "IdentityPoolId": "IDENTITY_POOL_ID",
    ///             "LastModifiedDate": 1.410892165601E9,
    ///             "SyncSessionsCount": null
    ///         }],
    ///         "MaxResults": 2,
    ///         "NextToken": "dXMtZWFzdC0xOjBjMWJhMDUyLWUwOTgtNDFmYS1hNzZlLWVhYTJjMTI1Zjg2MQ=="
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func listIdentityPoolUsage(input: ListIdentityPoolUsageInput, completion: @escaping (SdkResult<ListIdentityPoolUsageOutputResponse, ListIdentityPoolUsageOutputError>) -> Void)
    {
        let urlPath = "/identitypools"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIdentityPoolUsage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIdentityPoolUsageInput, ListIdentityPoolUsageOutputResponse, ListIdentityPoolUsageOutputError>(id: "listIdentityPoolUsage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIdentityPoolUsageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIdentityPoolUsageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIdentityPoolUsageInput, ListIdentityPoolUsageOutputResponse, ListIdentityPoolUsageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets paginated records, optionally changed after a particular sync count for a dataset and
    ///          identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus,
    ///          the credentials used to make this API call need to have access to the identity data.</p>
    ///       <p>ListRecords can be called with temporary user credentials provided by Cognito
    ///          Identity or with developer credentials. You should use Cognito Identity credentials to make
    ///          this API call.</p>
    ///       <examples>
    ///          <example>
    ///             <name>ListRecords</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: b3d2e31e-d6b7-4612-8e84-c9ba288dab5d
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.ListRecords
    /// HOST: cognito-sync.us-east-1.amazonaws.com:443
    /// X-AMZ-DATE: 20141111T183230Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#ListRecords",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "IDENTITY_POOL_ID",
    ///         "IdentityId": "IDENTITY_ID",
    ///         "DatasetName": "newDataSet"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: b3d2e31e-d6b7-4612-8e84-c9ba288dab5d
    /// content-type: application/json
    /// content-length: 623
    /// date: Tue, 11 Nov 2014 18:32:30 GMT
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#ListRecordsResponse",
    ///         "Count": 0,
    ///         "DatasetDeletedAfterRequestedSyncCount": false,
    ///         "DatasetExists": false,
    ///         "DatasetSyncCount": 0,
    ///         "LastModifiedBy": null,
    ///         "MergedDatasetNames": null,
    ///         "NextToken": null,
    ///         "Records": [],
    ///         "SyncSessionToken": "SYNC_SESSION_TOKEN"
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func listRecords(input: ListRecordsInput, completion: @escaping (SdkResult<ListRecordsOutputResponse, ListRecordsOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        guard let datasetName = input.datasetName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component datasetName unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets/\(datasetName)/records"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listRecords")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListRecordsInput, ListRecordsOutputResponse, ListRecordsOutputError>(id: "listRecords")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListRecordsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListRecordsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListRecordsInput, ListRecordsOutputResponse, ListRecordsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers a device to receive push sync notifications.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
    ///       <examples>
    ///          <example>
    ///             <name>RegisterDevice</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: 368f9200-3eca-449e-93b3-7b9c08d8e185
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.RegisterDevice
    /// HOST: cognito-sync.us-east-1.amazonaws.com
    /// X-AMZ-DATE: 20141004T194643Z
    /// X-AMZ-SECURITY-TOKEN: <securitytoken>
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#RegisterDevice",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "ID_POOL_ID",
    ///         "IdentityId": "IDENTITY_ID",
    ///         "Platform": "GCM",
    ///         "Token": "PUSH_TOKEN"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: 368f9200-3eca-449e-93b3-7b9c08d8e185
    /// date: Sat, 04 Oct 2014 19:46:44 GMT
    /// content-type: application/json
    /// content-length: 145
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#RegisterDeviceResponse",
    ///         "DeviceId": "5cd28fbe-dd83-47ab-9f83-19093a5fb014"
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func registerDevice(input: RegisterDeviceInput, completion: @escaping (SdkResult<RegisterDeviceOutputResponse, RegisterDeviceOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identity/\(identityId)/device"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerDevice")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterDeviceInput, RegisterDeviceOutputResponse, RegisterDeviceOutputError>(id: "registerDevice")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterDeviceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterDeviceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterDeviceInput, RegisterDeviceOutputResponse, RegisterDeviceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterDeviceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sets the AWS Lambda function for a given event type for an identity pool. This request only updates the key/value pair specified. Other key/values pairs are not updated. To remove a key value pair, pass a empty value for the particular key.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    public func setCognitoEvents(input: SetCognitoEventsInput, completion: @escaping (SdkResult<SetCognitoEventsOutputResponse, SetCognitoEventsOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/events"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "setCognitoEvents")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SetCognitoEventsInput, SetCognitoEventsOutputResponse, SetCognitoEventsOutputError>(id: "setCognitoEvents")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SetCognitoEventsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SetCognitoEventsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SetCognitoEventsInput, SetCognitoEventsOutputResponse, SetCognitoEventsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SetCognitoEventsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sets the necessary configuration for push sync.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    ///       <examples>
    ///          <example>
    ///             <name>SetIdentityPoolConfiguration</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: a46db021-f5dd-45d6-af5b-7069fa4a211b
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.SetIdentityPoolConfiguration
    /// HOST: cognito-sync.us-east-1.amazonaws.com
    /// X-AMZ-DATE: 20141004T200006Z
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#SetIdentityPoolConfiguration",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "ID_POOL_ID",
    ///         "PushSync":
    ///         {
    ///             "ApplicationArns": ["PLATFORMARN1", "PLATFORMARN2"],
    ///             "RoleArn": "ROLEARN"
    ///         }
    ///     }
    /// }
    ///             </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: a46db021-f5dd-45d6-af5b-7069fa4a211b
    /// date: Sat, 04 Oct 2014 20:00:06 GMT
    /// content-type: application/json
    /// content-length: 332
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#SetIdentityPoolConfigurationResponse",
    ///         "IdentityPoolId": "ID_POOL_ID",
    ///         "PushSync":
    ///         {
    ///             "ApplicationArns": ["PLATFORMARN1", "PLATFORMARN2"],
    ///             "RoleArn": "ROLEARN"
    ///         }
    ///     },
    ///     "Version": "1.0"
    /// }
    ///             </response>
    ///          </example>
    ///       </examples>
    public func setIdentityPoolConfiguration(input: SetIdentityPoolConfigurationInput, completion: @escaping (SdkResult<SetIdentityPoolConfigurationOutputResponse, SetIdentityPoolConfigurationOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "setIdentityPoolConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SetIdentityPoolConfigurationInput, SetIdentityPoolConfigurationOutputResponse, SetIdentityPoolConfigurationOutputError>(id: "setIdentityPoolConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SetIdentityPoolConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SetIdentityPoolConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SetIdentityPoolConfigurationInput, SetIdentityPoolConfigurationOutputResponse, SetIdentityPoolConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SetIdentityPoolConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Subscribes to receive notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
    ///       <examples>
    ///          <example>
    ///             <name>SubscribeToDataset</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZN-REQUESTID: 8b9932b7-201d-4418-a960-0a470e11de9f
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.SubscribeToDataset
    /// HOST: cognito-sync.us-east-1.amazonaws.com
    /// X-AMZ-DATE: 20141004T195350Z
    /// X-AMZ-SECURITY-TOKEN: <securitytoken>
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#SubscribeToDataset",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "ID_POOL_ID",
    ///         "IdentityId": "IDENTITY_ID",
    ///         "DatasetName": "Rufus",
    ///         "DeviceId": "5cd28fbe-dd83-47ab-9f83-19093a5fb014"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: 8b9932b7-201d-4418-a960-0a470e11de9f
    /// date: Sat, 04 Oct 2014 19:53:50 GMT
    /// content-type: application/json
    /// content-length: 99
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#SubscribeToDatasetResponse"
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func subscribeToDataset(input: SubscribeToDatasetInput, completion: @escaping (SdkResult<SubscribeToDatasetOutputResponse, SubscribeToDatasetOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        guard let datasetName = input.datasetName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component datasetName unexpectedly nil"))))
            return
        }
        guard let deviceId = input.deviceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component deviceId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets/\(datasetName)/subscriptions/\(deviceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "subscribeToDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SubscribeToDatasetInput, SubscribeToDatasetOutputResponse, SubscribeToDatasetOutputError>(id: "subscribeToDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SubscribeToDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SubscribeToDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SubscribeToDatasetInput, SubscribeToDatasetOutputResponse, SubscribeToDatasetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Unsubscribes from receiving notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
    ///       <examples>
    ///          <example>
    ///             <name>UnsubscribeFromDataset</name>
    ///             <description>The following examples have been edited for readability.</description>
    ///             <request>
    /// POST / HTTP/1.1
    /// CONTENT-TYPE: application/json
    /// X-AMZ-REQUESTSUPERTRACE: true
    /// X-AMZN-REQUESTID: 676896d6-14ca-45b1-8029-6d36b10a077e
    /// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.UnsubscribeFromDataset
    /// HOST: cognito-sync.us-east-1.amazonaws.com
    /// X-AMZ-DATE: 20141004T195446Z
    /// X-AMZ-SECURITY-TOKEN: <securitytoken>
    /// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
    ///
    /// {
    ///     "Operation": "com.amazonaws.cognito.sync.model#UnsubscribeFromDataset",
    ///     "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
    ///     "Input":
    ///     {
    ///         "IdentityPoolId": "ID_POOL_ID",
    ///         "IdentityId": "IDENTITY_ID",
    ///         "DatasetName": "Rufus",
    ///         "DeviceId": "5cd28fbe-dd83-47ab-9f83-19093a5fb014"
    ///     }
    /// }
    ///                </request>
    ///             <response>
    /// 1.1 200 OK
    /// x-amzn-requestid: 676896d6-14ca-45b1-8029-6d36b10a077e
    /// date: Sat, 04 Oct 2014 19:54:46 GMT
    /// content-type: application/json
    /// content-length: 103
    ///
    /// {
    ///     "Output":
    ///     {
    ///         "__type": "com.amazonaws.cognito.sync.model#UnsubscribeFromDatasetResponse"
    ///     },
    ///     "Version": "1.0"
    /// }
    ///                </response>
    ///          </example>
    ///       </examples>
    public func unsubscribeFromDataset(input: UnsubscribeFromDatasetInput, completion: @escaping (SdkResult<UnsubscribeFromDatasetOutputResponse, UnsubscribeFromDatasetOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        guard let datasetName = input.datasetName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component datasetName unexpectedly nil"))))
            return
        }
        guard let deviceId = input.deviceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component deviceId unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets/\(datasetName)/subscriptions/\(deviceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "unsubscribeFromDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UnsubscribeFromDatasetInput, UnsubscribeFromDatasetOutputResponse, UnsubscribeFromDatasetOutputError>(id: "unsubscribeFromDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UnsubscribeFromDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UnsubscribeFromDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UnsubscribeFromDatasetInput, UnsubscribeFromDatasetOutputResponse, UnsubscribeFromDatasetOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Posts updates to records and adds and deletes records for a dataset and user.</p>
    ///       <p>The sync count in the record patch is your last known sync count for that record. The server will reject an UpdateRecords request with a ResourceConflictException if you try to patch a record with a new value but a stale sync count.</p><p>For example, if the sync count on the server is 5 for a key called highScore and you try and submit a new highScore with sync count of 4, the request will be rejected. To obtain the current sync count for a record, call ListRecords. On a successful update of the record, the response returns the new sync count for that record. You should present that sync count the next time you try to update that same record. When the record does not exist, specify the sync count as 0.</p>
    ///       <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
    public func updateRecords(input: UpdateRecordsInput, completion: @escaping (SdkResult<UpdateRecordsOutputResponse, UpdateRecordsOutputError>) -> Void)
    {
        guard let identityPoolId = input.identityPoolId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityPoolId unexpectedly nil"))))
            return
        }
        guard let identityId = input.identityId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component identityId unexpectedly nil"))))
            return
        }
        guard let datasetName = input.datasetName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component datasetName unexpectedly nil"))))
            return
        }
        let urlPath = "/identitypools/\(identityPoolId)/identities/\(identityId)/datasets/\(datasetName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateRecords")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-sync.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-sync")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateRecordsInput, UpdateRecordsOutputResponse, UpdateRecordsOutputError>(id: "updateRecords")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateRecordsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateRecordsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateRecordsInput, UpdateRecordsOutputResponse, UpdateRecordsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateRecordsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
