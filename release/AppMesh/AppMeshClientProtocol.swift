// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and
///          control microservices. App Mesh standardizes how your microservices communicate, giving you
///          end-to-end visibility and helping to ensure high availability for your applications.</p>
///          <p>App Mesh gives you consistent visibility and network traffic controls for every
///          microservice in an application. You can use App Mesh with AWS Fargate, Amazon ECS, Amazon EKS,
///          Kubernetes on AWS, and Amazon EC2.</p>
///          <note>
///             <p>App Mesh supports microservice applications that use service discovery naming for their
///             components. For more information about service discovery on Amazon ECS, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes
///                <code>kube-dns</code> and <code>coredns</code> are supported. For more information,
///             see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
///                for Services and Pods</a> in the Kubernetes documentation.</p>
///          </note>
public protocol AppMeshClientProtocol {
    /// <p>Creates a gateway route.</p>
    ///          <p>A gateway route is attached to a virtual gateway and routes traffic to an existing
    ///          virtual service. If a route matches a request, it can distribute traffic to a target
    ///          virtual service.</p>
    ///          <p>For more information about gateway routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html">Gateway routes</a>.</p>
    func createGatewayRoute(input: CreateGatewayRouteInput, completion: @escaping (SdkResult<CreateGatewayRouteOutputResponse, CreateGatewayRouteOutputError>) -> Void)
    /// <p>Creates a service mesh.</p>
    ///          <p> A service mesh is a logical boundary for network traffic between services that are
    ///          represented by resources within the mesh. After you create your service mesh, you can
    ///          create virtual services, virtual nodes, virtual routers, and routes to distribute traffic
    ///          between the applications in your mesh.</p>
    ///          <p>For more information about service meshes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html">Service meshes</a>.</p>
    func createMesh(input: CreateMeshInput, completion: @escaping (SdkResult<CreateMeshOutputResponse, CreateMeshOutputError>) -> Void)
    /// <p>Creates a route that is associated with a virtual router.</p>
    ///          <p> You can route several different protocols and define a retry policy for a route.
    ///          Traffic can be routed to one or more virtual nodes.</p>
    ///          <p>For more information about routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html">Routes</a>.</p>
    func createRoute(input: CreateRouteInput, completion: @escaping (SdkResult<CreateRouteOutputResponse, CreateRouteOutputError>) -> Void)
    /// <p>Creates a virtual gateway.</p>
    ///          <p>A virtual gateway allows resources outside your mesh to communicate to resources that
    ///          are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS
    ///          task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which
    ///          represents an Envoy running with an application, a virtual gateway represents Envoy
    ///          deployed by itself.</p>
    ///          <p>For more information about virtual gateways, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html">Virtual gateways</a>. </p>
    func createVirtualGateway(input: CreateVirtualGatewayInput, completion: @escaping (SdkResult<CreateVirtualGatewayOutputResponse, CreateVirtualGatewayOutputError>) -> Void)
    /// <p>Creates a virtual node within a service mesh.</p>
    ///          <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS
    ///          service or a Kubernetes deployment. When you create a virtual node, you can specify the
    ///          service discovery information for your task group, and whether the proxy running in a task
    ///          group will communicate with other proxies using Transport Layer Security (TLS).</p>
    ///          <p>You define a <code>listener</code> for any inbound traffic that your virtual node
    ///          expects. Any virtual service that your virtual node expects to communicate to is specified
    ///          as a <code>backend</code>.</p>
    ///          <p>The response metadata for your new virtual node contains the <code>arn</code> that is
    ///          associated with the virtual node. Set this value to the full ARN; for example,
    ///             <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>)
    ///          as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy
    ///          proxy container in your task definition or pod spec. This is then mapped to the
    ///             <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
    ///          <note>
    ///             <p>By default, App Mesh uses the name of the resource you specified in
    ///                <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and
    ///             traces. You can override this behavior by setting the
    ///                <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p>
    ///             <p>AWS Cloud Map is not available in the eu-south-1 Region.</p>
    ///          </note>
    ///          <p>For more information about virtual nodes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when
    ///          setting these variables. For more information about App Mesh Envoy variables, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html">Envoy image</a> in
    ///          the AWS App Mesh User Guide.</p>
    func createVirtualNode(input: CreateVirtualNodeInput, completion: @escaping (SdkResult<CreateVirtualNodeOutputResponse, CreateVirtualNodeOutputError>) -> Void)
    /// <p>Creates a virtual router within a service mesh.</p>
    ///          <p>Specify a <code>listener</code> for any inbound traffic that your virtual router
    ///          receives. Create a virtual router for each protocol and port that you need to route.
    ///          Virtual routers handle traffic for one or more virtual services within your mesh. After you
    ///          create your virtual router, create and associate routes for your virtual router that direct
    ///          incoming requests to different virtual nodes.</p>
    ///          <p>For more information about virtual routers, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html">Virtual routers</a>.</p>
    func createVirtualRouter(input: CreateVirtualRouterInput, completion: @escaping (SdkResult<CreateVirtualRouterOutputResponse, CreateVirtualRouterOutputError>) -> Void)
    /// <p>Creates a virtual service within a service mesh.</p>
    ///          <p>A virtual service is an abstraction of a real service that is provided by a virtual node
    ///          directly or indirectly by means of a virtual router. Dependent services call your virtual
    ///          service by its <code>virtualServiceName</code>, and those requests are routed to the
    ///          virtual node or virtual router that is specified as the provider for the virtual
    ///          service.</p>
    ///          <p>For more information about virtual services, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html">Virtual services</a>.</p>
    func createVirtualService(input: CreateVirtualServiceInput, completion: @escaping (SdkResult<CreateVirtualServiceOutputResponse, CreateVirtualServiceOutputError>) -> Void)
    /// <p>Deletes an existing gateway route.</p>
    func deleteGatewayRoute(input: DeleteGatewayRouteInput, completion: @escaping (SdkResult<DeleteGatewayRouteOutputResponse, DeleteGatewayRouteOutputError>) -> Void)
    /// <p>Deletes an existing service mesh.</p>
    ///          <p>You must delete all resources (virtual services, routes, virtual routers, and virtual
    ///          nodes) in the service mesh before you can delete the mesh itself.</p>
    func deleteMesh(input: DeleteMeshInput, completion: @escaping (SdkResult<DeleteMeshOutputResponse, DeleteMeshOutputError>) -> Void)
    /// <p>Deletes an existing route.</p>
    func deleteRoute(input: DeleteRouteInput, completion: @escaping (SdkResult<DeleteRouteOutputResponse, DeleteRouteOutputError>) -> Void)
    /// <p>Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway
    ///          routes are associated to it.</p>
    func deleteVirtualGateway(input: DeleteVirtualGatewayInput, completion: @escaping (SdkResult<DeleteVirtualGatewayOutputResponse, DeleteVirtualGatewayOutputError>) -> Void)
    /// <p>Deletes an existing virtual node.</p>
    ///          <p>You must delete any virtual services that list a virtual node as a service provider
    ///          before you can delete the virtual node itself.</p>
    func deleteVirtualNode(input: DeleteVirtualNodeInput, completion: @escaping (SdkResult<DeleteVirtualNodeOutputResponse, DeleteVirtualNodeOutputError>) -> Void)
    /// <p>Deletes an existing virtual router.</p>
    ///          <p>You must delete any routes associated with the virtual router before you can delete the
    ///          router itself.</p>
    func deleteVirtualRouter(input: DeleteVirtualRouterInput, completion: @escaping (SdkResult<DeleteVirtualRouterOutputResponse, DeleteVirtualRouterOutputError>) -> Void)
    /// <p>Deletes an existing virtual service.</p>
    func deleteVirtualService(input: DeleteVirtualServiceInput, completion: @escaping (SdkResult<DeleteVirtualServiceOutputResponse, DeleteVirtualServiceOutputError>) -> Void)
    /// <p>Describes an existing gateway route.</p>
    func describeGatewayRoute(input: DescribeGatewayRouteInput, completion: @escaping (SdkResult<DescribeGatewayRouteOutputResponse, DescribeGatewayRouteOutputError>) -> Void)
    /// <p>Describes an existing service mesh.</p>
    func describeMesh(input: DescribeMeshInput, completion: @escaping (SdkResult<DescribeMeshOutputResponse, DescribeMeshOutputError>) -> Void)
    /// <p>Describes an existing route.</p>
    func describeRoute(input: DescribeRouteInput, completion: @escaping (SdkResult<DescribeRouteOutputResponse, DescribeRouteOutputError>) -> Void)
    /// <p>Describes an existing virtual gateway.</p>
    func describeVirtualGateway(input: DescribeVirtualGatewayInput, completion: @escaping (SdkResult<DescribeVirtualGatewayOutputResponse, DescribeVirtualGatewayOutputError>) -> Void)
    /// <p>Describes an existing virtual node.</p>
    func describeVirtualNode(input: DescribeVirtualNodeInput, completion: @escaping (SdkResult<DescribeVirtualNodeOutputResponse, DescribeVirtualNodeOutputError>) -> Void)
    /// <p>Describes an existing virtual router.</p>
    func describeVirtualRouter(input: DescribeVirtualRouterInput, completion: @escaping (SdkResult<DescribeVirtualRouterOutputResponse, DescribeVirtualRouterOutputError>) -> Void)
    /// <p>Describes an existing virtual service.</p>
    func describeVirtualService(input: DescribeVirtualServiceInput, completion: @escaping (SdkResult<DescribeVirtualServiceOutputResponse, DescribeVirtualServiceOutputError>) -> Void)
    /// <p>Returns a list of existing gateway routes that are associated to a virtual
    ///          gateway.</p>
    func listGatewayRoutes(input: ListGatewayRoutesInput, completion: @escaping (SdkResult<ListGatewayRoutesOutputResponse, ListGatewayRoutesOutputError>) -> Void)
    /// <p>Returns a list of existing service meshes.</p>
    func listMeshes(input: ListMeshesInput, completion: @escaping (SdkResult<ListMeshesOutputResponse, ListMeshesOutputError>) -> Void)
    /// <p>Returns a list of existing routes in a service mesh.</p>
    func listRoutes(input: ListRoutesInput, completion: @escaping (SdkResult<ListRoutesOutputResponse, ListRoutesOutputError>) -> Void)
    /// <p>List the tags for an App Mesh resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Returns a list of existing virtual gateways in a service mesh.</p>
    func listVirtualGateways(input: ListVirtualGatewaysInput, completion: @escaping (SdkResult<ListVirtualGatewaysOutputResponse, ListVirtualGatewaysOutputError>) -> Void)
    /// <p>Returns a list of existing virtual nodes.</p>
    func listVirtualNodes(input: ListVirtualNodesInput, completion: @escaping (SdkResult<ListVirtualNodesOutputResponse, ListVirtualNodesOutputError>) -> Void)
    /// <p>Returns a list of existing virtual routers in a service mesh.</p>
    func listVirtualRouters(input: ListVirtualRoutersInput, completion: @escaping (SdkResult<ListVirtualRoutersOutputResponse, ListVirtualRoutersOutputError>) -> Void)
    /// <p>Returns a list of existing virtual services in a service mesh.</p>
    func listVirtualServices(input: ListVirtualServicesInput, completion: @escaping (SdkResult<ListVirtualServicesOutputResponse, ListVirtualServicesOutputError>) -> Void)
    /// <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>.
    ///          If existing tags on a resource aren't specified in the request parameters, they aren't
    ///          changed. When a resource is deleted, the tags associated with that resource are also
    ///          deleted.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Deletes specified tags from a resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates an existing gateway route that is associated to a specified virtual gateway in a
    ///          service mesh.</p>
    func updateGatewayRoute(input: UpdateGatewayRouteInput, completion: @escaping (SdkResult<UpdateGatewayRouteOutputResponse, UpdateGatewayRouteOutputError>) -> Void)
    /// <p>Updates an existing service mesh.</p>
    func updateMesh(input: UpdateMeshInput, completion: @escaping (SdkResult<UpdateMeshOutputResponse, UpdateMeshOutputError>) -> Void)
    /// <p>Updates an existing route for a specified service mesh and virtual router.</p>
    func updateRoute(input: UpdateRouteInput, completion: @escaping (SdkResult<UpdateRouteOutputResponse, UpdateRouteOutputError>) -> Void)
    /// <p>Updates an existing virtual gateway in a specified service mesh.</p>
    func updateVirtualGateway(input: UpdateVirtualGatewayInput, completion: @escaping (SdkResult<UpdateVirtualGatewayOutputResponse, UpdateVirtualGatewayOutputError>) -> Void)
    /// <p>Updates an existing virtual node in a specified service mesh.</p>
    func updateVirtualNode(input: UpdateVirtualNodeInput, completion: @escaping (SdkResult<UpdateVirtualNodeOutputResponse, UpdateVirtualNodeOutputError>) -> Void)
    /// <p>Updates an existing virtual router in a specified service mesh.</p>
    func updateVirtualRouter(input: UpdateVirtualRouterInput, completion: @escaping (SdkResult<UpdateVirtualRouterOutputResponse, UpdateVirtualRouterOutputError>) -> Void)
    /// <p>Updates an existing virtual service in a specified service mesh.</p>
    func updateVirtualService(input: UpdateVirtualServiceInput, completion: @escaping (SdkResult<UpdateVirtualServiceOutputResponse, UpdateVirtualServiceOutputError>) -> Void)
}
