// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVirtualNodeInputBody: Equatable {
    public let virtualNodeName: String?
    public let spec: VirtualNodeSpec?
    public let tags: [TagRef]?
    public let clientToken: String?
}

extension CreateVirtualNodeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case spec
        case tags
        case virtualNodeName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualNodeName)
        virtualNodeName = virtualNodeNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(VirtualNodeSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TagRef].self, forKey: .tags)
        var tagsDecoded0:[TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TagRef]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
