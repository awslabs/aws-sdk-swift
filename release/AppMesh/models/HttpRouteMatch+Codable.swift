// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HttpRouteMatch: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case headers
        case method
        case prefix
        case scheme
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for httprouteheaders0 in headers {
                try headersContainer.encode(httprouteheaders0)
            }
        }
        if let method = method {
            try encodeContainer.encode(method.rawValue, forKey: .method)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let scheme = scheme {
            try encodeContainer.encode(scheme.rawValue, forKey: .scheme)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
        let methodDecoded = try containerValues.decodeIfPresent(HttpMethod.self, forKey: .method)
        method = methodDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(HttpScheme.self, forKey: .scheme)
        scheme = schemeDecoded
        let headersContainer = try containerValues.decodeIfPresent([HttpRouteHeader].self, forKey: .headers)
        var headersDecoded0:[HttpRouteHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [HttpRouteHeader]()
            for structure0 in headersContainer {
                headersDecoded0?.append(structure0)
            }
        }
        headers = headersDecoded0
    }
}
