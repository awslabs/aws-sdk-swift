// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WeightedTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case virtualNode
        case weight
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualNode = virtualNode {
            try encodeContainer.encode(virtualNode, forKey: .virtualNode)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualNode)
        virtualNode = virtualNodeDecoded
        let weightDecoded = try containerValues.decode(Int.self, forKey: .weight)
        weight = weightDecoded
    }
}
