// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VirtualNodeConnectionPool: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case grpc
        case http
        case http2
        case sdkUnknown
        case tcp
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .grpc(grpc):
                if let grpc = grpc {
                    try container.encode(grpc, forKey: .grpc)
                }
            case let .http(http):
                if let http = http {
                    try container.encode(http, forKey: .http)
                }
            case let .http2(http2):
                if let http2 = http2 {
                    try container.encode(http2, forKey: .http2)
                }
            case let .tcp(tcp):
                if let tcp = tcp {
                    try container.encode(tcp, forKey: .tcp)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let tcpDecoded = try values.decodeIfPresent(VirtualNodeTcpConnectionPool.self, forKey: .tcp)
        if let tcp = tcpDecoded {
            self = .tcp(tcp)
            return
        }
        let httpDecoded = try values.decodeIfPresent(VirtualNodeHttpConnectionPool.self, forKey: .http)
        if let http = httpDecoded {
            self = .http(http)
            return
        }
        let http2Decoded = try values.decodeIfPresent(VirtualNodeHttp2ConnectionPool.self, forKey: .http2)
        if let http2 = http2Decoded {
            self = .http2(http2)
            return
        }
        let grpcDecoded = try values.decodeIfPresent(VirtualNodeGrpcConnectionPool.self, forKey: .grpc)
        if let grpc = grpcDecoded {
            self = .grpc(grpc)
            return
        }
        self = .sdkUnknown("")
    }
}
