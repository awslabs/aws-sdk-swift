// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TcpRoute: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case timeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(TcpRouteAction.self, forKey: .action)
        action = actionDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(TcpTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}
