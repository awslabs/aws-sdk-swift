// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListenerTlsCertificate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acm
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .acm(acm):
                if let acm = acm {
                    try container.encode(acm, forKey: .acm)
                }
            case let .file(file):
                if let file = file {
                    try container.encode(file, forKey: .file)
                }
            case let .sds(sds):
                if let sds = sds {
                    try container.encode(sds, forKey: .sds)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let acmDecoded = try values.decodeIfPresent(ListenerTlsAcmCertificate.self, forKey: .acm)
        if let acm = acmDecoded {
            self = .acm(acm)
            return
        }
        let fileDecoded = try values.decodeIfPresent(ListenerTlsFileCertificate.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(ListenerTlsSdsCertificate.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}
