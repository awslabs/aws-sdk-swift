// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object that represents the health check policy for a virtual node's listener.</p>
public struct HealthCheckPolicy: Equatable {
    /// <p>The protocol for the health check request. If you specify <code>grpc</code>, then your
    ///          service must conform to the <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">GRPC Health
    ///             Checking Protocol</a>.</p>
    public let `protocol`: PortProtocol?
    /// <p>The number of consecutive successful health checks that must occur before declaring
    ///          listener healthy.</p>
    public let healthyThreshold: Int
    /// <p>The time period in milliseconds between each health check execution.</p>
    public let intervalMillis: Int?
    /// <p>The destination path for the health check request. This value is only used if the
    ///          specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.</p>
    public let path: String?
    /// <p>The destination port for the health check request. This port must match the port defined
    ///          in the <a>PortMapping</a> for the listener.</p>
    public let port: Int
    /// <p>The amount of time to wait when receiving a response from the health check, in
    ///          milliseconds.</p>
    public let timeoutMillis: Int?
    /// <p>The number of consecutive failed health checks that must occur before declaring a
    ///          virtual node unhealthy. </p>
    public let unhealthyThreshold: Int

    public init (
        `protocol`: PortProtocol? = nil,
        healthyThreshold: Int = 0,
        intervalMillis: Int? = nil,
        path: String? = nil,
        port: Int = 0,
        timeoutMillis: Int? = nil,
        unhealthyThreshold: Int = 0
    )
    {
        self.`protocol` = `protocol`
        self.healthyThreshold = healthyThreshold
        self.intervalMillis = intervalMillis
        self.path = path
        self.port = port
        self.timeoutMillis = timeoutMillis
        self.unhealthyThreshold = unhealthyThreshold
    }
}
