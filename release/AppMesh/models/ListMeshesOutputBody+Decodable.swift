// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMeshesOutputBody: Equatable {
    public let meshes: [MeshRef]?
    public let nextToken: String?
}

extension ListMeshesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case meshes
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshesContainer = try containerValues.decodeIfPresent([MeshRef].self, forKey: .meshes)
        var meshesDecoded0:[MeshRef]? = nil
        if let meshesContainer = meshesContainer {
            meshesDecoded0 = [MeshRef]()
            for structure0 in meshesContainer {
                meshesDecoded0?.append(structure0)
            }
        }
        meshes = meshesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
