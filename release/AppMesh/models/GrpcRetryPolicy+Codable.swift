// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrpcRetryPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case grpcRetryEvents
        case httpRetryEvents
        case maxRetries
        case perRetryTimeout
        case tcpRetryEvents
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grpcRetryEvents = grpcRetryEvents {
            var grpcRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grpcRetryEvents)
            for grpcretrypolicyevents0 in grpcRetryEvents {
                try grpcRetryEventsContainer.encode(grpcretrypolicyevents0.rawValue)
            }
        }
        if let httpRetryEvents = httpRetryEvents {
            var httpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .httpRetryEvents)
            for httpretrypolicyevents0 in httpRetryEvents {
                try httpRetryEventsContainer.encode(httpretrypolicyevents0)
            }
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let perRetryTimeout = perRetryTimeout {
            try encodeContainer.encode(perRetryTimeout, forKey: .perRetryTimeout)
        }
        if let tcpRetryEvents = tcpRetryEvents {
            var tcpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tcpRetryEvents)
            for tcpretrypolicyevents0 in tcpRetryEvents {
                try tcpRetryEventsContainer.encode(tcpretrypolicyevents0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perRetryTimeoutDecoded = try containerValues.decodeIfPresent(Duration.self, forKey: .perRetryTimeout)
        perRetryTimeout = perRetryTimeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let httpRetryEventsContainer = try containerValues.decodeIfPresent([String].self, forKey: .httpRetryEvents)
        var httpRetryEventsDecoded0:[String]? = nil
        if let httpRetryEventsContainer = httpRetryEventsContainer {
            httpRetryEventsDecoded0 = [String]()
            for string0 in httpRetryEventsContainer {
                httpRetryEventsDecoded0?.append(string0)
            }
        }
        httpRetryEvents = httpRetryEventsDecoded0
        let tcpRetryEventsContainer = try containerValues.decodeIfPresent([TcpRetryPolicyEvent].self, forKey: .tcpRetryEvents)
        var tcpRetryEventsDecoded0:[TcpRetryPolicyEvent]? = nil
        if let tcpRetryEventsContainer = tcpRetryEventsContainer {
            tcpRetryEventsDecoded0 = [TcpRetryPolicyEvent]()
            for string0 in tcpRetryEventsContainer {
                tcpRetryEventsDecoded0?.append(string0)
            }
        }
        tcpRetryEvents = tcpRetryEventsDecoded0
        let grpcRetryEventsContainer = try containerValues.decodeIfPresent([GrpcRetryPolicyEvent].self, forKey: .grpcRetryEvents)
        var grpcRetryEventsDecoded0:[GrpcRetryPolicyEvent]? = nil
        if let grpcRetryEventsContainer = grpcRetryEventsContainer {
            grpcRetryEventsDecoded0 = [GrpcRetryPolicyEvent]()
            for string0 in grpcRetryEventsContainer {
                grpcRetryEventsDecoded0?.append(string0)
            }
        }
        grpcRetryEvents = grpcRetryEventsDecoded0
    }
}
