// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListenerTls: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificate
        case mode
        case validation
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let validation = validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(ListenerTlsMode.self, forKey: .mode)
        mode = modeDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(ListenerTlsCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
        let validationDecoded = try containerValues.decodeIfPresent(ListenerTlsValidationContext.self, forKey: .validation)
        validation = validationDecoded
    }
}
