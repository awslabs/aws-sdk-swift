// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrpcRouteMetadataMatchMethod: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exact
        case prefix
        case range
        case regex
        case sdkUnknown
        case suffix
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .exact(exact):
                if let exact = exact {
                    try container.encode(exact, forKey: .exact)
                }
            case let .prefix(prefix):
                if let prefix = prefix {
                    try container.encode(prefix, forKey: .prefix)
                }
            case let .range(range):
                if let range = range {
                    try container.encode(range, forKey: .range)
                }
            case let .regex(regex):
                if let regex = regex {
                    try container.encode(regex, forKey: .regex)
                }
            case let .suffix(suffix):
                if let suffix = suffix {
                    try container.encode(suffix, forKey: .suffix)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let exactDecoded = try values.decodeIfPresent(String.self, forKey: .exact)
        if let exact = exactDecoded {
            self = .exact(exact)
            return
        }
        let regexDecoded = try values.decodeIfPresent(String.self, forKey: .regex)
        if let regex = regexDecoded {
            self = .regex(regex)
            return
        }
        let rangeDecoded = try values.decodeIfPresent(MatchRange.self, forKey: .range)
        if let range = rangeDecoded {
            self = .range(range)
            return
        }
        let prefixDecoded = try values.decodeIfPresent(String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let suffixDecoded = try values.decodeIfPresent(String.self, forKey: .suffix)
        if let suffix = suffixDecoded {
            self = .suffix(suffix)
            return
        }
        self = .sdkUnknown("")
    }
}
