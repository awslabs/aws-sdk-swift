// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrpcRouteAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case weightedTargets
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let weightedTargets = weightedTargets {
            var weightedTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .weightedTargets)
            for weightedtargets0 in weightedTargets {
                try weightedTargetsContainer.encode(weightedtargets0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weightedTargetsContainer = try containerValues.decodeIfPresent([WeightedTarget].self, forKey: .weightedTargets)
        var weightedTargetsDecoded0:[WeightedTarget]? = nil
        if let weightedTargetsContainer = weightedTargetsContainer {
            weightedTargetsDecoded0 = [WeightedTarget]()
            for structure0 in weightedTargetsContainer {
                weightedTargetsDecoded0?.append(structure0)
            }
        }
        weightedTargets = weightedTargetsDecoded0
    }
}
