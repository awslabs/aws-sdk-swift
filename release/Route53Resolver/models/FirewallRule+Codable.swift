// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirewallRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case blockOverrideDnsType = "BlockOverrideDnsType"
        case blockOverrideDomain = "BlockOverrideDomain"
        case blockOverrideTtl = "BlockOverrideTtl"
        case blockResponse = "BlockResponse"
        case creationTime = "CreationTime"
        case creatorRequestId = "CreatorRequestId"
        case firewallDomainListId = "FirewallDomainListId"
        case firewallRuleGroupId = "FirewallRuleGroupId"
        case modificationTime = "ModificationTime"
        case name = "Name"
        case priority = "Priority"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let blockOverrideDnsType = blockOverrideDnsType {
            try encodeContainer.encode(blockOverrideDnsType.rawValue, forKey: .blockOverrideDnsType)
        }
        if let blockOverrideDomain = blockOverrideDomain {
            try encodeContainer.encode(blockOverrideDomain, forKey: .blockOverrideDomain)
        }
        if let blockOverrideTtl = blockOverrideTtl {
            try encodeContainer.encode(blockOverrideTtl, forKey: .blockOverrideTtl)
        }
        if let blockResponse = blockResponse {
            try encodeContainer.encode(blockResponse.rawValue, forKey: .blockResponse)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let creatorRequestId = creatorRequestId {
            try encodeContainer.encode(creatorRequestId, forKey: .creatorRequestId)
        }
        if let firewallDomainListId = firewallDomainListId {
            try encodeContainer.encode(firewallDomainListId, forKey: .firewallDomainListId)
        }
        if let firewallRuleGroupId = firewallRuleGroupId {
            try encodeContainer.encode(firewallRuleGroupId, forKey: .firewallRuleGroupId)
        }
        if let modificationTime = modificationTime {
            try encodeContainer.encode(modificationTime, forKey: .modificationTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let priority = priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallRuleGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firewallRuleGroupId)
        firewallRuleGroupId = firewallRuleGroupIdDecoded
        let firewallDomainListIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firewallDomainListId)
        firewallDomainListId = firewallDomainListIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .priority)
        priority = priorityDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Action.self, forKey: .action)
        action = actionDecoded
        let blockResponseDecoded = try containerValues.decodeIfPresent(BlockResponse.self, forKey: .blockResponse)
        blockResponse = blockResponseDecoded
        let blockOverrideDomainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .blockOverrideDomain)
        blockOverrideDomain = blockOverrideDomainDecoded
        let blockOverrideDnsTypeDecoded = try containerValues.decodeIfPresent(BlockOverrideDnsType.self, forKey: .blockOverrideDnsType)
        blockOverrideDnsType = blockOverrideDnsTypeDecoded
        let blockOverrideTtlDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .blockOverrideTtl)
        blockOverrideTtl = blockOverrideTtlDecoded
        let creatorRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorRequestId)
        creatorRequestId = creatorRequestIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modificationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modificationTime)
        modificationTime = modificationTimeDecoded
    }
}
