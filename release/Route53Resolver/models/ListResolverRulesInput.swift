// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListResolverRulesInput: Equatable {
    /// <p>An optional specification to return a subset of Resolver rules, such as all Resolver rules that are associated with the same Resolver endpoint.</p>
    /// 		       <note>
    ///             <p>If you submit a second or subsequent <code>ListResolverRules</code> request and specify the <code>NextToken</code> parameter,
    /// 			you must use the same values for <code>Filters</code>, if any, as in the previous request.</p>
    ///          </note>
    public let filters: [Filter]?
    /// <p>The maximum number of Resolver rules that you want to return in the response to a <code>ListResolverRules</code> request.
    /// 			If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 Resolver rules.</p>
    public let maxResults: Int?
    /// <p>For the first <code>ListResolverRules</code> request, omit this value.</p>
    /// 		       <p>If you have more than <code>MaxResults</code> Resolver rules, you can submit another <code>ListResolverRules</code> request
    /// 			to get the next group of Resolver rules. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    public let nextToken: String?

    public init (
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
