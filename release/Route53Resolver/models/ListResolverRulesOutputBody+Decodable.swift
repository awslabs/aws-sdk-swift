// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResolverRulesOutputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
    public let resolverRules: [ResolverRule]?
}

extension ListResolverRulesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resolverRules = "ResolverRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let resolverRulesContainer = try containerValues.decodeIfPresent([ResolverRule].self, forKey: .resolverRules)
        var resolverRulesDecoded0:[ResolverRule]? = nil
        if let resolverRulesContainer = resolverRulesContainer {
            resolverRulesDecoded0 = [ResolverRule]()
            for structure0 in resolverRulesContainer {
                resolverRulesDecoded0?.append(structure0)
            }
        }
        resolverRules = resolverRulesDecoded0
    }
}
