// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResolverRuleAssociationsOutputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
    public let resolverRuleAssociations: [ResolverRuleAssociation]?
}

extension ListResolverRuleAssociationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resolverRuleAssociations = "ResolverRuleAssociations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let resolverRuleAssociationsContainer = try containerValues.decodeIfPresent([ResolverRuleAssociation].self, forKey: .resolverRuleAssociations)
        var resolverRuleAssociationsDecoded0:[ResolverRuleAssociation]? = nil
        if let resolverRuleAssociationsContainer = resolverRuleAssociationsContainer {
            resolverRuleAssociationsDecoded0 = [ResolverRuleAssociation]()
            for structure0 in resolverRuleAssociationsContainer {
                resolverRuleAssociationsDecoded0?.append(structure0)
            }
        }
        resolverRuleAssociations = resolverRuleAssociationsDecoded0
    }
}
