// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateResolverEndpointInput: Equatable {
    /// <p>A unique string that identifies the request and that allows failed requests to be retried
    /// 			without the risk of running the operation twice. <code>CreatorRequestId</code> can be
    /// 			any unique string, for example, a date/time stamp. </p>
    public let creatorRequestId: String?
    /// <p>Specify the applicable value:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INBOUND</code>: Resolver forwards DNS queries to the DNS service for a VPC from your network</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OUTBOUND</code>: Resolver forwards DNS queries from the DNS service for a VPC to your network</p>
    ///             </li>
    ///          </ul>
    public let direction: ResolverEndpointDirection?
    /// <p>The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward
    /// 			DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC. </p>
    public let ipAddresses: [IpAddressRequest]?
    /// <p>A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.</p>
    public let name: String?
    /// <p>The ID of one or more security groups that you want to use to control access to this VPC. The security group that you specify
    /// 			must include one or more inbound rules (for inbound Resolver endpoints) or outbound rules (for outbound Resolver endpoints).
    /// 			Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port
    /// 			that you're using for DNS queries on your network.</p>
    public let securityGroupIds: [String]?
    /// <p>A list of the tag keys and values that you want to associate with the endpoint.</p>
    public let tags: [Tag]?

    public init (
        creatorRequestId: String? = nil,
        direction: ResolverEndpointDirection? = nil,
        ipAddresses: [IpAddressRequest]? = nil,
        name: String? = nil,
        securityGroupIds: [String]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.creatorRequestId = creatorRequestId
        self.direction = direction
        self.ipAddresses = ipAddresses
        self.name = name
        self.securityGroupIds = securityGroupIds
        self.tags = tags
    }
}
