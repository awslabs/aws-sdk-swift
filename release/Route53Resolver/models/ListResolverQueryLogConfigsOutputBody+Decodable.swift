// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResolverQueryLogConfigsOutputBody: Equatable {
    public let nextToken: String?
    public let totalCount: Int
    public let totalFilteredCount: Int
    public let resolverQueryLogConfigs: [ResolverQueryLogConfig]?
}

extension ListResolverQueryLogConfigsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resolverQueryLogConfigs = "ResolverQueryLogConfigs"
        case totalCount = "TotalCount"
        case totalFilteredCount = "TotalFilteredCount"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let totalCountDecoded = try containerValues.decode(Int.self, forKey: .totalCount)
        totalCount = totalCountDecoded
        let totalFilteredCountDecoded = try containerValues.decode(Int.self, forKey: .totalFilteredCount)
        totalFilteredCount = totalFilteredCountDecoded
        let resolverQueryLogConfigsContainer = try containerValues.decodeIfPresent([ResolverQueryLogConfig].self, forKey: .resolverQueryLogConfigs)
        var resolverQueryLogConfigsDecoded0:[ResolverQueryLogConfig]? = nil
        if let resolverQueryLogConfigsContainer = resolverQueryLogConfigsContainer {
            resolverQueryLogConfigsDecoded0 = [ResolverQueryLogConfig]()
            for structure0 in resolverQueryLogConfigsContainer {
                resolverQueryLogConfigsDecoded0?.append(structure0)
            }
        }
        resolverQueryLogConfigs = resolverQueryLogConfigsDecoded0
    }
}
