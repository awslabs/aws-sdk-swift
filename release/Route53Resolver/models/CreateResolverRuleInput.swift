// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateResolverRuleInput: Equatable {
    /// <p>A unique string that identifies the request and that allows failed requests to be retried
    /// 			without the risk of running the operation twice. <code>CreatorRequestId</code> can be
    /// 			any unique string, for example, a date/time stamp. </p>
    public let creatorRequestId: String?
    /// <p>DNS queries for this domain name are forwarded to the IP addresses that you specify in <code>TargetIps</code>. If a query matches
    /// 			multiple Resolver rules (example.com and www.example.com), outbound DNS queries are routed using the Resolver rule that contains
    /// 			the most specific domain name (www.example.com).</p>
    public let domainName: String?
    /// <p>A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.</p>
    public let name: String?
    /// <p>The ID of the outbound Resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify
    /// 			in <code>TargetIps</code>.</p>
    public let resolverEndpointId: String?
    /// <p>When you want to forward DNS queries for specified domain name to resolvers on your network, specify <code>FORWARD</code>.</p>
    /// 		       <p>When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for
    /// 			a subdomain of that domain, specify <code>SYSTEM</code>.</p>
    /// 		       <p>For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify <code>FORWARD</code>
    /// 			for <code>RuleType</code>. To then have Resolver process queries for apex.example.com, you create a rule and specify
    /// 			<code>SYSTEM</code> for <code>RuleType</code>.</p>
    /// 		       <p>Currently, only Resolver can create rules that have a value of <code>RECURSIVE</code> for <code>RuleType</code>.</p>
    public let ruleType: RuleTypeOption?
    /// <p>A list of the tag keys and values that you want to associate with the endpoint.</p>
    public let tags: [Tag]?
    /// <p>The IPs that you want Resolver to forward DNS queries to. You can specify only IPv4 addresses. Separate IP addresses with a space.</p>
    /// 		       <p>
    ///             <code>TargetIps</code> is available only when the value of <code>Rule type</code> is <code>FORWARD</code>.</p>
    public let targetIps: [TargetAddress]?

    public init (
        creatorRequestId: String? = nil,
        domainName: String? = nil,
        name: String? = nil,
        resolverEndpointId: String? = nil,
        ruleType: RuleTypeOption? = nil,
        tags: [Tag]? = nil,
        targetIps: [TargetAddress]? = nil
    )
    {
        self.creatorRequestId = creatorRequestId
        self.domainName = domainName
        self.name = name
        self.resolverEndpointId = resolverEndpointId
        self.ruleType = ruleType
        self.tags = tags
        self.targetIps = targetIps
    }
}
