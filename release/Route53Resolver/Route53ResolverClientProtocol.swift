// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC
/// 			from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names
/// 			such as domain names for EC2 instances or Elastic Load Balancing load balancers.
/// 			Resolver performs recursive lookups against public name servers for all other domain
/// 			names.</p>
///
/// 		       <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p>
///
/// 		       <p>
///             <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b>
///          </p>
///
/// 		       <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers
/// 			to easily resolve domain names for AWS resources such as EC2 instances or records in a Route 53 private hosted zone.
/// 			For more information, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc">How DNS Resolvers
/// 			on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// 		
/// 		       <p>
///             <b>Conditionally forward queries from a VPC to resolvers on your network</b>
///          </p>
///
/// 		       <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network.
/// 			To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward
/// 			(such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to.
/// 			If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match
/// 			(acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network">How Route 53 Resolver
/// 			Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
///
/// 		       <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose
/// 			whether to forward queries from your VPCs to your network (outbound queries), from your
/// 			network to your VPCs (inbound queries), or both.</p>
public protocol Route53ResolverClientProtocol {
    /// <p>Associates a <a>FirewallRuleGroup</a> with a VPC, to provide DNS filtering for the VPC. </p>
    func associateFirewallRuleGroup(input: AssociateFirewallRuleGroupInput, completion: @escaping (SdkResult<AssociateFirewallRuleGroupOutputResponse, AssociateFirewallRuleGroupOutputError>) -> Void)
    /// <p>Adds IP addresses to an inbound or an outbound Resolver endpoint. If you want to add more than one IP address,
    /// 			submit one <code>AssociateResolverEndpointIpAddress</code> request for each IP address.</p>
    /// 		       <p>To remove an IP address from an endpoint, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverEndpointIpAddress.html">DisassociateResolverEndpointIpAddress</a>.
    /// 		</p>
    func associateResolverEndpointIpAddress(input: AssociateResolverEndpointIpAddressInput, completion: @escaping (SdkResult<AssociateResolverEndpointIpAddressOutputResponse, AssociateResolverEndpointIpAddressOutputError>) -> Void)
    /// <p>Associates an Amazon VPC with a specified query logging configuration. Route 53 Resolver logs DNS queries that originate in all of the Amazon VPCs
    /// 			that are associated with a specified query logging configuration. To associate more than one VPC with a configuration, submit one <code>AssociateResolverQueryLogConfig</code>
    /// 			request for each VPC.</p>
    /// 		
    /// 		       <note>
    ///             <p>The VPCs that you associate with a query logging configuration must be in the same Region as the configuration.</p>
    ///          </note>
    /// 		
    /// 		       <p>To remove a VPC from a query logging configuration, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html">DisassociateResolverQueryLogConfig</a>.
    /// 			</p>
    func associateResolverQueryLogConfig(input: AssociateResolverQueryLogConfigInput, completion: @escaping (SdkResult<AssociateResolverQueryLogConfigOutputResponse, AssociateResolverQueryLogConfigOutputError>) -> Void)
    /// <p>Associates a Resolver rule with a VPC. When you associate a rule with a VPC, Resolver forwards all DNS queries
    /// 			for the domain name that is specified in the rule and that originate in the VPC. The queries are forwarded to the
    /// 			IP addresses for the DNS resolvers that are specified in the rule. For more information about rules, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html">CreateResolverRule</a>. </p>
    func associateResolverRule(input: AssociateResolverRuleInput, completion: @escaping (SdkResult<AssociateResolverRuleOutputResponse, AssociateResolverRuleOutputError>) -> Void)
    /// <p>Creates an empty firewall domain list for use in DNS Firewall rules. You can populate the domains for the new list with a file, using <a>ImportFirewallDomains</a>, or with domain strings, using <a>UpdateFirewallDomains</a>. </p>
    func createFirewallDomainList(input: CreateFirewallDomainListInput, completion: @escaping (SdkResult<CreateFirewallDomainListOutputResponse, CreateFirewallDomainListOutputError>) -> Void)
    /// <p>Creates a single DNS Firewall rule in the specified rule group, using the specified domain list.</p>
    func createFirewallRule(input: CreateFirewallRuleInput, completion: @escaping (SdkResult<CreateFirewallRuleOutputResponse, CreateFirewallRuleOutputError>) -> Void)
    /// <p>Creates an empty DNS Firewall rule group for filtering DNS network traffic in a VPC. You can add rules to the new rule group
    ///            by calling <a>CreateFirewallRule</a>. </p>
    func createFirewallRuleGroup(input: CreateFirewallRuleGroupInput, completion: @escaping (SdkResult<CreateFirewallRuleGroupOutputResponse, CreateFirewallRuleGroupOutputError>) -> Void)
    /// <p>Creates a Resolver endpoint. There are two types of Resolver endpoints, inbound and outbound:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>An <i>inbound Resolver endpoint</i> forwards DNS queries to the DNS service for a VPC
    /// 				from your network.</p>
    ///             </li>
    ///             <li>
    ///                <p>An <i>outbound Resolver endpoint</i> forwards DNS queries from the DNS service for a VPC
    /// 				to your network.</p>
    ///             </li>
    ///          </ul>
    func createResolverEndpoint(input: CreateResolverEndpointInput, completion: @escaping (SdkResult<CreateResolverEndpointOutputResponse, CreateResolverEndpointOutputError>) -> Void)
    /// <p>Creates a Resolver query logging configuration, which defines where you want Resolver to save DNS query logs that originate in your VPCs.
    /// 			Resolver can log queries only for VPCs that are in the same Region as the query logging configuration.</p>
    /// 		
    /// 		       <p>To specify which VPCs you want to log queries for, you use <code>AssociateResolverQueryLogConfig</code>. For more information, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverQueryLogConfig.html">AssociateResolverQueryLogConfig</a>. </p>
    /// 		
    /// 		       <p>You can optionally use AWS Resource Access Manager (AWS RAM) to share a query logging configuration with other AWS accounts. The other accounts
    /// 			can then associate VPCs with the configuration. The query logs that Resolver creates for a configuration include all DNS queries that originate in all
    /// 			VPCs that are associated with the configuration.</p>
    func createResolverQueryLogConfig(input: CreateResolverQueryLogConfigInput, completion: @escaping (SdkResult<CreateResolverQueryLogConfigOutputResponse, CreateResolverQueryLogConfigOutputError>) -> Void)
    /// <p>For DNS queries that originate in your VPCs, specifies which Resolver endpoint the queries pass through,
    /// 			one domain name that you want to forward to your network, and the IP addresses of the DNS resolvers in your network.</p>
    func createResolverRule(input: CreateResolverRuleInput, completion: @escaping (SdkResult<CreateResolverRuleOutputResponse, CreateResolverRuleOutputError>) -> Void)
    /// <p>Deletes the specified domain list. </p>
    func deleteFirewallDomainList(input: DeleteFirewallDomainListInput, completion: @escaping (SdkResult<DeleteFirewallDomainListOutputResponse, DeleteFirewallDomainListOutputError>) -> Void)
    /// <p>Deletes the specified firewall rule.</p>
    func deleteFirewallRule(input: DeleteFirewallRuleInput, completion: @escaping (SdkResult<DeleteFirewallRuleOutputResponse, DeleteFirewallRuleOutputError>) -> Void)
    /// <p>Deletes the specified firewall rule group. </p>
    func deleteFirewallRuleGroup(input: DeleteFirewallRuleGroupInput, completion: @escaping (SdkResult<DeleteFirewallRuleGroupOutputResponse, DeleteFirewallRuleGroupOutputError>) -> Void)
    /// <p>Deletes a Resolver endpoint. The effect of deleting a Resolver endpoint depends on whether it's an inbound or an outbound
    /// 			Resolver endpoint:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Inbound</b>: DNS queries from your network are no longer routed
    /// 				to the DNS service for the specified VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Outbound</b>: DNS queries from a VPC are no longer routed to your network.</p>
    ///             </li>
    ///          </ul>
    func deleteResolverEndpoint(input: DeleteResolverEndpointInput, completion: @escaping (SdkResult<DeleteResolverEndpointOutputResponse, DeleteResolverEndpointOutputError>) -> Void)
    /// <p>Deletes a query logging configuration. When you delete a configuration, Resolver stops logging DNS queries for all of the Amazon VPCs that are
    /// 			associated with the configuration. This also applies if the query logging configuration is shared with other AWS accounts, and
    /// 			the other accounts have associated VPCs with the shared configuration.</p>
    /// 		
    /// 		       <p>Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. See
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html">DisassociateResolverQueryLogConfig</a>.</p>
    /// 			
    /// 		       <p>If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, you must stop sharing
    /// 			the configuration before you can delete a configuration. The accounts that you shared the configuration with can first disassociate VPCs
    /// 			that they associated with the configuration, but that's not necessary. If you stop sharing the configuration, those VPCs are automatically
    /// 			disassociated from the configuration.</p>
    func deleteResolverQueryLogConfig(input: DeleteResolverQueryLogConfigInput, completion: @escaping (SdkResult<DeleteResolverQueryLogConfigOutputResponse, DeleteResolverQueryLogConfigOutputError>) -> Void)
    /// <p>Deletes a Resolver rule. Before you can delete a Resolver rule, you must disassociate it from all the VPCs that you
    /// 			associated the Resolver rule with. For more information, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html">DisassociateResolverRule</a>.</p>
    func deleteResolverRule(input: DeleteResolverRuleInput, completion: @escaping (SdkResult<DeleteResolverRuleOutputResponse, DeleteResolverRuleOutputError>) -> Void)
    /// <p>Disassociates a <a>FirewallRuleGroup</a> from a VPC, to remove DNS filtering from the VPC. </p>
    func disassociateFirewallRuleGroup(input: DisassociateFirewallRuleGroupInput, completion: @escaping (SdkResult<DisassociateFirewallRuleGroupOutputResponse, DisassociateFirewallRuleGroupOutputError>) -> Void)
    /// <p>Removes IP addresses from an inbound or an outbound Resolver endpoint. If you want to remove more than one IP address,
    /// 			submit one <code>DisassociateResolverEndpointIpAddress</code> request for each IP address.</p>
    /// 		       <p>To add an IP address to an endpoint, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverEndpointIpAddress.html">AssociateResolverEndpointIpAddress</a>.
    /// 		</p>
    func disassociateResolverEndpointIpAddress(input: DisassociateResolverEndpointIpAddressInput, completion: @escaping (SdkResult<DisassociateResolverEndpointIpAddressOutputResponse, DisassociateResolverEndpointIpAddressOutputError>) -> Void)
    /// <p>Disassociates a VPC from a query logging configuration.</p>
    /// 		
    /// 		       <note>
    /// 			         <p>Before you can delete a query logging configuration, you must first disassociate all VPCs
    /// 				from the configuration. If you used AWS Resource Access Manager (AWS RAM) to share a
    /// 				query logging configuration with other accounts, VPCs can be disassociated from the
    /// 				configuration in the following ways:</p>
    /// 			         <ul>
    ///                <li>
    ///                   <p>The accounts that you shared the configuration with can disassociate VPCs from the configuration.</p>
    ///                </li>
    ///                <li>
    ///                   <p>You can stop sharing the configuration.</p>
    ///                </li>
    ///             </ul>
    /// 		       </note>
    func disassociateResolverQueryLogConfig(input: DisassociateResolverQueryLogConfigInput, completion: @escaping (SdkResult<DisassociateResolverQueryLogConfigOutputResponse, DisassociateResolverQueryLogConfigOutputError>) -> Void)
    /// <p>Removes the association between a specified Resolver rule and a specified VPC.</p>
    /// 		       <important>
    /// 			         <p>If you disassociate a Resolver rule from a VPC, Resolver stops forwarding DNS queries for the
    /// 				domain name that you specified in the Resolver rule. </p>
    /// 		       </important>
    func disassociateResolverRule(input: DisassociateResolverRuleInput, completion: @escaping (SdkResult<DisassociateResolverRuleOutputResponse, DisassociateResolverRuleOutputError>) -> Void)
    /// <p>Retrieves the configuration of the firewall behavior provided by DNS Firewall for a
    /// 			single VPC from Amazon Virtual Private Cloud (Amazon VPC). </p>
    func getFirewallConfig(input: GetFirewallConfigInput, completion: @escaping (SdkResult<GetFirewallConfigOutputResponse, GetFirewallConfigOutputError>) -> Void)
    /// <p>Retrieves the specified firewall domain list.</p>
    func getFirewallDomainList(input: GetFirewallDomainListInput, completion: @escaping (SdkResult<GetFirewallDomainListOutputResponse, GetFirewallDomainListOutputError>) -> Void)
    /// <p>Retrieves the specified firewall rule group. </p>
    func getFirewallRuleGroup(input: GetFirewallRuleGroupInput, completion: @escaping (SdkResult<GetFirewallRuleGroupOutputResponse, GetFirewallRuleGroupOutputError>) -> Void)
    /// <p>Retrieves a firewall rule group association, which enables DNS filtering for a VPC with one rule group. A VPC can have more than one firewall rule group association, and a rule group can be associated with more than one VPC.</p>
    func getFirewallRuleGroupAssociation(input: GetFirewallRuleGroupAssociationInput, completion: @escaping (SdkResult<GetFirewallRuleGroupAssociationOutputResponse, GetFirewallRuleGroupAssociationOutputError>) -> Void)
    /// <p>Returns the AWS Identity and Access Management (AWS IAM) policy for sharing the
    /// 			specified rule group. You can use the policy to share the rule group using AWS Resource
    /// 			Access Manager (AWS RAM). </p>
    func getFirewallRuleGroupPolicy(input: GetFirewallRuleGroupPolicyInput, completion: @escaping (SdkResult<GetFirewallRuleGroupPolicyOutputResponse, GetFirewallRuleGroupPolicyOutputError>) -> Void)
    /// <p>Gets DNSSEC validation information for a specified resource.</p>
    func getResolverDnssecConfig(input: GetResolverDnssecConfigInput, completion: @escaping (SdkResult<GetResolverDnssecConfigOutputResponse, GetResolverDnssecConfigOutputError>) -> Void)
    /// <p>Gets information about a specified Resolver endpoint, such as whether it's an inbound or an outbound Resolver endpoint, and the
    /// 			current status of the endpoint.</p>
    func getResolverEndpoint(input: GetResolverEndpointInput, completion: @escaping (SdkResult<GetResolverEndpointOutputResponse, GetResolverEndpointOutputError>) -> Void)
    /// <p>Gets information about a specified Resolver query logging configuration, such as the number of VPCs that the configuration
    /// 			is logging queries for and the location that logs are sent to. </p>
    func getResolverQueryLogConfig(input: GetResolverQueryLogConfigInput, completion: @escaping (SdkResult<GetResolverQueryLogConfigOutputResponse, GetResolverQueryLogConfigOutputError>) -> Void)
    /// <p>Gets information about a specified association between a Resolver query logging configuration and an Amazon VPC. When you associate a VPC
    /// 			with a query logging configuration, Resolver logs DNS queries that originate in that VPC.</p>
    func getResolverQueryLogConfigAssociation(input: GetResolverQueryLogConfigAssociationInput, completion: @escaping (SdkResult<GetResolverQueryLogConfigAssociationOutputResponse, GetResolverQueryLogConfigAssociationOutputError>) -> Void)
    /// <p>Gets information about a query logging policy. A query logging policy specifies the Resolver query logging
    /// 			operations and resources that you want to allow another AWS account to be able to use.</p>
    func getResolverQueryLogConfigPolicy(input: GetResolverQueryLogConfigPolicyInput, completion: @escaping (SdkResult<GetResolverQueryLogConfigPolicyOutputResponse, GetResolverQueryLogConfigPolicyOutputError>) -> Void)
    /// <p>Gets information about a specified Resolver rule, such as the domain name that the rule forwards DNS queries for and the ID of the
    /// 			outbound Resolver endpoint that the rule is associated with.</p>
    func getResolverRule(input: GetResolverRuleInput, completion: @escaping (SdkResult<GetResolverRuleOutputResponse, GetResolverRuleOutputError>) -> Void)
    /// <p>Gets information about an association between a specified Resolver rule and a VPC. You associate a Resolver rule and a VPC using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html">AssociateResolverRule</a>. </p>
    func getResolverRuleAssociation(input: GetResolverRuleAssociationInput, completion: @escaping (SdkResult<GetResolverRuleAssociationOutputResponse, GetResolverRuleAssociationOutputError>) -> Void)
    /// <p>Gets information about the Resolver rule policy for a specified rule. A Resolver rule policy includes the rule that you want to share
    /// 			with another account, the account that you want to share the rule with, and the Resolver operations that you want to allow the account to use. </p>
    func getResolverRulePolicy(input: GetResolverRulePolicyInput, completion: @escaping (SdkResult<GetResolverRulePolicyOutputResponse, GetResolverRulePolicyOutputError>) -> Void)
    /// <p>Imports domain names from a file into a domain list, for use in a DNS firewall rule group. </p>
    ///          <p>Each domain specification in your domain list must satisfy the following
    /// 	requirements: </p>
    ///          <ul>
    ///             <li>
    ///       	        <p>It can optionally start with <code>*</code> (asterisk).</p>
    ///       	     </li>
    ///             <li>
    ///       	        <p>With the exception of the optional starting asterisk, it must only contain
    ///       	   the following characters: <code>A-Z</code>, <code>a-z</code>,
    ///       	   <code>0-9</code>, <code>-</code> (hyphen).</p>
    ///       	     </li>
    ///             <li>
    ///       	        <p>It must be from 1-255 characters in length. </p>
    ///       	     </li>
    ///          </ul>
    func importFirewallDomains(input: ImportFirewallDomainsInput, completion: @escaping (SdkResult<ImportFirewallDomainsOutputResponse, ImportFirewallDomainsOutputError>) -> Void)
    /// <p>Retrieves the firewall configurations that you have defined. DNS Firewall uses the configurations to manage firewall behavior for your VPCs. </p>
    ///          <p>A single call might return only a partial list of the configurations. For information, see <code>MaxResults</code>. </p>
    func listFirewallConfigs(input: ListFirewallConfigsInput, completion: @escaping (SdkResult<ListFirewallConfigsOutputResponse, ListFirewallConfigsOutputError>) -> Void)
    /// <p>Retrieves the firewall domain lists that you have defined. For each firewall domain list, you can retrieve the domains that are defined for a list by calling <a>ListFirewallDomains</a>. </p>
    ///          <p>A single call to this list operation might return only a partial list of the domain lists. For information, see <code>MaxResults</code>. </p>
    func listFirewallDomainLists(input: ListFirewallDomainListsInput, completion: @escaping (SdkResult<ListFirewallDomainListsOutputResponse, ListFirewallDomainListsOutputError>) -> Void)
    /// <p>Retrieves the domains that you have defined for the specified firewall domain list.  </p>
    ///          <p>A single call might return only a partial list of the domains. For information, see <code>MaxResults</code>. </p>
    func listFirewallDomains(input: ListFirewallDomainsInput, completion: @escaping (SdkResult<ListFirewallDomainsOutputResponse, ListFirewallDomainsOutputError>) -> Void)
    /// <p>Retrieves the firewall rule group associations that you have defined. Each association enables DNS filtering for a VPC with one rule group. </p>
    ///          <p>A single call might return only a partial list of the associations. For information, see <code>MaxResults</code>. </p>
    func listFirewallRuleGroupAssociations(input: ListFirewallRuleGroupAssociationsInput, completion: @escaping (SdkResult<ListFirewallRuleGroupAssociationsOutputResponse, ListFirewallRuleGroupAssociationsOutputError>) -> Void)
    /// <p>Retrieves the minimal high-level information for the rule groups that you have defined.  </p>
    ///          <p>A single call might return only a partial list of the rule groups. For information, see <code>MaxResults</code>. </p>
    func listFirewallRuleGroups(input: ListFirewallRuleGroupsInput, completion: @escaping (SdkResult<ListFirewallRuleGroupsOutputResponse, ListFirewallRuleGroupsOutputError>) -> Void)
    /// <p>Retrieves the firewall rules that you have defined for the specified firewall rule group. DNS Firewall uses the rules in a rule group to filter DNS network traffic for a VPC. </p>
    ///          <p>A single call might return only a partial list of the rules. For information, see <code>MaxResults</code>. </p>
    func listFirewallRules(input: ListFirewallRulesInput, completion: @escaping (SdkResult<ListFirewallRulesOutputResponse, ListFirewallRulesOutputError>) -> Void)
    /// <p>Lists the configurations for DNSSEC validation that are associated with the current AWS account.</p>
    func listResolverDnssecConfigs(input: ListResolverDnssecConfigsInput, completion: @escaping (SdkResult<ListResolverDnssecConfigsOutputResponse, ListResolverDnssecConfigsOutputError>) -> Void)
    /// <p>Gets the IP addresses for a specified Resolver endpoint.</p>
    func listResolverEndpointIpAddresses(input: ListResolverEndpointIpAddressesInput, completion: @escaping (SdkResult<ListResolverEndpointIpAddressesOutputResponse, ListResolverEndpointIpAddressesOutputError>) -> Void)
    /// <p>Lists all the Resolver endpoints that were created using the current AWS account.</p>
    func listResolverEndpoints(input: ListResolverEndpointsInput, completion: @escaping (SdkResult<ListResolverEndpointsOutputResponse, ListResolverEndpointsOutputError>) -> Void)
    /// <p>Lists information about associations between Amazon VPCs and query logging configurations.</p>
    func listResolverQueryLogConfigAssociations(input: ListResolverQueryLogConfigAssociationsInput, completion: @escaping (SdkResult<ListResolverQueryLogConfigAssociationsOutputResponse, ListResolverQueryLogConfigAssociationsOutputError>) -> Void)
    /// <p>Lists information about the specified query logging configurations. Each configuration defines where you want Resolver to save
    /// 			DNS query logs and specifies the VPCs that you want to log queries for.</p>
    func listResolverQueryLogConfigs(input: ListResolverQueryLogConfigsInput, completion: @escaping (SdkResult<ListResolverQueryLogConfigsOutputResponse, ListResolverQueryLogConfigsOutputError>) -> Void)
    /// <p>Lists the associations that were created between Resolver rules and VPCs using the current AWS account.</p>
    func listResolverRuleAssociations(input: ListResolverRuleAssociationsInput, completion: @escaping (SdkResult<ListResolverRuleAssociationsOutputResponse, ListResolverRuleAssociationsOutputError>) -> Void)
    /// <p>Lists the Resolver rules that were created using the current AWS account.</p>
    func listResolverRules(input: ListResolverRulesInput, completion: @escaping (SdkResult<ListResolverRulesOutputResponse, ListResolverRulesOutputError>) -> Void)
    /// <p>Lists the tags that you associated with the specified resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Attaches an AWS Identity and Access Management (AWS IAM) policy for sharing the rule
    /// 			group. You can use the policy to share the rule group using AWS Resource Access Manager
    /// 			(AWS RAM). </p>
    func putFirewallRuleGroupPolicy(input: PutFirewallRuleGroupPolicyInput, completion: @escaping (SdkResult<PutFirewallRuleGroupPolicyOutputResponse, PutFirewallRuleGroupPolicyOutputError>) -> Void)
    /// <p>Specifies an AWS account that you want to share a query logging configuration with, the query logging configuration that you want to share,
    /// 			and the operations that you want the account to be able to perform on the configuration.</p>
    func putResolverQueryLogConfigPolicy(input: PutResolverQueryLogConfigPolicyInput, completion: @escaping (SdkResult<PutResolverQueryLogConfigPolicyOutputResponse, PutResolverQueryLogConfigPolicyOutputError>) -> Void)
    /// <p>Specifies an AWS rule that you want to share with another account, the account that you want to share the rule with,
    /// 			and the operations that you want the account to be able to perform on the rule.</p>
    func putResolverRulePolicy(input: PutResolverRulePolicyInput, completion: @escaping (SdkResult<PutResolverRulePolicyOutputResponse, PutResolverRulePolicyOutputError>) -> Void)
    /// <p>Adds one or more tags to a specified resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes one or more tags from a specified resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the configuration of the firewall behavior provided by DNS Firewall for a single
    /// 			VPC from Amazon Virtual Private Cloud (Amazon VPC). </p>
    func updateFirewallConfig(input: UpdateFirewallConfigInput, completion: @escaping (SdkResult<UpdateFirewallConfigOutputResponse, UpdateFirewallConfigOutputError>) -> Void)
    /// <p>Updates the firewall domain list from an array of domain specifications. </p>
    func updateFirewallDomains(input: UpdateFirewallDomainsInput, completion: @escaping (SdkResult<UpdateFirewallDomainsOutputResponse, UpdateFirewallDomainsOutputError>) -> Void)
    /// <p>Updates the specified firewall rule. </p>
    func updateFirewallRule(input: UpdateFirewallRuleInput, completion: @escaping (SdkResult<UpdateFirewallRuleOutputResponse, UpdateFirewallRuleOutputError>) -> Void)
    /// <p>Changes the association of a <a>FirewallRuleGroup</a> with a VPC. The association enables DNS filtering for the VPC. </p>
    func updateFirewallRuleGroupAssociation(input: UpdateFirewallRuleGroupAssociationInput, completion: @escaping (SdkResult<UpdateFirewallRuleGroupAssociationOutputResponse, UpdateFirewallRuleGroupAssociationOutputError>) -> Void)
    /// <p>Updates an existing DNSSEC validation configuration. If there is no existing DNSSEC validation configuration, one is created.</p>
    func updateResolverDnssecConfig(input: UpdateResolverDnssecConfigInput, completion: @escaping (SdkResult<UpdateResolverDnssecConfigOutputResponse, UpdateResolverDnssecConfigOutputError>) -> Void)
    /// <p>Updates the name of an inbound or an outbound Resolver endpoint.  </p>
    func updateResolverEndpoint(input: UpdateResolverEndpointInput, completion: @escaping (SdkResult<UpdateResolverEndpointOutputResponse, UpdateResolverEndpointOutputError>) -> Void)
    /// <p>Updates settings for a specified Resolver rule. <code>ResolverRuleId</code> is required, and all other parameters are optional.
    /// 			If you don't specify a parameter, it retains its current value.</p>
    func updateResolverRule(input: UpdateResolverRuleInput, completion: @escaping (SdkResult<UpdateResolverRuleOutputResponse, UpdateResolverRuleOutputError>) -> Void)
}
