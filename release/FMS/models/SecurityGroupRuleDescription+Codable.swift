// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityGroupRuleDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fromPort = "FromPort"
        case iPV4Range = "IPV4Range"
        case iPV6Range = "IPV6Range"
        case prefixListId = "PrefixListId"
        case `protocol` = "Protocol"
        case toPort = "ToPort"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromPort = fromPort {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let iPV4Range = iPV4Range {
            try encodeContainer.encode(iPV4Range, forKey: .iPV4Range)
        }
        if let iPV6Range = iPV6Range {
            try encodeContainer.encode(iPV6Range, forKey: .iPV6Range)
        }
        if let prefixListId = prefixListId {
            try encodeContainer.encode(prefixListId, forKey: .prefixListId)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let toPort = toPort {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iPV4RangeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iPV4Range)
        iPV4Range = iPV4RangeDecoded
        let iPV6RangeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iPV6Range)
        iPV6Range = iPV6RangeDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let fromPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .toPort)
        toPort = toPortDecoded
    }
}
