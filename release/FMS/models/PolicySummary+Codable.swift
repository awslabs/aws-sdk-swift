// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PolicySummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyArn = "PolicyArn"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case remediationEnabled = "RemediationEnabled"
        case resourceType = "ResourceType"
        case securityServiceType = "SecurityServiceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if remediationEnabled != false {
            try encodeContainer.encode(remediationEnabled, forKey: .remediationEnabled)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let securityServiceType = securityServiceType {
            try encodeContainer.encode(securityServiceType.rawValue, forKey: .securityServiceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let securityServiceTypeDecoded = try containerValues.decodeIfPresent(SecurityServiceType.self, forKey: .securityServiceType)
        securityServiceType = securityServiceTypeDecoded
        let remediationEnabledDecoded = try containerValues.decode(Bool.self, forKey: .remediationEnabled)
        remediationEnabled = remediationEnabledDecoded
    }
}
