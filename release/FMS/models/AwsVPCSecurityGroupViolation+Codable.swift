// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsVPCSecurityGroupViolation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case partialMatches = "PartialMatches"
        case possibleSecurityGroupRemediationActions = "PossibleSecurityGroupRemediationActions"
        case violationTarget = "ViolationTarget"
        case violationTargetDescription = "ViolationTargetDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partialMatches = partialMatches {
            var partialMatchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partialMatches)
            for partialmatches0 in partialMatches {
                try partialMatchesContainer.encode(partialmatches0)
            }
        }
        if let possibleSecurityGroupRemediationActions = possibleSecurityGroupRemediationActions {
            var possibleSecurityGroupRemediationActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .possibleSecurityGroupRemediationActions)
            for securitygroupremediationactions0 in possibleSecurityGroupRemediationActions {
                try possibleSecurityGroupRemediationActionsContainer.encode(securitygroupremediationactions0)
            }
        }
        if let violationTarget = violationTarget {
            try encodeContainer.encode(violationTarget, forKey: .violationTarget)
        }
        if let violationTargetDescription = violationTargetDescription {
            try encodeContainer.encode(violationTargetDescription, forKey: .violationTargetDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .violationTarget)
        violationTarget = violationTargetDecoded
        let violationTargetDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .violationTargetDescription)
        violationTargetDescription = violationTargetDescriptionDecoded
        let partialMatchesContainer = try containerValues.decodeIfPresent([PartialMatch].self, forKey: .partialMatches)
        var partialMatchesDecoded0:[PartialMatch]? = nil
        if let partialMatchesContainer = partialMatchesContainer {
            partialMatchesDecoded0 = [PartialMatch]()
            for structure0 in partialMatchesContainer {
                partialMatchesDecoded0?.append(structure0)
            }
        }
        partialMatches = partialMatchesDecoded0
        let possibleSecurityGroupRemediationActionsContainer = try containerValues.decodeIfPresent([SecurityGroupRemediationAction].self, forKey: .possibleSecurityGroupRemediationActions)
        var possibleSecurityGroupRemediationActionsDecoded0:[SecurityGroupRemediationAction]? = nil
        if let possibleSecurityGroupRemediationActionsContainer = possibleSecurityGroupRemediationActionsContainer {
            possibleSecurityGroupRemediationActionsDecoded0 = [SecurityGroupRemediationAction]()
            for structure0 in possibleSecurityGroupRemediationActionsContainer {
                possibleSecurityGroupRemediationActionsDecoded0?.append(structure0)
            }
        }
        possibleSecurityGroupRemediationActions = possibleSecurityGroupRemediationActionsDecoded0
    }
}
