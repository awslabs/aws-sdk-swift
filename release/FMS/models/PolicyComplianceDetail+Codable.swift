// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PolicyComplianceDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case evaluationLimitExceeded = "EvaluationLimitExceeded"
        case expiredAt = "ExpiredAt"
        case issueInfoMap = "IssueInfoMap"
        case memberAccount = "MemberAccount"
        case policyId = "PolicyId"
        case policyOwner = "PolicyOwner"
        case violators = "Violators"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if evaluationLimitExceeded != false {
            try encodeContainer.encode(evaluationLimitExceeded, forKey: .evaluationLimitExceeded)
        }
        if let expiredAt = expiredAt {
            try encodeContainer.encode(expiredAt.timeIntervalSince1970, forKey: .expiredAt)
        }
        if let issueInfoMap = issueInfoMap {
            var issueInfoMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .issueInfoMap)
            for (dictKey0, issueinfomap0) in issueInfoMap {
                try issueInfoMapContainer.encode(issueinfomap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let memberAccount = memberAccount {
            try encodeContainer.encode(memberAccount, forKey: .memberAccount)
        }
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let policyOwner = policyOwner {
            try encodeContainer.encode(policyOwner, forKey: .policyOwner)
        }
        if let violators = violators {
            var violatorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violators)
            for complianceviolators0 in violators {
                try violatorsContainer.encode(complianceviolators0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyOwner)
        policyOwner = policyOwnerDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let memberAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberAccount)
        memberAccount = memberAccountDecoded
        let violatorsContainer = try containerValues.decodeIfPresent([ComplianceViolator].self, forKey: .violators)
        var violatorsDecoded0:[ComplianceViolator]? = nil
        if let violatorsContainer = violatorsContainer {
            violatorsDecoded0 = [ComplianceViolator]()
            for structure0 in violatorsContainer {
                violatorsDecoded0?.append(structure0)
            }
        }
        violators = violatorsDecoded0
        let evaluationLimitExceededDecoded = try containerValues.decode(Bool.self, forKey: .evaluationLimitExceeded)
        evaluationLimitExceeded = evaluationLimitExceededDecoded
        let expiredAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiredAt)
        expiredAt = expiredAtDecoded
        let issueInfoMapContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .issueInfoMap)
        var issueInfoMapDecoded0: [String:String]? = nil
        if let issueInfoMapContainer = issueInfoMapContainer {
            issueInfoMapDecoded0 = [String:String]()
            for (key0, detailedinfo0) in issueInfoMapContainer {
                issueInfoMapDecoded0?[key0] = detailedinfo0
            }
        }
        issueInfoMap = issueInfoMapDecoded0
    }
}
