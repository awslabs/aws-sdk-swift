// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PartialMatch: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case reference = "Reference"
        case targetViolationReasons = "TargetViolationReasons"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reference = reference {
            try encodeContainer.encode(reference, forKey: .reference)
        }
        if let targetViolationReasons = targetViolationReasons {
            var targetViolationReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetViolationReasons)
            for targetviolationreasons0 in targetViolationReasons {
                try targetViolationReasonsContainer.encode(targetviolationreasons0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let referenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reference)
        reference = referenceDecoded
        let targetViolationReasonsContainer = try containerValues.decodeIfPresent([String].self, forKey: .targetViolationReasons)
        var targetViolationReasonsDecoded0:[String]? = nil
        if let targetViolationReasonsContainer = targetViolationReasonsContainer {
            targetViolationReasonsDecoded0 = [String]()
            for string0 in targetViolationReasonsContainer {
                targetViolationReasonsDecoded0?.append(string0)
            }
        }
        targetViolationReasons = targetViolationReasonsDecoded0
    }
}
