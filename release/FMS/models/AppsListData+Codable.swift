// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppsListData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appsList = "AppsList"
        case createTime = "CreateTime"
        case lastUpdateTime = "LastUpdateTime"
        case listId = "ListId"
        case listName = "ListName"
        case listUpdateToken = "ListUpdateToken"
        case previousAppsList = "PreviousAppsList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appsList = appsList {
            var appsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .appsList)
            for appslist0 in appsList {
                try appsListContainer.encode(appslist0)
            }
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let listId = listId {
            try encodeContainer.encode(listId, forKey: .listId)
        }
        if let listName = listName {
            try encodeContainer.encode(listName, forKey: .listName)
        }
        if let listUpdateToken = listUpdateToken {
            try encodeContainer.encode(listUpdateToken, forKey: .listUpdateToken)
        }
        if let previousAppsList = previousAppsList {
            var previousAppsListContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .previousAppsList)
            for (dictKey0, previousappslist0) in previousAppsList {
                try previousAppsListContainer.encode(previousappslist0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .listId)
        listId = listIdDecoded
        let listNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .listName)
        listName = listNameDecoded
        let listUpdateTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .listUpdateToken)
        listUpdateToken = listUpdateTokenDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let appsListContainer = try containerValues.decodeIfPresent([App].self, forKey: .appsList)
        var appsListDecoded0:[App]? = nil
        if let appsListContainer = appsListContainer {
            appsListDecoded0 = [App]()
            for structure0 in appsListContainer {
                appsListDecoded0?.append(structure0)
            }
        }
        appsList = appsListDecoded0
        let previousAppsListContainer = try containerValues.decodeIfPresent([String:[App]?].self, forKey: .previousAppsList)
        var previousAppsListDecoded0: [String:[App]?]? = nil
        if let previousAppsListContainer = previousAppsListContainer {
            previousAppsListDecoded0 = [String:[App]?]()
            for (key0, appslist0) in previousAppsListContainer {
                var appslist0Decoded0 = [App]()
                if let appslist0 = appslist0 {
                    for structure1 in appslist0 {
                        appslist0Decoded0.append(structure1)
                    }
                }
                previousAppsListDecoded0?[key0] = appslist0Decoded0
            }
        }
        previousAppsList = previousAppsListDecoded0
    }
}
