// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProtocolsListsOutputBody: Equatable {
    public let protocolsLists: [ProtocolsListDataSummary]?
    public let nextToken: String?
}

extension ListProtocolsListsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case protocolsLists = "ProtocolsLists"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolsListsContainer = try containerValues.decodeIfPresent([ProtocolsListDataSummary].self, forKey: .protocolsLists)
        var protocolsListsDecoded0:[ProtocolsListDataSummary]? = nil
        if let protocolsListsContainer = protocolsListsContainer {
            protocolsListsDecoded0 = [ProtocolsListDataSummary]()
            for structure0 in protocolsListsContainer {
                protocolsListsDecoded0?.append(structure0)
            }
        }
        protocolsLists = protocolsListsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
