// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsEc2NetworkInterfaceViolation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case violatingSecurityGroups = "ViolatingSecurityGroups"
        case violationTarget = "ViolationTarget"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let violatingSecurityGroups = violatingSecurityGroups {
            var violatingSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violatingSecurityGroups)
            for resourceidlist0 in violatingSecurityGroups {
                try violatingSecurityGroupsContainer.encode(resourceidlist0)
            }
        }
        if let violationTarget = violationTarget {
            try encodeContainer.encode(violationTarget, forKey: .violationTarget)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .violationTarget)
        violationTarget = violationTargetDecoded
        let violatingSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .violatingSecurityGroups)
        var violatingSecurityGroupsDecoded0:[String]? = nil
        if let violatingSecurityGroupsContainer = violatingSecurityGroupsContainer {
            violatingSecurityGroupsDecoded0 = [String]()
            for string0 in violatingSecurityGroupsContainer {
                violatingSecurityGroupsDecoded0?.append(string0)
            }
        }
        violatingSecurityGroups = violatingSecurityGroupsDecoded0
    }
}
