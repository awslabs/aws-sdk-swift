// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AwsEc2InstanceViolation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case awsEc2NetworkInterfaceViolations = "AwsEc2NetworkInterfaceViolations"
        case violationTarget = "ViolationTarget"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsEc2NetworkInterfaceViolations = awsEc2NetworkInterfaceViolations {
            var awsEc2NetworkInterfaceViolationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsEc2NetworkInterfaceViolations)
            for awsec2networkinterfaceviolations0 in awsEc2NetworkInterfaceViolations {
                try awsEc2NetworkInterfaceViolationsContainer.encode(awsec2networkinterfaceviolations0)
            }
        }
        if let violationTarget = violationTarget {
            try encodeContainer.encode(violationTarget, forKey: .violationTarget)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationTargetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .violationTarget)
        violationTarget = violationTargetDecoded
        let awsEc2NetworkInterfaceViolationsContainer = try containerValues.decodeIfPresent([AwsEc2NetworkInterfaceViolation].self, forKey: .awsEc2NetworkInterfaceViolations)
        var awsEc2NetworkInterfaceViolationsDecoded0:[AwsEc2NetworkInterfaceViolation]? = nil
        if let awsEc2NetworkInterfaceViolationsContainer = awsEc2NetworkInterfaceViolationsContainer {
            awsEc2NetworkInterfaceViolationsDecoded0 = [AwsEc2NetworkInterfaceViolation]()
            for structure0 in awsEc2NetworkInterfaceViolationsContainer {
                awsEc2NetworkInterfaceViolationsDecoded0?.append(structure0)
            }
        }
        awsEc2NetworkInterfaceViolations = awsEc2NetworkInterfaceViolationsDecoded0
    }
}
