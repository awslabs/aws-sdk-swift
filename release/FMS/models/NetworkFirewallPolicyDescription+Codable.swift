// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallPolicyDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case statefulRuleGroups = "StatefulRuleGroups"
        case statelessCustomActions = "StatelessCustomActions"
        case statelessDefaultActions = "StatelessDefaultActions"
        case statelessFragmentDefaultActions = "StatelessFragmentDefaultActions"
        case statelessRuleGroups = "StatelessRuleGroups"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statefulRuleGroups = statefulRuleGroups {
            var statefulRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statefulRuleGroups)
            for statefulrulegrouplist0 in statefulRuleGroups {
                try statefulRuleGroupsContainer.encode(statefulrulegrouplist0)
            }
        }
        if let statelessCustomActions = statelessCustomActions {
            var statelessCustomActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessCustomActions)
            for networkfirewallactionlist0 in statelessCustomActions {
                try statelessCustomActionsContainer.encode(networkfirewallactionlist0)
            }
        }
        if let statelessDefaultActions = statelessDefaultActions {
            var statelessDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessDefaultActions)
            for networkfirewallactionlist0 in statelessDefaultActions {
                try statelessDefaultActionsContainer.encode(networkfirewallactionlist0)
            }
        }
        if let statelessFragmentDefaultActions = statelessFragmentDefaultActions {
            var statelessFragmentDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessFragmentDefaultActions)
            for networkfirewallactionlist0 in statelessFragmentDefaultActions {
                try statelessFragmentDefaultActionsContainer.encode(networkfirewallactionlist0)
            }
        }
        if let statelessRuleGroups = statelessRuleGroups {
            var statelessRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessRuleGroups)
            for statelessrulegrouplist0 in statelessRuleGroups {
                try statelessRuleGroupsContainer.encode(statelessrulegrouplist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statelessRuleGroupsContainer = try containerValues.decodeIfPresent([StatelessRuleGroup].self, forKey: .statelessRuleGroups)
        var statelessRuleGroupsDecoded0:[StatelessRuleGroup]? = nil
        if let statelessRuleGroupsContainer = statelessRuleGroupsContainer {
            statelessRuleGroupsDecoded0 = [StatelessRuleGroup]()
            for structure0 in statelessRuleGroupsContainer {
                statelessRuleGroupsDecoded0?.append(structure0)
            }
        }
        statelessRuleGroups = statelessRuleGroupsDecoded0
        let statelessDefaultActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .statelessDefaultActions)
        var statelessDefaultActionsDecoded0:[String]? = nil
        if let statelessDefaultActionsContainer = statelessDefaultActionsContainer {
            statelessDefaultActionsDecoded0 = [String]()
            for string0 in statelessDefaultActionsContainer {
                statelessDefaultActionsDecoded0?.append(string0)
            }
        }
        statelessDefaultActions = statelessDefaultActionsDecoded0
        let statelessFragmentDefaultActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .statelessFragmentDefaultActions)
        var statelessFragmentDefaultActionsDecoded0:[String]? = nil
        if let statelessFragmentDefaultActionsContainer = statelessFragmentDefaultActionsContainer {
            statelessFragmentDefaultActionsDecoded0 = [String]()
            for string0 in statelessFragmentDefaultActionsContainer {
                statelessFragmentDefaultActionsDecoded0?.append(string0)
            }
        }
        statelessFragmentDefaultActions = statelessFragmentDefaultActionsDecoded0
        let statelessCustomActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .statelessCustomActions)
        var statelessCustomActionsDecoded0:[String]? = nil
        if let statelessCustomActionsContainer = statelessCustomActionsContainer {
            statelessCustomActionsDecoded0 = [String]()
            for string0 in statelessCustomActionsContainer {
                statelessCustomActionsDecoded0?.append(string0)
            }
        }
        statelessCustomActions = statelessCustomActionsDecoded0
        let statefulRuleGroupsContainer = try containerValues.decodeIfPresent([StatefulRuleGroup].self, forKey: .statefulRuleGroups)
        var statefulRuleGroupsDecoded0:[StatefulRuleGroup]? = nil
        if let statefulRuleGroupsContainer = statefulRuleGroupsContainer {
            statefulRuleGroupsDecoded0 = [StatefulRuleGroup]()
            for structure0 in statefulRuleGroupsContainer {
                statefulRuleGroupsDecoded0?.append(structure0)
            }
        }
        statefulRuleGroups = statefulRuleGroupsDecoded0
    }
}
