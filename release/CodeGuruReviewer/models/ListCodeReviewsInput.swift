// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListCodeReviewsInput: Equatable {
    /// <p>
    ///          The maximum number of results that are returned per call. The default is 100.
    ///       </p>
    public let maxResults: Int?
    /// <p>
    ///          If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page.
    ///          Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.
    ///       </p>
    public let nextToken: String?
    /// <p>
    ///          List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code>  lists code reviews from GitHub.
    ///       </p>
    public let providerTypes: [ProviderType]?
    /// <p>
    ///          List of repository names for filtering that needs to be applied before displaying the result.
    ///       </p>
    public let repositoryNames: [String]?
    /// <p>
    ///          List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.
    ///       </p>
    ///          <p>The valid code review states are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Completed</code>: The code review is complete.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Pending</code>: The code review started and has not completed or failed.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Failed</code>: The code review failed.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Deleting</code>: The code review is being deleted.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let states: [JobState]?
    /// <p>
    ///          The type of code reviews to list in the response.
    ///       </p>
    public let type: `Type`?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        providerTypes: [ProviderType]? = nil,
        repositoryNames: [String]? = nil,
        states: [JobState]? = nil,
        type: `Type`? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.providerTypes = providerTypes
        self.repositoryNames = repositoryNames
        self.states = states
        self.type = type
    }
}
