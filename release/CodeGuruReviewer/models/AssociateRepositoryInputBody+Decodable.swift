// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssociateRepositoryInputBody: Equatable {
    public let repository: Repository?
    public let clientRequestToken: String?
    public let tags: [String:String]?
    public let kMSKeyDetails: KMSKeyDetails?
}

extension AssociateRepositoryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case kMSKeyDetails = "KMSKeyDetails"
        case repository = "Repository"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryDecoded = try containerValues.decodeIfPresent(Repository.self, forKey: .repository)
        repository = repositoryDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let kMSKeyDetailsDecoded = try containerValues.decodeIfPresent(KMSKeyDetails.self, forKey: .kMSKeyDetails)
        kMSKeyDetails = kMSKeyDetailsDecoded
    }
}
