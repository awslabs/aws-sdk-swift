// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeReview: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationArn = "AssociationArn"
        case codeReviewArn = "CodeReviewArn"
        case createdTimeStamp = "CreatedTimeStamp"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case metrics = "Metrics"
        case name = "Name"
        case owner = "Owner"
        case providerType = "ProviderType"
        case pullRequestId = "PullRequestId"
        case repositoryName = "RepositoryName"
        case sourceCodeType = "SourceCodeType"
        case state = "State"
        case stateReason = "StateReason"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationArn = associationArn {
            try encodeContainer.encode(associationArn, forKey: .associationArn)
        }
        if let codeReviewArn = codeReviewArn {
            try encodeContainer.encode(codeReviewArn, forKey: .codeReviewArn)
        }
        if let createdTimeStamp = createdTimeStamp {
            try encodeContainer.encode(createdTimeStamp.timeIntervalSince1970, forKey: .createdTimeStamp)
        }
        if let lastUpdatedTimeStamp = lastUpdatedTimeStamp {
            try encodeContainer.encode(lastUpdatedTimeStamp.timeIntervalSince1970, forKey: .lastUpdatedTimeStamp)
        }
        if let metrics = metrics {
            try encodeContainer.encode(metrics, forKey: .metrics)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let providerType = providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let pullRequestId = pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let repositoryName = repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let sourceCodeType = sourceCodeType {
            try encodeContainer.encode(sourceCodeType, forKey: .sourceCodeType)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateReason = stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let codeReviewArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .codeReviewArn)
        codeReviewArn = codeReviewArnDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .owner)
        owner = ownerDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(JobState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let createdTimeStampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let sourceCodeTypeDecoded = try containerValues.decodeIfPresent(SourceCodeType.self, forKey: .sourceCodeType)
        sourceCodeType = sourceCodeTypeDecoded
        let associationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associationArn)
        associationArn = associationArnDecoded
        let metricsDecoded = try containerValues.decodeIfPresent(Metrics.self, forKey: .metrics)
        metrics = metricsDecoded
    }
}
