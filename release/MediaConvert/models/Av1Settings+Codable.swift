// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Av1Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopSize = "gopSize"
        case maxBitrate = "maxBitrate"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case qvbrSettings = "qvbrSettings"
        case rateControlMode = "rateControlMode"
        case slices = "slices"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if numberBFramesBetweenReferenceFrames != 0 {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if let qvbrSettings = qvbrSettings {
            try encodeContainer.encode(qvbrSettings, forKey: .qvbrSettings)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let spatialAdaptiveQuantization = spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Av1AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(Av1FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Av1FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let qvbrSettingsDecoded = try containerValues.decodeIfPresent(Av1QvbrSettings.self, forKey: .qvbrSettings)
        qvbrSettings = qvbrSettingsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Av1RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Av1SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
    }
}
