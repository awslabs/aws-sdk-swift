// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RemixSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelMapping = "channelMapping"
        case channelsIn = "channelsIn"
        case channelsOut = "channelsOut"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelMapping = channelMapping {
            try encodeContainer.encode(channelMapping, forKey: .channelMapping)
        }
        if channelsIn != 0 {
            try encodeContainer.encode(channelsIn, forKey: .channelsIn)
        }
        if channelsOut != 0 {
            try encodeContainer.encode(channelsOut, forKey: .channelsOut)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelMappingDecoded = try containerValues.decodeIfPresent(ChannelMapping.self, forKey: .channelMapping)
        channelMapping = channelMappingDecoded
        let channelsInDecoded = try containerValues.decode(Int.self, forKey: .channelsIn)
        channelsIn = channelsInDecoded
        let channelsOutDecoded = try containerValues.decode(Int.self, forKey: .channelsOut)
        channelsOut = channelsOutDecoded
    }
}
