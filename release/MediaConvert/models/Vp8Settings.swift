// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP8.
public struct Vp8Settings: Equatable {
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    public let bitrate: Int
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: Vp8FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: Vp8FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    public let gopSize: Double
    /// Optional. Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    public let hrdBufferSize: Int
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    public let maxBitrate: Int
    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public let parControl: Vp8ParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    public let qualityTuningLevel: Vp8QualityTuningLevel?
    /// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
    public let rateControlMode: Vp8RateControlMode?

    public init (
        bitrate: Int = 0,
        framerateControl: Vp8FramerateControl? = nil,
        framerateConversionAlgorithm: Vp8FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopSize: Double = 0.0,
        hrdBufferSize: Int = 0,
        maxBitrate: Int = 0,
        parControl: Vp8ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        qualityTuningLevel: Vp8QualityTuningLevel? = nil,
        rateControlMode: Vp8RateControlMode? = nil
    )
    {
        self.bitrate = bitrate
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopSize = gopSize
        self.hrdBufferSize = hrdBufferSize
        self.maxBitrate = maxBitrate
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.qualityTuningLevel = qualityTuningLevel
        self.rateControlMode = rateControlMode
    }
}
