// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Use Respond to AFD (RespondToAfd) to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to (NONE). A preferred implementation of this workflow is to set RespondToAfd to (NONE) and set AfdSignaling to (AUTO). * Choose None to remove all input AFD values from this output.
public enum RespondToAfd {
    case `none`
    case passthrough
    case respond
    case sdkUnknown(String)
}

extension RespondToAfd : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RespondToAfd] {
        return [
            .none,
            .passthrough,
            .respond,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case .respond: return "RESPOND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RespondToAfd(rawValue: rawValue) ?? RespondToAfd.sdkUnknown(rawValue)
    }
}
