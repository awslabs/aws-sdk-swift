// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AacSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptionBroadcasterMix = "audioDescriptionBroadcasterMix"
        case bitrate = "bitrate"
        case codecProfile = "codecProfile"
        case codingMode = "codingMode"
        case rateControlMode = "rateControlMode"
        case rawFormat = "rawFormat"
        case sampleRate = "sampleRate"
        case specification = "specification"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMix {
            try encodeContainer.encode(audioDescriptionBroadcasterMix.rawValue, forKey: .audioDescriptionBroadcasterMix)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let rawFormat = rawFormat {
            try encodeContainer.encode(rawFormat.rawValue, forKey: .rawFormat)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let specification = specification {
            try encodeContainer.encode(specification.rawValue, forKey: .specification)
        }
        if let vbrQuality = vbrQuality {
            try encodeContainer.encode(vbrQuality.rawValue, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionBroadcasterMixDecoded = try containerValues.decodeIfPresent(AacAudioDescriptionBroadcasterMix.self, forKey: .audioDescriptionBroadcasterMix)
        audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMixDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codecProfileDecoded = try containerValues.decodeIfPresent(AacCodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(AacCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(AacRateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let rawFormatDecoded = try containerValues.decodeIfPresent(AacRawFormat.self, forKey: .rawFormat)
        rawFormat = rawFormatDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let specificationDecoded = try containerValues.decodeIfPresent(AacSpecification.self, forKey: .specification)
        specification = specificationDecoded
        let vbrQualityDecoded = try containerValues.decodeIfPresent(AacVbrQuality.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}
