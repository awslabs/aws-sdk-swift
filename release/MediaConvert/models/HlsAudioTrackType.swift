// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
public enum HlsAudioTrackType {
    case alternateAudioAutoSelect
    case alternateAudioAutoSelectDefault
    case alternateAudioNotAutoSelect
    case audioOnlyVariantStream
    case sdkUnknown(String)
}

extension HlsAudioTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAudioTrackType] {
        return [
            .alternateAudioAutoSelect,
            .alternateAudioAutoSelectDefault,
            .alternateAudioNotAutoSelect,
            .audioOnlyVariantStream,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
        case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
        case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
        case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAudioTrackType(rawValue: rawValue) ?? HlsAudioTrackType.sdkUnknown(rawValue)
    }
}
