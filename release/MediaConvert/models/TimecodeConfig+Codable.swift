// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimecodeConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case anchor = "anchor"
        case source = "source"
        case start = "start"
        case timestampOffset = "timestampOffset"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anchor = anchor {
            try encodeContainer.encode(anchor, forKey: .anchor)
        }
        if let source = source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let timestampOffset = timestampOffset {
            try encodeContainer.encode(timestampOffset, forKey: .timestampOffset)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anchorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .anchor)
        anchor = anchorDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(TimecodeSource.self, forKey: .source)
        source = sourceDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let timestampOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestampOffset)
        timestampOffset = timestampOffsetDecoded
    }
}
