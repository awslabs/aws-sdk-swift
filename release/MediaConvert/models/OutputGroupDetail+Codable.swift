// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutputGroupDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputDetails = "outputDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputDetails = outputDetails {
            var outputDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputDetails)
            for __listofoutputdetail0 in outputDetails {
                try outputDetailsContainer.encode(__listofoutputdetail0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDetailsContainer = try containerValues.decodeIfPresent([OutputDetail].self, forKey: .outputDetails)
        var outputDetailsDecoded0:[OutputDetail]? = nil
        if let outputDetailsContainer = outputDetailsContainer {
            outputDetailsDecoded0 = [OutputDetail]()
            for structure0 in outputDetailsContainer {
                outputDetailsDecoded0?.append(structure0)
            }
        }
        outputDetails = outputDetailsDecoded0
    }
}
