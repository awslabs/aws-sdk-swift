// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CmfcSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDuration = "audioDuration"
        case audioGroupId = "audioGroupId"
        case audioRenditionSets = "audioRenditionSets"
        case audioTrackType = "audioTrackType"
        case descriptiveVideoServiceFlag = "descriptiveVideoServiceFlag"
        case iFrameOnlyManifest = "iFrameOnlyManifest"
        case scte35Esam = "scte35Esam"
        case scte35Source = "scte35Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if let audioGroupId = audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioRenditionSets = audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let audioTrackType = audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let descriptiveVideoServiceFlag = descriptiveVideoServiceFlag {
            try encodeContainer.encode(descriptiveVideoServiceFlag.rawValue, forKey: .descriptiveVideoServiceFlag)
        }
        if let iFrameOnlyManifest = iFrameOnlyManifest {
            try encodeContainer.encode(iFrameOnlyManifest.rawValue, forKey: .iFrameOnlyManifest)
        }
        if let scte35Esam = scte35Esam {
            try encodeContainer.encode(scte35Esam.rawValue, forKey: .scte35Esam)
        }
        if let scte35Source = scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationDecoded = try containerValues.decodeIfPresent(CmfcAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(CmfcAudioTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let descriptiveVideoServiceFlagDecoded = try containerValues.decodeIfPresent(CmfcDescriptiveVideoServiceFlag.self, forKey: .descriptiveVideoServiceFlag)
        descriptiveVideoServiceFlag = descriptiveVideoServiceFlagDecoded
        let iFrameOnlyManifestDecoded = try containerValues.decodeIfPresent(CmfcIFrameOnlyManifest.self, forKey: .iFrameOnlyManifest)
        iFrameOnlyManifest = iFrameOnlyManifestDecoded
        let scte35EsamDecoded = try containerValues.decodeIfPresent(CmfcScte35Esam.self, forKey: .scte35Esam)
        scte35Esam = scte35EsamDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(CmfcScte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
    }
}
