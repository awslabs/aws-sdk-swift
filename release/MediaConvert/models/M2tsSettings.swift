// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container (ContainerType) is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
public struct M2tsSettings: Equatable {
    /// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
    public let audioBufferModel: M2tsAudioBufferModel?
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: M2tsAudioDuration?
    /// The number of audio frames to insert for each PES packet.
    public let audioFramesPerPes: Int
    /// Specify the packet identifiers (PIDs) for any elementary audio streams you include in this output. Specify multiple PIDs as a JSON array. Default is the range 482-492.
    public let audioPids: [Int]?
    /// Specify the output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate. Other common values are 3750000, 7500000, and 15000000.
    public let bitrate: Int
    /// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex  buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
    public let bufferModel: M2tsBufferModel?
    /// Use these settings to insert a DVB Network Information Table (NIT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
    public let dvbNitSettings: DvbNitSettings?
    /// Use these settings to insert a DVB Service Description Table (SDT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
    public let dvbSdtSettings: DvbSdtSettings?
    /// Specify the packet identifiers (PIDs) for DVB subtitle data included in this output. Specify multiple PIDs as a JSON array. Default is the range 460-479.
    public let dvbSubPids: [Int]?
    /// Use these settings to insert a DVB Time and Date Table (TDT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
    public let dvbTdtSettings: DvbTdtSettings?
    /// Specify the packet identifier (PID) for DVB teletext data you include in this output. Default is 499.
    public let dvbTeletextPid: Int
    /// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
    public let ebpAudioInterval: M2tsEbpAudioInterval?
    /// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
    public let ebpPlacement: M2tsEbpPlacement?
    /// Controls whether to include the ES Rate field in the PES header.
    public let esRateInPes: M2tsEsRateInPes?
    /// Keep the default value (DEFAULT) unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force (FORCE).
    public let forceTsVideoEbpOrder: M2tsForceTsVideoEbpOrder?
    /// The length, in seconds, of each fragment. Only used with EBP markers.
    public let fragmentTime: Double
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    public let maxPcrInterval: Int
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    public let minEbpInterval: Int
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3: M2tsNielsenId3?
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    public let nullPacketBitrate: Double
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let patInterval: Int
    /// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
    public let pcrControl: M2tsPcrControl?
    /// Specify the packet identifier (PID) for the program clock reference (PCR) in this output. If you do not specify a value, the service will use the value for Video PID (VideoPid).
    public let pcrPid: Int
    /// Specify the number of milliseconds between instances of the program map table (PMT) in the output transport stream.
    public let pmtInterval: Int
    /// Specify the packet identifier (PID) for the program map table (PMT) itself. Default is 480.
    public let pmtPid: Int
    /// Specify the packet identifier (PID) of the private metadata stream. Default is 503.
    public let privateMetadataPid: Int
    /// Use Program number (programNumber) to specify the program number used in the program map table (PMT) for this output. Default is 1. Program numbers and program map tables are parts of MPEG-2 transport stream containers, used for organizing data.
    public let programNumber: Int
    /// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
    public let rateMode: M2tsRateMode?
    /// Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    public let scte35Esam: M2tsScte35Esam?
    /// Specify the packet identifier (PID) of the SCTE-35 stream in the transport stream.
    public let scte35Pid: Int
    /// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE). Also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml). Also enable ESAM SCTE-35 (include the property scte35Esam).
    public let scte35Source: M2tsScte35Source?
    /// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    public let segmentationMarkers: M2tsSegmentationMarkers?
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
    public let segmentationStyle: M2tsSegmentationStyle?
    /// Specify the length, in seconds, of each segment. Required unless markers is set to _none_.
    public let segmentationTime: Double
    /// Specify the packet identifier (PID) for timed metadata in this output. Default is 502.
    public let timedMetadataPid: Int
    /// Specify the ID for the transport stream itself in the program map table for this output. Transport stream IDs and program map tables are parts of MPEG-2 transport stream containers, used for organizing data.
    public let transportStreamId: Int
    /// Specify the packet identifier (PID) of the elementary video stream in the transport stream.
    public let videoPid: Int

    public init (
        audioBufferModel: M2tsAudioBufferModel? = nil,
        audioDuration: M2tsAudioDuration? = nil,
        audioFramesPerPes: Int = 0,
        audioPids: [Int]? = nil,
        bitrate: Int = 0,
        bufferModel: M2tsBufferModel? = nil,
        dvbNitSettings: DvbNitSettings? = nil,
        dvbSdtSettings: DvbSdtSettings? = nil,
        dvbSubPids: [Int]? = nil,
        dvbTdtSettings: DvbTdtSettings? = nil,
        dvbTeletextPid: Int = 0,
        ebpAudioInterval: M2tsEbpAudioInterval? = nil,
        ebpPlacement: M2tsEbpPlacement? = nil,
        esRateInPes: M2tsEsRateInPes? = nil,
        forceTsVideoEbpOrder: M2tsForceTsVideoEbpOrder? = nil,
        fragmentTime: Double = 0.0,
        maxPcrInterval: Int = 0,
        minEbpInterval: Int = 0,
        nielsenId3: M2tsNielsenId3? = nil,
        nullPacketBitrate: Double = 0.0,
        patInterval: Int = 0,
        pcrControl: M2tsPcrControl? = nil,
        pcrPid: Int = 0,
        pmtInterval: Int = 0,
        pmtPid: Int = 0,
        privateMetadataPid: Int = 0,
        programNumber: Int = 0,
        rateMode: M2tsRateMode? = nil,
        scte35Esam: M2tsScte35Esam? = nil,
        scte35Pid: Int = 0,
        scte35Source: M2tsScte35Source? = nil,
        segmentationMarkers: M2tsSegmentationMarkers? = nil,
        segmentationStyle: M2tsSegmentationStyle? = nil,
        segmentationTime: Double = 0.0,
        timedMetadataPid: Int = 0,
        transportStreamId: Int = 0,
        videoPid: Int = 0
    )
    {
        self.audioBufferModel = audioBufferModel
        self.audioDuration = audioDuration
        self.audioFramesPerPes = audioFramesPerPes
        self.audioPids = audioPids
        self.bitrate = bitrate
        self.bufferModel = bufferModel
        self.dvbNitSettings = dvbNitSettings
        self.dvbSdtSettings = dvbSdtSettings
        self.dvbSubPids = dvbSubPids
        self.dvbTdtSettings = dvbTdtSettings
        self.dvbTeletextPid = dvbTeletextPid
        self.ebpAudioInterval = ebpAudioInterval
        self.ebpPlacement = ebpPlacement
        self.esRateInPes = esRateInPes
        self.forceTsVideoEbpOrder = forceTsVideoEbpOrder
        self.fragmentTime = fragmentTime
        self.maxPcrInterval = maxPcrInterval
        self.minEbpInterval = minEbpInterval
        self.nielsenId3 = nielsenId3
        self.nullPacketBitrate = nullPacketBitrate
        self.patInterval = patInterval
        self.pcrControl = pcrControl
        self.pcrPid = pcrPid
        self.pmtInterval = pmtInterval
        self.pmtPid = pmtPid
        self.privateMetadataPid = privateMetadataPid
        self.programNumber = programNumber
        self.rateMode = rateMode
        self.scte35Esam = scte35Esam
        self.scte35Pid = scte35Pid
        self.scte35Source = scte35Source
        self.segmentationMarkers = segmentationMarkers
        self.segmentationStyle = segmentationStyle
        self.segmentationTime = segmentationTime
        self.timedMetadataPid = timedMetadataPid
        self.transportStreamId = transportStreamId
        self.videoPid = videoPid
    }
}
