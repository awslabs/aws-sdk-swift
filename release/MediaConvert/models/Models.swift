// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

/// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and  FollowInputAudioType. Choose NORMAL when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
public enum AacAudioDescriptionBroadcasterMix {
    case broadcasterMixedAd
    case normal
    case sdkUnknown(String)
}

extension AacAudioDescriptionBroadcasterMix : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacAudioDescriptionBroadcasterMix] {
        return [
            .broadcasterMixedAd,
            .normal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .broadcasterMixedAd: return "BROADCASTER_MIXED_AD"
        case .normal: return "NORMAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacAudioDescriptionBroadcasterMix(rawValue: rawValue) ?? AacAudioDescriptionBroadcasterMix.sdkUnknown(rawValue)
    }
}

/// AAC Profile.
public enum AacCodecProfile {
    case hev1
    case hev2
    case lc
    case sdkUnknown(String)
}

extension AacCodecProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacCodecProfile] {
        return [
            .hev1,
            .hev2,
            .lc,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hev1: return "HEV1"
        case .hev2: return "HEV2"
        case .lc: return "LC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacCodecProfile(rawValue: rawValue) ?? AacCodecProfile.sdkUnknown(rawValue)
    }
}

/// Mono (Audio Description), Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. "1.0 - Audio Description (Receiver Mix)" setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
public enum AacCodingMode {
    case adReceiverMix
    case codingMode10
    case codingMode11
    case codingMode20
    case codingMode51
    case sdkUnknown(String)
}

extension AacCodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacCodingMode] {
        return [
            .adReceiverMix,
            .codingMode10,
            .codingMode11,
            .codingMode20,
            .codingMode51,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adReceiverMix: return "AD_RECEIVER_MIX"
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode11: return "CODING_MODE_1_1"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode51: return "CODING_MODE_5_1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacCodingMode(rawValue: rawValue) ?? AacCodingMode.sdkUnknown(rawValue)
    }
}

/// Rate Control Mode.
public enum AacRateControlMode {
    case cbr
    case vbr
    case sdkUnknown(String)
}

extension AacRateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacRateControlMode] {
        return [
            .cbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacRateControlMode(rawValue: rawValue) ?? AacRateControlMode.sdkUnknown(rawValue)
    }
}

/// Enables LATM/LOAS AAC output. Note that if you use LATM/LOAS AAC in an output, you must choose "No container" for the output container.
public enum AacRawFormat {
    case latmLoas
    case `none`
    case sdkUnknown(String)
}

extension AacRawFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacRawFormat] {
        return [
            .latmLoas,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .latmLoas: return "LATM_LOAS"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacRawFormat(rawValue: rawValue) ?? AacRawFormat.sdkUnknown(rawValue)
    }
}

extension AacSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptionBroadcasterMix = "audioDescriptionBroadcasterMix"
        case bitrate = "bitrate"
        case codecProfile = "codecProfile"
        case codingMode = "codingMode"
        case rateControlMode = "rateControlMode"
        case rawFormat = "rawFormat"
        case sampleRate = "sampleRate"
        case specification = "specification"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMix {
            try encodeContainer.encode(audioDescriptionBroadcasterMix.rawValue, forKey: .audioDescriptionBroadcasterMix)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let rawFormat = rawFormat {
            try encodeContainer.encode(rawFormat.rawValue, forKey: .rawFormat)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let specification = specification {
            try encodeContainer.encode(specification.rawValue, forKey: .specification)
        }
        if let vbrQuality = vbrQuality {
            try encodeContainer.encode(vbrQuality.rawValue, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionBroadcasterMixDecoded = try containerValues.decodeIfPresent(AacAudioDescriptionBroadcasterMix.self, forKey: .audioDescriptionBroadcasterMix)
        audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMixDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codecProfileDecoded = try containerValues.decodeIfPresent(AacCodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(AacCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(AacRateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let rawFormatDecoded = try containerValues.decodeIfPresent(AacRawFormat.self, forKey: .rawFormat)
        rawFormat = rawFormatDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let specificationDecoded = try containerValues.decodeIfPresent(AacSpecification.self, forKey: .specification)
        specification = specificationDecoded
        let vbrQualityDecoded = try containerValues.decodeIfPresent(AacVbrQuality.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}

extension AacSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AacSettings(audioDescriptionBroadcasterMix: \(String(describing: audioDescriptionBroadcasterMix)), bitrate: \(String(describing: bitrate)), codecProfile: \(String(describing: codecProfile)), codingMode: \(String(describing: codingMode)), rateControlMode: \(String(describing: rateControlMode)), rawFormat: \(String(describing: rawFormat)), sampleRate: \(String(describing: sampleRate)), specification: \(String(describing: specification)), vbrQuality: \(String(describing: vbrQuality)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR".  In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
public struct AacSettings: Equatable {
    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and  FollowInputAudioType. Choose NORMAL when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    public let audioDescriptionBroadcasterMix: AacAudioDescriptionBroadcasterMix?
    /// Specify the average bitrate in bits per second. The set of valid values for this setting is: 6000, 8000, 10000, 12000, 14000, 16000, 20000, 24000, 28000, 32000, 40000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 160000, 192000, 224000, 256000, 288000, 320000, 384000, 448000, 512000, 576000, 640000, 768000, 896000, 1024000. The value you set is also constrained by the values that you choose for Profile (codecProfile), Bitrate control mode (codingMode), and Sample rate (sampleRate). Default values depend on Bitrate control mode and Profile.
    public let bitrate: Int
    /// AAC Profile.
    public let codecProfile: AacCodecProfile?
    /// Mono (Audio Description), Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. "1.0 - Audio Description (Receiver Mix)" setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
    public let codingMode: AacCodingMode?
    /// Rate Control Mode.
    public let rateControlMode: AacRateControlMode?
    /// Enables LATM/LOAS AAC output. Note that if you use LATM/LOAS AAC in an output, you must choose "No container" for the output container.
    public let rawFormat: AacRawFormat?
    /// Sample rate in Hz. Valid values depend on rate control mode and profile.
    public let sampleRate: Int
    /// Use MPEG-2 AAC instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    public let specification: AacSpecification?
    /// VBR Quality Level - Only used if rate_control_mode is VBR.
    public let vbrQuality: AacVbrQuality?

    public init (
        audioDescriptionBroadcasterMix: AacAudioDescriptionBroadcasterMix? = nil,
        bitrate: Int = 0,
        codecProfile: AacCodecProfile? = nil,
        codingMode: AacCodingMode? = nil,
        rateControlMode: AacRateControlMode? = nil,
        rawFormat: AacRawFormat? = nil,
        sampleRate: Int = 0,
        specification: AacSpecification? = nil,
        vbrQuality: AacVbrQuality? = nil
    )
    {
        self.audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMix
        self.bitrate = bitrate
        self.codecProfile = codecProfile
        self.codingMode = codingMode
        self.rateControlMode = rateControlMode
        self.rawFormat = rawFormat
        self.sampleRate = sampleRate
        self.specification = specification
        self.vbrQuality = vbrQuality
    }
}

/// Use MPEG-2 AAC instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
public enum AacSpecification {
    case mpeg2
    case mpeg4
    case sdkUnknown(String)
}

extension AacSpecification : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacSpecification] {
        return [
            .mpeg2,
            .mpeg4,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mpeg2: return "MPEG2"
        case .mpeg4: return "MPEG4"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacSpecification(rawValue: rawValue) ?? AacSpecification.sdkUnknown(rawValue)
    }
}

/// VBR Quality Level - Only used if rate_control_mode is VBR.
public enum AacVbrQuality {
    case high
    case low
    case mediumHigh
    case mediumLow
    case sdkUnknown(String)
}

extension AacVbrQuality : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AacVbrQuality] {
        return [
            .high,
            .low,
            .mediumHigh,
            .mediumLow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .low: return "LOW"
        case .mediumHigh: return "MEDIUM_HIGH"
        case .mediumLow: return "MEDIUM_LOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AacVbrQuality(rawValue: rawValue) ?? AacVbrQuality.sdkUnknown(rawValue)
    }
}

/// Specify the bitstream mode for the AC-3 stream that the encoder emits. For more information about the AC3 bitstream mode, see ATSC A/52-2012 (Annex E).
public enum Ac3BitstreamMode {
    case commentary
    case completeMain
    case dialogue
    case emergency
    case hearingImpaired
    case musicAndEffects
    case visuallyImpaired
    case voiceOver
    case sdkUnknown(String)
}

extension Ac3BitstreamMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3BitstreamMode] {
        return [
            .commentary,
            .completeMain,
            .dialogue,
            .emergency,
            .hearingImpaired,
            .musicAndEffects,
            .visuallyImpaired,
            .voiceOver,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .commentary: return "COMMENTARY"
        case .completeMain: return "COMPLETE_MAIN"
        case .dialogue: return "DIALOGUE"
        case .emergency: return "EMERGENCY"
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .musicAndEffects: return "MUSIC_AND_EFFECTS"
        case .visuallyImpaired: return "VISUALLY_IMPAIRED"
        case .voiceOver: return "VOICE_OVER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3BitstreamMode(rawValue: rawValue) ?? Ac3BitstreamMode.sdkUnknown(rawValue)
    }
}

/// Dolby Digital coding mode. Determines number of channels.
public enum Ac3CodingMode {
    case codingMode10
    case codingMode11
    case codingMode20
    case codingMode32Lfe
    case sdkUnknown(String)
}

extension Ac3CodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3CodingMode] {
        return [
            .codingMode10,
            .codingMode11,
            .codingMode20,
            .codingMode32Lfe,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode11: return "CODING_MODE_1_1"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode32Lfe: return "CODING_MODE_3_2_LFE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3CodingMode(rawValue: rawValue) ?? Ac3CodingMode.sdkUnknown(rawValue)
    }
}

/// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
public enum Ac3DynamicRangeCompressionLine {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Ac3DynamicRangeCompressionLine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3DynamicRangeCompressionLine] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3DynamicRangeCompressionLine(rawValue: rawValue) ?? Ac3DynamicRangeCompressionLine.sdkUnknown(rawValue)
    }
}

/// When you want to add Dolby dynamic range compression (DRC) signaling to your output stream, we recommend that you use the mode-specific settings instead of Dynamic range compression profile (DynamicRangeCompressionProfile). The mode-specific settings are Dynamic range compression profile, line mode (dynamicRangeCompressionLine) and Dynamic range compression profile, RF mode (dynamicRangeCompressionRf). Note that when you specify values for all three settings, MediaConvert ignores the value of this setting in favor of the mode-specific settings. If you do use this setting instead of the mode-specific settings, choose None (NONE) to leave out DRC signaling. Keep the default Film standard (FILM_STANDARD) to set the profile to Dolby's film standard profile for all operating modes.
public enum Ac3DynamicRangeCompressionProfile {
    case filmStandard
    case `none`
    case sdkUnknown(String)
}

extension Ac3DynamicRangeCompressionProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3DynamicRangeCompressionProfile] {
        return [
            .filmStandard,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmStandard: return "FILM_STANDARD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3DynamicRangeCompressionProfile(rawValue: rawValue) ?? Ac3DynamicRangeCompressionProfile.sdkUnknown(rawValue)
    }
}

/// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
public enum Ac3DynamicRangeCompressionRf {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Ac3DynamicRangeCompressionRf : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3DynamicRangeCompressionRf] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3DynamicRangeCompressionRf(rawValue: rawValue) ?? Ac3DynamicRangeCompressionRf.sdkUnknown(rawValue)
    }
}

/// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
public enum Ac3LfeFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Ac3LfeFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3LfeFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3LfeFilter(rawValue: rawValue) ?? Ac3LfeFilter.sdkUnknown(rawValue)
    }
}

/// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
public enum Ac3MetadataControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension Ac3MetadataControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3MetadataControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3MetadataControl(rawValue: rawValue) ?? Ac3MetadataControl.sdkUnknown(rawValue)
    }
}

extension Ac3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialnorm = "dialnorm"
        case dynamicRangeCompressionLine = "dynamicRangeCompressionLine"
        case dynamicRangeCompressionProfile = "dynamicRangeCompressionProfile"
        case dynamicRangeCompressionRf = "dynamicRangeCompressionRf"
        case lfeFilter = "lfeFilter"
        case metadataControl = "metadataControl"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if dialnorm != 0 {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let dynamicRangeCompressionLine = dynamicRangeCompressionLine {
            try encodeContainer.encode(dynamicRangeCompressionLine.rawValue, forKey: .dynamicRangeCompressionLine)
        }
        if let dynamicRangeCompressionProfile = dynamicRangeCompressionProfile {
            try encodeContainer.encode(dynamicRangeCompressionProfile.rawValue, forKey: .dynamicRangeCompressionProfile)
        }
        if let dynamicRangeCompressionRf = dynamicRangeCompressionRf {
            try encodeContainer.encode(dynamicRangeCompressionRf.rawValue, forKey: .dynamicRangeCompressionRf)
        }
        if let lfeFilter = lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if let metadataControl = metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(Ac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Ac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialnormDecoded = try containerValues.decode(Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let dynamicRangeCompressionLineDecoded = try containerValues.decodeIfPresent(Ac3DynamicRangeCompressionLine.self, forKey: .dynamicRangeCompressionLine)
        dynamicRangeCompressionLine = dynamicRangeCompressionLineDecoded
        let dynamicRangeCompressionProfileDecoded = try containerValues.decodeIfPresent(Ac3DynamicRangeCompressionProfile.self, forKey: .dynamicRangeCompressionProfile)
        dynamicRangeCompressionProfile = dynamicRangeCompressionProfileDecoded
        let dynamicRangeCompressionRfDecoded = try containerValues.decodeIfPresent(Ac3DynamicRangeCompressionRf.self, forKey: .dynamicRangeCompressionRf)
        dynamicRangeCompressionRf = dynamicRangeCompressionRfDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(Ac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(Ac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension Ac3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Ac3Settings(bitrate: \(String(describing: bitrate)), bitstreamMode: \(String(describing: bitstreamMode)), codingMode: \(String(describing: codingMode)), dialnorm: \(String(describing: dialnorm)), dynamicRangeCompressionLine: \(String(describing: dynamicRangeCompressionLine)), dynamicRangeCompressionProfile: \(String(describing: dynamicRangeCompressionProfile)), dynamicRangeCompressionRf: \(String(describing: dynamicRangeCompressionRf)), lfeFilter: \(String(describing: lfeFilter)), metadataControl: \(String(describing: metadataControl)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AC3.
public struct Ac3Settings: Equatable {
    /// Specify the average bitrate in bits per second. Valid bitrates depend on the coding mode.
    public let bitrate: Int
    /// Specify the bitstream mode for the AC-3 stream that the encoder emits. For more information about the AC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public let bitstreamMode: Ac3BitstreamMode?
    /// Dolby Digital coding mode. Determines number of channels.
    public let codingMode: Ac3CodingMode?
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital, dialnorm will be passed through.
    public let dialnorm: Int
    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public let dynamicRangeCompressionLine: Ac3DynamicRangeCompressionLine?
    /// When you want to add Dolby dynamic range compression (DRC) signaling to your output stream, we recommend that you use the mode-specific settings instead of Dynamic range compression profile (DynamicRangeCompressionProfile). The mode-specific settings are Dynamic range compression profile, line mode (dynamicRangeCompressionLine) and Dynamic range compression profile, RF mode (dynamicRangeCompressionRf). Note that when you specify values for all three settings, MediaConvert ignores the value of this setting in favor of the mode-specific settings. If you do use this setting instead of the mode-specific settings, choose None (NONE) to leave out DRC signaling. Keep the default Film standard (FILM_STANDARD) to set the profile to Dolby's film standard profile for all operating modes.
    public let dynamicRangeCompressionProfile: Ac3DynamicRangeCompressionProfile?
    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public let dynamicRangeCompressionRf: Ac3DynamicRangeCompressionRf?
    /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
    public let lfeFilter: Ac3LfeFilter?
    /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public let metadataControl: Ac3MetadataControl?
    /// This value is always 48000. It represents the sample rate in Hz.
    public let sampleRate: Int

    public init (
        bitrate: Int = 0,
        bitstreamMode: Ac3BitstreamMode? = nil,
        codingMode: Ac3CodingMode? = nil,
        dialnorm: Int = 0,
        dynamicRangeCompressionLine: Ac3DynamicRangeCompressionLine? = nil,
        dynamicRangeCompressionProfile: Ac3DynamicRangeCompressionProfile? = nil,
        dynamicRangeCompressionRf: Ac3DynamicRangeCompressionRf? = nil,
        lfeFilter: Ac3LfeFilter? = nil,
        metadataControl: Ac3MetadataControl? = nil,
        sampleRate: Int = 0
    )
    {
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dialnorm = dialnorm
        self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
        self.dynamicRangeCompressionProfile = dynamicRangeCompressionProfile
        self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
        self.lfeFilter = lfeFilter
        self.metadataControl = metadataControl
        self.sampleRate = sampleRate
    }
}

/// Specify whether the service runs your job with accelerated transcoding. Choose DISABLED if you don't want accelerated transcoding. Choose ENABLED if you want your job to run with accelerated transcoding and to fail if your input files or your job settings aren't compatible with accelerated transcoding. Choose PREFERRED if you want your job to run with accelerated transcoding if the job is compatible with the feature and to run at standard speed if it's not.
public enum AccelerationMode {
    case disabled
    case enabled
    case preferred
    case sdkUnknown(String)
}

extension AccelerationMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AccelerationMode] {
        return [
            .disabled,
            .enabled,
            .preferred,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .preferred: return "PREFERRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AccelerationMode(rawValue: rawValue) ?? AccelerationMode.sdkUnknown(rawValue)
    }
}

extension AccelerationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mode = "mode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(AccelerationMode.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension AccelerationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccelerationSettings(mode: \(String(describing: mode)))"}
}

/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
public struct AccelerationSettings: Equatable {
    /// Specify the conditions when the service will run your job with accelerated transcoding.
    public let mode: AccelerationMode?

    public init (
        mode: AccelerationMode? = nil
    )
    {
        self.mode = mode
    }
}

/// Describes whether the current job is running with accelerated transcoding. For jobs that have Acceleration (AccelerationMode) set to DISABLED, AccelerationStatus is always NOT_APPLICABLE. For jobs that have Acceleration (AccelerationMode) set to ENABLED or PREFERRED, AccelerationStatus is one of the other states. AccelerationStatus is IN_PROGRESS initially, while the service determines whether the input files and job settings are compatible with accelerated transcoding. If they are, AcclerationStatus is ACCELERATED. If your input files and job settings aren't compatible with accelerated transcoding, the service either fails your job or runs it without accelerated transcoding, depending on how you set Acceleration (AccelerationMode). When the service runs your job without accelerated transcoding, AccelerationStatus is NOT_ACCELERATED.
public enum AccelerationStatus {
    case accelerated
    case inProgress
    case notAccelerated
    case notApplicable
    case sdkUnknown(String)
}

extension AccelerationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AccelerationStatus] {
        return [
            .accelerated,
            .inProgress,
            .notAccelerated,
            .notApplicable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accelerated: return "ACCELERATED"
        case .inProgress: return "IN_PROGRESS"
        case .notAccelerated: return "NOT_ACCELERATED"
        case .notApplicable: return "NOT_APPLICABLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AccelerationStatus(rawValue: rawValue) ?? AccelerationStatus.sdkUnknown(rawValue)
    }
}

/// This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling (AfdSignaling) to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
public enum AfdSignaling {
    case auto
    case fixed
    case `none`
    case sdkUnknown(String)
}

extension AfdSignaling : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AfdSignaling] {
        return [
            .auto,
            .fixed,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .fixed: return "FIXED"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AfdSignaling(rawValue: rawValue) ?? AfdSignaling.sdkUnknown(rawValue)
    }
}

extension AiffSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitDepth = "bitDepth"
        case channels = "channels"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitDepth != 0 {
            try encodeContainer.encode(bitDepth, forKey: .bitDepth)
        }
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitDepthDecoded = try containerValues.decode(Int.self, forKey: .bitDepth)
        bitDepth = bitDepthDecoded
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension AiffSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AiffSettings(bitDepth: \(String(describing: bitDepth)), channels: \(String(describing: channels)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AIFF.
public struct AiffSettings: Equatable {
    /// Specify Bit depth (BitDepth), in bits per sample, to choose the encoding quality for this audio track.
    public let bitDepth: Int
    /// Specify the number of channels in this output audio track. Valid values are 1 and even numbers up to 64. For example, 1, 2, 4, 6, and so on, up to 64.
    public let channels: Int
    /// Sample rate in hz.
    public let sampleRate: Int

    public init (
        bitDepth: Int = 0,
        channels: Int = 0,
        sampleRate: Int = 0
    )
    {
        self.bitDepth = bitDepth
        self.channels = channels
        self.sampleRate = sampleRate
    }
}

/// Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
public enum AlphaBehavior {
    case discard
    case remapToLuma
    case sdkUnknown(String)
}

extension AlphaBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AlphaBehavior] {
        return [
            .discard,
            .remapToLuma,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .discard: return "DISCARD"
        case .remapToLuma: return "REMAP_TO_LUMA"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AlphaBehavior(rawValue: rawValue) ?? AlphaBehavior.sdkUnknown(rawValue)
    }
}

/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
public enum AncillaryConvert608To708 {
    case disabled
    case upconvert
    case sdkUnknown(String)
}

extension AncillaryConvert608To708 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AncillaryConvert608To708] {
        return [
            .disabled,
            .upconvert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .upconvert: return "UPCONVERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AncillaryConvert608To708(rawValue: rawValue) ?? AncillaryConvert608To708.sdkUnknown(rawValue)
    }
}

extension AncillarySourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case convert608To708 = "convert608To708"
        case sourceAncillaryChannelNumber = "sourceAncillaryChannelNumber"
        case terminateCaptions = "terminateCaptions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if sourceAncillaryChannelNumber != 0 {
            try encodeContainer.encode(sourceAncillaryChannelNumber, forKey: .sourceAncillaryChannelNumber)
        }
        if let terminateCaptions = terminateCaptions {
            try encodeContainer.encode(terminateCaptions.rawValue, forKey: .terminateCaptions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(AncillaryConvert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let sourceAncillaryChannelNumberDecoded = try containerValues.decode(Int.self, forKey: .sourceAncillaryChannelNumber)
        sourceAncillaryChannelNumber = sourceAncillaryChannelNumberDecoded
        let terminateCaptionsDecoded = try containerValues.decodeIfPresent(AncillaryTerminateCaptions.self, forKey: .terminateCaptions)
        terminateCaptions = terminateCaptionsDecoded
    }
}

extension AncillarySourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AncillarySourceSettings(convert608To708: \(String(describing: convert608To708)), sourceAncillaryChannelNumber: \(String(describing: sourceAncillaryChannelNumber)), terminateCaptions: \(String(describing: terminateCaptions)))"}
}

/// Settings for ancillary captions source.
public struct AncillarySourceSettings: Equatable {
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    public let convert608To708: AncillaryConvert608To708?
    /// Specifies the 608 channel number in the ancillary data track from which to extract captions. Unused for passthrough.
    public let sourceAncillaryChannelNumber: Int
    /// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
    public let terminateCaptions: AncillaryTerminateCaptions?

    public init (
        convert608To708: AncillaryConvert608To708? = nil,
        sourceAncillaryChannelNumber: Int = 0,
        terminateCaptions: AncillaryTerminateCaptions? = nil
    )
    {
        self.convert608To708 = convert608To708
        self.sourceAncillaryChannelNumber = sourceAncillaryChannelNumber
        self.terminateCaptions = terminateCaptions
    }
}

/// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
public enum AncillaryTerminateCaptions {
    case disabled
    case endOfInput
    case sdkUnknown(String)
}

extension AncillaryTerminateCaptions : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AncillaryTerminateCaptions] {
        return [
            .disabled,
            .endOfInput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .endOfInput: return "END_OF_INPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AncillaryTerminateCaptions(rawValue: rawValue) ?? AncillaryTerminateCaptions.sdkUnknown(rawValue)
    }
}

/// The anti-alias filter is automatically applied to all outputs. The service no longer accepts the value DISABLED for AntiAlias. If you specify that in your job, the service will ignore the setting.
public enum AntiAlias {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension AntiAlias : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AntiAlias] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AntiAlias(rawValue: rawValue) ?? AntiAlias.sdkUnknown(rawValue)
    }
}

public struct AssociateCertificateInputBodyMiddleware: Middleware {
    public let id: String = "AssociateCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateCertificateInput>
    public typealias MOutput = OperationOutput<AssociateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateCertificateOutputError>
}

extension AssociateCertificateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateCertificateInput(arn: \(String(describing: arn)))"}
}

extension AssociateCertificateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }
}

public struct AssociateCertificateInputHeadersMiddleware: Middleware {
    public let id: String = "AssociateCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateCertificateInput>
    public typealias MOutput = OperationOutput<AssociateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateCertificateOutputError>
}

public struct AssociateCertificateInputQueryItemMiddleware: Middleware {
    public let id: String = "AssociateCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateCertificateInput>
    public typealias MOutput = OperationOutput<AssociateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateCertificateOutputError>
}

public struct AssociateCertificateInput: Equatable {
    /// The ARN of the ACM certificate that you want to associate with your MediaConvert resource.
    public let arn: String?

    public init (
        arn: String? = nil
    )
    {
        self.arn = arn
    }
}

struct AssociateCertificateInputBody: Equatable {
    public let arn: String?
}

extension AssociateCertificateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension AssociateCertificateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateCertificateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateCertificateOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateCertificateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateCertificateOutputResponse()"}
}

extension AssociateCertificateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AssociateCertificateOutputResponse: Equatable {

    public init() {}
}

struct AssociateCertificateOutputResponseBody: Equatable {
}

extension AssociateCertificateOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

/// You can add a tag for this mono-channel audio track to mimic its placement in a multi-channel layout.  For example, if this track is the left surround channel, choose Left surround (LS).
public enum AudioChannelTag {
    case c
    case cs
    case l
    case lc
    case lfe
    case ls
    case lsd
    case r
    case rc
    case rs
    case rsd
    case tcs
    case vhc
    case vhl
    case vhr
    case sdkUnknown(String)
}

extension AudioChannelTag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioChannelTag] {
        return [
            .c,
            .cs,
            .l,
            .lc,
            .lfe,
            .ls,
            .lsd,
            .r,
            .rc,
            .rs,
            .rsd,
            .tcs,
            .vhc,
            .vhl,
            .vhr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .c: return "C"
        case .cs: return "CS"
        case .l: return "L"
        case .lc: return "LC"
        case .lfe: return "LFE"
        case .ls: return "LS"
        case .lsd: return "LSD"
        case .r: return "R"
        case .rc: return "RC"
        case .rs: return "RS"
        case .rsd: return "RSD"
        case .tcs: return "TCS"
        case .vhc: return "VHC"
        case .vhl: return "VHL"
        case .vhr: return "VHR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioChannelTag(rawValue: rawValue) ?? AudioChannelTag.sdkUnknown(rawValue)
    }
}

extension AudioChannelTaggingSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelTag = "channelTag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelTag = channelTag {
            try encodeContainer.encode(channelTag.rawValue, forKey: .channelTag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelTagDecoded = try containerValues.decodeIfPresent(AudioChannelTag.self, forKey: .channelTag)
        channelTag = channelTagDecoded
    }
}

extension AudioChannelTaggingSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioChannelTaggingSettings(channelTag: \(String(describing: channelTag)))"}
}

/// When you mimic a multi-channel audio layout with multiple mono-channel tracks, you can tag each channel layout manually. For example, you would tag the tracks that contain your left, right, and center audio with Left (L), Right (R), and Center (C), respectively. When you don't specify a value, MediaConvert labels your track as Center (C) by default. To use audio layout tagging, your output must be in a QuickTime (.mov) container; your audio codec must be AAC, WAV, or AIFF; and you must set up your audio track to have only one channel.
public struct AudioChannelTaggingSettings: Equatable {
    /// You can add a tag for this mono-channel audio track to mimic its placement in a multi-channel layout.  For example, if this track is the left surround channel, choose Left surround (LS).
    public let channelTag: AudioChannelTag?

    public init (
        channelTag: AudioChannelTag? = nil
    )
    {
        self.channelTag = channelTag
    }
}

/// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
public enum AudioCodec {
    case aac
    case ac3
    case aiff
    case eac3
    case eac3Atmos
    case mp2
    case mp3
    case opus
    case passthrough
    case vorbis
    case wav
    case sdkUnknown(String)
}

extension AudioCodec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioCodec] {
        return [
            .aac,
            .ac3,
            .aiff,
            .eac3,
            .eac3Atmos,
            .mp2,
            .mp3,
            .opus,
            .passthrough,
            .vorbis,
            .wav,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aac: return "AAC"
        case .ac3: return "AC3"
        case .aiff: return "AIFF"
        case .eac3: return "EAC3"
        case .eac3Atmos: return "EAC3_ATMOS"
        case .mp2: return "MP2"
        case .mp3: return "MP3"
        case .opus: return "OPUS"
        case .passthrough: return "PASSTHROUGH"
        case .vorbis: return "VORBIS"
        case .wav: return "WAV"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioCodec(rawValue: rawValue) ?? AudioCodec.sdkUnknown(rawValue)
    }
}

extension AudioCodecSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aacSettings = "aacSettings"
        case ac3Settings = "ac3Settings"
        case aiffSettings = "aiffSettings"
        case codec = "codec"
        case eac3AtmosSettings = "eac3AtmosSettings"
        case eac3Settings = "eac3Settings"
        case mp2Settings = "mp2Settings"
        case mp3Settings = "mp3Settings"
        case opusSettings = "opusSettings"
        case vorbisSettings = "vorbisSettings"
        case wavSettings = "wavSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aacSettings = aacSettings {
            try encodeContainer.encode(aacSettings, forKey: .aacSettings)
        }
        if let ac3Settings = ac3Settings {
            try encodeContainer.encode(ac3Settings, forKey: .ac3Settings)
        }
        if let aiffSettings = aiffSettings {
            try encodeContainer.encode(aiffSettings, forKey: .aiffSettings)
        }
        if let codec = codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let eac3AtmosSettings = eac3AtmosSettings {
            try encodeContainer.encode(eac3AtmosSettings, forKey: .eac3AtmosSettings)
        }
        if let eac3Settings = eac3Settings {
            try encodeContainer.encode(eac3Settings, forKey: .eac3Settings)
        }
        if let mp2Settings = mp2Settings {
            try encodeContainer.encode(mp2Settings, forKey: .mp2Settings)
        }
        if let mp3Settings = mp3Settings {
            try encodeContainer.encode(mp3Settings, forKey: .mp3Settings)
        }
        if let opusSettings = opusSettings {
            try encodeContainer.encode(opusSettings, forKey: .opusSettings)
        }
        if let vorbisSettings = vorbisSettings {
            try encodeContainer.encode(vorbisSettings, forKey: .vorbisSettings)
        }
        if let wavSettings = wavSettings {
            try encodeContainer.encode(wavSettings, forKey: .wavSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aacSettingsDecoded = try containerValues.decodeIfPresent(AacSettings.self, forKey: .aacSettings)
        aacSettings = aacSettingsDecoded
        let ac3SettingsDecoded = try containerValues.decodeIfPresent(Ac3Settings.self, forKey: .ac3Settings)
        ac3Settings = ac3SettingsDecoded
        let aiffSettingsDecoded = try containerValues.decodeIfPresent(AiffSettings.self, forKey: .aiffSettings)
        aiffSettings = aiffSettingsDecoded
        let codecDecoded = try containerValues.decodeIfPresent(AudioCodec.self, forKey: .codec)
        codec = codecDecoded
        let eac3AtmosSettingsDecoded = try containerValues.decodeIfPresent(Eac3AtmosSettings.self, forKey: .eac3AtmosSettings)
        eac3AtmosSettings = eac3AtmosSettingsDecoded
        let eac3SettingsDecoded = try containerValues.decodeIfPresent(Eac3Settings.self, forKey: .eac3Settings)
        eac3Settings = eac3SettingsDecoded
        let mp2SettingsDecoded = try containerValues.decodeIfPresent(Mp2Settings.self, forKey: .mp2Settings)
        mp2Settings = mp2SettingsDecoded
        let mp3SettingsDecoded = try containerValues.decodeIfPresent(Mp3Settings.self, forKey: .mp3Settings)
        mp3Settings = mp3SettingsDecoded
        let opusSettingsDecoded = try containerValues.decodeIfPresent(OpusSettings.self, forKey: .opusSettings)
        opusSettings = opusSettingsDecoded
        let vorbisSettingsDecoded = try containerValues.decodeIfPresent(VorbisSettings.self, forKey: .vorbisSettings)
        vorbisSettings = vorbisSettingsDecoded
        let wavSettingsDecoded = try containerValues.decodeIfPresent(WavSettings.self, forKey: .wavSettings)
        wavSettings = wavSettingsDecoded
    }
}

extension AudioCodecSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioCodecSettings(aacSettings: \(String(describing: aacSettings)), ac3Settings: \(String(describing: ac3Settings)), aiffSettings: \(String(describing: aiffSettings)), codec: \(String(describing: codec)), eac3AtmosSettings: \(String(describing: eac3AtmosSettings)), eac3Settings: \(String(describing: eac3Settings)), mp2Settings: \(String(describing: mp2Settings)), mp3Settings: \(String(describing: mp3Settings)), opusSettings: \(String(describing: opusSettings)), vorbisSettings: \(String(describing: vorbisSettings)), wavSettings: \(String(describing: wavSettings)))"}
}

/// Settings related to audio encoding. The settings in this group vary depending on the value that you choose for your audio codec.
public struct AudioCodecSettings: Equatable {
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR".  In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
    public let aacSettings: AacSettings?
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AC3.
    public let ac3Settings: Ac3Settings?
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AIFF.
    public let aiffSettings: AiffSettings?
    /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
    public let codec: AudioCodec?
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3_ATMOS.
    public let eac3AtmosSettings: Eac3AtmosSettings?
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3.
    public let eac3Settings: Eac3Settings?
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value MP2.
    public let mp2Settings: Mp2Settings?
    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value MP3.
    public let mp3Settings: Mp3Settings?
    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value OPUS.
    public let opusSettings: OpusSettings?
    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value Vorbis.
    public let vorbisSettings: VorbisSettings?
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value WAV.
    public let wavSettings: WavSettings?

    public init (
        aacSettings: AacSettings? = nil,
        ac3Settings: Ac3Settings? = nil,
        aiffSettings: AiffSettings? = nil,
        codec: AudioCodec? = nil,
        eac3AtmosSettings: Eac3AtmosSettings? = nil,
        eac3Settings: Eac3Settings? = nil,
        mp2Settings: Mp2Settings? = nil,
        mp3Settings: Mp3Settings? = nil,
        opusSettings: OpusSettings? = nil,
        vorbisSettings: VorbisSettings? = nil,
        wavSettings: WavSettings? = nil
    )
    {
        self.aacSettings = aacSettings
        self.ac3Settings = ac3Settings
        self.aiffSettings = aiffSettings
        self.codec = codec
        self.eac3AtmosSettings = eac3AtmosSettings
        self.eac3Settings = eac3Settings
        self.mp2Settings = mp2Settings
        self.mp3Settings = mp3Settings
        self.opusSettings = opusSettings
        self.vorbisSettings = vorbisSettings
        self.wavSettings = wavSettings
    }
}

/// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
public enum AudioDefaultSelection {
    case `default`
    case notDefault
    case sdkUnknown(String)
}

extension AudioDefaultSelection : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioDefaultSelection] {
        return [
            .default,
            .notDefault,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .notDefault: return "NOT_DEFAULT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioDefaultSelection(rawValue: rawValue) ?? AudioDefaultSelection.sdkUnknown(rawValue)
    }
}

extension AudioDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioChannelTaggingSettings = "audioChannelTaggingSettings"
        case audioNormalizationSettings = "audioNormalizationSettings"
        case audioSourceName = "audioSourceName"
        case audioType = "audioType"
        case audioTypeControl = "audioTypeControl"
        case codecSettings = "codecSettings"
        case customLanguageCode = "customLanguageCode"
        case languageCode = "languageCode"
        case languageCodeControl = "languageCodeControl"
        case remixSettings = "remixSettings"
        case streamName = "streamName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioChannelTaggingSettings = audioChannelTaggingSettings {
            try encodeContainer.encode(audioChannelTaggingSettings, forKey: .audioChannelTaggingSettings)
        }
        if let audioNormalizationSettings = audioNormalizationSettings {
            try encodeContainer.encode(audioNormalizationSettings, forKey: .audioNormalizationSettings)
        }
        if let audioSourceName = audioSourceName {
            try encodeContainer.encode(audioSourceName, forKey: .audioSourceName)
        }
        if audioType != 0 {
            try encodeContainer.encode(audioType, forKey: .audioType)
        }
        if let audioTypeControl = audioTypeControl {
            try encodeContainer.encode(audioTypeControl.rawValue, forKey: .audioTypeControl)
        }
        if let codecSettings = codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if let customLanguageCode = customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageCodeControl = languageCodeControl {
            try encodeContainer.encode(languageCodeControl.rawValue, forKey: .languageCodeControl)
        }
        if let remixSettings = remixSettings {
            try encodeContainer.encode(remixSettings, forKey: .remixSettings)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioChannelTaggingSettingsDecoded = try containerValues.decodeIfPresent(AudioChannelTaggingSettings.self, forKey: .audioChannelTaggingSettings)
        audioChannelTaggingSettings = audioChannelTaggingSettingsDecoded
        let audioNormalizationSettingsDecoded = try containerValues.decodeIfPresent(AudioNormalizationSettings.self, forKey: .audioNormalizationSettings)
        audioNormalizationSettings = audioNormalizationSettingsDecoded
        let audioSourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioSourceName)
        audioSourceName = audioSourceNameDecoded
        let audioTypeDecoded = try containerValues.decode(Int.self, forKey: .audioType)
        audioType = audioTypeDecoded
        let audioTypeControlDecoded = try containerValues.decodeIfPresent(AudioTypeControl.self, forKey: .audioTypeControl)
        audioTypeControl = audioTypeControlDecoded
        let codecSettingsDecoded = try containerValues.decodeIfPresent(AudioCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageCodeControlDecoded = try containerValues.decodeIfPresent(AudioLanguageCodeControl.self, forKey: .languageCodeControl)
        languageCodeControl = languageCodeControlDecoded
        let remixSettingsDecoded = try containerValues.decodeIfPresent(RemixSettings.self, forKey: .remixSettings)
        remixSettings = remixSettingsDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}

extension AudioDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioDescription(audioChannelTaggingSettings: \(String(describing: audioChannelTaggingSettings)), audioNormalizationSettings: \(String(describing: audioNormalizationSettings)), audioSourceName: \(String(describing: audioSourceName)), audioType: \(String(describing: audioType)), audioTypeControl: \(String(describing: audioTypeControl)), codecSettings: \(String(describing: codecSettings)), customLanguageCode: \(String(describing: customLanguageCode)), languageCode: \(String(describing: languageCode)), languageCodeControl: \(String(describing: languageCodeControl)), remixSettings: \(String(describing: remixSettings)), streamName: \(String(describing: streamName)))"}
}

/// Settings related to one audio tab on the MediaConvert console. In your job JSON, an instance of AudioDescription is equivalent to one audio tab in the console. Usually, one audio tab corresponds to one output audio track. Depending on how you set up your input audio selectors and whether you use audio selector groups, one audio tab can correspond to a group of output audio tracks.
public struct AudioDescription: Equatable {
    /// When you mimic a multi-channel audio layout with multiple mono-channel tracks, you can tag each channel layout manually. For example, you would tag the tracks that contain your left, right, and center audio with Left (L), Right (R), and Center (C), respectively. When you don't specify a value, MediaConvert labels your track as Center (C) by default. To use audio layout tagging, your output must be in a QuickTime (.mov) container; your audio codec must be AAC, WAV, or AIFF; and you must set up your audio track to have only one channel.
    public let audioChannelTaggingSettings: AudioChannelTaggingSettings?
    /// Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
    public let audioNormalizationSettings: AudioNormalizationSettings?
    /// Specifies which audio data to use from each input. In the simplest case, specify an "Audio Selector":#inputs-audio_selector by name based on its order within each input. For example if you specify "Audio Selector 3", then the third audio selector will be used from each input. If an input does not have an "Audio Selector 3", then the audio selector marked as "default" in that input will be used. If there is no audio selector marked as "default", silence will be inserted for the duration of that input. Alternatively, an "Audio Selector Group":#inputs-audio_selector_group name may be specified, with similar default/silence behavior. If no audio_source_name is specified, then "Audio Selector 1" will be chosen automatically.
    public let audioSourceName: String?
    /// Applies only if Follow Input Audio Type is unchecked (false). A number between 0 and 255. The following are defined in ISO-IEC 13818-1: 0 = Undefined, 1 = Clean Effects, 2 = Hearing Impaired, 3 = Visually Impaired Commentary, 4-255 = Reserved.
    public let audioType: Int
    /// When set to FOLLOW_INPUT, if the input contains an ISO 639 audio_type, then that value is passed through to the output. If the input contains no ISO 639 audio_type, the value in Audio Type is included in the output. Otherwise the value in Audio Type is included in the output. Note that this field and audioType are both ignored if audioDescriptionBroadcasterMix is set to BROADCASTER_MIXED_AD.
    public let audioTypeControl: AudioTypeControl?
    /// Settings related to audio encoding. The settings in this group vary depending on the value that you choose for your audio codec.
    public let codecSettings: AudioCodecSettings?
    /// Specify the language for this audio output track. The service puts this language code into your output audio track when you set Language code control (AudioLanguageCodeControl) to Use configured (USE_CONFIGURED). The service also uses your specified custom language code when you set Language code control (AudioLanguageCodeControl) to Follow input (FOLLOW_INPUT), but your input file doesn't specify a language code. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    public let customLanguageCode: String?
    /// Indicates the language of the audio output track. The ISO 639 language specified in the 'Language Code' drop down will be used when 'Follow Input Language Code' is not selected or when 'Follow Input Language Code' is selected but there is no ISO 639 language code specified by the input.
    public let languageCode: LanguageCode?
    /// Specify which source for language code takes precedence for this audio track. When you choose Follow input (FOLLOW_INPUT), the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code (languageCode or customLanguageCode). When you choose Use configured (USE_CONFIGURED), the service uses the language code that you specify.
    public let languageCodeControl: AudioLanguageCodeControl?
    /// Advanced audio remixing settings.
    public let remixSettings: RemixSettings?
    /// Specify a label for this output audio stream. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    public let streamName: String?

    public init (
        audioChannelTaggingSettings: AudioChannelTaggingSettings? = nil,
        audioNormalizationSettings: AudioNormalizationSettings? = nil,
        audioSourceName: String? = nil,
        audioType: Int = 0,
        audioTypeControl: AudioTypeControl? = nil,
        codecSettings: AudioCodecSettings? = nil,
        customLanguageCode: String? = nil,
        languageCode: LanguageCode? = nil,
        languageCodeControl: AudioLanguageCodeControl? = nil,
        remixSettings: RemixSettings? = nil,
        streamName: String? = nil
    )
    {
        self.audioChannelTaggingSettings = audioChannelTaggingSettings
        self.audioNormalizationSettings = audioNormalizationSettings
        self.audioSourceName = audioSourceName
        self.audioType = audioType
        self.audioTypeControl = audioTypeControl
        self.codecSettings = codecSettings
        self.customLanguageCode = customLanguageCode
        self.languageCode = languageCode
        self.languageCodeControl = languageCodeControl
        self.remixSettings = remixSettings
        self.streamName = streamName
    }
}

/// Specify which source for language code takes precedence for this audio track. When you choose Follow input (FOLLOW_INPUT), the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code (languageCode or customLanguageCode). When you choose Use configured (USE_CONFIGURED), the service uses the language code that you specify.
public enum AudioLanguageCodeControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension AudioLanguageCodeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioLanguageCodeControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioLanguageCodeControl(rawValue: rawValue) ?? AudioLanguageCodeControl.sdkUnknown(rawValue)
    }
}

/// Choose one of the following audio normalization algorithms: ITU-R BS.1770-1: Ungated loudness. A measurement of ungated average loudness for an entire piece of content, suitable for measurement of short-form content under ATSC recommendation A/85. Supports up to 5.1 audio channels. ITU-R BS.1770-2: Gated loudness. A measurement of gated average loudness compliant with the requirements of EBU-R128. Supports up to 5.1 audio channels. ITU-R BS.1770-3: Modified peak. The same loudness measurement algorithm as 1770-2, with an updated true peak measurement. ITU-R BS.1770-4: Higher channel count. Allows for more audio channels than the other algorithms, including configurations such as 7.1.
public enum AudioNormalizationAlgorithm {
    case ituBs17701
    case ituBs17702
    case ituBs17703
    case ituBs17704
    case sdkUnknown(String)
}

extension AudioNormalizationAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioNormalizationAlgorithm] {
        return [
            .ituBs17701,
            .ituBs17702,
            .ituBs17703,
            .ituBs17704,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ituBs17701: return "ITU_BS_1770_1"
        case .ituBs17702: return "ITU_BS_1770_2"
        case .ituBs17703: return "ITU_BS_1770_3"
        case .ituBs17704: return "ITU_BS_1770_4"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioNormalizationAlgorithm(rawValue: rawValue) ?? AudioNormalizationAlgorithm.sdkUnknown(rawValue)
    }
}

/// When enabled the output audio is corrected using the chosen algorithm. If disabled, the audio will be measured but not adjusted.
public enum AudioNormalizationAlgorithmControl {
    case correctAudio
    case measureOnly
    case sdkUnknown(String)
}

extension AudioNormalizationAlgorithmControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioNormalizationAlgorithmControl] {
        return [
            .correctAudio,
            .measureOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .correctAudio: return "CORRECT_AUDIO"
        case .measureOnly: return "MEASURE_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioNormalizationAlgorithmControl(rawValue: rawValue) ?? AudioNormalizationAlgorithmControl.sdkUnknown(rawValue)
    }
}

/// If set to LOG, log each output's audio track loudness to a CSV file.
public enum AudioNormalizationLoudnessLogging {
    case dontLog
    case log
    case sdkUnknown(String)
}

extension AudioNormalizationLoudnessLogging : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioNormalizationLoudnessLogging] {
        return [
            .dontLog,
            .log,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dontLog: return "DONT_LOG"
        case .log: return "LOG"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioNormalizationLoudnessLogging(rawValue: rawValue) ?? AudioNormalizationLoudnessLogging.sdkUnknown(rawValue)
    }
}

/// If set to TRUE_PEAK, calculate and log the TruePeak for each output's audio track loudness.
public enum AudioNormalizationPeakCalculation {
    case `none`
    case truePeak
    case sdkUnknown(String)
}

extension AudioNormalizationPeakCalculation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioNormalizationPeakCalculation] {
        return [
            .none,
            .truePeak,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .truePeak: return "TRUE_PEAK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioNormalizationPeakCalculation(rawValue: rawValue) ?? AudioNormalizationPeakCalculation.sdkUnknown(rawValue)
    }
}

extension AudioNormalizationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithm = "algorithm"
        case algorithmControl = "algorithmControl"
        case correctionGateLevel = "correctionGateLevel"
        case loudnessLogging = "loudnessLogging"
        case peakCalculation = "peakCalculation"
        case targetLkfs = "targetLkfs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let algorithmControl = algorithmControl {
            try encodeContainer.encode(algorithmControl.rawValue, forKey: .algorithmControl)
        }
        if correctionGateLevel != 0 {
            try encodeContainer.encode(correctionGateLevel, forKey: .correctionGateLevel)
        }
        if let loudnessLogging = loudnessLogging {
            try encodeContainer.encode(loudnessLogging.rawValue, forKey: .loudnessLogging)
        }
        if let peakCalculation = peakCalculation {
            try encodeContainer.encode(peakCalculation.rawValue, forKey: .peakCalculation)
        }
        if targetLkfs != 0.0 {
            try encodeContainer.encode(targetLkfs, forKey: .targetLkfs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(AudioNormalizationAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let algorithmControlDecoded = try containerValues.decodeIfPresent(AudioNormalizationAlgorithmControl.self, forKey: .algorithmControl)
        algorithmControl = algorithmControlDecoded
        let correctionGateLevelDecoded = try containerValues.decode(Int.self, forKey: .correctionGateLevel)
        correctionGateLevel = correctionGateLevelDecoded
        let loudnessLoggingDecoded = try containerValues.decodeIfPresent(AudioNormalizationLoudnessLogging.self, forKey: .loudnessLogging)
        loudnessLogging = loudnessLoggingDecoded
        let peakCalculationDecoded = try containerValues.decodeIfPresent(AudioNormalizationPeakCalculation.self, forKey: .peakCalculation)
        peakCalculation = peakCalculationDecoded
        let targetLkfsDecoded = try containerValues.decode(Double.self, forKey: .targetLkfs)
        targetLkfs = targetLkfsDecoded
    }
}

extension AudioNormalizationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioNormalizationSettings(algorithm: \(String(describing: algorithm)), algorithmControl: \(String(describing: algorithmControl)), correctionGateLevel: \(String(describing: correctionGateLevel)), loudnessLogging: \(String(describing: loudnessLogging)), peakCalculation: \(String(describing: peakCalculation)), targetLkfs: \(String(describing: targetLkfs)))"}
}

/// Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
public struct AudioNormalizationSettings: Equatable {
    /// Choose one of the following audio normalization algorithms: ITU-R BS.1770-1: Ungated loudness. A measurement of ungated average loudness for an entire piece of content, suitable for measurement of short-form content under ATSC recommendation A/85. Supports up to 5.1 audio channels. ITU-R BS.1770-2: Gated loudness. A measurement of gated average loudness compliant with the requirements of EBU-R128. Supports up to 5.1 audio channels. ITU-R BS.1770-3: Modified peak. The same loudness measurement algorithm as 1770-2, with an updated true peak measurement. ITU-R BS.1770-4: Higher channel count. Allows for more audio channels than the other algorithms, including configurations such as 7.1.
    public let algorithm: AudioNormalizationAlgorithm?
    /// When enabled the output audio is corrected using the chosen algorithm. If disabled, the audio will be measured but not adjusted.
    public let algorithmControl: AudioNormalizationAlgorithmControl?
    /// Content measuring above this level will be corrected to the target level. Content measuring below this level will not be corrected.
    public let correctionGateLevel: Int
    /// If set to LOG, log each output's audio track loudness to a CSV file.
    public let loudnessLogging: AudioNormalizationLoudnessLogging?
    /// If set to TRUE_PEAK, calculate and log the TruePeak for each output's audio track loudness.
    public let peakCalculation: AudioNormalizationPeakCalculation?
    /// When you use Audio normalization (AudioNormalizationSettings), optionally use this setting to specify a target loudness. If you don't specify a value here, the encoder chooses a value for you, based on the algorithm that you choose for Algorithm (algorithm). If you choose algorithm 1770-1, the encoder will choose -24 LKFS; otherwise, the encoder will choose -23 LKFS.
    public let targetLkfs: Double

    public init (
        algorithm: AudioNormalizationAlgorithm? = nil,
        algorithmControl: AudioNormalizationAlgorithmControl? = nil,
        correctionGateLevel: Int = 0,
        loudnessLogging: AudioNormalizationLoudnessLogging? = nil,
        peakCalculation: AudioNormalizationPeakCalculation? = nil,
        targetLkfs: Double = 0.0
    )
    {
        self.algorithm = algorithm
        self.algorithmControl = algorithmControl
        self.correctionGateLevel = correctionGateLevel
        self.loudnessLogging = loudnessLogging
        self.peakCalculation = peakCalculation
        self.targetLkfs = targetLkfs
    }
}

extension AudioSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customLanguageCode = "customLanguageCode"
        case defaultSelection = "defaultSelection"
        case externalAudioFileInput = "externalAudioFileInput"
        case languageCode = "languageCode"
        case offset = "offset"
        case pids = "pids"
        case programSelection = "programSelection"
        case remixSettings = "remixSettings"
        case selectorType = "selectorType"
        case tracks = "tracks"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customLanguageCode = customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let defaultSelection = defaultSelection {
            try encodeContainer.encode(defaultSelection.rawValue, forKey: .defaultSelection)
        }
        if let externalAudioFileInput = externalAudioFileInput {
            try encodeContainer.encode(externalAudioFileInput, forKey: .externalAudioFileInput)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if offset != 0 {
            try encodeContainer.encode(offset, forKey: .offset)
        }
        if let pids = pids {
            var pidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pids)
            for __listof__integermin1max21474836470 in pids {
                try pidsContainer.encode(__listof__integermin1max21474836470)
            }
        }
        if programSelection != 0 {
            try encodeContainer.encode(programSelection, forKey: .programSelection)
        }
        if let remixSettings = remixSettings {
            try encodeContainer.encode(remixSettings, forKey: .remixSettings)
        }
        if let selectorType = selectorType {
            try encodeContainer.encode(selectorType.rawValue, forKey: .selectorType)
        }
        if let tracks = tracks {
            var tracksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tracks)
            for __listof__integermin1max21474836470 in tracks {
                try tracksContainer.encode(__listof__integermin1max21474836470)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let defaultSelectionDecoded = try containerValues.decodeIfPresent(AudioDefaultSelection.self, forKey: .defaultSelection)
        defaultSelection = defaultSelectionDecoded
        let externalAudioFileInputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalAudioFileInput)
        externalAudioFileInput = externalAudioFileInputDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let offsetDecoded = try containerValues.decode(Int.self, forKey: .offset)
        offset = offsetDecoded
        let pidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .pids)
        var pidsDecoded0:[Int]? = nil
        if let pidsContainer = pidsContainer {
            pidsDecoded0 = [Int]()
            for integer0 in pidsContainer {
                if let integer0 = integer0 {
                    pidsDecoded0?.append(integer0)
                }
            }
        }
        pids = pidsDecoded0
        let programSelectionDecoded = try containerValues.decode(Int.self, forKey: .programSelection)
        programSelection = programSelectionDecoded
        let remixSettingsDecoded = try containerValues.decodeIfPresent(RemixSettings.self, forKey: .remixSettings)
        remixSettings = remixSettingsDecoded
        let selectorTypeDecoded = try containerValues.decodeIfPresent(AudioSelectorType.self, forKey: .selectorType)
        selectorType = selectorTypeDecoded
        let tracksContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .tracks)
        var tracksDecoded0:[Int]? = nil
        if let tracksContainer = tracksContainer {
            tracksDecoded0 = [Int]()
            for integer0 in tracksContainer {
                if let integer0 = integer0 {
                    tracksDecoded0?.append(integer0)
                }
            }
        }
        tracks = tracksDecoded0
    }
}

extension AudioSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioSelector(customLanguageCode: \(String(describing: customLanguageCode)), defaultSelection: \(String(describing: defaultSelection)), externalAudioFileInput: \(String(describing: externalAudioFileInput)), languageCode: \(String(describing: languageCode)), offset: \(String(describing: offset)), pids: \(String(describing: pids)), programSelection: \(String(describing: programSelection)), remixSettings: \(String(describing: remixSettings)), selectorType: \(String(describing: selectorType)), tracks: \(String(describing: tracks)))"}
}

/// Use Audio selectors (AudioSelectors) to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
public struct AudioSelector: Equatable {
    /// Selects a specific language code from within an audio source, using the ISO 639-2 or ISO 639-3 three-letter language code
    public let customLanguageCode: String?
    /// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
    public let defaultSelection: AudioDefaultSelection?
    /// Specifies audio data from an external file source.
    public let externalAudioFileInput: String?
    /// Selects a specific language code from within an audio source.
    public let languageCode: LanguageCode?
    /// Specifies a time delta in milliseconds to offset the audio from the input video.
    public let offset: Int
    /// Selects a specific PID from within an audio source (e.g. 257 selects PID 0x101).
    public let pids: [Int]?
    /// Use this setting for input streams that contain Dolby E, to have the service extract specific program data from the track. To select multiple programs, create multiple selectors with the same Track and different Program numbers. In the console, this setting is visible when you set Selector type to Track. Choose the program number from the dropdown list. If you are sending a JSON file, provide the program ID, which is part of the audio metadata. If your input file has incorrect metadata, you can choose All channels instead of a program number to have the service ignore the program IDs and include all the programs in the track.
    public let programSelection: Int
    /// Use these settings to reorder the audio channels of one input to match those of another input. This allows you to combine the two files into a single output, one after the other.
    public let remixSettings: RemixSettings?
    /// Specifies the type of the audio selector.
    public let selectorType: AudioSelectorType?
    /// Identify a track from the input audio to include in this selector by entering the track index number. To include several tracks in a single audio selector, specify multiple tracks as follows. Using the console, enter a comma-separated list. For examle, type "1,2,3" to include tracks 1 through 3. Specifying directly in your JSON job file, provide the track numbers in an array. For example, "tracks": [1,2,3].
    public let tracks: [Int]?

    public init (
        customLanguageCode: String? = nil,
        defaultSelection: AudioDefaultSelection? = nil,
        externalAudioFileInput: String? = nil,
        languageCode: LanguageCode? = nil,
        offset: Int = 0,
        pids: [Int]? = nil,
        programSelection: Int = 0,
        remixSettings: RemixSettings? = nil,
        selectorType: AudioSelectorType? = nil,
        tracks: [Int]? = nil
    )
    {
        self.customLanguageCode = customLanguageCode
        self.defaultSelection = defaultSelection
        self.externalAudioFileInput = externalAudioFileInput
        self.languageCode = languageCode
        self.offset = offset
        self.pids = pids
        self.programSelection = programSelection
        self.remixSettings = remixSettings
        self.selectorType = selectorType
        self.tracks = tracks
    }
}

extension AudioSelectorGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSelectorNames = "audioSelectorNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorNames = audioSelectorNames {
            var audioSelectorNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioSelectorNames)
            for __listof__stringmin10 in audioSelectorNames {
                try audioSelectorNamesContainer.encode(__listof__stringmin10)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .audioSelectorNames)
        var audioSelectorNamesDecoded0:[String]? = nil
        if let audioSelectorNamesContainer = audioSelectorNamesContainer {
            audioSelectorNamesDecoded0 = [String]()
            for string0 in audioSelectorNamesContainer {
                if let string0 = string0 {
                    audioSelectorNamesDecoded0?.append(string0)
                }
            }
        }
        audioSelectorNames = audioSelectorNamesDecoded0
    }
}

extension AudioSelectorGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AudioSelectorGroup(audioSelectorNames: \(String(describing: audioSelectorNames)))"}
}

/// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab (AudioDescription). Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
public struct AudioSelectorGroup: Equatable {
    /// Name of an Audio Selector within the same input to include in the group.  Audio selector names are standardized, based on their order within the input (e.g., "Audio Selector 1"). The audio selector name parameter can be repeated to add any number of audio selectors to the group.
    public let audioSelectorNames: [String]?

    public init (
        audioSelectorNames: [String]? = nil
    )
    {
        self.audioSelectorNames = audioSelectorNames
    }
}

/// Specifies the type of the audio selector.
public enum AudioSelectorType {
    case languageCode
    case pid
    case track
    case sdkUnknown(String)
}

extension AudioSelectorType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioSelectorType] {
        return [
            .languageCode,
            .pid,
            .track,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .languageCode: return "LANGUAGE_CODE"
        case .pid: return "PID"
        case .track: return "TRACK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioSelectorType(rawValue: rawValue) ?? AudioSelectorType.sdkUnknown(rawValue)
    }
}

/// When set to FOLLOW_INPUT, if the input contains an ISO 639 audio_type, then that value is passed through to the output. If the input contains no ISO 639 audio_type, the value in Audio Type is included in the output. Otherwise the value in Audio Type is included in the output. Note that this field and audioType are both ignored if audioDescriptionBroadcasterMix is set to BROADCASTER_MIXED_AD.
public enum AudioTypeControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension AudioTypeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioTypeControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioTypeControl(rawValue: rawValue) ?? AudioTypeControl.sdkUnknown(rawValue)
    }
}

extension AutomatedAbrSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxAbrBitrate = "maxAbrBitrate"
        case maxRenditions = "maxRenditions"
        case minAbrBitrate = "minAbrBitrate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxAbrBitrate != 0 {
            try encodeContainer.encode(maxAbrBitrate, forKey: .maxAbrBitrate)
        }
        if maxRenditions != 0 {
            try encodeContainer.encode(maxRenditions, forKey: .maxRenditions)
        }
        if minAbrBitrate != 0 {
            try encodeContainer.encode(minAbrBitrate, forKey: .minAbrBitrate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxAbrBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxAbrBitrate)
        maxAbrBitrate = maxAbrBitrateDecoded
        let maxRenditionsDecoded = try containerValues.decode(Int.self, forKey: .maxRenditions)
        maxRenditions = maxRenditionsDecoded
        let minAbrBitrateDecoded = try containerValues.decode(Int.self, forKey: .minAbrBitrate)
        minAbrBitrate = minAbrBitrateDecoded
    }
}

extension AutomatedAbrSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutomatedAbrSettings(maxAbrBitrate: \(String(describing: maxAbrBitrate)), maxRenditions: \(String(describing: maxRenditions)), minAbrBitrate: \(String(describing: minAbrBitrate)))"}
}

/// Use automated ABR to have MediaConvert set up the renditions in your ABR package for you automatically, based on characteristics of your input video. This feature optimizes video quality while minimizing the overall size of your ABR package.
public struct AutomatedAbrSettings: Equatable {
    /// Optional. The maximum target bit rate used in your automated ABR stack. Use this value to set an upper limit on the bandwidth consumed by the highest-quality rendition. This is the rendition that is delivered to viewers with the fastest internet connections. If you don't specify a value, MediaConvert uses 8,000,000 (8 mb/s) by default.
    public let maxAbrBitrate: Int
    /// Optional. The maximum number of renditions that MediaConvert will create in your automated ABR stack. The number of renditions is determined automatically, based on analysis of each job, but will never exceed this limit. When you set this to Auto in the console, which is equivalent to excluding it from your JSON job specification, MediaConvert defaults to a limit of 15.
    public let maxRenditions: Int
    /// Optional. The minimum target bitrate used in your automated ABR stack. Use this value to set a lower limit on the bitrate of video delivered to viewers with slow internet connections. If you don't specify a value, MediaConvert uses 600,000 (600 kb/s) by default.
    public let minAbrBitrate: Int

    public init (
        maxAbrBitrate: Int = 0,
        maxRenditions: Int = 0,
        minAbrBitrate: Int = 0
    )
    {
        self.maxAbrBitrate = maxAbrBitrate
        self.maxRenditions = maxRenditions
        self.minAbrBitrate = minAbrBitrate
    }
}

extension AutomatedEncodingSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case abrSettings = "abrSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abrSettings = abrSettings {
            try encodeContainer.encode(abrSettings, forKey: .abrSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let abrSettingsDecoded = try containerValues.decodeIfPresent(AutomatedAbrSettings.self, forKey: .abrSettings)
        abrSettings = abrSettingsDecoded
    }
}

extension AutomatedEncodingSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutomatedEncodingSettings(abrSettings: \(String(describing: abrSettings)))"}
}

/// Use automated encoding to have MediaConvert choose your encoding settings for you, based on characteristics of your input video.
public struct AutomatedEncodingSettings: Equatable {
    /// Use automated ABR to have MediaConvert set up the renditions in your ABR package for you automatically, based on characteristics of your input video. This feature optimizes video quality while minimizing the overall size of your ABR package.
    public let abrSettings: AutomatedAbrSettings?

    public init (
        abrSettings: AutomatedAbrSettings? = nil
    )
    {
        self.abrSettings = abrSettings
    }
}

/// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to Spatial adaptive quantization (spatialAdaptiveQuantization).
public enum Av1AdaptiveQuantization {
    case high
    case higher
    case low
    case max
    case medium
    case off
    case sdkUnknown(String)
}

extension Av1AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Av1AdaptiveQuantization] {
        return [
            .high,
            .higher,
            .low,
            .max,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .higher: return "HIGHER"
        case .low: return "LOW"
        case .max: return "MAX"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Av1AdaptiveQuantization(rawValue: rawValue) ?? Av1AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum Av1FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Av1FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Av1FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Av1FramerateControl(rawValue: rawValue) ?? Av1FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum Av1FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension Av1FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Av1FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Av1FramerateConversionAlgorithm(rawValue: rawValue) ?? Av1FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

extension Av1QvbrSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case qvbrQualityLevel = "qvbrQualityLevel"
        case qvbrQualityLevelFineTune = "qvbrQualityLevelFineTune"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if qvbrQualityLevel != 0 {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if qvbrQualityLevelFineTune != 0.0 {
            try encodeContainer.encode(qvbrQualityLevelFineTune, forKey: .qvbrQualityLevelFineTune)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qvbrQualityLevelDecoded = try containerValues.decode(Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let qvbrQualityLevelFineTuneDecoded = try containerValues.decode(Double.self, forKey: .qvbrQualityLevelFineTune)
        qvbrQualityLevelFineTune = qvbrQualityLevelFineTuneDecoded
    }
}

extension Av1QvbrSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Av1QvbrSettings(qvbrQualityLevel: \(String(describing: qvbrQualityLevel)), qvbrQualityLevelFineTune: \(String(describing: qvbrQualityLevelFineTune)))"}
}

/// Settings for quality-defined variable bitrate encoding with the AV1 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
public struct Av1QvbrSettings: Equatable {
    /// Required when you use QVBR rate control mode. That is, when you specify qvbrSettings within av1Settings. Specify the general target quality level for this output, from 1 to 10. Use higher numbers for greater quality. Level 10 results in nearly lossless compression. The quality level for most broadcast-quality transcodes is between 6 and 9. Optionally, to specify a value between whole numbers, also provide a value for the setting qvbrQualityLevelFineTune. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33.
    public let qvbrQualityLevel: Int
    /// Optional. Specify a value here to set the QVBR quality to a level that is between whole numbers. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33. MediaConvert rounds your QVBR quality level to the nearest third of a whole number. For example, if you set qvbrQualityLevel to 7 and you set qvbrQualityLevelFineTune to .25, your actual QVBR quality level is 7.33.
    public let qvbrQualityLevelFineTune: Double

    public init (
        qvbrQualityLevel: Int = 0,
        qvbrQualityLevelFineTune: Double = 0.0
    )
    {
        self.qvbrQualityLevel = qvbrQualityLevel
        self.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune
    }
}

/// 'With AV1 outputs, for rate control mode, MediaConvert supports only quality-defined variable bitrate (QVBR). You can''t use CBR or VBR.'
public enum Av1RateControlMode {
    case qvbr
    case sdkUnknown(String)
}

extension Av1RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Av1RateControlMode] {
        return [
            .qvbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .qvbr: return "QVBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Av1RateControlMode(rawValue: rawValue) ?? Av1RateControlMode.sdkUnknown(rawValue)
    }
}

extension Av1Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopSize = "gopSize"
        case maxBitrate = "maxBitrate"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case qvbrSettings = "qvbrSettings"
        case rateControlMode = "rateControlMode"
        case slices = "slices"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if numberBFramesBetweenReferenceFrames != 0 {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if let qvbrSettings = qvbrSettings {
            try encodeContainer.encode(qvbrSettings, forKey: .qvbrSettings)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let spatialAdaptiveQuantization = spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Av1AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(Av1FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Av1FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let qvbrSettingsDecoded = try containerValues.decodeIfPresent(Av1QvbrSettings.self, forKey: .qvbrSettings)
        qvbrSettings = qvbrSettingsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Av1RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Av1SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
    }
}

extension Av1Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Av1Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopSize: \(String(describing: gopSize)), maxBitrate: \(String(describing: maxBitrate)), numberBFramesBetweenReferenceFrames: \(String(describing: numberBFramesBetweenReferenceFrames)), qvbrSettings: \(String(describing: qvbrSettings)), rateControlMode: \(String(describing: rateControlMode)), slices: \(String(describing: slices)), spatialAdaptiveQuantization: \(String(describing: spatialAdaptiveQuantization)))"}
}

/// Required when you set Codec, under VideoDescription>CodecSettings to the value AV1.
public struct Av1Settings: Equatable {
    /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to Spatial adaptive quantization (spatialAdaptiveQuantization).
    public let adaptiveQuantization: Av1AdaptiveQuantization?
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: Av1FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: Av1FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// Specify the GOP length (keyframe interval) in frames. With AV1, MediaConvert doesn't support GOP length in seconds. This value must be greater than zero and preferably equal to 1 + ((numberBFrames + 1) * x), where x is an integer value.
    public let gopSize: Double
    /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.
    public let maxBitrate: Int
    /// Specify from the number of B-frames, in the range of 0-15. For AV1 encoding, we recommend using 7 or 15. Choose a larger number for a lower bitrate and smaller file size; choose a smaller number for better video quality.
    public let numberBFramesBetweenReferenceFrames: Int
    /// Settings for quality-defined variable bitrate encoding with the AV1 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
    public let qvbrSettings: Av1QvbrSettings?
    /// 'With AV1 outputs, for rate control mode, MediaConvert supports only quality-defined variable bitrate (QVBR). You can''t use CBR or VBR.'
    public let rateControlMode: Av1RateControlMode?
    /// Specify the number of slices per picture. This value must be 1, 2, 4, 8, 16, or 32. For progressive pictures, this value must be less than or equal to the number of macroblock rows. For interlaced pictures, this value must be less than or equal to half the number of macroblock rows.
    public let slices: Int
    /// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public let spatialAdaptiveQuantization: Av1SpatialAdaptiveQuantization?

    public init (
        adaptiveQuantization: Av1AdaptiveQuantization? = nil,
        framerateControl: Av1FramerateControl? = nil,
        framerateConversionAlgorithm: Av1FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopSize: Double = 0.0,
        maxBitrate: Int = 0,
        numberBFramesBetweenReferenceFrames: Int = 0,
        qvbrSettings: Av1QvbrSettings? = nil,
        rateControlMode: Av1RateControlMode? = nil,
        slices: Int = 0,
        spatialAdaptiveQuantization: Av1SpatialAdaptiveQuantization? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopSize = gopSize
        self.maxBitrate = maxBitrate
        self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
        self.qvbrSettings = qvbrSettings
        self.rateControlMode = rateControlMode
        self.slices = slices
        self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
    }
}

/// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
public enum Av1SpatialAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Av1SpatialAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Av1SpatialAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Av1SpatialAdaptiveQuantization(rawValue: rawValue) ?? Av1SpatialAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

extension AvailBlanking: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availBlankingImage = "availBlankingImage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availBlankingImage = availBlankingImage {
            try encodeContainer.encode(availBlankingImage, forKey: .availBlankingImage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availBlankingImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availBlankingImage)
        availBlankingImage = availBlankingImageDecoded
    }
}

extension AvailBlanking: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvailBlanking(availBlankingImage: \(String(describing: availBlankingImage)))"}
}

/// Use ad avail blanking settings to specify your output content during SCTE-35 triggered ad avails. You can blank your video or overlay it with an image. MediaConvert also removes any audio and embedded captions during the ad avail. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ad-avail-blanking.html.
public struct AvailBlanking: Equatable {
    /// Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
    public let availBlankingImage: String?

    public init (
        availBlankingImage: String? = nil
    )
    {
        self.availBlankingImage = availBlankingImage
    }
}

/// Specify the AVC-Intra class of your output. The AVC-Intra class selection determines the output video bit rate depending on the frame rate of the output. Outputs with higher class values have higher bitrates and improved image quality. Note that for Class 4K/2K, MediaConvert supports only 4:2:2 chroma subsampling.
public enum AvcIntraClass {
    case class100
    case class200
    case class4k2k
    case class50
    case sdkUnknown(String)
}

extension AvcIntraClass : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraClass] {
        return [
            .class100,
            .class200,
            .class4k2k,
            .class50,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .class100: return "CLASS_100"
        case .class200: return "CLASS_200"
        case .class4k2k: return "CLASS_4K_2K"
        case .class50: return "CLASS_50"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraClass(rawValue: rawValue) ?? AvcIntraClass.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum AvcIntraFramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension AvcIntraFramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraFramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraFramerateControl(rawValue: rawValue) ?? AvcIntraFramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum AvcIntraFramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension AvcIntraFramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraFramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraFramerateConversionAlgorithm(rawValue: rawValue) ?? AvcIntraFramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
public enum AvcIntraInterlaceMode {
    case bottomField
    case followBottomField
    case followTopField
    case progressive
    case topField
    case sdkUnknown(String)
}

extension AvcIntraInterlaceMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraInterlaceMode] {
        return [
            .bottomField,
            .followBottomField,
            .followTopField,
            .progressive,
            .topField,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bottomField: return "BOTTOM_FIELD"
        case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
        case .followTopField: return "FOLLOW_TOP_FIELD"
        case .progressive: return "PROGRESSIVE"
        case .topField: return "TOP_FIELD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraInterlaceMode(rawValue: rawValue) ?? AvcIntraInterlaceMode.sdkUnknown(rawValue)
    }
}

/// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
public enum AvcIntraScanTypeConversionMode {
    case interlaced
    case interlacedOptimize
    case sdkUnknown(String)
}

extension AvcIntraScanTypeConversionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraScanTypeConversionMode] {
        return [
            .interlaced,
            .interlacedOptimize,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraScanTypeConversionMode(rawValue: rawValue) ?? AvcIntraScanTypeConversionMode.sdkUnknown(rawValue)
    }
}

extension AvcIntraSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case avcIntraClass = "avcIntraClass"
        case avcIntraUhdSettings = "avcIntraUhdSettings"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case interlaceMode = "interlaceMode"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case slowPal = "slowPal"
        case telecine = "telecine"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let avcIntraClass = avcIntraClass {
            try encodeContainer.encode(avcIntraClass.rawValue, forKey: .avcIntraClass)
        }
        if let avcIntraUhdSettings = avcIntraUhdSettings {
            try encodeContainer.encode(avcIntraUhdSettings, forKey: .avcIntraUhdSettings)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let avcIntraClassDecoded = try containerValues.decodeIfPresent(AvcIntraClass.self, forKey: .avcIntraClass)
        avcIntraClass = avcIntraClassDecoded
        let avcIntraUhdSettingsDecoded = try containerValues.decodeIfPresent(AvcIntraUhdSettings.self, forKey: .avcIntraUhdSettings)
        avcIntraUhdSettings = avcIntraUhdSettingsDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(AvcIntraFramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(AvcIntraFramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(AvcIntraInterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(AvcIntraScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(AvcIntraSlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(AvcIntraTelecine.self, forKey: .telecine)
        telecine = telecineDecoded
    }
}

extension AvcIntraSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvcIntraSettings(avcIntraClass: \(String(describing: avcIntraClass)), avcIntraUhdSettings: \(String(describing: avcIntraUhdSettings)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), interlaceMode: \(String(describing: interlaceMode)), scanTypeConversionMode: \(String(describing: scanTypeConversionMode)), slowPal: \(String(describing: slowPal)), telecine: \(String(describing: telecine)))"}
}

/// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
public struct AvcIntraSettings: Equatable {
    /// Specify the AVC-Intra class of your output. The AVC-Intra class selection determines the output video bit rate depending on the frame rate of the output. Outputs with higher class values have higher bitrates and improved image quality. Note that for Class 4K/2K, MediaConvert supports only 4:2:2 chroma subsampling.
    public let avcIntraClass: AvcIntraClass?
    /// Optional when you set AVC-Intra class (avcIntraClass) to Class 4K/2K (CLASS_4K_2K). When you set AVC-Intra class to a different value, this object isn't allowed.
    public let avcIntraUhdSettings: AvcIntraUhdSettings?
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: AvcIntraFramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: AvcIntraFramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public let interlaceMode: AvcIntraInterlaceMode?
    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
    public let scanTypeConversionMode: AvcIntraScanTypeConversionMode?
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    public let slowPal: AvcIntraSlowPal?
    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine (HARD) to create a smoother picture. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public let telecine: AvcIntraTelecine?

    public init (
        avcIntraClass: AvcIntraClass? = nil,
        avcIntraUhdSettings: AvcIntraUhdSettings? = nil,
        framerateControl: AvcIntraFramerateControl? = nil,
        framerateConversionAlgorithm: AvcIntraFramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        interlaceMode: AvcIntraInterlaceMode? = nil,
        scanTypeConversionMode: AvcIntraScanTypeConversionMode? = nil,
        slowPal: AvcIntraSlowPal? = nil,
        telecine: AvcIntraTelecine? = nil
    )
    {
        self.avcIntraClass = avcIntraClass
        self.avcIntraUhdSettings = avcIntraUhdSettings
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.interlaceMode = interlaceMode
        self.scanTypeConversionMode = scanTypeConversionMode
        self.slowPal = slowPal
        self.telecine = telecine
    }
}

/// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
public enum AvcIntraSlowPal {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension AvcIntraSlowPal : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraSlowPal] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraSlowPal(rawValue: rawValue) ?? AvcIntraSlowPal.sdkUnknown(rawValue)
    }
}

/// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine (HARD) to create a smoother picture. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
public enum AvcIntraTelecine {
    case hard
    case `none`
    case sdkUnknown(String)
}

extension AvcIntraTelecine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraTelecine] {
        return [
            .hard,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hard: return "HARD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraTelecine(rawValue: rawValue) ?? AvcIntraTelecine.sdkUnknown(rawValue)
    }
}

/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how many transcoding passes MediaConvert does with your video. When you choose Multi-pass (MULTI_PASS), your video quality is better and your output bitrate is more accurate. That is, the actual bitrate of your output is closer to the target bitrate defined in the specification. When you choose Single-pass (SINGLE_PASS), your encoding time is faster. The default behavior is Single-pass (SINGLE_PASS).
public enum AvcIntraUhdQualityTuningLevel {
    case multiPass
    case singlePass
    case sdkUnknown(String)
}

extension AvcIntraUhdQualityTuningLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AvcIntraUhdQualityTuningLevel] {
        return [
            .multiPass,
            .singlePass,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiPass: return "MULTI_PASS"
        case .singlePass: return "SINGLE_PASS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AvcIntraUhdQualityTuningLevel(rawValue: rawValue) ?? AvcIntraUhdQualityTuningLevel.sdkUnknown(rawValue)
    }
}

extension AvcIntraUhdSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case qualityTuningLevel = "qualityTuningLevel"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(AvcIntraUhdQualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
    }
}

extension AvcIntraUhdSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AvcIntraUhdSettings(qualityTuningLevel: \(String(describing: qualityTuningLevel)))"}
}

/// Optional when you set AVC-Intra class (avcIntraClass) to Class 4K/2K (CLASS_4K_2K). When you set AVC-Intra class to a different value, this object isn't allowed.
public struct AvcIntraUhdSettings: Equatable {
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how many transcoding passes MediaConvert does with your video. When you choose Multi-pass (MULTI_PASS), your video quality is better and your output bitrate is more accurate. That is, the actual bitrate of your output is closer to the target bitrate defined in the specification. When you choose Single-pass (SINGLE_PASS), your encoding time is faster. The default behavior is Single-pass (SINGLE_PASS).
    public let qualityTuningLevel: AvcIntraUhdQualityTuningLevel?

    public init (
        qualityTuningLevel: AvcIntraUhdQualityTuningLevel? = nil
    )
    {
        self.qualityTuningLevel = qualityTuningLevel
    }
}

extension BadRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BadRequestException(message: \(String(describing: message)))"}
}

extension BadRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service can't process your request because of a problem in the request. Please check your request form and syntax.
public struct BadRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Equatable {
    public let message: String?
}

extension BadRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

/// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
public enum BillingTagsSource {
    case job
    case jobTemplate
    case preset
    case queue
    case sdkUnknown(String)
}

extension BillingTagsSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BillingTagsSource] {
        return [
            .job,
            .jobTemplate,
            .preset,
            .queue,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .job: return "JOB"
        case .jobTemplate: return "JOB_TEMPLATE"
        case .preset: return "PRESET"
        case .queue: return "QUEUE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BillingTagsSource(rawValue: rawValue) ?? BillingTagsSource.sdkUnknown(rawValue)
    }
}

extension BurninDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontScript = "fontScript"
        case fontSize = "fontSize"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case teletextSpacing = "teletextSpacing"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if backgroundOpacity != 0 {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let fontColor = fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if fontOpacity != 0 {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if fontResolution != 0 {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontScript = fontScript {
            try encodeContainer.encode(fontScript.rawValue, forKey: .fontScript)
        }
        if fontSize != 0 {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let outlineColor = outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if outlineSize != 0 {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if shadowOpacity != 0 {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if shadowXOffset != 0 {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if shadowYOffset != 0 {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let teletextSpacing = teletextSpacing {
            try encodeContainer.encode(teletextSpacing.rawValue, forKey: .teletextSpacing)
        }
        if xPosition != 0 {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if yPosition != 0 {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(BurninSubtitleAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(BurninSubtitleBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decode(Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(BurninSubtitleFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decode(Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decode(Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontScriptDecoded = try containerValues.decodeIfPresent(FontScript.self, forKey: .fontScript)
        fontScript = fontScriptDecoded
        let fontSizeDecoded = try containerValues.decode(Int.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(BurninSubtitleOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decode(Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(BurninSubtitleShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decode(Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let teletextSpacingDecoded = try containerValues.decodeIfPresent(BurninSubtitleTeletextSpacing.self, forKey: .teletextSpacing)
        teletextSpacing = teletextSpacingDecoded
        let xPositionDecoded = try containerValues.decode(Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decode(Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}

extension BurninDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BurninDestinationSettings(alignment: \(String(describing: alignment)), backgroundColor: \(String(describing: backgroundColor)), backgroundOpacity: \(String(describing: backgroundOpacity)), fontColor: \(String(describing: fontColor)), fontOpacity: \(String(describing: fontOpacity)), fontResolution: \(String(describing: fontResolution)), fontScript: \(String(describing: fontScript)), fontSize: \(String(describing: fontSize)), outlineColor: \(String(describing: outlineColor)), outlineSize: \(String(describing: outlineSize)), shadowColor: \(String(describing: shadowColor)), shadowOpacity: \(String(describing: shadowOpacity)), shadowXOffset: \(String(describing: shadowXOffset)), shadowYOffset: \(String(describing: shadowYOffset)), teletextSpacing: \(String(describing: teletextSpacing)), xPosition: \(String(describing: xPosition)), yPosition: \(String(describing: yPosition)))"}
}

/// Settings related to burn-in captions. Set up burn-in captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to BURN_IN.
public struct BurninDestinationSettings: Equatable {
    /// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let alignment: BurninSubtitleAlignment?
    /// Specifies the color of the rectangle behind the captions.
    /// All burn-in and DVB-Sub font settings must match.
    public let backgroundColor: BurninSubtitleBackgroundColor?
    /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
    public let backgroundOpacity: Int
    /// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let fontColor: BurninSubtitleFontColor?
    /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
    /// All burn-in and DVB-Sub font settings must match.
    public let fontOpacity: Int
    /// Font resolution in DPI (dots per inch); default is 96 dpi.
    /// All burn-in and DVB-Sub font settings must match.
    public let fontResolution: Int
    /// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset. This is used to help determine the appropriate font for rendering burn-in captions.
    public let fontScript: FontScript?
    /// A positive integer indicates the exact font size in points. Set to 0 for automatic font size selection. All burn-in and DVB-Sub font settings must match.
    public let fontSize: Int
    /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineColor: BurninSubtitleOutlineColor?
    /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineSize: Int
    /// Specifies the color of the shadow cast by the captions.
    /// All burn-in and DVB-Sub font settings must match.
    public let shadowColor: BurninSubtitleShadowColor?
    /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
    public let shadowOpacity: Int
    /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    public let shadowXOffset: Int
    /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    public let shadowYOffset: Int
    /// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
    public let teletextSpacing: BurninSubtitleTeletextSpacing?
    /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let xPosition: Int
    /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let yPosition: Int

    public init (
        alignment: BurninSubtitleAlignment? = nil,
        backgroundColor: BurninSubtitleBackgroundColor? = nil,
        backgroundOpacity: Int = 0,
        fontColor: BurninSubtitleFontColor? = nil,
        fontOpacity: Int = 0,
        fontResolution: Int = 0,
        fontScript: FontScript? = nil,
        fontSize: Int = 0,
        outlineColor: BurninSubtitleOutlineColor? = nil,
        outlineSize: Int = 0,
        shadowColor: BurninSubtitleShadowColor? = nil,
        shadowOpacity: Int = 0,
        shadowXOffset: Int = 0,
        shadowYOffset: Int = 0,
        teletextSpacing: BurninSubtitleTeletextSpacing? = nil,
        xPosition: Int = 0,
        yPosition: Int = 0
    )
    {
        self.alignment = alignment
        self.backgroundColor = backgroundColor
        self.backgroundOpacity = backgroundOpacity
        self.fontColor = fontColor
        self.fontOpacity = fontOpacity
        self.fontResolution = fontResolution
        self.fontScript = fontScript
        self.fontSize = fontSize
        self.outlineColor = outlineColor
        self.outlineSize = outlineSize
        self.shadowColor = shadowColor
        self.shadowOpacity = shadowOpacity
        self.shadowXOffset = shadowXOffset
        self.shadowYOffset = shadowYOffset
        self.teletextSpacing = teletextSpacing
        self.xPosition = xPosition
        self.yPosition = yPosition
    }
}

/// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
public enum BurninSubtitleAlignment {
    case centered
    case `left`
    case sdkUnknown(String)
}

extension BurninSubtitleAlignment : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurninSubtitleAlignment] {
        return [
            .centered,
            .left,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .centered: return "CENTERED"
        case .left: return "LEFT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurninSubtitleAlignment(rawValue: rawValue) ?? BurninSubtitleAlignment.sdkUnknown(rawValue)
    }
}

/// Specifies the color of the rectangle behind the captions.
/// All burn-in and DVB-Sub font settings must match.
public enum BurninSubtitleBackgroundColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension BurninSubtitleBackgroundColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurninSubtitleBackgroundColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurninSubtitleBackgroundColor(rawValue: rawValue) ?? BurninSubtitleBackgroundColor.sdkUnknown(rawValue)
    }
}

/// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
public enum BurninSubtitleFontColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension BurninSubtitleFontColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurninSubtitleFontColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurninSubtitleFontColor(rawValue: rawValue) ?? BurninSubtitleFontColor.sdkUnknown(rawValue)
    }
}

/// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
public enum BurninSubtitleOutlineColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension BurninSubtitleOutlineColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurninSubtitleOutlineColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurninSubtitleOutlineColor(rawValue: rawValue) ?? BurninSubtitleOutlineColor.sdkUnknown(rawValue)
    }
}

/// Specifies the color of the shadow cast by the captions.
/// All burn-in and DVB-Sub font settings must match.
public enum BurninSubtitleShadowColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension BurninSubtitleShadowColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurninSubtitleShadowColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurninSubtitleShadowColor(rawValue: rawValue) ?? BurninSubtitleShadowColor.sdkUnknown(rawValue)
    }
}

/// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
public enum BurninSubtitleTeletextSpacing {
    case fixedGrid
    case proportional
    case sdkUnknown(String)
}

extension BurninSubtitleTeletextSpacing : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BurninSubtitleTeletextSpacing] {
        return [
            .fixedGrid,
            .proportional,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fixedGrid: return "FIXED_GRID"
        case .proportional: return "PROPORTIONAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BurninSubtitleTeletextSpacing(rawValue: rawValue) ?? BurninSubtitleTeletextSpacing.sdkUnknown(rawValue)
    }
}

extension CancelJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelJobInput(id: \(String(describing: id)))"}
}

extension CancelJobInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct CancelJobInputHeadersMiddleware: Middleware {
    public let id: String = "CancelJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelJobInput>
    public typealias MOutput = OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelJobOutputError>
}

public struct CancelJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelJobInput>
    public typealias MOutput = OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelJobOutputError>
}

public struct CancelJobInput: Equatable {
    /// The Job ID of the job to be cancelled.
    public let id: String?

    public init (
        id: String? = nil
    )
    {
        self.id = id
    }
}

struct CancelJobInputBody: Equatable {
}

extension CancelJobInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension CancelJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelJobOutputResponse()"}
}

extension CancelJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CancelJobOutputResponse: Equatable {

    public init() {}
}

struct CancelJobOutputResponseBody: Equatable {
}

extension CancelJobOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension CaptionDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case captionSelectorName = "captionSelectorName"
        case customLanguageCode = "customLanguageCode"
        case destinationSettings = "destinationSettings"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captionSelectorName = captionSelectorName {
            try encodeContainer.encode(captionSelectorName, forKey: .captionSelectorName)
        }
        if let customLanguageCode = customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageDescription = languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captionSelectorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .captionSelectorName)
        captionSelectorName = captionSelectorNameDecoded
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(CaptionDestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
    }
}

extension CaptionDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionDescription(captionSelectorName: \(String(describing: captionSelectorName)), customLanguageCode: \(String(describing: customLanguageCode)), destinationSettings: \(String(describing: destinationSettings)), languageCode: \(String(describing: languageCode)), languageDescription: \(String(describing: languageDescription)))"}
}

/// This object holds groups of settings related to captions for one output. For each output that has captions, include one instance of CaptionDescriptions.
public struct CaptionDescription: Equatable {
    /// Specifies which "Caption Selector":#inputs-caption_selector to use from each input when generating captions. The name should be of the format "Caption Selector <N>", which denotes that the Nth Caption Selector will be used from each input.
    public let captionSelectorName: String?
    /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    public let customLanguageCode: String?
    /// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    public let destinationSettings: CaptionDestinationSettings?
    /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
    public let languageCode: LanguageCode?
    /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    public let languageDescription: String?

    public init (
        captionSelectorName: String? = nil,
        customLanguageCode: String? = nil,
        destinationSettings: CaptionDestinationSettings? = nil,
        languageCode: LanguageCode? = nil,
        languageDescription: String? = nil
    )
    {
        self.captionSelectorName = captionSelectorName
        self.customLanguageCode = customLanguageCode
        self.destinationSettings = destinationSettings
        self.languageCode = languageCode
        self.languageDescription = languageDescription
    }
}

extension CaptionDescriptionPreset: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customLanguageCode = "customLanguageCode"
        case destinationSettings = "destinationSettings"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customLanguageCode = customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageDescription = languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(CaptionDestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
    }
}

extension CaptionDescriptionPreset: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionDescriptionPreset(customLanguageCode: \(String(describing: customLanguageCode)), destinationSettings: \(String(describing: destinationSettings)), languageCode: \(String(describing: languageCode)), languageDescription: \(String(describing: languageDescription)))"}
}

/// Caption Description for preset
public struct CaptionDescriptionPreset: Equatable {
    /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    public let customLanguageCode: String?
    /// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    public let destinationSettings: CaptionDestinationSettings?
    /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
    public let languageCode: LanguageCode?
    /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    public let languageDescription: String?

    public init (
        customLanguageCode: String? = nil,
        destinationSettings: CaptionDestinationSettings? = nil,
        languageCode: LanguageCode? = nil,
        languageDescription: String? = nil
    )
    {
        self.customLanguageCode = customLanguageCode
        self.destinationSettings = destinationSettings
        self.languageCode = languageCode
        self.languageDescription = languageDescription
    }
}

extension CaptionDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case burninDestinationSettings = "burninDestinationSettings"
        case destinationType = "destinationType"
        case dvbSubDestinationSettings = "dvbSubDestinationSettings"
        case embeddedDestinationSettings = "embeddedDestinationSettings"
        case imscDestinationSettings = "imscDestinationSettings"
        case sccDestinationSettings = "sccDestinationSettings"
        case teletextDestinationSettings = "teletextDestinationSettings"
        case ttmlDestinationSettings = "ttmlDestinationSettings"
        case webvttDestinationSettings = "webvttDestinationSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let burninDestinationSettings = burninDestinationSettings {
            try encodeContainer.encode(burninDestinationSettings, forKey: .burninDestinationSettings)
        }
        if let destinationType = destinationType {
            try encodeContainer.encode(destinationType.rawValue, forKey: .destinationType)
        }
        if let dvbSubDestinationSettings = dvbSubDestinationSettings {
            try encodeContainer.encode(dvbSubDestinationSettings, forKey: .dvbSubDestinationSettings)
        }
        if let embeddedDestinationSettings = embeddedDestinationSettings {
            try encodeContainer.encode(embeddedDestinationSettings, forKey: .embeddedDestinationSettings)
        }
        if let imscDestinationSettings = imscDestinationSettings {
            try encodeContainer.encode(imscDestinationSettings, forKey: .imscDestinationSettings)
        }
        if let sccDestinationSettings = sccDestinationSettings {
            try encodeContainer.encode(sccDestinationSettings, forKey: .sccDestinationSettings)
        }
        if let teletextDestinationSettings = teletextDestinationSettings {
            try encodeContainer.encode(teletextDestinationSettings, forKey: .teletextDestinationSettings)
        }
        if let ttmlDestinationSettings = ttmlDestinationSettings {
            try encodeContainer.encode(ttmlDestinationSettings, forKey: .ttmlDestinationSettings)
        }
        if let webvttDestinationSettings = webvttDestinationSettings {
            try encodeContainer.encode(webvttDestinationSettings, forKey: .webvttDestinationSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let burninDestinationSettingsDecoded = try containerValues.decodeIfPresent(BurninDestinationSettings.self, forKey: .burninDestinationSettings)
        burninDestinationSettings = burninDestinationSettingsDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(CaptionDestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let dvbSubDestinationSettingsDecoded = try containerValues.decodeIfPresent(DvbSubDestinationSettings.self, forKey: .dvbSubDestinationSettings)
        dvbSubDestinationSettings = dvbSubDestinationSettingsDecoded
        let embeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedDestinationSettings.self, forKey: .embeddedDestinationSettings)
        embeddedDestinationSettings = embeddedDestinationSettingsDecoded
        let imscDestinationSettingsDecoded = try containerValues.decodeIfPresent(ImscDestinationSettings.self, forKey: .imscDestinationSettings)
        imscDestinationSettings = imscDestinationSettingsDecoded
        let sccDestinationSettingsDecoded = try containerValues.decodeIfPresent(SccDestinationSettings.self, forKey: .sccDestinationSettings)
        sccDestinationSettings = sccDestinationSettingsDecoded
        let teletextDestinationSettingsDecoded = try containerValues.decodeIfPresent(TeletextDestinationSettings.self, forKey: .teletextDestinationSettings)
        teletextDestinationSettings = teletextDestinationSettingsDecoded
        let ttmlDestinationSettingsDecoded = try containerValues.decodeIfPresent(TtmlDestinationSettings.self, forKey: .ttmlDestinationSettings)
        ttmlDestinationSettings = ttmlDestinationSettingsDecoded
        let webvttDestinationSettingsDecoded = try containerValues.decodeIfPresent(WebvttDestinationSettings.self, forKey: .webvttDestinationSettings)
        webvttDestinationSettings = webvttDestinationSettingsDecoded
    }
}

extension CaptionDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionDestinationSettings(burninDestinationSettings: \(String(describing: burninDestinationSettings)), destinationType: \(String(describing: destinationType)), dvbSubDestinationSettings: \(String(describing: dvbSubDestinationSettings)), embeddedDestinationSettings: \(String(describing: embeddedDestinationSettings)), imscDestinationSettings: \(String(describing: imscDestinationSettings)), sccDestinationSettings: \(String(describing: sccDestinationSettings)), teletextDestinationSettings: \(String(describing: teletextDestinationSettings)), ttmlDestinationSettings: \(String(describing: ttmlDestinationSettings)), webvttDestinationSettings: \(String(describing: webvttDestinationSettings)))"}
}

/// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
public struct CaptionDestinationSettings: Equatable {
    /// Settings related to burn-in captions. Set up burn-in captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to BURN_IN.
    public let burninDestinationSettings: BurninDestinationSettings?
    /// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Note that your choice of video output container constrains your choice of output captions format. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/captions-support-tables.html. If you are using SCTE-20 and you want to create an output that complies with the SCTE-43 spec, choose SCTE-20 plus embedded (SCTE20_PLUS_EMBEDDED). To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20 (EMBEDDED_PLUS_SCTE20).
    public let destinationType: CaptionDestinationType?
    /// Settings related to DVB-Sub captions. Set up DVB-Sub captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/dvb-sub-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to DVB_SUB.
    public let dvbSubDestinationSettings: DvbSubDestinationSettings?
    /// Settings related to CEA/EIA-608 and CEA/EIA-708 (also called embedded or ancillary) captions. Set up embedded captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/embedded-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to EMBEDDED, EMBEDDED_PLUS_SCTE20, or SCTE20_PLUS_EMBEDDED.
    public let embeddedDestinationSettings: EmbeddedDestinationSettings?
    /// Settings related to IMSC captions. IMSC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to IMSC.
    public let imscDestinationSettings: ImscDestinationSettings?
    /// Settings related to SCC captions. SCC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/scc-srt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to SCC.
    public let sccDestinationSettings: SccDestinationSettings?
    /// Settings related to teletext captions. Set up teletext captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/teletext-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to TELETEXT.
    public let teletextDestinationSettings: TeletextDestinationSettings?
    /// Settings related to TTML captions. TTML is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to TTML.
    public let ttmlDestinationSettings: TtmlDestinationSettings?
    /// WEBVTT Destination Settings
    public let webvttDestinationSettings: WebvttDestinationSettings?

    public init (
        burninDestinationSettings: BurninDestinationSettings? = nil,
        destinationType: CaptionDestinationType? = nil,
        dvbSubDestinationSettings: DvbSubDestinationSettings? = nil,
        embeddedDestinationSettings: EmbeddedDestinationSettings? = nil,
        imscDestinationSettings: ImscDestinationSettings? = nil,
        sccDestinationSettings: SccDestinationSettings? = nil,
        teletextDestinationSettings: TeletextDestinationSettings? = nil,
        ttmlDestinationSettings: TtmlDestinationSettings? = nil,
        webvttDestinationSettings: WebvttDestinationSettings? = nil
    )
    {
        self.burninDestinationSettings = burninDestinationSettings
        self.destinationType = destinationType
        self.dvbSubDestinationSettings = dvbSubDestinationSettings
        self.embeddedDestinationSettings = embeddedDestinationSettings
        self.imscDestinationSettings = imscDestinationSettings
        self.sccDestinationSettings = sccDestinationSettings
        self.teletextDestinationSettings = teletextDestinationSettings
        self.ttmlDestinationSettings = ttmlDestinationSettings
        self.webvttDestinationSettings = webvttDestinationSettings
    }
}

/// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Note that your choice of video output container constrains your choice of output captions format. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/captions-support-tables.html. If you are using SCTE-20 and you want to create an output that complies with the SCTE-43 spec, choose SCTE-20 plus embedded (SCTE20_PLUS_EMBEDDED). To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20 (EMBEDDED_PLUS_SCTE20).
public enum CaptionDestinationType {
    case burnIn
    case dvbSub
    case embedded
    case embeddedPlusScte20
    case imsc
    case scc
    case scte20PlusEmbedded
    case smi
    case srt
    case teletext
    case ttml
    case webvtt
    case sdkUnknown(String)
}

extension CaptionDestinationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CaptionDestinationType] {
        return [
            .burnIn,
            .dvbSub,
            .embedded,
            .embeddedPlusScte20,
            .imsc,
            .scc,
            .scte20PlusEmbedded,
            .smi,
            .srt,
            .teletext,
            .ttml,
            .webvtt,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .burnIn: return "BURN_IN"
        case .dvbSub: return "DVB_SUB"
        case .embedded: return "EMBEDDED"
        case .embeddedPlusScte20: return "EMBEDDED_PLUS_SCTE20"
        case .imsc: return "IMSC"
        case .scc: return "SCC"
        case .scte20PlusEmbedded: return "SCTE20_PLUS_EMBEDDED"
        case .smi: return "SMI"
        case .srt: return "SRT"
        case .teletext: return "TELETEXT"
        case .ttml: return "TTML"
        case .webvtt: return "WEBVTT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CaptionDestinationType(rawValue: rawValue) ?? CaptionDestinationType.sdkUnknown(rawValue)
    }
}

extension CaptionSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customLanguageCode = "customLanguageCode"
        case languageCode = "languageCode"
        case sourceSettings = "sourceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customLanguageCode = customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let sourceSettings = sourceSettings {
            try encodeContainer.encode(sourceSettings, forKey: .sourceSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let sourceSettingsDecoded = try containerValues.decodeIfPresent(CaptionSourceSettings.self, forKey: .sourceSettings)
        sourceSettings = sourceSettingsDecoded
    }
}

extension CaptionSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionSelector(customLanguageCode: \(String(describing: customLanguageCode)), languageCode: \(String(describing: languageCode)), sourceSettings: \(String(describing: sourceSettings)))"}
}

/// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 20 captions selectors per input.
public struct CaptionSelector: Equatable {
    /// The specific language to extract from source, using the ISO 639-2 or ISO 639-3 three-letter language code. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    public let customLanguageCode: String?
    /// The specific language to extract from source. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    public let languageCode: LanguageCode?
    /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    public let sourceSettings: CaptionSourceSettings?

    public init (
        customLanguageCode: String? = nil,
        languageCode: LanguageCode? = nil,
        sourceSettings: CaptionSourceSettings? = nil
    )
    {
        self.customLanguageCode = customLanguageCode
        self.languageCode = languageCode
        self.sourceSettings = sourceSettings
    }
}

extension CaptionSourceFramerate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
    }
}

extension CaptionSourceFramerate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionSourceFramerate(framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)))"}
}

/// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction, using the settings Framerate numerator (framerateNumerator) and Framerate denominator (framerateDenominator). For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
public struct CaptionSourceFramerate: Equatable {
    /// Specify the denominator of the fraction that represents the frame rate for the setting Caption source frame rate (CaptionSourceFramerate). Use this setting along with the setting Framerate numerator (framerateNumerator).
    public let framerateDenominator: Int
    /// Specify the numerator of the fraction that represents the frame rate for the setting Caption source frame rate (CaptionSourceFramerate). Use this setting along with the setting Framerate denominator (framerateDenominator).
    public let framerateNumerator: Int

    public init (
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0
    )
    {
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
    }
}

extension CaptionSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ancillarySourceSettings = "ancillarySourceSettings"
        case dvbSubSourceSettings = "dvbSubSourceSettings"
        case embeddedSourceSettings = "embeddedSourceSettings"
        case fileSourceSettings = "fileSourceSettings"
        case sourceType = "sourceType"
        case teletextSourceSettings = "teletextSourceSettings"
        case trackSourceSettings = "trackSourceSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ancillarySourceSettings = ancillarySourceSettings {
            try encodeContainer.encode(ancillarySourceSettings, forKey: .ancillarySourceSettings)
        }
        if let dvbSubSourceSettings = dvbSubSourceSettings {
            try encodeContainer.encode(dvbSubSourceSettings, forKey: .dvbSubSourceSettings)
        }
        if let embeddedSourceSettings = embeddedSourceSettings {
            try encodeContainer.encode(embeddedSourceSettings, forKey: .embeddedSourceSettings)
        }
        if let fileSourceSettings = fileSourceSettings {
            try encodeContainer.encode(fileSourceSettings, forKey: .fileSourceSettings)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let teletextSourceSettings = teletextSourceSettings {
            try encodeContainer.encode(teletextSourceSettings, forKey: .teletextSourceSettings)
        }
        if let trackSourceSettings = trackSourceSettings {
            try encodeContainer.encode(trackSourceSettings, forKey: .trackSourceSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ancillarySourceSettingsDecoded = try containerValues.decodeIfPresent(AncillarySourceSettings.self, forKey: .ancillarySourceSettings)
        ancillarySourceSettings = ancillarySourceSettingsDecoded
        let dvbSubSourceSettingsDecoded = try containerValues.decodeIfPresent(DvbSubSourceSettings.self, forKey: .dvbSubSourceSettings)
        dvbSubSourceSettings = dvbSubSourceSettingsDecoded
        let embeddedSourceSettingsDecoded = try containerValues.decodeIfPresent(EmbeddedSourceSettings.self, forKey: .embeddedSourceSettings)
        embeddedSourceSettings = embeddedSourceSettingsDecoded
        let fileSourceSettingsDecoded = try containerValues.decodeIfPresent(FileSourceSettings.self, forKey: .fileSourceSettings)
        fileSourceSettings = fileSourceSettingsDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(CaptionSourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let teletextSourceSettingsDecoded = try containerValues.decodeIfPresent(TeletextSourceSettings.self, forKey: .teletextSourceSettings)
        teletextSourceSettings = teletextSourceSettingsDecoded
        let trackSourceSettingsDecoded = try containerValues.decodeIfPresent(TrackSourceSettings.self, forKey: .trackSourceSettings)
        trackSourceSettings = trackSourceSettingsDecoded
    }
}

extension CaptionSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionSourceSettings(ancillarySourceSettings: \(String(describing: ancillarySourceSettings)), dvbSubSourceSettings: \(String(describing: dvbSubSourceSettings)), embeddedSourceSettings: \(String(describing: embeddedSourceSettings)), fileSourceSettings: \(String(describing: fileSourceSettings)), sourceType: \(String(describing: sourceType)), teletextSourceSettings: \(String(describing: teletextSourceSettings)), trackSourceSettings: \(String(describing: trackSourceSettings)))"}
}

/// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
public struct CaptionSourceSettings: Equatable {
    /// Settings for ancillary captions source.
    public let ancillarySourceSettings: AncillarySourceSettings?
    /// DVB Sub Source Settings
    public let dvbSubSourceSettings: DvbSubSourceSettings?
    /// Settings for embedded captions Source
    public let embeddedSourceSettings: EmbeddedSourceSettings?
    /// If your input captions are SCC, SMI, SRT, STL, TTML, WebVTT, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    public let fileSourceSettings: FileSourceSettings?
    /// Use Source (SourceType) to identify the format of your input captions.  The service cannot auto-detect caption format.
    public let sourceType: CaptionSourceType?
    /// Settings specific to Teletext caption sources, including Page number.
    public let teletextSourceSettings: TeletextSourceSettings?
    /// Settings specific to caption sources that are specified by track number. Currently, this is only IMSC captions in an IMF package. If your caption source is IMSC 1.1 in a separate xml file, use FileSourceSettings instead of TrackSourceSettings.
    public let trackSourceSettings: TrackSourceSettings?

    public init (
        ancillarySourceSettings: AncillarySourceSettings? = nil,
        dvbSubSourceSettings: DvbSubSourceSettings? = nil,
        embeddedSourceSettings: EmbeddedSourceSettings? = nil,
        fileSourceSettings: FileSourceSettings? = nil,
        sourceType: CaptionSourceType? = nil,
        teletextSourceSettings: TeletextSourceSettings? = nil,
        trackSourceSettings: TrackSourceSettings? = nil
    )
    {
        self.ancillarySourceSettings = ancillarySourceSettings
        self.dvbSubSourceSettings = dvbSubSourceSettings
        self.embeddedSourceSettings = embeddedSourceSettings
        self.fileSourceSettings = fileSourceSettings
        self.sourceType = sourceType
        self.teletextSourceSettings = teletextSourceSettings
        self.trackSourceSettings = trackSourceSettings
    }
}

/// Use Source (SourceType) to identify the format of your input captions.  The service cannot auto-detect caption format.
public enum CaptionSourceType {
    case ancillary
    case dvbSub
    case embedded
    case imsc
    case nullSource
    case scc
    case scte20
    case smi
    case smpteTt
    case srt
    case stl
    case teletext
    case ttml
    case webvtt
    case sdkUnknown(String)
}

extension CaptionSourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CaptionSourceType] {
        return [
            .ancillary,
            .dvbSub,
            .embedded,
            .imsc,
            .nullSource,
            .scc,
            .scte20,
            .smi,
            .smpteTt,
            .srt,
            .stl,
            .teletext,
            .ttml,
            .webvtt,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ancillary: return "ANCILLARY"
        case .dvbSub: return "DVB_SUB"
        case .embedded: return "EMBEDDED"
        case .imsc: return "IMSC"
        case .nullSource: return "NULL_SOURCE"
        case .scc: return "SCC"
        case .scte20: return "SCTE20"
        case .smi: return "SMI"
        case .smpteTt: return "SMPTE_TT"
        case .srt: return "SRT"
        case .stl: return "STL"
        case .teletext: return "TELETEXT"
        case .ttml: return "TTML"
        case .webvtt: return "WEBVTT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CaptionSourceType(rawValue: rawValue) ?? CaptionSourceType.sdkUnknown(rawValue)
    }
}

extension ChannelMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputChannels = "outputChannels"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputChannels = outputChannels {
            var outputChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputChannels)
            for __listofoutputchannelmapping0 in outputChannels {
                try outputChannelsContainer.encode(__listofoutputchannelmapping0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputChannelsContainer = try containerValues.decodeIfPresent([OutputChannelMapping?].self, forKey: .outputChannels)
        var outputChannelsDecoded0:[OutputChannelMapping]? = nil
        if let outputChannelsContainer = outputChannelsContainer {
            outputChannelsDecoded0 = [OutputChannelMapping]()
            for structure0 in outputChannelsContainer {
                if let structure0 = structure0 {
                    outputChannelsDecoded0?.append(structure0)
                }
            }
        }
        outputChannels = outputChannelsDecoded0
    }
}

extension ChannelMapping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChannelMapping(outputChannels: \(String(describing: outputChannels)))"}
}

/// Channel mapping (ChannelMapping) contains the group of fields that hold the remixing value for each channel, in dB. Specify remix values to indicate how much of the content from your input audio channel you want in your output audio channels. Each instance of the InputChannels or InputChannelsFineTune array specifies these values for one output channel. Use one instance of this array for each output channel. In the console, each array corresponds to a column in the graphical depiction of the mapping matrix. The rows of the graphical matrix correspond to input channels. Valid values are within the range from -60 (mute) through 6. A setting of 0 passes the input channel unchanged to the output channel (no attenuation or amplification). Use InputChannels or InputChannelsFineTune to specify your remix values. Don't use both.
public struct ChannelMapping: Equatable {
    /// In your JSON job specification, include one child of OutputChannels for each audio channel that you want in your output. Each child should contain one instance of InputChannels or InputChannelsFineTune.
    public let outputChannels: [OutputChannelMapping]?

    public init (
        outputChannels: [OutputChannelMapping]? = nil
    )
    {
        self.outputChannels = outputChannels
    }
}

extension CmafAdditionalManifest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case manifestNameModifier = "manifestNameModifier"
        case selectedOutputs = "selectedOutputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestNameModifier = manifestNameModifier {
            try encodeContainer.encode(manifestNameModifier, forKey: .manifestNameModifier)
        }
        if let selectedOutputs = selectedOutputs {
            var selectedOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectedOutputs)
            for __listof__stringmin10 in selectedOutputs {
                try selectedOutputsContainer.encode(__listof__stringmin10)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestNameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .manifestNameModifier)
        manifestNameModifier = manifestNameModifierDecoded
        let selectedOutputsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .selectedOutputs)
        var selectedOutputsDecoded0:[String]? = nil
        if let selectedOutputsContainer = selectedOutputsContainer {
            selectedOutputsDecoded0 = [String]()
            for string0 in selectedOutputsContainer {
                if let string0 = string0 {
                    selectedOutputsDecoded0?.append(string0)
                }
            }
        }
        selectedOutputs = selectedOutputsDecoded0
    }
}

extension CmafAdditionalManifest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CmafAdditionalManifest(manifestNameModifier: \(String(describing: manifestNameModifier)), selectedOutputs: \(String(describing: selectedOutputs)))"}
}

/// Specify the details for each pair of HLS and DASH additional manifests that you want the service to generate for this CMAF output group. Each pair of manifests can reference a different subset of outputs in the group.
public struct CmafAdditionalManifest: Equatable {
    /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your HLS group is film-name.m3u8. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.m3u8. For HLS output groups, specify a manifestNameModifier that is different from the nameModifier of the output. The service uses the output name modifier to create unique names for the individual variant manifests.
    public let manifestNameModifier: String?
    /// Specify the outputs that you want this additional top-level manifest to reference.
    public let selectedOutputs: [String]?

    public init (
        manifestNameModifier: String? = nil,
        selectedOutputs: [String]? = nil
    )
    {
        self.manifestNameModifier = manifestNameModifier
        self.selectedOutputs = selectedOutputs
    }
}

/// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
public enum CmafClientCache {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension CmafClientCache : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafClientCache] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafClientCache(rawValue: rawValue) ?? CmafClientCache.sdkUnknown(rawValue)
    }
}

/// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
public enum CmafCodecSpecification {
    case rfc4281
    case rfc6381
    case sdkUnknown(String)
}

extension CmafCodecSpecification : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafCodecSpecification] {
        return [
            .rfc4281,
            .rfc6381,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rfc4281: return "RFC_4281"
        case .rfc6381: return "RFC_6381"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafCodecSpecification(rawValue: rawValue) ?? CmafCodecSpecification.sdkUnknown(rawValue)
    }
}

extension CmafEncryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constantInitializationVector = "constantInitializationVector"
        case encryptionMethod = "encryptionMethod"
        case initializationVectorInManifest = "initializationVectorInManifest"
        case spekeKeyProvider = "spekeKeyProvider"
        case staticKeyProvider = "staticKeyProvider"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constantInitializationVector = constantInitializationVector {
            try encodeContainer.encode(constantInitializationVector, forKey: .constantInitializationVector)
        }
        if let encryptionMethod = encryptionMethod {
            try encodeContainer.encode(encryptionMethod.rawValue, forKey: .encryptionMethod)
        }
        if let initializationVectorInManifest = initializationVectorInManifest {
            try encodeContainer.encode(initializationVectorInManifest.rawValue, forKey: .initializationVectorInManifest)
        }
        if let spekeKeyProvider = spekeKeyProvider {
            try encodeContainer.encode(spekeKeyProvider, forKey: .spekeKeyProvider)
        }
        if let staticKeyProvider = staticKeyProvider {
            try encodeContainer.encode(staticKeyProvider, forKey: .staticKeyProvider)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constantInitializationVectorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .constantInitializationVector)
        constantInitializationVector = constantInitializationVectorDecoded
        let encryptionMethodDecoded = try containerValues.decodeIfPresent(CmafEncryptionType.self, forKey: .encryptionMethod)
        encryptionMethod = encryptionMethodDecoded
        let initializationVectorInManifestDecoded = try containerValues.decodeIfPresent(CmafInitializationVectorInManifest.self, forKey: .initializationVectorInManifest)
        initializationVectorInManifest = initializationVectorInManifestDecoded
        let spekeKeyProviderDecoded = try containerValues.decodeIfPresent(SpekeKeyProviderCmaf.self, forKey: .spekeKeyProvider)
        spekeKeyProvider = spekeKeyProviderDecoded
        let staticKeyProviderDecoded = try containerValues.decodeIfPresent(StaticKeyProvider.self, forKey: .staticKeyProvider)
        staticKeyProvider = staticKeyProviderDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CmafKeyProviderType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CmafEncryptionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CmafEncryptionSettings(constantInitializationVector: \(String(describing: constantInitializationVector)), encryptionMethod: \(String(describing: encryptionMethod)), initializationVectorInManifest: \(String(describing: initializationVectorInManifest)), spekeKeyProvider: \(String(describing: spekeKeyProvider)), staticKeyProvider: \(String(describing: staticKeyProvider)), type: \(String(describing: type)))"}
}

/// Settings for CMAF encryption
public struct CmafEncryptionSettings: Equatable {
    /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
    public let constantInitializationVector: String?
    /// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample (SAMPLE-AES) or AES_CTR (AES-CTR).
    public let encryptionMethod: CmafEncryptionType?
    /// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
    public let initializationVectorInManifest: CmafInitializationVectorInManifest?
    /// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
    public let spekeKeyProvider: SpekeKeyProviderCmaf?
    /// Use these settings to set up encryption with a static key provider.
    public let staticKeyProvider: StaticKeyProvider?
    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    public let type: CmafKeyProviderType?

    public init (
        constantInitializationVector: String? = nil,
        encryptionMethod: CmafEncryptionType? = nil,
        initializationVectorInManifest: CmafInitializationVectorInManifest? = nil,
        spekeKeyProvider: SpekeKeyProviderCmaf? = nil,
        staticKeyProvider: StaticKeyProvider? = nil,
        type: CmafKeyProviderType? = nil
    )
    {
        self.constantInitializationVector = constantInitializationVector
        self.encryptionMethod = encryptionMethod
        self.initializationVectorInManifest = initializationVectorInManifest
        self.spekeKeyProvider = spekeKeyProvider
        self.staticKeyProvider = staticKeyProvider
        self.type = type
    }
}

/// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample (SAMPLE-AES) or AES_CTR (AES-CTR).
public enum CmafEncryptionType {
    case aesCtr
    case sampleAes
    case sdkUnknown(String)
}

extension CmafEncryptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafEncryptionType] {
        return [
            .aesCtr,
            .sampleAes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aesCtr: return "AES_CTR"
        case .sampleAes: return "SAMPLE_AES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafEncryptionType(rawValue: rawValue) ?? CmafEncryptionType.sdkUnknown(rawValue)
    }
}

extension CmafGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalManifests = "additionalManifests"
        case baseUrl = "baseUrl"
        case clientCache = "clientCache"
        case codecSpecification = "codecSpecification"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case encryption = "encryption"
        case fragmentLength = "fragmentLength"
        case manifestCompression = "manifestCompression"
        case manifestDurationFormat = "manifestDurationFormat"
        case minBufferTime = "minBufferTime"
        case minFinalSegmentLength = "minFinalSegmentLength"
        case mpdProfile = "mpdProfile"
        case ptsOffsetHandlingForBFrames = "ptsOffsetHandlingForBFrames"
        case segmentControl = "segmentControl"
        case segmentLength = "segmentLength"
        case streamInfResolution = "streamInfResolution"
        case writeDashManifest = "writeDashManifest"
        case writeHlsManifest = "writeHlsManifest"
        case writeSegmentTimelineInRepresentation = "writeSegmentTimelineInRepresentation"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofcmafadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofcmafadditionalmanifest0)
            }
        }
        if let baseUrl = baseUrl {
            try encodeContainer.encode(baseUrl, forKey: .baseUrl)
        }
        if let clientCache = clientCache {
            try encodeContainer.encode(clientCache.rawValue, forKey: .clientCache)
        }
        if let codecSpecification = codecSpecification {
            try encodeContainer.encode(codecSpecification.rawValue, forKey: .codecSpecification)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if fragmentLength != 0 {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let manifestCompression = manifestCompression {
            try encodeContainer.encode(manifestCompression.rawValue, forKey: .manifestCompression)
        }
        if let manifestDurationFormat = manifestDurationFormat {
            try encodeContainer.encode(manifestDurationFormat.rawValue, forKey: .manifestDurationFormat)
        }
        if minBufferTime != 0 {
            try encodeContainer.encode(minBufferTime, forKey: .minBufferTime)
        }
        if minFinalSegmentLength != 0.0 {
            try encodeContainer.encode(minFinalSegmentLength, forKey: .minFinalSegmentLength)
        }
        if let mpdProfile = mpdProfile {
            try encodeContainer.encode(mpdProfile.rawValue, forKey: .mpdProfile)
        }
        if let ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames {
            try encodeContainer.encode(ptsOffsetHandlingForBFrames.rawValue, forKey: .ptsOffsetHandlingForBFrames)
        }
        if let segmentControl = segmentControl {
            try encodeContainer.encode(segmentControl.rawValue, forKey: .segmentControl)
        }
        if segmentLength != 0 {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if let streamInfResolution = streamInfResolution {
            try encodeContainer.encode(streamInfResolution.rawValue, forKey: .streamInfResolution)
        }
        if let writeDashManifest = writeDashManifest {
            try encodeContainer.encode(writeDashManifest.rawValue, forKey: .writeDashManifest)
        }
        if let writeHlsManifest = writeHlsManifest {
            try encodeContainer.encode(writeHlsManifest.rawValue, forKey: .writeHlsManifest)
        }
        if let writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation {
            try encodeContainer.encode(writeSegmentTimelineInRepresentation.rawValue, forKey: .writeSegmentTimelineInRepresentation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalManifestsContainer = try containerValues.decodeIfPresent([CmafAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[CmafAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [CmafAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let baseUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrl)
        baseUrl = baseUrlDecoded
        let clientCacheDecoded = try containerValues.decodeIfPresent(CmafClientCache.self, forKey: .clientCache)
        clientCache = clientCacheDecoded
        let codecSpecificationDecoded = try containerValues.decodeIfPresent(CmafCodecSpecification.self, forKey: .codecSpecification)
        codecSpecification = codecSpecificationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(CmafEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let fragmentLengthDecoded = try containerValues.decode(Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let manifestCompressionDecoded = try containerValues.decodeIfPresent(CmafManifestCompression.self, forKey: .manifestCompression)
        manifestCompression = manifestCompressionDecoded
        let manifestDurationFormatDecoded = try containerValues.decodeIfPresent(CmafManifestDurationFormat.self, forKey: .manifestDurationFormat)
        manifestDurationFormat = manifestDurationFormatDecoded
        let minBufferTimeDecoded = try containerValues.decode(Int.self, forKey: .minBufferTime)
        minBufferTime = minBufferTimeDecoded
        let minFinalSegmentLengthDecoded = try containerValues.decode(Double.self, forKey: .minFinalSegmentLength)
        minFinalSegmentLength = minFinalSegmentLengthDecoded
        let mpdProfileDecoded = try containerValues.decodeIfPresent(CmafMpdProfile.self, forKey: .mpdProfile)
        mpdProfile = mpdProfileDecoded
        let ptsOffsetHandlingForBFramesDecoded = try containerValues.decodeIfPresent(CmafPtsOffsetHandlingForBFrames.self, forKey: .ptsOffsetHandlingForBFrames)
        ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFramesDecoded
        let segmentControlDecoded = try containerValues.decodeIfPresent(CmafSegmentControl.self, forKey: .segmentControl)
        segmentControl = segmentControlDecoded
        let segmentLengthDecoded = try containerValues.decode(Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let streamInfResolutionDecoded = try containerValues.decodeIfPresent(CmafStreamInfResolution.self, forKey: .streamInfResolution)
        streamInfResolution = streamInfResolutionDecoded
        let writeDashManifestDecoded = try containerValues.decodeIfPresent(CmafWriteDASHManifest.self, forKey: .writeDashManifest)
        writeDashManifest = writeDashManifestDecoded
        let writeHlsManifestDecoded = try containerValues.decodeIfPresent(CmafWriteHLSManifest.self, forKey: .writeHlsManifest)
        writeHlsManifest = writeHlsManifestDecoded
        let writeSegmentTimelineInRepresentationDecoded = try containerValues.decodeIfPresent(CmafWriteSegmentTimelineInRepresentation.self, forKey: .writeSegmentTimelineInRepresentation)
        writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentationDecoded
    }
}

extension CmafGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CmafGroupSettings(additionalManifests: \(String(describing: additionalManifests)), baseUrl: \(String(describing: baseUrl)), clientCache: \(String(describing: clientCache)), codecSpecification: \(String(describing: codecSpecification)), destination: \(String(describing: destination)), destinationSettings: \(String(describing: destinationSettings)), encryption: \(String(describing: encryption)), fragmentLength: \(String(describing: fragmentLength)), manifestCompression: \(String(describing: manifestCompression)), manifestDurationFormat: \(String(describing: manifestDurationFormat)), minBufferTime: \(String(describing: minBufferTime)), minFinalSegmentLength: \(String(describing: minFinalSegmentLength)), mpdProfile: \(String(describing: mpdProfile)), ptsOffsetHandlingForBFrames: \(String(describing: ptsOffsetHandlingForBFrames)), segmentControl: \(String(describing: segmentControl)), segmentLength: \(String(describing: segmentLength)), streamInfResolution: \(String(describing: streamInfResolution)), writeDashManifest: \(String(describing: writeDashManifest)), writeHlsManifest: \(String(describing: writeHlsManifest)), writeSegmentTimelineInRepresentation: \(String(describing: writeSegmentTimelineInRepresentation)))"}
}

/// Settings related to your CMAF output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to CMAF_GROUP_SETTINGS.
public struct CmafGroupSettings: Equatable {
    /// By default, the service creates one top-level .m3u8 HLS manifest and one top -level .mpd DASH manifest for each CMAF output group in your job. These default manifests reference every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here. For each additional manifest that you specify, the service creates one HLS manifest and one DASH manifest.
    public let additionalManifests: [CmafAdditionalManifest]?
    /// A partial URI prefix that will be put in the manifest file at the top level BaseURL element. Can be used if streams are delivered from a different URL than the manifest file.
    public let baseUrl: String?
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    public let clientCache: CmafClientCache?
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    public let codecSpecification: CmafCodecSpecification?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// DRM settings.
    public let encryption: CmafEncryptionSettings?
    /// Length of fragments to generate (in seconds). Fragment length must be compatible with GOP size and Framerate. Note that fragments will end on the next keyframe after this number of seconds, so actual fragment length may be longer. When Emit Single File is checked, the fragmentation is internal to a single output file and it does not cause the creation of many output files as in other output types.
    public let fragmentLength: Int
    /// When set to GZIP, compresses HLS playlist.
    public let manifestCompression: CmafManifestCompression?
    /// Indicates whether the output manifest should use floating point values for segment duration.
    public let manifestDurationFormat: CmafManifestDurationFormat?
    /// Minimum time of initially buffered media that is needed to ensure smooth playout.
    public let minBufferTime: Int
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    public let minFinalSegmentLength: Double
    /// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
    public let mpdProfile: CmafMpdProfile?
    /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
    public let ptsOffsetHandlingForBFrames: CmafPtsOffsetHandlingForBFrames?
    /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
    public let segmentControl: CmafSegmentControl?
    /// Use this setting to specify the length, in seconds, of each individual CMAF segment. This value applies to the whole package; that is, to every output in the output group. Note that segments end on the first keyframe after this number of seconds, so the actual segment length might be slightly longer. If you set Segment control (CmafSegmentControl) to single file, the service puts the content of each output in a single file that has metadata that marks these segments. If you set it to segmented files, the service creates multiple files for each output, each with the content of one segment.
    public let segmentLength: Int
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    public let streamInfResolution: CmafStreamInfResolution?
    /// When set to ENABLED, a DASH MPD manifest will be generated for this output.
    public let writeDashManifest: CmafWriteDASHManifest?
    /// When set to ENABLED, an Apple HLS manifest will be generated for this output.
    public let writeHlsManifest: CmafWriteHLSManifest?
    /// When you enable Precise segment duration in DASH manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
    public let writeSegmentTimelineInRepresentation: CmafWriteSegmentTimelineInRepresentation?

    public init (
        additionalManifests: [CmafAdditionalManifest]? = nil,
        baseUrl: String? = nil,
        clientCache: CmafClientCache? = nil,
        codecSpecification: CmafCodecSpecification? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        encryption: CmafEncryptionSettings? = nil,
        fragmentLength: Int = 0,
        manifestCompression: CmafManifestCompression? = nil,
        manifestDurationFormat: CmafManifestDurationFormat? = nil,
        minBufferTime: Int = 0,
        minFinalSegmentLength: Double = 0.0,
        mpdProfile: CmafMpdProfile? = nil,
        ptsOffsetHandlingForBFrames: CmafPtsOffsetHandlingForBFrames? = nil,
        segmentControl: CmafSegmentControl? = nil,
        segmentLength: Int = 0,
        streamInfResolution: CmafStreamInfResolution? = nil,
        writeDashManifest: CmafWriteDASHManifest? = nil,
        writeHlsManifest: CmafWriteHLSManifest? = nil,
        writeSegmentTimelineInRepresentation: CmafWriteSegmentTimelineInRepresentation? = nil
    )
    {
        self.additionalManifests = additionalManifests
        self.baseUrl = baseUrl
        self.clientCache = clientCache
        self.codecSpecification = codecSpecification
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.encryption = encryption
        self.fragmentLength = fragmentLength
        self.manifestCompression = manifestCompression
        self.manifestDurationFormat = manifestDurationFormat
        self.minBufferTime = minBufferTime
        self.minFinalSegmentLength = minFinalSegmentLength
        self.mpdProfile = mpdProfile
        self.ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames
        self.segmentControl = segmentControl
        self.segmentLength = segmentLength
        self.streamInfResolution = streamInfResolution
        self.writeDashManifest = writeDashManifest
        self.writeHlsManifest = writeHlsManifest
        self.writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation
    }
}

/// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
public enum CmafInitializationVectorInManifest {
    case exclude
    case include
    case sdkUnknown(String)
}

extension CmafInitializationVectorInManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafInitializationVectorInManifest] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafInitializationVectorInManifest(rawValue: rawValue) ?? CmafInitializationVectorInManifest.sdkUnknown(rawValue)
    }
}

/// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
public enum CmafKeyProviderType {
    case speke
    case staticKey
    case sdkUnknown(String)
}

extension CmafKeyProviderType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafKeyProviderType] {
        return [
            .speke,
            .staticKey,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .speke: return "SPEKE"
        case .staticKey: return "STATIC_KEY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafKeyProviderType(rawValue: rawValue) ?? CmafKeyProviderType.sdkUnknown(rawValue)
    }
}

/// When set to GZIP, compresses HLS playlist.
public enum CmafManifestCompression {
    case gzip
    case `none`
    case sdkUnknown(String)
}

extension CmafManifestCompression : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafManifestCompression] {
        return [
            .gzip,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .gzip: return "GZIP"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafManifestCompression(rawValue: rawValue) ?? CmafManifestCompression.sdkUnknown(rawValue)
    }
}

/// Indicates whether the output manifest should use floating point values for segment duration.
public enum CmafManifestDurationFormat {
    case floatingPoint
    case integer
    case sdkUnknown(String)
}

extension CmafManifestDurationFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafManifestDurationFormat] {
        return [
            .floatingPoint,
            .integer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .floatingPoint: return "FLOATING_POINT"
        case .integer: return "INTEGER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafManifestDurationFormat(rawValue: rawValue) ?? CmafManifestDurationFormat.sdkUnknown(rawValue)
    }
}

/// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
public enum CmafMpdProfile {
    case mainProfile
    case onDemandProfile
    case sdkUnknown(String)
}

extension CmafMpdProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafMpdProfile] {
        return [
            .mainProfile,
            .onDemandProfile,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mainProfile: return "MAIN_PROFILE"
        case .onDemandProfile: return "ON_DEMAND_PROFILE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafMpdProfile(rawValue: rawValue) ?? CmafMpdProfile.sdkUnknown(rawValue)
    }
}

/// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
public enum CmafPtsOffsetHandlingForBFrames {
    case matchInitialPts
    case zeroBased
    case sdkUnknown(String)
}

extension CmafPtsOffsetHandlingForBFrames : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafPtsOffsetHandlingForBFrames] {
        return [
            .matchInitialPts,
            .zeroBased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .matchInitialPts: return "MATCH_INITIAL_PTS"
        case .zeroBased: return "ZERO_BASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafPtsOffsetHandlingForBFrames(rawValue: rawValue) ?? CmafPtsOffsetHandlingForBFrames.sdkUnknown(rawValue)
    }
}

/// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
public enum CmafSegmentControl {
    case segmentedFiles
    case singleFile
    case sdkUnknown(String)
}

extension CmafSegmentControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafSegmentControl] {
        return [
            .segmentedFiles,
            .singleFile,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .segmentedFiles: return "SEGMENTED_FILES"
        case .singleFile: return "SINGLE_FILE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafSegmentControl(rawValue: rawValue) ?? CmafSegmentControl.sdkUnknown(rawValue)
    }
}

/// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
public enum CmafStreamInfResolution {
    case exclude
    case include
    case sdkUnknown(String)
}

extension CmafStreamInfResolution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafStreamInfResolution] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafStreamInfResolution(rawValue: rawValue) ?? CmafStreamInfResolution.sdkUnknown(rawValue)
    }
}

/// When set to ENABLED, a DASH MPD manifest will be generated for this output.
public enum CmafWriteDASHManifest {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension CmafWriteDASHManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafWriteDASHManifest] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafWriteDASHManifest(rawValue: rawValue) ?? CmafWriteDASHManifest.sdkUnknown(rawValue)
    }
}

/// When set to ENABLED, an Apple HLS manifest will be generated for this output.
public enum CmafWriteHLSManifest {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension CmafWriteHLSManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafWriteHLSManifest] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafWriteHLSManifest(rawValue: rawValue) ?? CmafWriteHLSManifest.sdkUnknown(rawValue)
    }
}

/// When you enable Precise segment duration in DASH manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
public enum CmafWriteSegmentTimelineInRepresentation {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension CmafWriteSegmentTimelineInRepresentation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafWriteSegmentTimelineInRepresentation] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafWriteSegmentTimelineInRepresentation(rawValue: rawValue) ?? CmafWriteSegmentTimelineInRepresentation.sdkUnknown(rawValue)
    }
}

/// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
public enum CmfcAudioDuration {
    case defaultCodecDuration
    case matchVideoDuration
    case sdkUnknown(String)
}

extension CmfcAudioDuration : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcAudioDuration] {
        return [
            .defaultCodecDuration,
            .matchVideoDuration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
        case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcAudioDuration(rawValue: rawValue) ?? CmfcAudioDuration.sdkUnknown(rawValue)
    }
}

/// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
public enum CmfcAudioTrackType {
    case alternateAudioAutoSelect
    case alternateAudioAutoSelectDefault
    case alternateAudioNotAutoSelect
    case sdkUnknown(String)
}

extension CmfcAudioTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcAudioTrackType] {
        return [
            .alternateAudioAutoSelect,
            .alternateAudioAutoSelectDefault,
            .alternateAudioNotAutoSelect,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
        case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
        case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcAudioTrackType(rawValue: rawValue) ?? CmfcAudioTrackType.sdkUnknown(rawValue)
    }
}

/// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
public enum CmfcDescriptiveVideoServiceFlag {
    case dontFlag
    case flag
    case sdkUnknown(String)
}

extension CmfcDescriptiveVideoServiceFlag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcDescriptiveVideoServiceFlag] {
        return [
            .dontFlag,
            .flag,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dontFlag: return "DONT_FLAG"
        case .flag: return "FLAG"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcDescriptiveVideoServiceFlag(rawValue: rawValue) ?? CmfcDescriptiveVideoServiceFlag.sdkUnknown(rawValue)
    }
}

/// Choose Include (INCLUDE) to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
public enum CmfcIFrameOnlyManifest {
    case exclude
    case include
    case sdkUnknown(String)
}

extension CmfcIFrameOnlyManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcIFrameOnlyManifest] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcIFrameOnlyManifest(rawValue: rawValue) ?? CmfcIFrameOnlyManifest.sdkUnknown(rawValue)
    }
}

/// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
public enum CmfcScte35Esam {
    case insert
    case `none`
    case sdkUnknown(String)
}

extension CmfcScte35Esam : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcScte35Esam] {
        return [
            .insert,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcScte35Esam(rawValue: rawValue) ?? CmfcScte35Esam.sdkUnknown(rawValue)
    }
}

/// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
public enum CmfcScte35Source {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension CmfcScte35Source : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcScte35Source] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcScte35Source(rawValue: rawValue) ?? CmfcScte35Source.sdkUnknown(rawValue)
    }
}

extension CmfcSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDuration = "audioDuration"
        case audioGroupId = "audioGroupId"
        case audioRenditionSets = "audioRenditionSets"
        case audioTrackType = "audioTrackType"
        case descriptiveVideoServiceFlag = "descriptiveVideoServiceFlag"
        case iFrameOnlyManifest = "iFrameOnlyManifest"
        case scte35Esam = "scte35Esam"
        case scte35Source = "scte35Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if let audioGroupId = audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioRenditionSets = audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let audioTrackType = audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let descriptiveVideoServiceFlag = descriptiveVideoServiceFlag {
            try encodeContainer.encode(descriptiveVideoServiceFlag.rawValue, forKey: .descriptiveVideoServiceFlag)
        }
        if let iFrameOnlyManifest = iFrameOnlyManifest {
            try encodeContainer.encode(iFrameOnlyManifest.rawValue, forKey: .iFrameOnlyManifest)
        }
        if let scte35Esam = scte35Esam {
            try encodeContainer.encode(scte35Esam.rawValue, forKey: .scte35Esam)
        }
        if let scte35Source = scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationDecoded = try containerValues.decodeIfPresent(CmfcAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(CmfcAudioTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let descriptiveVideoServiceFlagDecoded = try containerValues.decodeIfPresent(CmfcDescriptiveVideoServiceFlag.self, forKey: .descriptiveVideoServiceFlag)
        descriptiveVideoServiceFlag = descriptiveVideoServiceFlagDecoded
        let iFrameOnlyManifestDecoded = try containerValues.decodeIfPresent(CmfcIFrameOnlyManifest.self, forKey: .iFrameOnlyManifest)
        iFrameOnlyManifest = iFrameOnlyManifestDecoded
        let scte35EsamDecoded = try containerValues.decodeIfPresent(CmfcScte35Esam.self, forKey: .scte35Esam)
        scte35Esam = scte35EsamDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(CmfcScte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
    }
}

extension CmfcSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CmfcSettings(audioDuration: \(String(describing: audioDuration)), audioGroupId: \(String(describing: audioGroupId)), audioRenditionSets: \(String(describing: audioRenditionSets)), audioTrackType: \(String(describing: audioTrackType)), descriptiveVideoServiceFlag: \(String(describing: descriptiveVideoServiceFlag)), iFrameOnlyManifest: \(String(describing: iFrameOnlyManifest)), scte35Esam: \(String(describing: scte35Esam)), scte35Source: \(String(describing: scte35Source)))"}
}

/// These settings relate to the fragmented MP4 container for the segments in your CMAF outputs.
public struct CmfcSettings: Equatable {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: CmfcAudioDuration?
    /// Specify the audio rendition group for this audio rendition. Specify up to one value for each audio output in your output group. This value appears in your HLS parent manifest in the EXT-X-MEDIA tag of TYPE=AUDIO, as the value for the GROUP-ID attribute. For example, if you specify "audio_aac_1" for Audio group ID, it appears in your manifest like this: #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio_aac_1". Related setting: To associate the rendition group that this audio track belongs to with a video rendition, include the same value that you provide here for that video output's setting Audio rendition sets (audioRenditionSets).
    public let audioGroupId: String?
    /// List the audio rendition groups that you want included with this video rendition. Use a comma-separated list. For example, say you want to include the audio rendition groups that have the audio group IDs "audio_aac_1" and "audio_dolby". Then you would specify this value: "audio_aac_1, audio_dolby". Related setting: The rendition groups that you include in your comma-separated list should all match values that you specify in the setting Audio group ID (AudioGroupId) for audio renditions in the same output group as this video rendition. Default behavior: If you don't specify anything here and for Audio group ID, MediaConvert puts each audio variant in its own audio rendition group and associates it with every video variant. Each value in your list appears in your HLS parent manifest in the EXT-X-STREAM-INF tag as the value for the AUDIO attribute. To continue the previous example, say that the file name for the child manifest for your video rendition is "amazing_video_1.m3u8". Then, in your parent manifest, each value will appear on separate lines, like this: #EXT-X-STREAM-INF:AUDIO="audio_aac_1"... amazing_video_1.m3u8 #EXT-X-STREAM-INF:AUDIO="audio_dolby"... amazing_video_1.m3u8
    public let audioRenditionSets: String?
    /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
    public let audioTrackType: CmfcAudioTrackType?
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    public let descriptiveVideoServiceFlag: CmfcDescriptiveVideoServiceFlag?
    /// Choose Include (INCLUDE) to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
    public let iFrameOnlyManifest: CmfcIFrameOnlyManifest?
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    public let scte35Esam: CmfcScte35Esam?
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    public let scte35Source: CmfcScte35Source?

    public init (
        audioDuration: CmfcAudioDuration? = nil,
        audioGroupId: String? = nil,
        audioRenditionSets: String? = nil,
        audioTrackType: CmfcAudioTrackType? = nil,
        descriptiveVideoServiceFlag: CmfcDescriptiveVideoServiceFlag? = nil,
        iFrameOnlyManifest: CmfcIFrameOnlyManifest? = nil,
        scte35Esam: CmfcScte35Esam? = nil,
        scte35Source: CmfcScte35Source? = nil
    )
    {
        self.audioDuration = audioDuration
        self.audioGroupId = audioGroupId
        self.audioRenditionSets = audioRenditionSets
        self.audioTrackType = audioTrackType
        self.descriptiveVideoServiceFlag = descriptiveVideoServiceFlag
        self.iFrameOnlyManifest = iFrameOnlyManifest
        self.scte35Esam = scte35Esam
        self.scte35Source = scte35Source
    }
}

extension ColorCorrector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case brightness = "brightness"
        case colorSpaceConversion = "colorSpaceConversion"
        case contrast = "contrast"
        case hdr10Metadata = "hdr10Metadata"
        case hue = "hue"
        case saturation = "saturation"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if brightness != 0 {
            try encodeContainer.encode(brightness, forKey: .brightness)
        }
        if let colorSpaceConversion = colorSpaceConversion {
            try encodeContainer.encode(colorSpaceConversion.rawValue, forKey: .colorSpaceConversion)
        }
        if contrast != 0 {
            try encodeContainer.encode(contrast, forKey: .contrast)
        }
        if let hdr10Metadata = hdr10Metadata {
            try encodeContainer.encode(hdr10Metadata, forKey: .hdr10Metadata)
        }
        if hue != 0 {
            try encodeContainer.encode(hue, forKey: .hue)
        }
        if saturation != 0 {
            try encodeContainer.encode(saturation, forKey: .saturation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brightnessDecoded = try containerValues.decode(Int.self, forKey: .brightness)
        brightness = brightnessDecoded
        let colorSpaceConversionDecoded = try containerValues.decodeIfPresent(ColorSpaceConversion.self, forKey: .colorSpaceConversion)
        colorSpaceConversion = colorSpaceConversionDecoded
        let contrastDecoded = try containerValues.decode(Int.self, forKey: .contrast)
        contrast = contrastDecoded
        let hdr10MetadataDecoded = try containerValues.decodeIfPresent(Hdr10Metadata.self, forKey: .hdr10Metadata)
        hdr10Metadata = hdr10MetadataDecoded
        let hueDecoded = try containerValues.decode(Int.self, forKey: .hue)
        hue = hueDecoded
        let saturationDecoded = try containerValues.decode(Int.self, forKey: .saturation)
        saturation = saturationDecoded
    }
}

extension ColorCorrector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ColorCorrector(brightness: \(String(describing: brightness)), colorSpaceConversion: \(String(describing: colorSpaceConversion)), contrast: \(String(describing: contrast)), hdr10Metadata: \(String(describing: hdr10Metadata)), hue: \(String(describing: hue)), saturation: \(String(describing: saturation)))"}
}

/// Settings for color correction.
public struct ColorCorrector: Equatable {
    /// Brightness level.
    public let brightness: Int
    /// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses Elemental tone mapping technology to approximate the outcome of manually regrading from HDR to SDR.
    public let colorSpaceConversion: ColorSpaceConversion?
    /// Contrast level.
    public let contrast: Int
    /// Use these settings when you convert to the HDR 10 color space. Specify the SMPTE ST 2086 Mastering Display Color Volume static metadata that you want signaled in the output. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator. When you set Color space conversion (ColorSpaceConversion) to HDR 10 (FORCE_HDR10), these settings are required. You must set values for Max frame average light level (maxFrameAverageLightLevel) and Max content light level (maxContentLightLevel); these settings don't have a default value. The default values for the other HDR 10 metadata settings are defined by the P3D65 color space. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
    public let hdr10Metadata: Hdr10Metadata?
    /// Hue in degrees.
    public let hue: Int
    /// Saturation level.
    public let saturation: Int

    public init (
        brightness: Int = 0,
        colorSpaceConversion: ColorSpaceConversion? = nil,
        contrast: Int = 0,
        hdr10Metadata: Hdr10Metadata? = nil,
        hue: Int = 0,
        saturation: Int = 0
    )
    {
        self.brightness = brightness
        self.colorSpaceConversion = colorSpaceConversion
        self.contrast = contrast
        self.hdr10Metadata = hdr10Metadata
        self.hue = hue
        self.saturation = saturation
    }
}

/// Choose Insert (INSERT) for this setting to include color metadata in this output. Choose Ignore (IGNORE) to exclude color metadata from this output. If you don't specify a value, the service sets this to Insert by default.
public enum ColorMetadata {
    case ignore
    case insert
    case sdkUnknown(String)
}

extension ColorMetadata : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ColorMetadata] {
        return [
            .ignore,
            .insert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignore: return "IGNORE"
        case .insert: return "INSERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ColorMetadata(rawValue: rawValue) ?? ColorMetadata.sdkUnknown(rawValue)
    }
}

/// If your input video has accurate color space metadata, or if you don't know about color space, leave this set to the default value Follow (FOLLOW). The service will automatically detect your input color space. If your input video has metadata indicating the wrong color space, specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate, choose Force HDR 10 (FORCE_HDR10) here and specify correct values in the input HDR 10 metadata (Hdr10Metadata) settings. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
public enum ColorSpace {
    case follow
    case hdr10
    case hlg2020
    case rec601
    case rec709
    case sdkUnknown(String)
}

extension ColorSpace : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ColorSpace] {
        return [
            .follow,
            .hdr10,
            .hlg2020,
            .rec601,
            .rec709,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .hdr10: return "HDR10"
        case .hlg2020: return "HLG_2020"
        case .rec601: return "REC_601"
        case .rec709: return "REC_709"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ColorSpace(rawValue: rawValue) ?? ColorSpace.sdkUnknown(rawValue)
    }
}

/// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses Elemental tone mapping technology to approximate the outcome of manually regrading from HDR to SDR.
public enum ColorSpaceConversion {
    case force601
    case force709
    case forceHdr10
    case forceHlg2020
    case `none`
    case sdkUnknown(String)
}

extension ColorSpaceConversion : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ColorSpaceConversion] {
        return [
            .force601,
            .force709,
            .forceHdr10,
            .forceHlg2020,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .force601: return "FORCE_601"
        case .force709: return "FORCE_709"
        case .forceHdr10: return "FORCE_HDR10"
        case .forceHlg2020: return "FORCE_HLG_2020"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ColorSpaceConversion(rawValue: rawValue) ?? ColorSpaceConversion.sdkUnknown(rawValue)
    }
}

/// There are two sources for color metadata, the input file and the job input settings Color space (ColorSpace) and HDR master display information settings(Hdr10Metadata). The Color space usage setting determines which takes precedence. Choose Force (FORCE) to use color metadata from the input job settings. If you don't specify values for those settings, the service defaults to using metadata from your input. FALLBACK - Choose Fallback (FALLBACK) to use color metadata from the source when it is present. If there's no color metadata in your input file, the service defaults to using values you specify in the input settings.
public enum ColorSpaceUsage {
    case fallback
    case force
    case sdkUnknown(String)
}

extension ColorSpaceUsage : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ColorSpaceUsage] {
        return [
            .fallback,
            .force,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fallback: return "FALLBACK"
        case .force: return "FORCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ColorSpaceUsage(rawValue: rawValue) ?? ColorSpaceUsage.sdkUnknown(rawValue)
    }
}

/// The length of the term of your reserved queue pricing plan commitment.
public enum Commitment {
    case oneYear
    case sdkUnknown(String)
}

extension Commitment : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Commitment] {
        return [
            .oneYear,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .oneYear: return "ONE_YEAR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Commitment(rawValue: rawValue) ?? Commitment.sdkUnknown(rawValue)
    }
}

extension ConflictException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConflictException(message: \(String(describing: message)))"}
}

extension ConflictException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service couldn't complete your request because there is a conflict with the current state of the resource.
public struct ConflictException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Equatable {
    public let message: String?
}

extension ConflictExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ContainerSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cmfcSettings = "cmfcSettings"
        case container = "container"
        case f4vSettings = "f4vSettings"
        case m2tsSettings = "m2tsSettings"
        case m3u8Settings = "m3u8Settings"
        case movSettings = "movSettings"
        case mp4Settings = "mp4Settings"
        case mpdSettings = "mpdSettings"
        case mxfSettings = "mxfSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cmfcSettings = cmfcSettings {
            try encodeContainer.encode(cmfcSettings, forKey: .cmfcSettings)
        }
        if let container = container {
            try encodeContainer.encode(container.rawValue, forKey: .container)
        }
        if let f4vSettings = f4vSettings {
            try encodeContainer.encode(f4vSettings, forKey: .f4vSettings)
        }
        if let m2tsSettings = m2tsSettings {
            try encodeContainer.encode(m2tsSettings, forKey: .m2tsSettings)
        }
        if let m3u8Settings = m3u8Settings {
            try encodeContainer.encode(m3u8Settings, forKey: .m3u8Settings)
        }
        if let movSettings = movSettings {
            try encodeContainer.encode(movSettings, forKey: .movSettings)
        }
        if let mp4Settings = mp4Settings {
            try encodeContainer.encode(mp4Settings, forKey: .mp4Settings)
        }
        if let mpdSettings = mpdSettings {
            try encodeContainer.encode(mpdSettings, forKey: .mpdSettings)
        }
        if let mxfSettings = mxfSettings {
            try encodeContainer.encode(mxfSettings, forKey: .mxfSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cmfcSettingsDecoded = try containerValues.decodeIfPresent(CmfcSettings.self, forKey: .cmfcSettings)
        cmfcSettings = cmfcSettingsDecoded
        let containerDecoded = try containerValues.decodeIfPresent(ContainerType.self, forKey: .container)
        container = containerDecoded
        let f4vSettingsDecoded = try containerValues.decodeIfPresent(F4vSettings.self, forKey: .f4vSettings)
        f4vSettings = f4vSettingsDecoded
        let m2tsSettingsDecoded = try containerValues.decodeIfPresent(M2tsSettings.self, forKey: .m2tsSettings)
        m2tsSettings = m2tsSettingsDecoded
        let m3u8SettingsDecoded = try containerValues.decodeIfPresent(M3u8Settings.self, forKey: .m3u8Settings)
        m3u8Settings = m3u8SettingsDecoded
        let movSettingsDecoded = try containerValues.decodeIfPresent(MovSettings.self, forKey: .movSettings)
        movSettings = movSettingsDecoded
        let mp4SettingsDecoded = try containerValues.decodeIfPresent(Mp4Settings.self, forKey: .mp4Settings)
        mp4Settings = mp4SettingsDecoded
        let mpdSettingsDecoded = try containerValues.decodeIfPresent(MpdSettings.self, forKey: .mpdSettings)
        mpdSettings = mpdSettingsDecoded
        let mxfSettingsDecoded = try containerValues.decodeIfPresent(MxfSettings.self, forKey: .mxfSettings)
        mxfSettings = mxfSettingsDecoded
    }
}

extension ContainerSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContainerSettings(cmfcSettings: \(String(describing: cmfcSettings)), container: \(String(describing: container)), f4vSettings: \(String(describing: f4vSettings)), m2tsSettings: \(String(describing: m2tsSettings)), m3u8Settings: \(String(describing: m3u8Settings)), movSettings: \(String(describing: movSettings)), mp4Settings: \(String(describing: mp4Settings)), mpdSettings: \(String(describing: mpdSettings)), mxfSettings: \(String(describing: mxfSettings)))"}
}

/// Container specific settings.
public struct ContainerSettings: Equatable {
    /// These settings relate to the fragmented MP4 container for the segments in your CMAF outputs.
    public let cmfcSettings: CmfcSettings?
    /// Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
    public let container: ContainerType?
    /// Settings for F4v container
    public let f4vSettings: F4vSettings?
    /// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container (ContainerType) is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
    public let m2tsSettings: M2tsSettings?
    /// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
    public let m3u8Settings: M3u8Settings?
    /// These settings relate to your QuickTime MOV output container.
    public let movSettings: MovSettings?
    /// These settings relate to your MP4 output container. You can create audio only outputs with this container. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/supported-codecs-containers-audio-only.html#output-codecs-and-containers-supported-for-audio-only.
    public let mp4Settings: Mp4Settings?
    /// These settings relate to the fragmented MP4 container for the segments in your DASH outputs.
    public let mpdSettings: MpdSettings?
    /// These settings relate to your MXF output container.
    public let mxfSettings: MxfSettings?

    public init (
        cmfcSettings: CmfcSettings? = nil,
        container: ContainerType? = nil,
        f4vSettings: F4vSettings? = nil,
        m2tsSettings: M2tsSettings? = nil,
        m3u8Settings: M3u8Settings? = nil,
        movSettings: MovSettings? = nil,
        mp4Settings: Mp4Settings? = nil,
        mpdSettings: MpdSettings? = nil,
        mxfSettings: MxfSettings? = nil
    )
    {
        self.cmfcSettings = cmfcSettings
        self.container = container
        self.f4vSettings = f4vSettings
        self.m2tsSettings = m2tsSettings
        self.m3u8Settings = m3u8Settings
        self.movSettings = movSettings
        self.mp4Settings = mp4Settings
        self.mpdSettings = mpdSettings
        self.mxfSettings = mxfSettings
    }
}

/// Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
public enum ContainerType {
    case cmfc
    case f4v
    case ismv
    case m2ts
    case m3u8
    case mov
    case mp4
    case mpd
    case mxf
    case raw
    case webm
    case sdkUnknown(String)
}

extension ContainerType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContainerType] {
        return [
            .cmfc,
            .f4v,
            .ismv,
            .m2ts,
            .m3u8,
            .mov,
            .mp4,
            .mpd,
            .mxf,
            .raw,
            .webm,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cmfc: return "CMFC"
        case .f4v: return "F4V"
        case .ismv: return "ISMV"
        case .m2ts: return "M2TS"
        case .m3u8: return "M3U8"
        case .mov: return "MOV"
        case .mp4: return "MP4"
        case .mpd: return "MPD"
        case .mxf: return "MXF"
        case .raw: return "RAW"
        case .webm: return "WEBM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContainerType(rawValue: rawValue) ?? ContainerType.sdkUnknown(rawValue)
    }
}

public struct CreateJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobInput>
    public typealias MOutput = OperationOutput<CreateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobOutputError>
}

extension CreateJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateJobInput(accelerationSettings: \(String(describing: accelerationSettings)), billingTagsSource: \(String(describing: billingTagsSource)), clientRequestToken: \(String(describing: clientRequestToken)), hopDestinations: \(String(describing: hopDestinations)), jobTemplate: \(String(describing: jobTemplate)), priority: \(String(describing: priority)), queue: \(String(describing: queue)), role: \(String(describing: role)), settings: \(String(describing: settings)), simulateReservedQueue: \(String(describing: simulateReservedQueue)), statusUpdateInterval: \(String(describing: statusUpdateInterval)), tags: \(String(describing: tags)), userMetadata: \(String(describing: userMetadata)))"}
}

extension CreateJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case billingTagsSource = "billingTagsSource"
        case clientRequestToken = "clientRequestToken"
        case hopDestinations = "hopDestinations"
        case jobTemplate = "jobTemplate"
        case priority = "priority"
        case queue = "queue"
        case role = "role"
        case settings = "settings"
        case simulateReservedQueue = "simulateReservedQueue"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
        case userMetadata = "userMetadata"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let billingTagsSource = billingTagsSource {
            try encodeContainer.encode(billingTagsSource.rawValue, forKey: .billingTagsSource)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let jobTemplate = jobTemplate {
            try encodeContainer.encode(jobTemplate, forKey: .jobTemplate)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let simulateReservedQueue = simulateReservedQueue {
            try encodeContainer.encode(simulateReservedQueue.rawValue, forKey: .simulateReservedQueue)
        }
        if let statusUpdateInterval = statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .userMetadata)
            for (dictKey0, __mapof__string0) in userMetadata {
                try userMetadataContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobInput>
    public typealias MOutput = OperationOutput<CreateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobOutputError>
}

public struct CreateJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobInput>
    public typealias MOutput = OperationOutput<CreateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobOutputError>
}

public struct CreateJobInput: Equatable {
    /// Optional. Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    public let accelerationSettings: AccelerationSettings?
    /// Optional. Choose a tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up. Any transcoding outputs that don't have an associated tag will appear in your billing report unsorted. If you don't choose a valid value for this field, your job outputs will appear on the billing report unsorted.
    public let billingTagsSource: BillingTagsSource?
    /// Optional. Idempotency token for CreateJob operation.
    public var clientRequestToken: String?
    /// Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    public let hopDestinations: [HopDestination]?
    /// Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.
    public let jobTemplate: String?
    /// Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    public let priority: Int
    /// Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.
    public let queue: String?
    /// Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
    public let role: String?
    /// JobSettings contains all the transcode settings for a job.
    public let settings: JobSettings?
    /// Optional. Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
    public let simulateReservedQueue: SimulateReservedQueue?
    /// Optional. Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public let statusUpdateInterval: StatusUpdateInterval?
    /// Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.  Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.
    public let tags: [String:String]?
    /// Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.  Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.
    public let userMetadata: [String:String]?

    public init (
        accelerationSettings: AccelerationSettings? = nil,
        billingTagsSource: BillingTagsSource? = nil,
        clientRequestToken: String? = nil,
        hopDestinations: [HopDestination]? = nil,
        jobTemplate: String? = nil,
        priority: Int = 0,
        queue: String? = nil,
        role: String? = nil,
        settings: JobSettings? = nil,
        simulateReservedQueue: SimulateReservedQueue? = nil,
        statusUpdateInterval: StatusUpdateInterval? = nil,
        tags: [String:String]? = nil,
        userMetadata: [String:String]? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.billingTagsSource = billingTagsSource
        self.clientRequestToken = clientRequestToken
        self.hopDestinations = hopDestinations
        self.jobTemplate = jobTemplate
        self.priority = priority
        self.queue = queue
        self.role = role
        self.settings = settings
        self.simulateReservedQueue = simulateReservedQueue
        self.statusUpdateInterval = statusUpdateInterval
        self.tags = tags
        self.userMetadata = userMetadata
    }
}

struct CreateJobInputBody: Equatable {
    public let accelerationSettings: AccelerationSettings?
    public let billingTagsSource: BillingTagsSource?
    public let clientRequestToken: String?
    public let hopDestinations: [HopDestination]?
    public let jobTemplate: String?
    public let priority: Int
    public let queue: String?
    public let role: String?
    public let settings: JobSettings?
    public let simulateReservedQueue: SimulateReservedQueue?
    public let statusUpdateInterval: StatusUpdateInterval?
    public let tags: [String:String]?
    public let userMetadata: [String:String]?
}

extension CreateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case billingTagsSource = "billingTagsSource"
        case clientRequestToken = "clientRequestToken"
        case hopDestinations = "hopDestinations"
        case jobTemplate = "jobTemplate"
        case priority = "priority"
        case queue = "queue"
        case role = "role"
        case settings = "settings"
        case simulateReservedQueue = "simulateReservedQueue"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
        case userMetadata = "userMetadata"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let billingTagsSourceDecoded = try containerValues.decodeIfPresent(BillingTagsSource.self, forKey: .billingTagsSource)
        billingTagsSource = billingTagsSourceDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let jobTemplateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(JobSettings.self, forKey: .settings)
        settings = settingsDecoded
        let simulateReservedQueueDecoded = try containerValues.decodeIfPresent(SimulateReservedQueue.self, forKey: .simulateReservedQueue)
        simulateReservedQueue = simulateReservedQueueDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let userMetadataContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .userMetadata)
        var userMetadataDecoded0: [String:String]? = nil
        if let userMetadataContainer = userMetadataContainer {
            userMetadataDecoded0 = [String:String]()
            for (key0, __string0) in userMetadataContainer {
                if let __string0 = __string0 {
                    userMetadataDecoded0?[key0] = __string0
                }
            }
        }
        userMetadata = userMetadataDecoded0
    }
}

extension CreateJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateJobOutputResponse(job: \(String(describing: job)))"}
}

extension CreateJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateJobOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.job = output.job
        } else {
            self.job = nil
        }
    }
}

public struct CreateJobOutputResponse: Equatable {
    /// Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public let job: Job?

    public init (
        job: Job? = nil
    )
    {
        self.job = job
    }
}

struct CreateJobOutputResponseBody: Equatable {
    public let job: Job?
}

extension CreateJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case job = "job"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDecoded = try containerValues.decodeIfPresent(Job.self, forKey: .job)
        job = jobDecoded
    }
}

public struct CreateJobTemplateInputBodyMiddleware: Middleware {
    public let id: String = "CreateJobTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobTemplateOutputError>
}

extension CreateJobTemplateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateJobTemplateInput(accelerationSettings: \(String(describing: accelerationSettings)), category: \(String(describing: category)), description: \(String(describing: description)), hopDestinations: \(String(describing: hopDestinations)), name: \(String(describing: name)), priority: \(String(describing: priority)), queue: \(String(describing: queue)), settings: \(String(describing: settings)), statusUpdateInterval: \(String(describing: statusUpdateInterval)), tags: \(String(describing: tags)))"}
}

extension CreateJobTemplateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case name = "name"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let statusUpdateInterval = statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateJobTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "CreateJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobTemplateOutputError>
}

public struct CreateJobTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateJobTemplateOutputError>
}

public struct CreateJobTemplateInput: Equatable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    public let accelerationSettings: AccelerationSettings?
    /// Optional. A category for the job template you are creating
    public let category: String?
    /// Optional. A description of the job template you are creating.
    public let description: String?
    /// Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    public let hopDestinations: [HopDestination]?
    /// The name of the job template you are creating.
    public let name: String?
    /// Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    public let priority: Int
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    public let queue: String?
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    public let settings: JobTemplateSettings?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public let statusUpdateInterval: StatusUpdateInterval?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public let tags: [String:String]?

    public init (
        accelerationSettings: AccelerationSettings? = nil,
        category: String? = nil,
        description: String? = nil,
        hopDestinations: [HopDestination]? = nil,
        name: String? = nil,
        priority: Int = 0,
        queue: String? = nil,
        settings: JobTemplateSettings? = nil,
        statusUpdateInterval: StatusUpdateInterval? = nil,
        tags: [String:String]? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.category = category
        self.description = description
        self.hopDestinations = hopDestinations
        self.name = name
        self.priority = priority
        self.queue = queue
        self.settings = settings
        self.statusUpdateInterval = statusUpdateInterval
        self.tags = tags
    }
}

struct CreateJobTemplateInputBody: Equatable {
    public let accelerationSettings: AccelerationSettings?
    public let category: String?
    public let description: String?
    public let hopDestinations: [HopDestination]?
    public let name: String?
    public let priority: Int
    public let queue: String?
    public let settings: JobTemplateSettings?
    public let statusUpdateInterval: StatusUpdateInterval?
    public let tags: [String:String]?
}

extension CreateJobTemplateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case name = "name"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(JobTemplateSettings.self, forKey: .settings)
        settings = settingsDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateJobTemplateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobTemplateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateJobTemplateOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobTemplateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateJobTemplateOutputResponse(jobTemplate: \(String(describing: jobTemplate)))"}
}

extension CreateJobTemplateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateJobTemplateOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.jobTemplate = output.jobTemplate
        } else {
            self.jobTemplate = nil
        }
    }
}

public struct CreateJobTemplateOutputResponse: Equatable {
    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public let jobTemplate: JobTemplate?

    public init (
        jobTemplate: JobTemplate? = nil
    )
    {
        self.jobTemplate = jobTemplate
    }
}

struct CreateJobTemplateOutputResponseBody: Equatable {
    public let jobTemplate: JobTemplate?
}

extension CreateJobTemplateOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobTemplate = "jobTemplate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplateDecoded = try containerValues.decodeIfPresent(JobTemplate.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
    }
}

public struct CreatePresetInputBodyMiddleware: Middleware {
    public let id: String = "CreatePresetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePresetInput>
    public typealias MOutput = OperationOutput<CreatePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePresetOutputError>
}

extension CreatePresetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePresetInput(category: \(String(describing: category)), description: \(String(describing: description)), name: \(String(describing: name)), settings: \(String(describing: settings)), tags: \(String(describing: tags)))"}
}

extension CreatePresetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case category = "category"
        case description = "description"
        case name = "name"
        case settings = "settings"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreatePresetInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePresetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePresetInput>
    public typealias MOutput = OperationOutput<CreatePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePresetOutputError>
}

public struct CreatePresetInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePresetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePresetInput>
    public typealias MOutput = OperationOutput<CreatePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePresetOutputError>
}

public struct CreatePresetInput: Equatable {
    /// Optional. A category for the preset you are creating.
    public let category: String?
    /// Optional. A description of the preset you are creating.
    public let description: String?
    /// The name of the preset you are creating.
    public let name: String?
    /// Settings for preset
    public let settings: PresetSettings?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public let tags: [String:String]?

    public init (
        category: String? = nil,
        description: String? = nil,
        name: String? = nil,
        settings: PresetSettings? = nil,
        tags: [String:String]? = nil
    )
    {
        self.category = category
        self.description = description
        self.name = name
        self.settings = settings
        self.tags = tags
    }
}

struct CreatePresetInputBody: Equatable {
    public let category: String?
    public let description: String?
    public let name: String?
    public let settings: PresetSettings?
    public let tags: [String:String]?
}

extension CreatePresetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case category = "category"
        case description = "description"
        case name = "name"
        case settings = "settings"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(PresetSettings.self, forKey: .settings)
        settings = settingsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePresetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePresetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePresetOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePresetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePresetOutputResponse(preset: \(String(describing: preset)))"}
}

extension CreatePresetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreatePresetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.preset = output.preset
        } else {
            self.preset = nil
        }
    }
}

public struct CreatePresetOutputResponse: Equatable {
    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public let preset: Preset?

    public init (
        preset: Preset? = nil
    )
    {
        self.preset = preset
    }
}

struct CreatePresetOutputResponseBody: Equatable {
    public let preset: Preset?
}

extension CreatePresetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case preset = "preset"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let presetDecoded = try containerValues.decodeIfPresent(Preset.self, forKey: .preset)
        preset = presetDecoded
    }
}

public struct CreateQueueInputBodyMiddleware: Middleware {
    public let id: String = "CreateQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateQueueInput>
    public typealias MOutput = OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateQueueOutputError>
}

extension CreateQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateQueueInput(description: \(String(describing: description)), name: \(String(describing: name)), pricingPlan: \(String(describing: pricingPlan)), reservationPlanSettings: \(String(describing: reservationPlanSettings)), status: \(String(describing: status)), tags: \(String(describing: tags)))"}
}

extension CreateQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case name = "name"
        case pricingPlan = "pricingPlan"
        case reservationPlanSettings = "reservationPlanSettings"
        case status = "status"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pricingPlan = pricingPlan {
            try encodeContainer.encode(pricingPlan.rawValue, forKey: .pricingPlan)
        }
        if let reservationPlanSettings = reservationPlanSettings {
            try encodeContainer.encode(reservationPlanSettings, forKey: .reservationPlanSettings)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateQueueInputHeadersMiddleware: Middleware {
    public let id: String = "CreateQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateQueueInput>
    public typealias MOutput = OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateQueueOutputError>
}

public struct CreateQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateQueueInput>
    public typealias MOutput = OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateQueueOutputError>
}

public struct CreateQueueInput: Equatable {
    /// Optional. A description of the queue that you are creating.
    public let description: String?
    /// The name of the queue that you are creating.
    public let name: String?
    /// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment. When you use the API to create a queue, the default is on-demand.
    public let pricingPlan: PricingPlan?
    /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    public let reservationPlanSettings: ReservationPlanSettings?
    /// Initial state of the queue. If you create a paused queue, then jobs in that queue won't begin.
    public let status: QueueStatus?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public let tags: [String:String]?

    public init (
        description: String? = nil,
        name: String? = nil,
        pricingPlan: PricingPlan? = nil,
        reservationPlanSettings: ReservationPlanSettings? = nil,
        status: QueueStatus? = nil,
        tags: [String:String]? = nil
    )
    {
        self.description = description
        self.name = name
        self.pricingPlan = pricingPlan
        self.reservationPlanSettings = reservationPlanSettings
        self.status = status
        self.tags = tags
    }
}

struct CreateQueueInputBody: Equatable {
    public let description: String?
    public let name: String?
    public let pricingPlan: PricingPlan?
    public let reservationPlanSettings: ReservationPlanSettings?
    public let status: QueueStatus?
    public let tags: [String:String]?
}

extension CreateQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case name = "name"
        case pricingPlan = "pricingPlan"
        case reservationPlanSettings = "reservationPlanSettings"
        case status = "status"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pricingPlanDecoded = try containerValues.decodeIfPresent(PricingPlan.self, forKey: .pricingPlan)
        pricingPlan = pricingPlanDecoded
        let reservationPlanSettingsDecoded = try containerValues.decodeIfPresent(ReservationPlanSettings.self, forKey: .reservationPlanSettings)
        reservationPlanSettings = reservationPlanSettingsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueueStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateQueueOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateQueueOutputResponse(queue: \(String(describing: queue)))"}
}

extension CreateQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateQueueOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queue = output.queue
        } else {
            self.queue = nil
        }
    }
}

public struct CreateQueueOutputResponse: Equatable {
    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public let queue: Queue?

    public init (
        queue: Queue? = nil
    )
    {
        self.queue = queue
    }
}

struct CreateQueueOutputResponseBody: Equatable {
    public let queue: Queue?
}

extension CreateQueueOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queue = "queue"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueDecoded = try containerValues.decodeIfPresent(Queue.self, forKey: .queue)
        queue = queueDecoded
    }
}

extension DashAdditionalManifest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case manifestNameModifier = "manifestNameModifier"
        case selectedOutputs = "selectedOutputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestNameModifier = manifestNameModifier {
            try encodeContainer.encode(manifestNameModifier, forKey: .manifestNameModifier)
        }
        if let selectedOutputs = selectedOutputs {
            var selectedOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectedOutputs)
            for __listof__stringmin10 in selectedOutputs {
                try selectedOutputsContainer.encode(__listof__stringmin10)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestNameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .manifestNameModifier)
        manifestNameModifier = manifestNameModifierDecoded
        let selectedOutputsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .selectedOutputs)
        var selectedOutputsDecoded0:[String]? = nil
        if let selectedOutputsContainer = selectedOutputsContainer {
            selectedOutputsDecoded0 = [String]()
            for string0 in selectedOutputsContainer {
                if let string0 = string0 {
                    selectedOutputsDecoded0?.append(string0)
                }
            }
        }
        selectedOutputs = selectedOutputsDecoded0
    }
}

extension DashAdditionalManifest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DashAdditionalManifest(manifestNameModifier: \(String(describing: manifestNameModifier)), selectedOutputs: \(String(describing: selectedOutputs)))"}
}

/// Specify the details for each additional DASH manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
public struct DashAdditionalManifest: Equatable {
    /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your DASH group is film-name.mpd. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.mpd.
    public let manifestNameModifier: String?
    /// Specify the outputs that you want this additional top-level manifest to reference.
    public let selectedOutputs: [String]?

    public init (
        manifestNameModifier: String? = nil,
        selectedOutputs: [String]? = nil
    )
    {
        self.manifestNameModifier = manifestNameModifier
        self.selectedOutputs = selectedOutputs
    }
}

extension DashIsoEncryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case playbackDeviceCompatibility = "playbackDeviceCompatibility"
        case spekeKeyProvider = "spekeKeyProvider"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playbackDeviceCompatibility = playbackDeviceCompatibility {
            try encodeContainer.encode(playbackDeviceCompatibility.rawValue, forKey: .playbackDeviceCompatibility)
        }
        if let spekeKeyProvider = spekeKeyProvider {
            try encodeContainer.encode(spekeKeyProvider, forKey: .spekeKeyProvider)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playbackDeviceCompatibilityDecoded = try containerValues.decodeIfPresent(DashIsoPlaybackDeviceCompatibility.self, forKey: .playbackDeviceCompatibility)
        playbackDeviceCompatibility = playbackDeviceCompatibilityDecoded
        let spekeKeyProviderDecoded = try containerValues.decodeIfPresent(SpekeKeyProvider.self, forKey: .spekeKeyProvider)
        spekeKeyProvider = spekeKeyProviderDecoded
    }
}

extension DashIsoEncryptionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DashIsoEncryptionSettings(playbackDeviceCompatibility: \(String(describing: playbackDeviceCompatibility)), spekeKeyProvider: \(String(describing: spekeKeyProvider)))"}
}

/// Specifies DRM settings for DASH outputs.
public struct DashIsoEncryptionSettings: Equatable {
    /// This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI (UNENCRYPTED_SEI) only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1 (CENC_V1). If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
    public let playbackDeviceCompatibility: DashIsoPlaybackDeviceCompatibility?
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    public let spekeKeyProvider: SpekeKeyProvider?

    public init (
        playbackDeviceCompatibility: DashIsoPlaybackDeviceCompatibility? = nil,
        spekeKeyProvider: SpekeKeyProvider? = nil
    )
    {
        self.playbackDeviceCompatibility = playbackDeviceCompatibility
        self.spekeKeyProvider = spekeKeyProvider
    }
}

/// Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration (MPEG_CHANNEL_CONFIGURATION), to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration (DOLBY_CHANNEL_CONFIGURATION) to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
public enum DashIsoGroupAudioChannelConfigSchemeIdUri {
    case dolbyChannelConfiguration
    case mpegChannelConfiguration
    case sdkUnknown(String)
}

extension DashIsoGroupAudioChannelConfigSchemeIdUri : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoGroupAudioChannelConfigSchemeIdUri] {
        return [
            .dolbyChannelConfiguration,
            .mpegChannelConfiguration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dolbyChannelConfiguration: return "DOLBY_CHANNEL_CONFIGURATION"
        case .mpegChannelConfiguration: return "MPEG_CHANNEL_CONFIGURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoGroupAudioChannelConfigSchemeIdUri(rawValue: rawValue) ?? DashIsoGroupAudioChannelConfigSchemeIdUri.sdkUnknown(rawValue)
    }
}

extension DashIsoGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalManifests = "additionalManifests"
        case audioChannelConfigSchemeIdUri = "audioChannelConfigSchemeIdUri"
        case baseUrl = "baseUrl"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case encryption = "encryption"
        case fragmentLength = "fragmentLength"
        case hbbtvCompliance = "hbbtvCompliance"
        case minBufferTime = "minBufferTime"
        case minFinalSegmentLength = "minFinalSegmentLength"
        case mpdProfile = "mpdProfile"
        case ptsOffsetHandlingForBFrames = "ptsOffsetHandlingForBFrames"
        case segmentControl = "segmentControl"
        case segmentLength = "segmentLength"
        case writeSegmentTimelineInRepresentation = "writeSegmentTimelineInRepresentation"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofdashadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofdashadditionalmanifest0)
            }
        }
        if let audioChannelConfigSchemeIdUri = audioChannelConfigSchemeIdUri {
            try encodeContainer.encode(audioChannelConfigSchemeIdUri.rawValue, forKey: .audioChannelConfigSchemeIdUri)
        }
        if let baseUrl = baseUrl {
            try encodeContainer.encode(baseUrl, forKey: .baseUrl)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if fragmentLength != 0 {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let hbbtvCompliance = hbbtvCompliance {
            try encodeContainer.encode(hbbtvCompliance.rawValue, forKey: .hbbtvCompliance)
        }
        if minBufferTime != 0 {
            try encodeContainer.encode(minBufferTime, forKey: .minBufferTime)
        }
        if minFinalSegmentLength != 0.0 {
            try encodeContainer.encode(minFinalSegmentLength, forKey: .minFinalSegmentLength)
        }
        if let mpdProfile = mpdProfile {
            try encodeContainer.encode(mpdProfile.rawValue, forKey: .mpdProfile)
        }
        if let ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames {
            try encodeContainer.encode(ptsOffsetHandlingForBFrames.rawValue, forKey: .ptsOffsetHandlingForBFrames)
        }
        if let segmentControl = segmentControl {
            try encodeContainer.encode(segmentControl.rawValue, forKey: .segmentControl)
        }
        if segmentLength != 0 {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if let writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation {
            try encodeContainer.encode(writeSegmentTimelineInRepresentation.rawValue, forKey: .writeSegmentTimelineInRepresentation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalManifestsContainer = try containerValues.decodeIfPresent([DashAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[DashAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [DashAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let audioChannelConfigSchemeIdUriDecoded = try containerValues.decodeIfPresent(DashIsoGroupAudioChannelConfigSchemeIdUri.self, forKey: .audioChannelConfigSchemeIdUri)
        audioChannelConfigSchemeIdUri = audioChannelConfigSchemeIdUriDecoded
        let baseUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrl)
        baseUrl = baseUrlDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(DashIsoEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let fragmentLengthDecoded = try containerValues.decode(Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let hbbtvComplianceDecoded = try containerValues.decodeIfPresent(DashIsoHbbtvCompliance.self, forKey: .hbbtvCompliance)
        hbbtvCompliance = hbbtvComplianceDecoded
        let minBufferTimeDecoded = try containerValues.decode(Int.self, forKey: .minBufferTime)
        minBufferTime = minBufferTimeDecoded
        let minFinalSegmentLengthDecoded = try containerValues.decode(Double.self, forKey: .minFinalSegmentLength)
        minFinalSegmentLength = minFinalSegmentLengthDecoded
        let mpdProfileDecoded = try containerValues.decodeIfPresent(DashIsoMpdProfile.self, forKey: .mpdProfile)
        mpdProfile = mpdProfileDecoded
        let ptsOffsetHandlingForBFramesDecoded = try containerValues.decodeIfPresent(DashIsoPtsOffsetHandlingForBFrames.self, forKey: .ptsOffsetHandlingForBFrames)
        ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFramesDecoded
        let segmentControlDecoded = try containerValues.decodeIfPresent(DashIsoSegmentControl.self, forKey: .segmentControl)
        segmentControl = segmentControlDecoded
        let segmentLengthDecoded = try containerValues.decode(Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let writeSegmentTimelineInRepresentationDecoded = try containerValues.decodeIfPresent(DashIsoWriteSegmentTimelineInRepresentation.self, forKey: .writeSegmentTimelineInRepresentation)
        writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentationDecoded
    }
}

extension DashIsoGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DashIsoGroupSettings(additionalManifests: \(String(describing: additionalManifests)), audioChannelConfigSchemeIdUri: \(String(describing: audioChannelConfigSchemeIdUri)), baseUrl: \(String(describing: baseUrl)), destination: \(String(describing: destination)), destinationSettings: \(String(describing: destinationSettings)), encryption: \(String(describing: encryption)), fragmentLength: \(String(describing: fragmentLength)), hbbtvCompliance: \(String(describing: hbbtvCompliance)), minBufferTime: \(String(describing: minBufferTime)), minFinalSegmentLength: \(String(describing: minFinalSegmentLength)), mpdProfile: \(String(describing: mpdProfile)), ptsOffsetHandlingForBFrames: \(String(describing: ptsOffsetHandlingForBFrames)), segmentControl: \(String(describing: segmentControl)), segmentLength: \(String(describing: segmentLength)), writeSegmentTimelineInRepresentation: \(String(describing: writeSegmentTimelineInRepresentation)))"}
}

/// Settings related to your DASH output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to DASH_ISO_GROUP_SETTINGS.
public struct DashIsoGroupSettings: Equatable {
    /// By default, the service creates one .mpd DASH manifest for each DASH ISO output group in your job. This default manifest references every output in the output group. To create additional DASH manifests that reference a subset of the outputs in the output group, specify a list of them here.
    public let additionalManifests: [DashAdditionalManifest]?
    /// Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration (MPEG_CHANNEL_CONFIGURATION), to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration (DOLBY_CHANNEL_CONFIGURATION) to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
    public let audioChannelConfigSchemeIdUri: DashIsoGroupAudioChannelConfigSchemeIdUri?
    /// A partial URI prefix that will be put in the manifest (.mpd) file at the top level BaseURL element. Can be used if streams are delivered from a different URL than the manifest file.
    public let baseUrl: String?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// DRM settings.
    public let encryption: DashIsoEncryptionSettings?
    /// Length of fragments to generate (in seconds). Fragment length must be compatible with GOP size and Framerate. Note that fragments will end on the next keyframe after this number of seconds, so actual fragment length may be longer. When Emit Single File is checked, the fragmentation is internal to a single output file and it does not cause the creation of many output files as in other output types.
    public let fragmentLength: Int
    /// Supports HbbTV specification as indicated
    public let hbbtvCompliance: DashIsoHbbtvCompliance?
    /// Minimum time of initially buffered media that is needed to ensure smooth playout.
    public let minBufferTime: Int
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    public let minFinalSegmentLength: Double
    /// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
    public let mpdProfile: DashIsoMpdProfile?
    /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
    public let ptsOffsetHandlingForBFrames: DashIsoPtsOffsetHandlingForBFrames?
    /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
    public let segmentControl: DashIsoSegmentControl?
    /// Length of mpd segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer. When Emit Single File is checked, the segmentation is internal to a single output file and it does not cause the creation of many output files as in other output types.
    public let segmentLength: Int
    /// If you get an HTTP error in the 400 range when you play back your DASH output, enable this setting and run your transcoding job again. When you enable this setting, the service writes precise segment durations in the DASH manifest. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When you don't enable this setting, the service writes approximate segment durations in your DASH manifest.
    public let writeSegmentTimelineInRepresentation: DashIsoWriteSegmentTimelineInRepresentation?

    public init (
        additionalManifests: [DashAdditionalManifest]? = nil,
        audioChannelConfigSchemeIdUri: DashIsoGroupAudioChannelConfigSchemeIdUri? = nil,
        baseUrl: String? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        encryption: DashIsoEncryptionSettings? = nil,
        fragmentLength: Int = 0,
        hbbtvCompliance: DashIsoHbbtvCompliance? = nil,
        minBufferTime: Int = 0,
        minFinalSegmentLength: Double = 0.0,
        mpdProfile: DashIsoMpdProfile? = nil,
        ptsOffsetHandlingForBFrames: DashIsoPtsOffsetHandlingForBFrames? = nil,
        segmentControl: DashIsoSegmentControl? = nil,
        segmentLength: Int = 0,
        writeSegmentTimelineInRepresentation: DashIsoWriteSegmentTimelineInRepresentation? = nil
    )
    {
        self.additionalManifests = additionalManifests
        self.audioChannelConfigSchemeIdUri = audioChannelConfigSchemeIdUri
        self.baseUrl = baseUrl
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.encryption = encryption
        self.fragmentLength = fragmentLength
        self.hbbtvCompliance = hbbtvCompliance
        self.minBufferTime = minBufferTime
        self.minFinalSegmentLength = minFinalSegmentLength
        self.mpdProfile = mpdProfile
        self.ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames
        self.segmentControl = segmentControl
        self.segmentLength = segmentLength
        self.writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation
    }
}

/// Supports HbbTV specification as indicated
public enum DashIsoHbbtvCompliance {
    case hbbtv15
    case `none`
    case sdkUnknown(String)
}

extension DashIsoHbbtvCompliance : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoHbbtvCompliance] {
        return [
            .hbbtv15,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hbbtv15: return "HBBTV_1_5"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoHbbtvCompliance(rawValue: rawValue) ?? DashIsoHbbtvCompliance.sdkUnknown(rawValue)
    }
}

/// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
public enum DashIsoMpdProfile {
    case mainProfile
    case onDemandProfile
    case sdkUnknown(String)
}

extension DashIsoMpdProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoMpdProfile] {
        return [
            .mainProfile,
            .onDemandProfile,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mainProfile: return "MAIN_PROFILE"
        case .onDemandProfile: return "ON_DEMAND_PROFILE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoMpdProfile(rawValue: rawValue) ?? DashIsoMpdProfile.sdkUnknown(rawValue)
    }
}

/// This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI (UNENCRYPTED_SEI) only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1 (CENC_V1). If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
public enum DashIsoPlaybackDeviceCompatibility {
    case cencV1
    case unencryptedSei
    case sdkUnknown(String)
}

extension DashIsoPlaybackDeviceCompatibility : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoPlaybackDeviceCompatibility] {
        return [
            .cencV1,
            .unencryptedSei,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cencV1: return "CENC_V1"
        case .unencryptedSei: return "UNENCRYPTED_SEI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoPlaybackDeviceCompatibility(rawValue: rawValue) ?? DashIsoPlaybackDeviceCompatibility.sdkUnknown(rawValue)
    }
}

/// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
public enum DashIsoPtsOffsetHandlingForBFrames {
    case matchInitialPts
    case zeroBased
    case sdkUnknown(String)
}

extension DashIsoPtsOffsetHandlingForBFrames : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoPtsOffsetHandlingForBFrames] {
        return [
            .matchInitialPts,
            .zeroBased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .matchInitialPts: return "MATCH_INITIAL_PTS"
        case .zeroBased: return "ZERO_BASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoPtsOffsetHandlingForBFrames(rawValue: rawValue) ?? DashIsoPtsOffsetHandlingForBFrames.sdkUnknown(rawValue)
    }
}

/// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
public enum DashIsoSegmentControl {
    case segmentedFiles
    case singleFile
    case sdkUnknown(String)
}

extension DashIsoSegmentControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoSegmentControl] {
        return [
            .segmentedFiles,
            .singleFile,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .segmentedFiles: return "SEGMENTED_FILES"
        case .singleFile: return "SINGLE_FILE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoSegmentControl(rawValue: rawValue) ?? DashIsoSegmentControl.sdkUnknown(rawValue)
    }
}

/// When you enable Precise segment duration in manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
public enum DashIsoWriteSegmentTimelineInRepresentation {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension DashIsoWriteSegmentTimelineInRepresentation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoWriteSegmentTimelineInRepresentation] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoWriteSegmentTimelineInRepresentation(rawValue: rawValue) ?? DashIsoWriteSegmentTimelineInRepresentation.sdkUnknown(rawValue)
    }
}

/// Specify the encryption mode that you used to encrypt your input files.
public enum DecryptionMode {
    case aesCbc
    case aesCtr
    case aesGcm
    case sdkUnknown(String)
}

extension DecryptionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DecryptionMode] {
        return [
            .aesCbc,
            .aesCtr,
            .aesGcm,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aesCbc: return "AES_CBC"
        case .aesCtr: return "AES_CTR"
        case .aesGcm: return "AES_GCM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DecryptionMode(rawValue: rawValue) ?? DecryptionMode.sdkUnknown(rawValue)
    }
}

/// Only applies when you set Deinterlacer (DeinterlaceMode) to Deinterlace (DEINTERLACE) or Adaptive (ADAPTIVE). Motion adaptive interpolate (INTERPOLATE) produces sharper pictures, while blend (BLEND) produces smoother motion. Use (INTERPOLATE_TICKER) OR (BLEND_TICKER) if your source file includes a ticker, such as a scrolling headline at the bottom of the frame.
public enum DeinterlaceAlgorithm {
    case blend
    case blendTicker
    case interpolate
    case interpolateTicker
    case sdkUnknown(String)
}

extension DeinterlaceAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeinterlaceAlgorithm] {
        return [
            .blend,
            .blendTicker,
            .interpolate,
            .interpolateTicker,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .blend: return "BLEND"
        case .blendTicker: return "BLEND_TICKER"
        case .interpolate: return "INTERPOLATE"
        case .interpolateTicker: return "INTERPOLATE_TICKER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeinterlaceAlgorithm(rawValue: rawValue) ?? DeinterlaceAlgorithm.sdkUnknown(rawValue)
    }
}

extension Deinterlacer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithm = "algorithm"
        case control = "control"
        case mode = "mode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let control = control {
            try encodeContainer.encode(control.rawValue, forKey: .control)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(DeinterlaceAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let controlDecoded = try containerValues.decodeIfPresent(DeinterlacerControl.self, forKey: .control)
        control = controlDecoded
        let modeDecoded = try containerValues.decodeIfPresent(DeinterlacerMode.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension Deinterlacer: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Deinterlacer(algorithm: \(String(describing: algorithm)), control: \(String(describing: control)), mode: \(String(describing: mode)))"}
}

/// Settings for deinterlacer
public struct Deinterlacer: Equatable {
    /// Only applies when you set Deinterlacer (DeinterlaceMode) to Deinterlace (DEINTERLACE) or Adaptive (ADAPTIVE). Motion adaptive interpolate (INTERPOLATE) produces sharper pictures, while blend (BLEND) produces smoother motion. Use (INTERPOLATE_TICKER) OR (BLEND_TICKER) if your source file includes a ticker, such as a scrolling headline at the bottom of the frame.
    public let algorithm: DeinterlaceAlgorithm?
    /// - When set to NORMAL (default), the deinterlacer does not convert frames that are tagged  in metadata as progressive. It will only convert those that are tagged as some other type. - When set to FORCE_ALL_FRAMES, the deinterlacer converts every frame to progressive - even those that are already tagged as progressive. Turn Force mode on only if there is  a good chance that the metadata has tagged frames as progressive when they are not  progressive. Do not turn on otherwise; processing frames that are already progressive  into progressive will probably result in lower quality video.
    public let control: DeinterlacerControl?
    /// Use Deinterlacer (DeinterlaceMode) to choose how the service will do deinterlacing. Default is Deinterlace. - Deinterlace converts interlaced to progressive. - Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p. - Adaptive auto-detects and converts to progressive.
    public let mode: DeinterlacerMode?

    public init (
        algorithm: DeinterlaceAlgorithm? = nil,
        control: DeinterlacerControl? = nil,
        mode: DeinterlacerMode? = nil
    )
    {
        self.algorithm = algorithm
        self.control = control
        self.mode = mode
    }
}

/// - When set to NORMAL (default), the deinterlacer does not convert frames that are tagged  in metadata as progressive. It will only convert those that are tagged as some other type. - When set to FORCE_ALL_FRAMES, the deinterlacer converts every frame to progressive - even those that are already tagged as progressive. Turn Force mode on only if there is  a good chance that the metadata has tagged frames as progressive when they are not  progressive. Do not turn on otherwise; processing frames that are already progressive  into progressive will probably result in lower quality video.
public enum DeinterlacerControl {
    case forceAllFrames
    case normal
    case sdkUnknown(String)
}

extension DeinterlacerControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeinterlacerControl] {
        return [
            .forceAllFrames,
            .normal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .forceAllFrames: return "FORCE_ALL_FRAMES"
        case .normal: return "NORMAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeinterlacerControl(rawValue: rawValue) ?? DeinterlacerControl.sdkUnknown(rawValue)
    }
}

/// Use Deinterlacer (DeinterlaceMode) to choose how the service will do deinterlacing. Default is Deinterlace. - Deinterlace converts interlaced to progressive. - Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p. - Adaptive auto-detects and converts to progressive.
public enum DeinterlacerMode {
    case adaptive
    case deinterlace
    case inverseTelecine
    case sdkUnknown(String)
}

extension DeinterlacerMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeinterlacerMode] {
        return [
            .adaptive,
            .deinterlace,
            .inverseTelecine,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adaptive: return "ADAPTIVE"
        case .deinterlace: return "DEINTERLACE"
        case .inverseTelecine: return "INVERSE_TELECINE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeinterlacerMode(rawValue: rawValue) ?? DeinterlacerMode.sdkUnknown(rawValue)
    }
}

extension DeleteJobTemplateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteJobTemplateInput(name: \(String(describing: name)))"}
}

extension DeleteJobTemplateInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteJobTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteJobTemplateInput>
    public typealias MOutput = OperationOutput<DeleteJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteJobTemplateOutputError>
}

public struct DeleteJobTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteJobTemplateInput>
    public typealias MOutput = OperationOutput<DeleteJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteJobTemplateOutputError>
}

public struct DeleteJobTemplateInput: Equatable {
    /// The name of the job template to be deleted.
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteJobTemplateInputBody: Equatable {
}

extension DeleteJobTemplateInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteJobTemplateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobTemplateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteJobTemplateOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobTemplateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteJobTemplateOutputResponse()"}
}

extension DeleteJobTemplateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteJobTemplateOutputResponse: Equatable {

    public init() {}
}

struct DeleteJobTemplateOutputResponseBody: Equatable {
}

extension DeleteJobTemplateOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeletePresetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeletePresetInput(name: \(String(describing: name)))"}
}

extension DeletePresetInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeletePresetInputHeadersMiddleware: Middleware {
    public let id: String = "DeletePresetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePresetInput>
    public typealias MOutput = OperationOutput<DeletePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePresetOutputError>
}

public struct DeletePresetInputQueryItemMiddleware: Middleware {
    public let id: String = "DeletePresetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePresetInput>
    public typealias MOutput = OperationOutput<DeletePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePresetOutputError>
}

public struct DeletePresetInput: Equatable {
    /// The name of the preset to be deleted.
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeletePresetInputBody: Equatable {
}

extension DeletePresetInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeletePresetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePresetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePresetOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePresetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeletePresetOutputResponse()"}
}

extension DeletePresetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeletePresetOutputResponse: Equatable {

    public init() {}
}

struct DeletePresetOutputResponseBody: Equatable {
}

extension DeletePresetOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteQueueInput(name: \(String(describing: name)))"}
}

extension DeleteQueueInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteQueueInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueueInput>
    public typealias MOutput = OperationOutput<DeleteQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueueOutputError>
}

public struct DeleteQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueueInput>
    public typealias MOutput = OperationOutput<DeleteQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueueOutputError>
}

public struct DeleteQueueInput: Equatable {
    /// The name of the queue that you want to delete.
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteQueueInputBody: Equatable {
}

extension DeleteQueueInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteQueueOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteQueueOutputResponse()"}
}

extension DeleteQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteQueueOutputResponse: Equatable {

    public init() {}
}

struct DeleteQueueOutputResponseBody: Equatable {
}

extension DeleteQueueOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeEndpointsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeEndpointsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointsOutputError>
}

extension DescribeEndpointsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEndpointsInput(maxResults: \(String(describing: maxResults)), mode: \(String(describing: mode)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeEndpointsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "maxResults"
        case mode = "mode"
        case nextToken = "nextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeEndpointsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEndpointsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointsOutputError>
}

public struct DescribeEndpointsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEndpointsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointsOutputError>
}

/// DescribeEndpointsRequest
public struct DescribeEndpointsInput: Equatable {
    /// Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    public let maxResults: Int
    /// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    public let mode: DescribeEndpointsMode?
    /// Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    public let nextToken: String?

    public init (
        maxResults: Int = 0,
        mode: DescribeEndpointsMode? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.mode = mode
        self.nextToken = nextToken
    }
}

struct DescribeEndpointsInputBody: Equatable {
    public let maxResults: Int
    public let mode: DescribeEndpointsMode?
    public let nextToken: String?
}

extension DescribeEndpointsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "maxResults"
        case mode = "mode"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let modeDecoded = try containerValues.decodeIfPresent(DescribeEndpointsMode.self, forKey: .mode)
        mode = modeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

/// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
public enum DescribeEndpointsMode {
    case `default`
    case getOnly
    case sdkUnknown(String)
}

extension DescribeEndpointsMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DescribeEndpointsMode] {
        return [
            .default,
            .getOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .getOnly: return "GET_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DescribeEndpointsMode(rawValue: rawValue) ?? DescribeEndpointsMode.sdkUnknown(rawValue)
    }
}

extension DescribeEndpointsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEndpointsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEndpointsOutputResponse(endpoints: \(String(describing: endpoints)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeEndpointsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.endpoints = output.endpoints
            self.nextToken = output.nextToken
        } else {
            self.endpoints = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeEndpointsOutputResponse: Equatable {
    /// List of endpoints
    public let endpoints: [Endpoint]?
    /// Use this string to request the next batch of endpoints.
    public let nextToken: String?

    public init (
        endpoints: [Endpoint]? = nil,
        nextToken: String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

struct DescribeEndpointsOutputResponseBody: Equatable {
    public let endpoints: [Endpoint]?
    public let nextToken: String?
}

extension DescribeEndpointsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endpoints = "endpoints"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointsContainer = try containerValues.decodeIfPresent([Endpoint?].self, forKey: .endpoints)
        var endpointsDecoded0:[Endpoint]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Endpoint]()
            for structure0 in endpointsContainer {
                if let structure0 = structure0 {
                    endpointsDecoded0?.append(structure0)
                }
            }
        }
        endpoints = endpointsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case s3Settings = "s3Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Settings = s3Settings {
            try encodeContainer.encode(s3Settings, forKey: .s3Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3SettingsDecoded = try containerValues.decodeIfPresent(S3DestinationSettings.self, forKey: .s3Settings)
        s3Settings = s3SettingsDecoded
    }
}

extension DestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DestinationSettings(s3Settings: \(String(describing: s3Settings)))"}
}

/// Settings associated with the destination. Will vary based on the type of destination
public struct DestinationSettings: Equatable {
    /// Settings associated with S3 destination
    public let s3Settings: S3DestinationSettings?

    public init (
        s3Settings: S3DestinationSettings? = nil
    )
    {
        self.s3Settings = s3Settings
    }
}

extension DisassociateCertificateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateCertificateInput(arn: \(String(describing: arn)))"}
}

extension DisassociateCertificateInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DisassociateCertificateInputHeadersMiddleware: Middleware {
    public let id: String = "DisassociateCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateCertificateInput>
    public typealias MOutput = OperationOutput<DisassociateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateCertificateOutputError>
}

public struct DisassociateCertificateInputQueryItemMiddleware: Middleware {
    public let id: String = "DisassociateCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateCertificateInput>
    public typealias MOutput = OperationOutput<DisassociateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateCertificateOutputError>
}

public struct DisassociateCertificateInput: Equatable {
    /// The ARN of the ACM certificate that you want to disassociate from your MediaConvert resource.
    public let arn: String?

    public init (
        arn: String? = nil
    )
    {
        self.arn = arn
    }
}

struct DisassociateCertificateInputBody: Equatable {
}

extension DisassociateCertificateInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DisassociateCertificateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateCertificateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateCertificateOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateCertificateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateCertificateOutputResponse()"}
}

extension DisassociateCertificateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateCertificateOutputResponse: Equatable {

    public init() {}
}

struct DisassociateCertificateOutputResponseBody: Equatable {
}

extension DisassociateCertificateOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DolbyVision: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case l6Metadata = "l6Metadata"
        case l6Mode = "l6Mode"
        case profile = "profile"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let l6Metadata = l6Metadata {
            try encodeContainer.encode(l6Metadata, forKey: .l6Metadata)
        }
        if let l6Mode = l6Mode {
            try encodeContainer.encode(l6Mode.rawValue, forKey: .l6Mode)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let l6MetadataDecoded = try containerValues.decodeIfPresent(DolbyVisionLevel6Metadata.self, forKey: .l6Metadata)
        l6Metadata = l6MetadataDecoded
        let l6ModeDecoded = try containerValues.decodeIfPresent(DolbyVisionLevel6Mode.self, forKey: .l6Mode)
        l6Mode = l6ModeDecoded
        let profileDecoded = try containerValues.decodeIfPresent(DolbyVisionProfile.self, forKey: .profile)
        profile = profileDecoded
    }
}

extension DolbyVision: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DolbyVision(l6Metadata: \(String(describing: l6Metadata)), l6Mode: \(String(describing: l6Mode)), profile: \(String(describing: profile)))"}
}

/// With AWS Elemental MediaConvert, you can create profile 5 Dolby Vision outputs from MXF and IMF sources that contain mastering information as frame-interleaved Dolby Vision metadata.
public struct DolbyVision: Equatable {
    /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
    public let l6Metadata: DolbyVisionLevel6Metadata?
    /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
    public let l6Mode: DolbyVisionLevel6Mode?
    /// In the current MediaConvert implementation, the Dolby Vision profile is always 5 (PROFILE_5). Therefore, all of your inputs must contain Dolby Vision frame interleaved data.
    public let profile: DolbyVisionProfile?

    public init (
        l6Metadata: DolbyVisionLevel6Metadata? = nil,
        l6Mode: DolbyVisionLevel6Mode? = nil,
        profile: DolbyVisionProfile? = nil
    )
    {
        self.l6Metadata = l6Metadata
        self.l6Mode = l6Mode
        self.profile = profile
    }
}

extension DolbyVisionLevel6Metadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxCll = "maxCll"
        case maxFall = "maxFall"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxCll != 0 {
            try encodeContainer.encode(maxCll, forKey: .maxCll)
        }
        if maxFall != 0 {
            try encodeContainer.encode(maxFall, forKey: .maxFall)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxCllDecoded = try containerValues.decode(Int.self, forKey: .maxCll)
        maxCll = maxCllDecoded
        let maxFallDecoded = try containerValues.decode(Int.self, forKey: .maxFall)
        maxFall = maxFallDecoded
    }
}

extension DolbyVisionLevel6Metadata: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DolbyVisionLevel6Metadata(maxCll: \(String(describing: maxCll)), maxFall: \(String(describing: maxFall)))"}
}

/// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
public struct DolbyVisionLevel6Metadata: Equatable {
    /// Maximum Content Light Level. Static HDR metadata that corresponds to the brightest pixel in the entire stream. Measured in nits.
    public let maxCll: Int
    /// Maximum Frame-Average Light Level. Static HDR metadata that corresponds to the highest frame-average brightness in the entire stream. Measured in nits.
    public let maxFall: Int

    public init (
        maxCll: Int = 0,
        maxFall: Int = 0
    )
    {
        self.maxCll = maxCll
        self.maxFall = maxFall
    }
}

/// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
public enum DolbyVisionLevel6Mode {
    case passthrough
    case recalculate
    case specify
    case sdkUnknown(String)
}

extension DolbyVisionLevel6Mode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DolbyVisionLevel6Mode] {
        return [
            .passthrough,
            .recalculate,
            .specify,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .passthrough: return "PASSTHROUGH"
        case .recalculate: return "RECALCULATE"
        case .specify: return "SPECIFY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DolbyVisionLevel6Mode(rawValue: rawValue) ?? DolbyVisionLevel6Mode.sdkUnknown(rawValue)
    }
}

/// In the current MediaConvert implementation, the Dolby Vision profile is always 5 (PROFILE_5). Therefore, all of your inputs must contain Dolby Vision frame interleaved data.
public enum DolbyVisionProfile {
    case profile5
    case sdkUnknown(String)
}

extension DolbyVisionProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DolbyVisionProfile] {
        return [
            .profile5,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .profile5: return "PROFILE_5"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DolbyVisionProfile(rawValue: rawValue) ?? DolbyVisionProfile.sdkUnknown(rawValue)
    }
}

/// Applies only to 29.97 fps outputs. When this feature is enabled, the service will use drop-frame timecode on outputs. If it is not possible to use drop-frame timecode, the system will fall back to non-drop-frame. This setting is enabled by default when Timecode insertion (TimecodeInsertion) is enabled.
public enum DropFrameTimecode {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension DropFrameTimecode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DropFrameTimecode] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DropFrameTimecode(rawValue: rawValue) ?? DropFrameTimecode.sdkUnknown(rawValue)
    }
}

extension DvbNitSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case networkId = "networkId"
        case networkName = "networkName"
        case nitInterval = "nitInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if networkId != 0 {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let networkName = networkName {
            try encodeContainer.encode(networkName, forKey: .networkName)
        }
        if nitInterval != 0 {
            try encodeContainer.encode(nitInterval, forKey: .nitInterval)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decode(Int.self, forKey: .networkId)
        networkId = networkIdDecoded
        let networkNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkName)
        networkName = networkNameDecoded
        let nitIntervalDecoded = try containerValues.decode(Int.self, forKey: .nitInterval)
        nitInterval = nitIntervalDecoded
    }
}

extension DvbNitSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbNitSettings(networkId: \(String(describing: networkId)), networkName: \(String(describing: networkName)), nitInterval: \(String(describing: nitInterval)))"}
}

/// Use these settings to insert a DVB Network Information Table (NIT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
public struct DvbNitSettings: Equatable {
    /// The numeric value placed in the Network Information Table (NIT).
    public let networkId: Int
    /// The network name text placed in the network_name_descriptor inside the Network Information Table. Maximum length is 256 characters.
    public let networkName: String?
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let nitInterval: Int

    public init (
        networkId: Int = 0,
        networkName: String? = nil,
        nitInterval: Int = 0
    )
    {
        self.networkId = networkId
        self.networkName = networkName
        self.nitInterval = nitInterval
    }
}

extension DvbSdtSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputSdt = "outputSdt"
        case sdtInterval = "sdtInterval"
        case serviceName = "serviceName"
        case serviceProviderName = "serviceProviderName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputSdt = outputSdt {
            try encodeContainer.encode(outputSdt.rawValue, forKey: .outputSdt)
        }
        if sdtInterval != 0 {
            try encodeContainer.encode(sdtInterval, forKey: .sdtInterval)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceProviderName = serviceProviderName {
            try encodeContainer.encode(serviceProviderName, forKey: .serviceProviderName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputSdtDecoded = try containerValues.decodeIfPresent(OutputSdt.self, forKey: .outputSdt)
        outputSdt = outputSdtDecoded
        let sdtIntervalDecoded = try containerValues.decode(Int.self, forKey: .sdtInterval)
        sdtInterval = sdtIntervalDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceProviderNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceProviderName)
        serviceProviderName = serviceProviderNameDecoded
    }
}

extension DvbSdtSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbSdtSettings(outputSdt: \(String(describing: outputSdt)), sdtInterval: \(String(describing: sdtInterval)), serviceName: \(String(describing: serviceName)), serviceProviderName: \(String(describing: serviceProviderName)))"}
}

/// Use these settings to insert a DVB Service Description Table (SDT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
public struct DvbSdtSettings: Equatable {
    /// Selects method of inserting SDT information into output stream.  "Follow input SDT" copies SDT information from input stream to  output stream. "Follow input SDT if present" copies SDT information from  input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT  Manually" means user will enter the SDT information. "No SDT" means output  stream will not contain SDT information.
    public let outputSdt: OutputSdt?
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let sdtInterval: Int
    /// The service name placed in the service_descriptor in the Service Description Table. Maximum length is 256 characters.
    public let serviceName: String?
    /// The service provider name placed in the service_descriptor in the Service Description Table. Maximum length is 256 characters.
    public let serviceProviderName: String?

    public init (
        outputSdt: OutputSdt? = nil,
        sdtInterval: Int = 0,
        serviceName: String? = nil,
        serviceProviderName: String? = nil
    )
    {
        self.outputSdt = outputSdt
        self.sdtInterval = sdtInterval
        self.serviceName = serviceName
        self.serviceProviderName = serviceProviderName
    }
}

extension DvbSubDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case ddsHandling = "ddsHandling"
        case ddsXCoordinate = "ddsXCoordinate"
        case ddsYCoordinate = "ddsYCoordinate"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontScript = "fontScript"
        case fontSize = "fontSize"
        case height = "height"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case subtitlingType = "subtitlingType"
        case teletextSpacing = "teletextSpacing"
        case width = "width"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if backgroundOpacity != 0 {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let ddsHandling = ddsHandling {
            try encodeContainer.encode(ddsHandling.rawValue, forKey: .ddsHandling)
        }
        if ddsXCoordinate != 0 {
            try encodeContainer.encode(ddsXCoordinate, forKey: .ddsXCoordinate)
        }
        if ddsYCoordinate != 0 {
            try encodeContainer.encode(ddsYCoordinate, forKey: .ddsYCoordinate)
        }
        if let fontColor = fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if fontOpacity != 0 {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if fontResolution != 0 {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontScript = fontScript {
            try encodeContainer.encode(fontScript.rawValue, forKey: .fontScript)
        }
        if fontSize != 0 {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let outlineColor = outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if outlineSize != 0 {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if shadowOpacity != 0 {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if shadowXOffset != 0 {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if shadowYOffset != 0 {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let subtitlingType = subtitlingType {
            try encodeContainer.encode(subtitlingType.rawValue, forKey: .subtitlingType)
        }
        if let teletextSpacing = teletextSpacing {
            try encodeContainer.encode(teletextSpacing.rawValue, forKey: .teletextSpacing)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
        if xPosition != 0 {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if yPosition != 0 {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(DvbSubtitleAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(DvbSubtitleBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decode(Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let ddsHandlingDecoded = try containerValues.decodeIfPresent(DvbddsHandling.self, forKey: .ddsHandling)
        ddsHandling = ddsHandlingDecoded
        let ddsXCoordinateDecoded = try containerValues.decode(Int.self, forKey: .ddsXCoordinate)
        ddsXCoordinate = ddsXCoordinateDecoded
        let ddsYCoordinateDecoded = try containerValues.decode(Int.self, forKey: .ddsYCoordinate)
        ddsYCoordinate = ddsYCoordinateDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(DvbSubtitleFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decode(Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decode(Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontScriptDecoded = try containerValues.decodeIfPresent(FontScript.self, forKey: .fontScript)
        fontScript = fontScriptDecoded
        let fontSizeDecoded = try containerValues.decode(Int.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(DvbSubtitleOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decode(Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(DvbSubtitleShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decode(Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decode(Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let subtitlingTypeDecoded = try containerValues.decodeIfPresent(DvbSubtitlingType.self, forKey: .subtitlingType)
        subtitlingType = subtitlingTypeDecoded
        let teletextSpacingDecoded = try containerValues.decodeIfPresent(DvbSubtitleTeletextSpacing.self, forKey: .teletextSpacing)
        teletextSpacing = teletextSpacingDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
        let xPositionDecoded = try containerValues.decode(Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decode(Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}

extension DvbSubDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbSubDestinationSettings(alignment: \(String(describing: alignment)), backgroundColor: \(String(describing: backgroundColor)), backgroundOpacity: \(String(describing: backgroundOpacity)), ddsHandling: \(String(describing: ddsHandling)), ddsXCoordinate: \(String(describing: ddsXCoordinate)), ddsYCoordinate: \(String(describing: ddsYCoordinate)), fontColor: \(String(describing: fontColor)), fontOpacity: \(String(describing: fontOpacity)), fontResolution: \(String(describing: fontResolution)), fontScript: \(String(describing: fontScript)), fontSize: \(String(describing: fontSize)), height: \(String(describing: height)), outlineColor: \(String(describing: outlineColor)), outlineSize: \(String(describing: outlineSize)), shadowColor: \(String(describing: shadowColor)), shadowOpacity: \(String(describing: shadowOpacity)), shadowXOffset: \(String(describing: shadowXOffset)), shadowYOffset: \(String(describing: shadowYOffset)), subtitlingType: \(String(describing: subtitlingType)), teletextSpacing: \(String(describing: teletextSpacing)), width: \(String(describing: width)), xPosition: \(String(describing: xPosition)), yPosition: \(String(describing: yPosition)))"}
}

/// Settings related to DVB-Sub captions. Set up DVB-Sub captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/dvb-sub-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to DVB_SUB.
public struct DvbSubDestinationSettings: Equatable {
    /// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let alignment: DvbSubtitleAlignment?
    /// Specifies the color of the rectangle behind the captions.
    /// All burn-in and DVB-Sub font settings must match.
    public let backgroundColor: DvbSubtitleBackgroundColor?
    /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
    public let backgroundOpacity: Int
    /// Specify how MediaConvert handles the display definition segment (DDS). Keep the default, None (NONE), to exclude the DDS from this set of captions. Choose No display window (NO_DISPLAY_WINDOW) to have MediaConvert include the DDS but not include display window data. In this case, MediaConvert writes that information to the page composition segment (PCS) instead. Choose Specify (SPECIFIED) to have MediaConvert set up the display window based on the values that you specify in related job settings. For video resolutions that are 576 pixels or smaller in height, MediaConvert doesn't include the DDS, regardless of the value you choose for DDS handling (ddsHandling). In this case, it doesn't write the display window data to the PCS either. Related settings: Use the settings DDS x-coordinate (ddsXCoordinate) and DDS y-coordinate (ddsYCoordinate) to specify the offset between the top left corner of the display window and the top left corner of the video frame. All burn-in and DVB-Sub font settings must match.
    public let ddsHandling: DvbddsHandling?
    /// Use this setting, along with DDS y-coordinate (ddsYCoordinate), to specify the upper left corner of the display definition segment (DDS) display window. With this setting, specify the distance, in pixels, between the left side of the frame and the left side of the DDS display window. Keep the default value, 0, to have MediaConvert automatically choose this offset. Related setting: When you use this setting, you must set DDS handling (ddsHandling) to a value other than None (NONE). MediaConvert uses these values to determine whether to write page position data to the DDS or to the page composition segment (PCS). All burn-in and DVB-Sub font settings must match.
    public let ddsXCoordinate: Int
    /// Use this setting, along with DDS x-coordinate (ddsXCoordinate), to specify the upper left corner of the display definition segment (DDS) display window. With this setting, specify the distance, in pixels, between the top of the frame and the top of the DDS display window. Keep the default value, 0, to have MediaConvert automatically choose this offset. Related setting: When you use this setting, you must set DDS handling (ddsHandling) to a value other than None (NONE). MediaConvert uses these values to determine whether to write page position data to the DDS or to the page composition segment (PCS). All burn-in and DVB-Sub font settings must match.
    public let ddsYCoordinate: Int
    /// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let fontColor: DvbSubtitleFontColor?
    /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
    /// All burn-in and DVB-Sub font settings must match.
    public let fontOpacity: Int
    /// Font resolution in DPI (dots per inch); default is 96 dpi.
    /// All burn-in and DVB-Sub font settings must match.
    public let fontResolution: Int
    /// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset. This is used to help determine the appropriate font for rendering DVB-Sub captions.
    public let fontScript: FontScript?
    /// A positive integer indicates the exact font size in points. Set to 0 for automatic font size selection. All burn-in and DVB-Sub font settings must match.
    public let fontSize: Int
    /// Specify the height, in pixels, of this set of DVB-Sub captions. The default value is 576 pixels. Related setting: When you use this setting, you must set DDS handling (ddsHandling) to a value other than None (NONE). All burn-in and DVB-Sub font settings must match.
    public let height: Int
    /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineColor: DvbSubtitleOutlineColor?
    /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let outlineSize: Int
    /// Specifies the color of the shadow cast by the captions.
    /// All burn-in and DVB-Sub font settings must match.
    public let shadowColor: DvbSubtitleShadowColor?
    /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
    public let shadowOpacity: Int
    /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
    public let shadowXOffset: Int
    /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
    public let shadowYOffset: Int
    /// Specify whether your DVB subtitles are standard or for hearing impaired. Choose hearing impaired if your subtitles include audio descriptions and dialogue. Choose standard if your subtitles include only dialogue.
    public let subtitlingType: DvbSubtitlingType?
    /// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
    public let teletextSpacing: DvbSubtitleTeletextSpacing?
    /// Specify the width, in pixels, of this set of DVB-Sub captions. The default value is 720 pixels. Related setting: When you use this setting, you must set DDS handling (ddsHandling) to a value other than None (NONE). All burn-in and DVB-Sub font settings must match.
    public let width: Int
    /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let xPosition: Int
    /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
    public let yPosition: Int

    public init (
        alignment: DvbSubtitleAlignment? = nil,
        backgroundColor: DvbSubtitleBackgroundColor? = nil,
        backgroundOpacity: Int = 0,
        ddsHandling: DvbddsHandling? = nil,
        ddsXCoordinate: Int = 0,
        ddsYCoordinate: Int = 0,
        fontColor: DvbSubtitleFontColor? = nil,
        fontOpacity: Int = 0,
        fontResolution: Int = 0,
        fontScript: FontScript? = nil,
        fontSize: Int = 0,
        height: Int = 0,
        outlineColor: DvbSubtitleOutlineColor? = nil,
        outlineSize: Int = 0,
        shadowColor: DvbSubtitleShadowColor? = nil,
        shadowOpacity: Int = 0,
        shadowXOffset: Int = 0,
        shadowYOffset: Int = 0,
        subtitlingType: DvbSubtitlingType? = nil,
        teletextSpacing: DvbSubtitleTeletextSpacing? = nil,
        width: Int = 0,
        xPosition: Int = 0,
        yPosition: Int = 0
    )
    {
        self.alignment = alignment
        self.backgroundColor = backgroundColor
        self.backgroundOpacity = backgroundOpacity
        self.ddsHandling = ddsHandling
        self.ddsXCoordinate = ddsXCoordinate
        self.ddsYCoordinate = ddsYCoordinate
        self.fontColor = fontColor
        self.fontOpacity = fontOpacity
        self.fontResolution = fontResolution
        self.fontScript = fontScript
        self.fontSize = fontSize
        self.height = height
        self.outlineColor = outlineColor
        self.outlineSize = outlineSize
        self.shadowColor = shadowColor
        self.shadowOpacity = shadowOpacity
        self.shadowXOffset = shadowXOffset
        self.shadowYOffset = shadowYOffset
        self.subtitlingType = subtitlingType
        self.teletextSpacing = teletextSpacing
        self.width = width
        self.xPosition = xPosition
        self.yPosition = yPosition
    }
}

extension DvbSubSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decode(Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension DvbSubSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbSubSourceSettings(pid: \(String(describing: pid)))"}
}

/// DVB Sub Source Settings
public struct DvbSubSourceSettings: Equatable {
    /// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
    public let pid: Int

    public init (
        pid: Int = 0
    )
    {
        self.pid = pid
    }
}

/// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
public enum DvbSubtitleAlignment {
    case centered
    case `left`
    case sdkUnknown(String)
}

extension DvbSubtitleAlignment : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitleAlignment] {
        return [
            .centered,
            .left,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .centered: return "CENTERED"
        case .left: return "LEFT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitleAlignment(rawValue: rawValue) ?? DvbSubtitleAlignment.sdkUnknown(rawValue)
    }
}

/// Specifies the color of the rectangle behind the captions.
/// All burn-in and DVB-Sub font settings must match.
public enum DvbSubtitleBackgroundColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension DvbSubtitleBackgroundColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitleBackgroundColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitleBackgroundColor(rawValue: rawValue) ?? DvbSubtitleBackgroundColor.sdkUnknown(rawValue)
    }
}

/// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
public enum DvbSubtitleFontColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension DvbSubtitleFontColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitleFontColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitleFontColor(rawValue: rawValue) ?? DvbSubtitleFontColor.sdkUnknown(rawValue)
    }
}

/// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
public enum DvbSubtitleOutlineColor {
    case black
    case blue
    case green
    case red
    case white
    case yellow
    case sdkUnknown(String)
}

extension DvbSubtitleOutlineColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitleOutlineColor] {
        return [
            .black,
            .blue,
            .green,
            .red,
            .white,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .blue: return "BLUE"
        case .green: return "GREEN"
        case .red: return "RED"
        case .white: return "WHITE"
        case .yellow: return "YELLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitleOutlineColor(rawValue: rawValue) ?? DvbSubtitleOutlineColor.sdkUnknown(rawValue)
    }
}

/// Specifies the color of the shadow cast by the captions.
/// All burn-in and DVB-Sub font settings must match.
public enum DvbSubtitleShadowColor {
    case black
    case `none`
    case white
    case sdkUnknown(String)
}

extension DvbSubtitleShadowColor : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitleShadowColor] {
        return [
            .black,
            .none,
            .white,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .black: return "BLACK"
        case .none: return "NONE"
        case .white: return "WHITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitleShadowColor(rawValue: rawValue) ?? DvbSubtitleShadowColor.sdkUnknown(rawValue)
    }
}

/// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
public enum DvbSubtitleTeletextSpacing {
    case fixedGrid
    case proportional
    case sdkUnknown(String)
}

extension DvbSubtitleTeletextSpacing : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitleTeletextSpacing] {
        return [
            .fixedGrid,
            .proportional,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fixedGrid: return "FIXED_GRID"
        case .proportional: return "PROPORTIONAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitleTeletextSpacing(rawValue: rawValue) ?? DvbSubtitleTeletextSpacing.sdkUnknown(rawValue)
    }
}

/// Specify whether your DVB subtitles are standard or for hearing impaired. Choose hearing impaired if your subtitles include audio descriptions and dialogue. Choose standard if your subtitles include only dialogue.
public enum DvbSubtitlingType {
    case hearingImpaired
    case standard
    case sdkUnknown(String)
}

extension DvbSubtitlingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbSubtitlingType] {
        return [
            .hearingImpaired,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .standard: return "STANDARD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbSubtitlingType(rawValue: rawValue) ?? DvbSubtitlingType.sdkUnknown(rawValue)
    }
}

extension DvbTdtSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tdtInterval = "tdtInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if tdtInterval != 0 {
            try encodeContainer.encode(tdtInterval, forKey: .tdtInterval)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tdtIntervalDecoded = try containerValues.decode(Int.self, forKey: .tdtInterval)
        tdtInterval = tdtIntervalDecoded
    }
}

extension DvbTdtSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DvbTdtSettings(tdtInterval: \(String(describing: tdtInterval)))"}
}

/// Use these settings to insert a DVB Time and Date Table (TDT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
public struct DvbTdtSettings: Equatable {
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let tdtInterval: Int

    public init (
        tdtInterval: Int = 0
    )
    {
        self.tdtInterval = tdtInterval
    }
}

/// Specify how MediaConvert handles the display definition segment (DDS). Keep the default, None (NONE), to exclude the DDS from this set of captions. Choose No display window (NO_DISPLAY_WINDOW) to have MediaConvert include the DDS but not include display window data. In this case, MediaConvert writes that information to the page composition segment (PCS) instead. Choose Specify (SPECIFIED) to have MediaConvert set up the display window based on the values that you specify in related job settings. For video resolutions that are 576 pixels or smaller in height, MediaConvert doesn't include the DDS, regardless of the value you choose for DDS handling (ddsHandling). In this case, it doesn't write the display window data to the PCS either. Related settings: Use the settings DDS x-coordinate (ddsXCoordinate) and DDS y-coordinate (ddsYCoordinate) to specify the offset between the top left corner of the display window and the top left corner of the video frame. All burn-in and DVB-Sub font settings must match.
public enum DvbddsHandling {
    case `none`
    case noDisplayWindow
    case specified
    case sdkUnknown(String)
}

extension DvbddsHandling : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbddsHandling] {
        return [
            .none,
            .noDisplayWindow,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .noDisplayWindow: return "NO_DISPLAY_WINDOW"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbddsHandling(rawValue: rawValue) ?? DvbddsHandling.sdkUnknown(rawValue)
    }
}

/// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
public enum Eac3AtmosBitstreamMode {
    case completeMain
    case sdkUnknown(String)
}

extension Eac3AtmosBitstreamMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosBitstreamMode] {
        return [
            .completeMain,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .completeMain: return "COMPLETE_MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosBitstreamMode(rawValue: rawValue) ?? Eac3AtmosBitstreamMode.sdkUnknown(rawValue)
    }
}

/// The coding mode for Dolby Digital Plus JOC (Atmos) is always 9.1.6 (CODING_MODE_9_1_6).
public enum Eac3AtmosCodingMode {
    case codingMode916
    case sdkUnknown(String)
}

extension Eac3AtmosCodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosCodingMode] {
        return [
            .codingMode916,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode916: return "CODING_MODE_9_1_6"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosCodingMode(rawValue: rawValue) ?? Eac3AtmosCodingMode.sdkUnknown(rawValue)
    }
}

/// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
public enum Eac3AtmosDialogueIntelligence {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Eac3AtmosDialogueIntelligence : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosDialogueIntelligence] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosDialogueIntelligence(rawValue: rawValue) ?? Eac3AtmosDialogueIntelligence.sdkUnknown(rawValue)
    }
}

/// Specify the absolute peak level for a signal with dynamic range compression.
public enum Eac3AtmosDynamicRangeCompressionLine {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3AtmosDynamicRangeCompressionLine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosDynamicRangeCompressionLine] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosDynamicRangeCompressionLine(rawValue: rawValue) ?? Eac3AtmosDynamicRangeCompressionLine.sdkUnknown(rawValue)
    }
}

/// Specify how the service limits the audio dynamic range when compressing the audio.
public enum Eac3AtmosDynamicRangeCompressionRf {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3AtmosDynamicRangeCompressionRf : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosDynamicRangeCompressionRf] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosDynamicRangeCompressionRf(rawValue: rawValue) ?? Eac3AtmosDynamicRangeCompressionRf.sdkUnknown(rawValue)
    }
}

/// Choose how the service meters the loudness of your audio.
public enum Eac3AtmosMeteringMode {
    case ituBs17701
    case ituBs17702
    case ituBs17703
    case ituBs17704
    case leqA
    case sdkUnknown(String)
}

extension Eac3AtmosMeteringMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosMeteringMode] {
        return [
            .ituBs17701,
            .ituBs17702,
            .ituBs17703,
            .ituBs17704,
            .leqA,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ituBs17701: return "ITU_BS_1770_1"
        case .ituBs17702: return "ITU_BS_1770_2"
        case .ituBs17703: return "ITU_BS_1770_3"
        case .ituBs17704: return "ITU_BS_1770_4"
        case .leqA: return "LEQ_A"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosMeteringMode(rawValue: rawValue) ?? Eac3AtmosMeteringMode.sdkUnknown(rawValue)
    }
}

extension Eac3AtmosSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialogueIntelligence = "dialogueIntelligence"
        case dynamicRangeCompressionLine = "dynamicRangeCompressionLine"
        case dynamicRangeCompressionRf = "dynamicRangeCompressionRf"
        case loRoCenterMixLevel = "loRoCenterMixLevel"
        case loRoSurroundMixLevel = "loRoSurroundMixLevel"
        case ltRtCenterMixLevel = "ltRtCenterMixLevel"
        case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
        case meteringMode = "meteringMode"
        case sampleRate = "sampleRate"
        case speechThreshold = "speechThreshold"
        case stereoDownmix = "stereoDownmix"
        case surroundExMode = "surroundExMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialogueIntelligence = dialogueIntelligence {
            try encodeContainer.encode(dialogueIntelligence.rawValue, forKey: .dialogueIntelligence)
        }
        if let dynamicRangeCompressionLine = dynamicRangeCompressionLine {
            try encodeContainer.encode(dynamicRangeCompressionLine.rawValue, forKey: .dynamicRangeCompressionLine)
        }
        if let dynamicRangeCompressionRf = dynamicRangeCompressionRf {
            try encodeContainer.encode(dynamicRangeCompressionRf.rawValue, forKey: .dynamicRangeCompressionRf)
        }
        if loRoCenterMixLevel != 0.0 {
            try encodeContainer.encode(loRoCenterMixLevel, forKey: .loRoCenterMixLevel)
        }
        if loRoSurroundMixLevel != 0.0 {
            try encodeContainer.encode(loRoSurroundMixLevel, forKey: .loRoSurroundMixLevel)
        }
        if ltRtCenterMixLevel != 0.0 {
            try encodeContainer.encode(ltRtCenterMixLevel, forKey: .ltRtCenterMixLevel)
        }
        if ltRtSurroundMixLevel != 0.0 {
            try encodeContainer.encode(ltRtSurroundMixLevel, forKey: .ltRtSurroundMixLevel)
        }
        if let meteringMode = meteringMode {
            try encodeContainer.encode(meteringMode.rawValue, forKey: .meteringMode)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if speechThreshold != 0 {
            try encodeContainer.encode(speechThreshold, forKey: .speechThreshold)
        }
        if let stereoDownmix = stereoDownmix {
            try encodeContainer.encode(stereoDownmix.rawValue, forKey: .stereoDownmix)
        }
        if let surroundExMode = surroundExMode {
            try encodeContainer.encode(surroundExMode.rawValue, forKey: .surroundExMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosBitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialogueIntelligenceDecoded = try containerValues.decodeIfPresent(Eac3AtmosDialogueIntelligence.self, forKey: .dialogueIntelligence)
        dialogueIntelligence = dialogueIntelligenceDecoded
        let dynamicRangeCompressionLineDecoded = try containerValues.decodeIfPresent(Eac3AtmosDynamicRangeCompressionLine.self, forKey: .dynamicRangeCompressionLine)
        dynamicRangeCompressionLine = dynamicRangeCompressionLineDecoded
        let dynamicRangeCompressionRfDecoded = try containerValues.decodeIfPresent(Eac3AtmosDynamicRangeCompressionRf.self, forKey: .dynamicRangeCompressionRf)
        dynamicRangeCompressionRf = dynamicRangeCompressionRfDecoded
        let loRoCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoCenterMixLevel)
        loRoCenterMixLevel = loRoCenterMixLevelDecoded
        let loRoSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoSurroundMixLevel)
        loRoSurroundMixLevel = loRoSurroundMixLevelDecoded
        let ltRtCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtCenterMixLevel)
        ltRtCenterMixLevel = ltRtCenterMixLevelDecoded
        let ltRtSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtSurroundMixLevel)
        ltRtSurroundMixLevel = ltRtSurroundMixLevelDecoded
        let meteringModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosMeteringMode.self, forKey: .meteringMode)
        meteringMode = meteringModeDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let speechThresholdDecoded = try containerValues.decode(Int.self, forKey: .speechThreshold)
        speechThreshold = speechThresholdDecoded
        let stereoDownmixDecoded = try containerValues.decodeIfPresent(Eac3AtmosStereoDownmix.self, forKey: .stereoDownmix)
        stereoDownmix = stereoDownmixDecoded
        let surroundExModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosSurroundExMode.self, forKey: .surroundExMode)
        surroundExMode = surroundExModeDecoded
    }
}

extension Eac3AtmosSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Eac3AtmosSettings(bitrate: \(String(describing: bitrate)), bitstreamMode: \(String(describing: bitstreamMode)), codingMode: \(String(describing: codingMode)), dialogueIntelligence: \(String(describing: dialogueIntelligence)), dynamicRangeCompressionLine: \(String(describing: dynamicRangeCompressionLine)), dynamicRangeCompressionRf: \(String(describing: dynamicRangeCompressionRf)), loRoCenterMixLevel: \(String(describing: loRoCenterMixLevel)), loRoSurroundMixLevel: \(String(describing: loRoSurroundMixLevel)), ltRtCenterMixLevel: \(String(describing: ltRtCenterMixLevel)), ltRtSurroundMixLevel: \(String(describing: ltRtSurroundMixLevel)), meteringMode: \(String(describing: meteringMode)), sampleRate: \(String(describing: sampleRate)), speechThreshold: \(String(describing: speechThreshold)), stereoDownmix: \(String(describing: stereoDownmix)), surroundExMode: \(String(describing: surroundExMode)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3_ATMOS.
public struct Eac3AtmosSettings: Equatable {
    /// Specify the average bitrate in bits per second.
    /// Valid values: 384k, 448k, 640k, 768k
    public let bitrate: Int
    /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public let bitstreamMode: Eac3AtmosBitstreamMode?
    /// The coding mode for Dolby Digital Plus JOC (Atmos) is always 9.1.6 (CODING_MODE_9_1_6).
    public let codingMode: Eac3AtmosCodingMode?
    /// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
    public let dialogueIntelligence: Eac3AtmosDialogueIntelligence?
    /// Specify the absolute peak level for a signal with dynamic range compression.
    public let dynamicRangeCompressionLine: Eac3AtmosDynamicRangeCompressionLine?
    /// Specify how the service limits the audio dynamic range when compressing the audio.
    public let dynamicRangeCompressionRf: Eac3AtmosDynamicRangeCompressionRf?
    /// Specify a value for the following Dolby Atmos setting: Left only/Right only center mix
    /// (Lo/Ro center). MediaConvert uses this value for downmixing. How the service uses this
    /// value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix).
    /// Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0.
    public let loRoCenterMixLevel: Double
    /// Specify a value for the following Dolby Atmos setting: Left only/Right only (Lo/Ro surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel.
    public let loRoSurroundMixLevel: Double
    /// Specify a value for the following Dolby Atmos setting: Left total/Right total center mix (Lt/Rt center). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0.
    public let ltRtCenterMixLevel: Double
    /// Specify a value for the following Dolby Atmos setting: Left total/Right total surround mix (Lt/Rt surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel.
    public let ltRtSurroundMixLevel: Double
    /// Choose how the service meters the loudness of your audio.
    public let meteringMode: Eac3AtmosMeteringMode?
    /// This value is always 48000. It represents the sample rate in Hz.
    public let sampleRate: Int
    /// Specify the percentage of audio content that must be speech before the encoder uses the measured speech loudness as the overall program loudness.
    public let speechThreshold: Int
    /// Choose how the service does stereo downmixing.
    public let stereoDownmix: Eac3AtmosStereoDownmix?
    /// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
    public let surroundExMode: Eac3AtmosSurroundExMode?

    public init (
        bitrate: Int = 0,
        bitstreamMode: Eac3AtmosBitstreamMode? = nil,
        codingMode: Eac3AtmosCodingMode? = nil,
        dialogueIntelligence: Eac3AtmosDialogueIntelligence? = nil,
        dynamicRangeCompressionLine: Eac3AtmosDynamicRangeCompressionLine? = nil,
        dynamicRangeCompressionRf: Eac3AtmosDynamicRangeCompressionRf? = nil,
        loRoCenterMixLevel: Double = 0.0,
        loRoSurroundMixLevel: Double = 0.0,
        ltRtCenterMixLevel: Double = 0.0,
        ltRtSurroundMixLevel: Double = 0.0,
        meteringMode: Eac3AtmosMeteringMode? = nil,
        sampleRate: Int = 0,
        speechThreshold: Int = 0,
        stereoDownmix: Eac3AtmosStereoDownmix? = nil,
        surroundExMode: Eac3AtmosSurroundExMode? = nil
    )
    {
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dialogueIntelligence = dialogueIntelligence
        self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
        self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
        self.loRoCenterMixLevel = loRoCenterMixLevel
        self.loRoSurroundMixLevel = loRoSurroundMixLevel
        self.ltRtCenterMixLevel = ltRtCenterMixLevel
        self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
        self.meteringMode = meteringMode
        self.sampleRate = sampleRate
        self.speechThreshold = speechThreshold
        self.stereoDownmix = stereoDownmix
        self.surroundExMode = surroundExMode
    }
}

/// Choose how the service does stereo downmixing.
public enum Eac3AtmosStereoDownmix {
    case dpl2
    case notIndicated
    case stereo
    case surround
    case sdkUnknown(String)
}

extension Eac3AtmosStereoDownmix : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosStereoDownmix] {
        return [
            .dpl2,
            .notIndicated,
            .stereo,
            .surround,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dpl2: return "DPL2"
        case .notIndicated: return "NOT_INDICATED"
        case .stereo: return "STEREO"
        case .surround: return "SURROUND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosStereoDownmix(rawValue: rawValue) ?? Eac3AtmosStereoDownmix.sdkUnknown(rawValue)
    }
}

/// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
public enum Eac3AtmosSurroundExMode {
    case disabled
    case enabled
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3AtmosSurroundExMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AtmosSurroundExMode] {
        return [
            .disabled,
            .enabled,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AtmosSurroundExMode(rawValue: rawValue) ?? Eac3AtmosSurroundExMode.sdkUnknown(rawValue)
    }
}

/// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
public enum Eac3AttenuationControl {
    case attenuate3Db
    case `none`
    case sdkUnknown(String)
}

extension Eac3AttenuationControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3AttenuationControl] {
        return [
            .attenuate3Db,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .attenuate3Db: return "ATTENUATE_3_DB"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3AttenuationControl(rawValue: rawValue) ?? Eac3AttenuationControl.sdkUnknown(rawValue)
    }
}

/// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
public enum Eac3BitstreamMode {
    case commentary
    case completeMain
    case emergency
    case hearingImpaired
    case visuallyImpaired
    case sdkUnknown(String)
}

extension Eac3BitstreamMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3BitstreamMode] {
        return [
            .commentary,
            .completeMain,
            .emergency,
            .hearingImpaired,
            .visuallyImpaired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .commentary: return "COMMENTARY"
        case .completeMain: return "COMPLETE_MAIN"
        case .emergency: return "EMERGENCY"
        case .hearingImpaired: return "HEARING_IMPAIRED"
        case .visuallyImpaired: return "VISUALLY_IMPAIRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3BitstreamMode(rawValue: rawValue) ?? Eac3BitstreamMode.sdkUnknown(rawValue)
    }
}

/// Dolby Digital Plus coding mode. Determines number of channels.
public enum Eac3CodingMode {
    case codingMode10
    case codingMode20
    case codingMode32
    case sdkUnknown(String)
}

extension Eac3CodingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3CodingMode] {
        return [
            .codingMode10,
            .codingMode20,
            .codingMode32,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .codingMode10: return "CODING_MODE_1_0"
        case .codingMode20: return "CODING_MODE_2_0"
        case .codingMode32: return "CODING_MODE_3_2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3CodingMode(rawValue: rawValue) ?? Eac3CodingMode.sdkUnknown(rawValue)
    }
}

/// Activates a DC highpass filter for all input channels.
public enum Eac3DcFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Eac3DcFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DcFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DcFilter(rawValue: rawValue) ?? Eac3DcFilter.sdkUnknown(rawValue)
    }
}

/// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
public enum Eac3DynamicRangeCompressionLine {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3DynamicRangeCompressionLine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DynamicRangeCompressionLine] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DynamicRangeCompressionLine(rawValue: rawValue) ?? Eac3DynamicRangeCompressionLine.sdkUnknown(rawValue)
    }
}

/// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
public enum Eac3DynamicRangeCompressionRf {
    case filmLight
    case filmStandard
    case musicLight
    case musicStandard
    case `none`
    case speech
    case sdkUnknown(String)
}

extension Eac3DynamicRangeCompressionRf : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3DynamicRangeCompressionRf] {
        return [
            .filmLight,
            .filmStandard,
            .musicLight,
            .musicStandard,
            .none,
            .speech,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmLight: return "FILM_LIGHT"
        case .filmStandard: return "FILM_STANDARD"
        case .musicLight: return "MUSIC_LIGHT"
        case .musicStandard: return "MUSIC_STANDARD"
        case .none: return "NONE"
        case .speech: return "SPEECH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3DynamicRangeCompressionRf(rawValue: rawValue) ?? Eac3DynamicRangeCompressionRf.sdkUnknown(rawValue)
    }
}

/// When encoding 3/2 audio, controls whether the LFE channel is enabled
public enum Eac3LfeControl {
    case lfe
    case noLfe
    case sdkUnknown(String)
}

extension Eac3LfeControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3LfeControl] {
        return [
            .lfe,
            .noLfe,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .lfe: return "LFE"
        case .noLfe: return "NO_LFE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3LfeControl(rawValue: rawValue) ?? Eac3LfeControl.sdkUnknown(rawValue)
    }
}

/// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
public enum Eac3LfeFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Eac3LfeFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3LfeFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3LfeFilter(rawValue: rawValue) ?? Eac3LfeFilter.sdkUnknown(rawValue)
    }
}

/// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
public enum Eac3MetadataControl {
    case followInput
    case useConfigured
    case sdkUnknown(String)
}

extension Eac3MetadataControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3MetadataControl] {
        return [
            .followInput,
            .useConfigured,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .followInput: return "FOLLOW_INPUT"
        case .useConfigured: return "USE_CONFIGURED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3MetadataControl(rawValue: rawValue) ?? Eac3MetadataControl.sdkUnknown(rawValue)
    }
}

/// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
public enum Eac3PassthroughControl {
    case noPassthrough
    case whenPossible
    case sdkUnknown(String)
}

extension Eac3PassthroughControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3PassthroughControl] {
        return [
            .noPassthrough,
            .whenPossible,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPassthrough: return "NO_PASSTHROUGH"
        case .whenPossible: return "WHEN_POSSIBLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3PassthroughControl(rawValue: rawValue) ?? Eac3PassthroughControl.sdkUnknown(rawValue)
    }
}

/// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
public enum Eac3PhaseControl {
    case noShift
    case shift90Degrees
    case sdkUnknown(String)
}

extension Eac3PhaseControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3PhaseControl] {
        return [
            .noShift,
            .shift90Degrees,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noShift: return "NO_SHIFT"
        case .shift90Degrees: return "SHIFT_90_DEGREES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3PhaseControl(rawValue: rawValue) ?? Eac3PhaseControl.sdkUnknown(rawValue)
    }
}

extension Eac3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attenuationControl = "attenuationControl"
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dcFilter = "dcFilter"
        case dialnorm = "dialnorm"
        case dynamicRangeCompressionLine = "dynamicRangeCompressionLine"
        case dynamicRangeCompressionRf = "dynamicRangeCompressionRf"
        case lfeControl = "lfeControl"
        case lfeFilter = "lfeFilter"
        case loRoCenterMixLevel = "loRoCenterMixLevel"
        case loRoSurroundMixLevel = "loRoSurroundMixLevel"
        case ltRtCenterMixLevel = "ltRtCenterMixLevel"
        case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
        case metadataControl = "metadataControl"
        case passthroughControl = "passthroughControl"
        case phaseControl = "phaseControl"
        case sampleRate = "sampleRate"
        case stereoDownmix = "stereoDownmix"
        case surroundExMode = "surroundExMode"
        case surroundMode = "surroundMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attenuationControl = attenuationControl {
            try encodeContainer.encode(attenuationControl.rawValue, forKey: .attenuationControl)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dcFilter = dcFilter {
            try encodeContainer.encode(dcFilter.rawValue, forKey: .dcFilter)
        }
        if dialnorm != 0 {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let dynamicRangeCompressionLine = dynamicRangeCompressionLine {
            try encodeContainer.encode(dynamicRangeCompressionLine.rawValue, forKey: .dynamicRangeCompressionLine)
        }
        if let dynamicRangeCompressionRf = dynamicRangeCompressionRf {
            try encodeContainer.encode(dynamicRangeCompressionRf.rawValue, forKey: .dynamicRangeCompressionRf)
        }
        if let lfeControl = lfeControl {
            try encodeContainer.encode(lfeControl.rawValue, forKey: .lfeControl)
        }
        if let lfeFilter = lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if loRoCenterMixLevel != 0.0 {
            try encodeContainer.encode(loRoCenterMixLevel, forKey: .loRoCenterMixLevel)
        }
        if loRoSurroundMixLevel != 0.0 {
            try encodeContainer.encode(loRoSurroundMixLevel, forKey: .loRoSurroundMixLevel)
        }
        if ltRtCenterMixLevel != 0.0 {
            try encodeContainer.encode(ltRtCenterMixLevel, forKey: .ltRtCenterMixLevel)
        }
        if ltRtSurroundMixLevel != 0.0 {
            try encodeContainer.encode(ltRtSurroundMixLevel, forKey: .ltRtSurroundMixLevel)
        }
        if let metadataControl = metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
        if let passthroughControl = passthroughControl {
            try encodeContainer.encode(passthroughControl.rawValue, forKey: .passthroughControl)
        }
        if let phaseControl = phaseControl {
            try encodeContainer.encode(phaseControl.rawValue, forKey: .phaseControl)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let stereoDownmix = stereoDownmix {
            try encodeContainer.encode(stereoDownmix.rawValue, forKey: .stereoDownmix)
        }
        if let surroundExMode = surroundExMode {
            try encodeContainer.encode(surroundExMode.rawValue, forKey: .surroundExMode)
        }
        if let surroundMode = surroundMode {
            try encodeContainer.encode(surroundMode.rawValue, forKey: .surroundMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attenuationControlDecoded = try containerValues.decodeIfPresent(Eac3AttenuationControl.self, forKey: .attenuationControl)
        attenuationControl = attenuationControlDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(Eac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Eac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dcFilterDecoded = try containerValues.decodeIfPresent(Eac3DcFilter.self, forKey: .dcFilter)
        dcFilter = dcFilterDecoded
        let dialnormDecoded = try containerValues.decode(Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let dynamicRangeCompressionLineDecoded = try containerValues.decodeIfPresent(Eac3DynamicRangeCompressionLine.self, forKey: .dynamicRangeCompressionLine)
        dynamicRangeCompressionLine = dynamicRangeCompressionLineDecoded
        let dynamicRangeCompressionRfDecoded = try containerValues.decodeIfPresent(Eac3DynamicRangeCompressionRf.self, forKey: .dynamicRangeCompressionRf)
        dynamicRangeCompressionRf = dynamicRangeCompressionRfDecoded
        let lfeControlDecoded = try containerValues.decodeIfPresent(Eac3LfeControl.self, forKey: .lfeControl)
        lfeControl = lfeControlDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(Eac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let loRoCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoCenterMixLevel)
        loRoCenterMixLevel = loRoCenterMixLevelDecoded
        let loRoSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoSurroundMixLevel)
        loRoSurroundMixLevel = loRoSurroundMixLevelDecoded
        let ltRtCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtCenterMixLevel)
        ltRtCenterMixLevel = ltRtCenterMixLevelDecoded
        let ltRtSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtSurroundMixLevel)
        ltRtSurroundMixLevel = ltRtSurroundMixLevelDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(Eac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
        let passthroughControlDecoded = try containerValues.decodeIfPresent(Eac3PassthroughControl.self, forKey: .passthroughControl)
        passthroughControl = passthroughControlDecoded
        let phaseControlDecoded = try containerValues.decodeIfPresent(Eac3PhaseControl.self, forKey: .phaseControl)
        phaseControl = phaseControlDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let stereoDownmixDecoded = try containerValues.decodeIfPresent(Eac3StereoDownmix.self, forKey: .stereoDownmix)
        stereoDownmix = stereoDownmixDecoded
        let surroundExModeDecoded = try containerValues.decodeIfPresent(Eac3SurroundExMode.self, forKey: .surroundExMode)
        surroundExMode = surroundExModeDecoded
        let surroundModeDecoded = try containerValues.decodeIfPresent(Eac3SurroundMode.self, forKey: .surroundMode)
        surroundMode = surroundModeDecoded
    }
}

extension Eac3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Eac3Settings(attenuationControl: \(String(describing: attenuationControl)), bitrate: \(String(describing: bitrate)), bitstreamMode: \(String(describing: bitstreamMode)), codingMode: \(String(describing: codingMode)), dcFilter: \(String(describing: dcFilter)), dialnorm: \(String(describing: dialnorm)), dynamicRangeCompressionLine: \(String(describing: dynamicRangeCompressionLine)), dynamicRangeCompressionRf: \(String(describing: dynamicRangeCompressionRf)), lfeControl: \(String(describing: lfeControl)), lfeFilter: \(String(describing: lfeFilter)), loRoCenterMixLevel: \(String(describing: loRoCenterMixLevel)), loRoSurroundMixLevel: \(String(describing: loRoSurroundMixLevel)), ltRtCenterMixLevel: \(String(describing: ltRtCenterMixLevel)), ltRtSurroundMixLevel: \(String(describing: ltRtSurroundMixLevel)), metadataControl: \(String(describing: metadataControl)), passthroughControl: \(String(describing: passthroughControl)), phaseControl: \(String(describing: phaseControl)), sampleRate: \(String(describing: sampleRate)), stereoDownmix: \(String(describing: stereoDownmix)), surroundExMode: \(String(describing: surroundExMode)), surroundMode: \(String(describing: surroundMode)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3.
public struct Eac3Settings: Equatable {
    /// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    public let attenuationControl: Eac3AttenuationControl?
    /// Specify the average bitrate in bits per second. Valid bitrates depend on the coding mode.
    public let bitrate: Int
    /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public let bitstreamMode: Eac3BitstreamMode?
    /// Dolby Digital Plus coding mode. Determines number of channels.
    public let codingMode: Eac3CodingMode?
    /// Activates a DC highpass filter for all input channels.
    public let dcFilter: Eac3DcFilter?
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    public let dialnorm: Int
    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public let dynamicRangeCompressionLine: Eac3DynamicRangeCompressionLine?
    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public let dynamicRangeCompressionRf: Eac3DynamicRangeCompressionRf?
    /// When encoding 3/2 audio, controls whether the LFE channel is enabled
    public let lfeControl: Eac3LfeControl?
    /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
    public let lfeFilter: Eac3LfeFilter?
    /// Specify a value for the following Dolby Digital Plus setting: Left only/Right only center mix (Lo/Ro center). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left only/Right only center (loRoCenterMixLevel).
    public let loRoCenterMixLevel: Double
    /// Specify a value for the following Dolby Digital Plus setting: Left only/Right only (Lo/Ro surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left only/Right only surround (loRoSurroundMixLevel).
    public let loRoSurroundMixLevel: Double
    /// Specify a value for the following Dolby Digital Plus setting: Left total/Right total center mix (Lt/Rt center). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left total/Right total center (ltRtCenterMixLevel).
    public let ltRtCenterMixLevel: Double
    /// Specify a value for the following Dolby Digital Plus setting: Left total/Right total surround mix (Lt/Rt surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left total/Right total surround (ltRtSurroundMixLevel).
    public let ltRtSurroundMixLevel: Double
    /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public let metadataControl: Eac3MetadataControl?
    /// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    public let passthroughControl: Eac3PassthroughControl?
    /// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
    public let phaseControl: Eac3PhaseControl?
    /// This value is always 48000. It represents the sample rate in Hz.
    public let sampleRate: Int
    /// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Stereo downmix (Eac3StereoDownmix).
    public let stereoDownmix: Eac3StereoDownmix?
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    public let surroundExMode: Eac3SurroundExMode?
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    public let surroundMode: Eac3SurroundMode?

    public init (
        attenuationControl: Eac3AttenuationControl? = nil,
        bitrate: Int = 0,
        bitstreamMode: Eac3BitstreamMode? = nil,
        codingMode: Eac3CodingMode? = nil,
        dcFilter: Eac3DcFilter? = nil,
        dialnorm: Int = 0,
        dynamicRangeCompressionLine: Eac3DynamicRangeCompressionLine? = nil,
        dynamicRangeCompressionRf: Eac3DynamicRangeCompressionRf? = nil,
        lfeControl: Eac3LfeControl? = nil,
        lfeFilter: Eac3LfeFilter? = nil,
        loRoCenterMixLevel: Double = 0.0,
        loRoSurroundMixLevel: Double = 0.0,
        ltRtCenterMixLevel: Double = 0.0,
        ltRtSurroundMixLevel: Double = 0.0,
        metadataControl: Eac3MetadataControl? = nil,
        passthroughControl: Eac3PassthroughControl? = nil,
        phaseControl: Eac3PhaseControl? = nil,
        sampleRate: Int = 0,
        stereoDownmix: Eac3StereoDownmix? = nil,
        surroundExMode: Eac3SurroundExMode? = nil,
        surroundMode: Eac3SurroundMode? = nil
    )
    {
        self.attenuationControl = attenuationControl
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dcFilter = dcFilter
        self.dialnorm = dialnorm
        self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
        self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
        self.lfeControl = lfeControl
        self.lfeFilter = lfeFilter
        self.loRoCenterMixLevel = loRoCenterMixLevel
        self.loRoSurroundMixLevel = loRoSurroundMixLevel
        self.ltRtCenterMixLevel = ltRtCenterMixLevel
        self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
        self.metadataControl = metadataControl
        self.passthroughControl = passthroughControl
        self.phaseControl = phaseControl
        self.sampleRate = sampleRate
        self.stereoDownmix = stereoDownmix
        self.surroundExMode = surroundExMode
        self.surroundMode = surroundMode
    }
}

/// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Stereo downmix (Eac3StereoDownmix).
public enum Eac3StereoDownmix {
    case dpl2
    case loRo
    case ltRt
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3StereoDownmix : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3StereoDownmix] {
        return [
            .dpl2,
            .loRo,
            .ltRt,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dpl2: return "DPL2"
        case .loRo: return "LO_RO"
        case .ltRt: return "LT_RT"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3StereoDownmix(rawValue: rawValue) ?? Eac3StereoDownmix.sdkUnknown(rawValue)
    }
}

/// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
public enum Eac3SurroundExMode {
    case disabled
    case enabled
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3SurroundExMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3SurroundExMode] {
        return [
            .disabled,
            .enabled,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3SurroundExMode(rawValue: rawValue) ?? Eac3SurroundExMode.sdkUnknown(rawValue)
    }
}

/// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
public enum Eac3SurroundMode {
    case disabled
    case enabled
    case notIndicated
    case sdkUnknown(String)
}

extension Eac3SurroundMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Eac3SurroundMode] {
        return [
            .disabled,
            .enabled,
            .notIndicated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .notIndicated: return "NOT_INDICATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Eac3SurroundMode(rawValue: rawValue) ?? Eac3SurroundMode.sdkUnknown(rawValue)
    }
}

/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
public enum EmbeddedConvert608To708 {
    case disabled
    case upconvert
    case sdkUnknown(String)
}

extension EmbeddedConvert608To708 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EmbeddedConvert608To708] {
        return [
            .disabled,
            .upconvert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .upconvert: return "UPCONVERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EmbeddedConvert608To708(rawValue: rawValue) ?? EmbeddedConvert608To708.sdkUnknown(rawValue)
    }
}

extension EmbeddedDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination608ChannelNumber = "destination608ChannelNumber"
        case destination708ServiceNumber = "destination708ServiceNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if destination608ChannelNumber != 0 {
            try encodeContainer.encode(destination608ChannelNumber, forKey: .destination608ChannelNumber)
        }
        if destination708ServiceNumber != 0 {
            try encodeContainer.encode(destination708ServiceNumber, forKey: .destination708ServiceNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destination608ChannelNumberDecoded = try containerValues.decode(Int.self, forKey: .destination608ChannelNumber)
        destination608ChannelNumber = destination608ChannelNumberDecoded
        let destination708ServiceNumberDecoded = try containerValues.decode(Int.self, forKey: .destination708ServiceNumber)
        destination708ServiceNumber = destination708ServiceNumberDecoded
    }
}

extension EmbeddedDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EmbeddedDestinationSettings(destination608ChannelNumber: \(String(describing: destination608ChannelNumber)), destination708ServiceNumber: \(String(describing: destination708ServiceNumber)))"}
}

/// Settings related to CEA/EIA-608 and CEA/EIA-708 (also called embedded or ancillary) captions. Set up embedded captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/embedded-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to EMBEDDED, EMBEDDED_PLUS_SCTE20, or SCTE20_PLUS_EMBEDDED.
public struct EmbeddedDestinationSettings: Equatable {
    /// Ignore this setting unless your input captions are SCC format and your output captions are embedded in the video stream. Specify a CC number for each captions channel in this output. If you have two channels, choose CC numbers that aren't in the same field. For example, choose 1 and 3. For more information, see https://docs.aws.amazon.com/console/mediaconvert/dual-scc-to-embedded.
    public let destination608ChannelNumber: Int
    /// Ignore this setting unless your input captions are SCC format and you want both 608 and 708 captions embedded in your output stream. Optionally, specify the 708 service number for each output captions channel. Choose a different number for each channel. To use this setting, also set Force 608 to 708 upconvert (Convert608To708) to Upconvert (UPCONVERT) in your input captions selector settings. If you choose to upconvert but don't specify a 708 service number, MediaConvert uses the number that you specify for CC channel number (destination608ChannelNumber) for the 708 service number. For more information, see https://docs.aws.amazon.com/console/mediaconvert/dual-scc-to-embedded.
    public let destination708ServiceNumber: Int

    public init (
        destination608ChannelNumber: Int = 0,
        destination708ServiceNumber: Int = 0
    )
    {
        self.destination608ChannelNumber = destination608ChannelNumber
        self.destination708ServiceNumber = destination708ServiceNumber
    }
}

extension EmbeddedSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case convert608To708 = "convert608To708"
        case source608ChannelNumber = "source608ChannelNumber"
        case source608TrackNumber = "source608TrackNumber"
        case terminateCaptions = "terminateCaptions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if source608ChannelNumber != 0 {
            try encodeContainer.encode(source608ChannelNumber, forKey: .source608ChannelNumber)
        }
        if source608TrackNumber != 0 {
            try encodeContainer.encode(source608TrackNumber, forKey: .source608TrackNumber)
        }
        if let terminateCaptions = terminateCaptions {
            try encodeContainer.encode(terminateCaptions.rawValue, forKey: .terminateCaptions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(EmbeddedConvert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let source608ChannelNumberDecoded = try containerValues.decode(Int.self, forKey: .source608ChannelNumber)
        source608ChannelNumber = source608ChannelNumberDecoded
        let source608TrackNumberDecoded = try containerValues.decode(Int.self, forKey: .source608TrackNumber)
        source608TrackNumber = source608TrackNumberDecoded
        let terminateCaptionsDecoded = try containerValues.decodeIfPresent(EmbeddedTerminateCaptions.self, forKey: .terminateCaptions)
        terminateCaptions = terminateCaptionsDecoded
    }
}

extension EmbeddedSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EmbeddedSourceSettings(convert608To708: \(String(describing: convert608To708)), source608ChannelNumber: \(String(describing: source608ChannelNumber)), source608TrackNumber: \(String(describing: source608TrackNumber)), terminateCaptions: \(String(describing: terminateCaptions)))"}
}

/// Settings for embedded captions Source
public struct EmbeddedSourceSettings: Equatable {
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    public let convert608To708: EmbeddedConvert608To708?
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    public let source608ChannelNumber: Int
    /// Specifies the video track index used for extracting captions. The system only supports one input video track, so this should always be set to '1'.
    public let source608TrackNumber: Int
    /// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
    public let terminateCaptions: EmbeddedTerminateCaptions?

    public init (
        convert608To708: EmbeddedConvert608To708? = nil,
        source608ChannelNumber: Int = 0,
        source608TrackNumber: Int = 0,
        terminateCaptions: EmbeddedTerminateCaptions? = nil
    )
    {
        self.convert608To708 = convert608To708
        self.source608ChannelNumber = source608ChannelNumber
        self.source608TrackNumber = source608TrackNumber
        self.terminateCaptions = terminateCaptions
    }
}

/// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
public enum EmbeddedTerminateCaptions {
    case disabled
    case endOfInput
    case sdkUnknown(String)
}

extension EmbeddedTerminateCaptions : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EmbeddedTerminateCaptions] {
        return [
            .disabled,
            .endOfInput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .endOfInput: return "END_OF_INPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EmbeddedTerminateCaptions(rawValue: rawValue) ?? EmbeddedTerminateCaptions.sdkUnknown(rawValue)
    }
}

extension Endpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case url = "url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}

extension Endpoint: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Endpoint(url: \(String(describing: url)))"}
}

/// Describes an account-specific API endpoint.
public struct Endpoint: Equatable {
    /// URL of endpoint
    public let url: String?

    public init (
        url: String? = nil
    )
    {
        self.url = url
    }
}

extension EsamManifestConfirmConditionNotification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mccXml = "mccXml"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mccXml = mccXml {
            try encodeContainer.encode(mccXml, forKey: .mccXml)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mccXmlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mccXml)
        mccXml = mccXmlDecoded
    }
}

extension EsamManifestConfirmConditionNotification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EsamManifestConfirmConditionNotification(mccXml: \(String(describing: mccXml)))"}
}

/// ESAM ManifestConfirmConditionNotification defined by OC-SP-ESAM-API-I03-131025.
public struct EsamManifestConfirmConditionNotification: Equatable {
    /// Provide your ESAM ManifestConfirmConditionNotification XML document inside your JSON job settings. Form the XML document as per OC-SP-ESAM-API-I03-131025. The transcoder will use the Manifest Conditioning instructions in the message that you supply.
    public let mccXml: String?

    public init (
        mccXml: String? = nil
    )
    {
        self.mccXml = mccXml
    }
}

extension EsamSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case manifestConfirmConditionNotification = "manifestConfirmConditionNotification"
        case responseSignalPreroll = "responseSignalPreroll"
        case signalProcessingNotification = "signalProcessingNotification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestConfirmConditionNotification = manifestConfirmConditionNotification {
            try encodeContainer.encode(manifestConfirmConditionNotification, forKey: .manifestConfirmConditionNotification)
        }
        if responseSignalPreroll != 0 {
            try encodeContainer.encode(responseSignalPreroll, forKey: .responseSignalPreroll)
        }
        if let signalProcessingNotification = signalProcessingNotification {
            try encodeContainer.encode(signalProcessingNotification, forKey: .signalProcessingNotification)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestConfirmConditionNotificationDecoded = try containerValues.decodeIfPresent(EsamManifestConfirmConditionNotification.self, forKey: .manifestConfirmConditionNotification)
        manifestConfirmConditionNotification = manifestConfirmConditionNotificationDecoded
        let responseSignalPrerollDecoded = try containerValues.decode(Int.self, forKey: .responseSignalPreroll)
        responseSignalPreroll = responseSignalPrerollDecoded
        let signalProcessingNotificationDecoded = try containerValues.decodeIfPresent(EsamSignalProcessingNotification.self, forKey: .signalProcessingNotification)
        signalProcessingNotification = signalProcessingNotificationDecoded
    }
}

extension EsamSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EsamSettings(manifestConfirmConditionNotification: \(String(describing: manifestConfirmConditionNotification)), responseSignalPreroll: \(String(describing: responseSignalPreroll)), signalProcessingNotification: \(String(describing: signalProcessingNotification)))"}
}

/// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
public struct EsamSettings: Equatable {
    /// Specifies an ESAM ManifestConfirmConditionNotification XML as per OC-SP-ESAM-API-I03-131025. The transcoder uses the manifest conditioning instructions that you provide in the setting MCC XML (mccXml).
    public let manifestConfirmConditionNotification: EsamManifestConfirmConditionNotification?
    /// Specifies the stream distance, in milliseconds, between the SCTE 35 messages that the transcoder places and the splice points that they refer to. If the time between the start of the asset and the SCTE-35 message is less than this value, then the transcoder places the SCTE-35 marker at the beginning of the stream.
    public let responseSignalPreroll: Int
    /// Specifies an ESAM SignalProcessingNotification XML as per OC-SP-ESAM-API-I03-131025. The transcoder uses the signal processing instructions that you provide in the setting SCC XML (sccXml).
    public let signalProcessingNotification: EsamSignalProcessingNotification?

    public init (
        manifestConfirmConditionNotification: EsamManifestConfirmConditionNotification? = nil,
        responseSignalPreroll: Int = 0,
        signalProcessingNotification: EsamSignalProcessingNotification? = nil
    )
    {
        self.manifestConfirmConditionNotification = manifestConfirmConditionNotification
        self.responseSignalPreroll = responseSignalPreroll
        self.signalProcessingNotification = signalProcessingNotification
    }
}

extension EsamSignalProcessingNotification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sccXml = "sccXml"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sccXml = sccXml {
            try encodeContainer.encode(sccXml, forKey: .sccXml)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sccXmlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sccXml)
        sccXml = sccXmlDecoded
    }
}

extension EsamSignalProcessingNotification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EsamSignalProcessingNotification(sccXml: \(String(describing: sccXml)))"}
}

/// ESAM SignalProcessingNotification data defined by OC-SP-ESAM-API-I03-131025.
public struct EsamSignalProcessingNotification: Equatable {
    /// Provide your ESAM SignalProcessingNotification XML document inside your JSON job settings. Form the XML document as per OC-SP-ESAM-API-I03-131025. The transcoder will use the signal processing instructions in the message that you supply. Provide your ESAM SignalProcessingNotification XML document inside your JSON job settings. For your MPEG2-TS file outputs, if you want the service to place SCTE-35 markers at the insertion points you specify in the XML document, you must also enable SCTE-35 ESAM (scte35Esam). Note that you can either specify an ESAM XML document or enable SCTE-35 passthrough. You can't do both.
    public let sccXml: String?

    public init (
        sccXml: String? = nil
    )
    {
        self.sccXml = sccXml
    }
}

/// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
public enum F4vMoovPlacement {
    case normal
    case progressiveDownload
    case sdkUnknown(String)
}

extension F4vMoovPlacement : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [F4vMoovPlacement] {
        return [
            .normal,
            .progressiveDownload,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .normal: return "NORMAL"
        case .progressiveDownload: return "PROGRESSIVE_DOWNLOAD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = F4vMoovPlacement(rawValue: rawValue) ?? F4vMoovPlacement.sdkUnknown(rawValue)
    }
}

extension F4vSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case moovPlacement = "moovPlacement"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let moovPlacement = moovPlacement {
            try encodeContainer.encode(moovPlacement.rawValue, forKey: .moovPlacement)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let moovPlacementDecoded = try containerValues.decodeIfPresent(F4vMoovPlacement.self, forKey: .moovPlacement)
        moovPlacement = moovPlacementDecoded
    }
}

extension F4vSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "F4vSettings(moovPlacement: \(String(describing: moovPlacement)))"}
}

/// Settings for F4v container
public struct F4vSettings: Equatable {
    /// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
    public let moovPlacement: F4vMoovPlacement?

    public init (
        moovPlacement: F4vMoovPlacement? = nil
    )
    {
        self.moovPlacement = moovPlacement
    }
}

extension FileGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination = "destination"
        case destinationSettings = "destinationSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
    }
}

extension FileGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FileGroupSettings(destination: \(String(describing: destination)), destinationSettings: \(String(describing: destinationSettings)))"}
}

/// Settings related to your File output group. MediaConvert uses this group of settings to generate a single standalone file, rather than a streaming package. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to FILE_GROUP_SETTINGS.
public struct FileGroupSettings: Equatable {
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?

    public init (
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil
    )
    {
        self.destination = destination
        self.destinationSettings = destinationSettings
    }
}

/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
public enum FileSourceConvert608To708 {
    case disabled
    case upconvert
    case sdkUnknown(String)
}

extension FileSourceConvert608To708 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FileSourceConvert608To708] {
        return [
            .disabled,
            .upconvert,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .upconvert: return "UPCONVERT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FileSourceConvert608To708(rawValue: rawValue) ?? FileSourceConvert608To708.sdkUnknown(rawValue)
    }
}

extension FileSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case convert608To708 = "convert608To708"
        case framerate = "framerate"
        case sourceFile = "sourceFile"
        case timeDelta = "timeDelta"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if let framerate = framerate {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if let sourceFile = sourceFile {
            try encodeContainer.encode(sourceFile, forKey: .sourceFile)
        }
        if timeDelta != 0 {
            try encodeContainer.encode(timeDelta, forKey: .timeDelta)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(FileSourceConvert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let framerateDecoded = try containerValues.decodeIfPresent(CaptionSourceFramerate.self, forKey: .framerate)
        framerate = framerateDecoded
        let sourceFileDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceFile)
        sourceFile = sourceFileDecoded
        let timeDeltaDecoded = try containerValues.decode(Int.self, forKey: .timeDelta)
        timeDelta = timeDeltaDecoded
    }
}

extension FileSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FileSourceSettings(convert608To708: \(String(describing: convert608To708)), framerate: \(String(describing: framerate)), sourceFile: \(String(describing: sourceFile)), timeDelta: \(String(describing: timeDelta)))"}
}

/// If your input captions are SCC, SMI, SRT, STL, TTML, WebVTT, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
public struct FileSourceSettings: Equatable {
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    public let convert608To708: FileSourceConvert608To708?
    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction, using the settings Framerate numerator (framerateNumerator) and Framerate denominator (framerateDenominator). For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    public let framerate: CaptionSourceFramerate?
    /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', and 'vtt'.
    public let sourceFile: String?
    /// Specifies a time delta in seconds to offset the captions from the source file.
    public let timeDelta: Int

    public init (
        convert608To708: FileSourceConvert608To708? = nil,
        framerate: CaptionSourceFramerate? = nil,
        sourceFile: String? = nil,
        timeDelta: Int = 0
    )
    {
        self.convert608To708 = convert608To708
        self.framerate = framerate
        self.sourceFile = sourceFile
        self.timeDelta = timeDelta
    }
}

/// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset.
public enum FontScript {
    case automatic
    case hans
    case hant
    case sdkUnknown(String)
}

extension FontScript : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FontScript] {
        return [
            .automatic,
            .hans,
            .hant,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .automatic: return "AUTOMATIC"
        case .hans: return "HANS"
        case .hant: return "HANT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FontScript(rawValue: rawValue) ?? FontScript.sdkUnknown(rawValue)
    }
}

extension ForbiddenException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ForbiddenException(message: \(String(describing: message)))"}
}

extension ForbiddenException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You don't have permissions for this action with the credentials you sent.
public struct ForbiddenException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ForbiddenExceptionBody: Equatable {
    public let message: String?
}

extension ForbiddenExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FrameCaptureSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case maxCaptures = "maxCaptures"
        case quality = "quality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if maxCaptures != 0 {
            try encodeContainer.encode(maxCaptures, forKey: .maxCaptures)
        }
        if quality != 0 {
            try encodeContainer.encode(quality, forKey: .quality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let maxCapturesDecoded = try containerValues.decode(Int.self, forKey: .maxCaptures)
        maxCaptures = maxCapturesDecoded
        let qualityDecoded = try containerValues.decode(Int.self, forKey: .quality)
        quality = qualityDecoded
    }
}

extension FrameCaptureSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FrameCaptureSettings(framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), maxCaptures: \(String(describing: maxCaptures)), quality: \(String(describing: quality)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value FRAME_CAPTURE.
public struct FrameCaptureSettings: Equatable {
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.n.jpg where n is the 0-based sequence number of each Capture.
    public let framerateDenominator: Int
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.NNNNNNN.jpg where N is the 0-based frame sequence number zero padded to 7 decimal places.
    public let framerateNumerator: Int
    /// Maximum number of captures (encoded jpg output files).
    public let maxCaptures: Int
    /// JPEG Quality - a higher value equals higher quality.
    public let quality: Int

    public init (
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        maxCaptures: Int = 0,
        quality: Int = 0
    )
    {
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.maxCaptures = maxCaptures
        self.quality = quality
    }
}

extension GetJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetJobInput(id: \(String(describing: id)))"}
}

extension GetJobInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetJobInputHeadersMiddleware: Middleware {
    public let id: String = "GetJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetJobInput>,
                  next: H) -> Swift.Result<OperationOutput<GetJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetJobInput>
    public typealias MOutput = OperationOutput<GetJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetJobOutputError>
}

public struct GetJobInputQueryItemMiddleware: Middleware {
    public let id: String = "GetJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetJobInput>,
                  next: H) -> Swift.Result<OperationOutput<GetJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetJobInput>
    public typealias MOutput = OperationOutput<GetJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetJobOutputError>
}

public struct GetJobInput: Equatable {
    /// the job ID of the job.
    public let id: String?

    public init (
        id: String? = nil
    )
    {
        self.id = id
    }
}

struct GetJobInputBody: Equatable {
}

extension GetJobInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetJobOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetJobOutputResponse(job: \(String(describing: job)))"}
}

extension GetJobOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetJobOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.job = output.job
        } else {
            self.job = nil
        }
    }
}

public struct GetJobOutputResponse: Equatable {
    /// Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public let job: Job?

    public init (
        job: Job? = nil
    )
    {
        self.job = job
    }
}

struct GetJobOutputResponseBody: Equatable {
    public let job: Job?
}

extension GetJobOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case job = "job"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDecoded = try containerValues.decodeIfPresent(Job.self, forKey: .job)
        job = jobDecoded
    }
}

extension GetJobTemplateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetJobTemplateInput(name: \(String(describing: name)))"}
}

extension GetJobTemplateInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetJobTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "GetJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<GetJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetJobTemplateInput>
    public typealias MOutput = OperationOutput<GetJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetJobTemplateOutputError>
}

public struct GetJobTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "GetJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<GetJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetJobTemplateInput>
    public typealias MOutput = OperationOutput<GetJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetJobTemplateOutputError>
}

public struct GetJobTemplateInput: Equatable {
    /// The name of the job template.
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct GetJobTemplateInputBody: Equatable {
}

extension GetJobTemplateInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetJobTemplateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobTemplateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobTemplateOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobTemplateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetJobTemplateOutputResponse(jobTemplate: \(String(describing: jobTemplate)))"}
}

extension GetJobTemplateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetJobTemplateOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.jobTemplate = output.jobTemplate
        } else {
            self.jobTemplate = nil
        }
    }
}

public struct GetJobTemplateOutputResponse: Equatable {
    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public let jobTemplate: JobTemplate?

    public init (
        jobTemplate: JobTemplate? = nil
    )
    {
        self.jobTemplate = jobTemplate
    }
}

struct GetJobTemplateOutputResponseBody: Equatable {
    public let jobTemplate: JobTemplate?
}

extension GetJobTemplateOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobTemplate = "jobTemplate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplateDecoded = try containerValues.decodeIfPresent(JobTemplate.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
    }
}

extension GetPresetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetPresetInput(name: \(String(describing: name)))"}
}

extension GetPresetInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetPresetInputHeadersMiddleware: Middleware {
    public let id: String = "GetPresetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetPresetInput>,
                  next: H) -> Swift.Result<OperationOutput<GetPresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetPresetInput>
    public typealias MOutput = OperationOutput<GetPresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetPresetOutputError>
}

public struct GetPresetInputQueryItemMiddleware: Middleware {
    public let id: String = "GetPresetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetPresetInput>,
                  next: H) -> Swift.Result<OperationOutput<GetPresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetPresetInput>
    public typealias MOutput = OperationOutput<GetPresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetPresetOutputError>
}

public struct GetPresetInput: Equatable {
    /// The name of the preset.
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct GetPresetInputBody: Equatable {
}

extension GetPresetInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetPresetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPresetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPresetOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPresetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetPresetOutputResponse(preset: \(String(describing: preset)))"}
}

extension GetPresetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetPresetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.preset = output.preset
        } else {
            self.preset = nil
        }
    }
}

public struct GetPresetOutputResponse: Equatable {
    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public let preset: Preset?

    public init (
        preset: Preset? = nil
    )
    {
        self.preset = preset
    }
}

struct GetPresetOutputResponseBody: Equatable {
    public let preset: Preset?
}

extension GetPresetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case preset = "preset"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let presetDecoded = try containerValues.decodeIfPresent(Preset.self, forKey: .preset)
        preset = presetDecoded
    }
}

extension GetQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueueInput(name: \(String(describing: name)))"}
}

extension GetQueueInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetQueueInputHeadersMiddleware: Middleware {
    public let id: String = "GetQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueInput>
    public typealias MOutput = OperationOutput<GetQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueOutputError>
}

public struct GetQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "GetQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueueInput>
    public typealias MOutput = OperationOutput<GetQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueueOutputError>
}

public struct GetQueueInput: Equatable {
    /// The name of the queue that you want information about.
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct GetQueueInputBody: Equatable {
}

extension GetQueueInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetQueueOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueueOutputResponse(queue: \(String(describing: queue)))"}
}

extension GetQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetQueueOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queue = output.queue
        } else {
            self.queue = nil
        }
    }
}

public struct GetQueueOutputResponse: Equatable {
    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public let queue: Queue?

    public init (
        queue: Queue? = nil
    )
    {
        self.queue = queue
    }
}

struct GetQueueOutputResponseBody: Equatable {
    public let queue: Queue?
}

extension GetQueueOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queue = "queue"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueDecoded = try containerValues.decodeIfPresent(Queue.self, forKey: .queue)
        queue = queueDecoded
    }
}

/// Keep the default value, Auto (AUTO), for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set H264AdaptiveQuantization to a value other than Auto (AUTO). Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization (H264AdaptiveQuantization) to Off (OFF). Related settings: The value that you choose here applies to the following settings: H264FlickerAdaptiveQuantization, H264SpatialAdaptiveQuantization, and H264TemporalAdaptiveQuantization.
public enum H264AdaptiveQuantization {
    case auto
    case high
    case higher
    case low
    case max
    case medium
    case off
    case sdkUnknown(String)
}

extension H264AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264AdaptiveQuantization] {
        return [
            .auto,
            .high,
            .higher,
            .low,
            .max,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .high: return "HIGH"
        case .higher: return "HIGHER"
        case .low: return "LOW"
        case .max: return "MAX"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264AdaptiveQuantization(rawValue: rawValue) ?? H264AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto (AUTO).
public enum H264CodecLevel {
    case auto
    case level1
    case level11
    case level12
    case level13
    case level2
    case level21
    case level22
    case level3
    case level31
    case level32
    case level4
    case level41
    case level42
    case level5
    case level51
    case level52
    case sdkUnknown(String)
}

extension H264CodecLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264CodecLevel] {
        return [
            .auto,
            .level1,
            .level11,
            .level12,
            .level13,
            .level2,
            .level21,
            .level22,
            .level3,
            .level31,
            .level32,
            .level4,
            .level41,
            .level42,
            .level5,
            .level51,
            .level52,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .level1: return "LEVEL_1"
        case .level11: return "LEVEL_1_1"
        case .level12: return "LEVEL_1_2"
        case .level13: return "LEVEL_1_3"
        case .level2: return "LEVEL_2"
        case .level21: return "LEVEL_2_1"
        case .level22: return "LEVEL_2_2"
        case .level3: return "LEVEL_3"
        case .level31: return "LEVEL_3_1"
        case .level32: return "LEVEL_3_2"
        case .level4: return "LEVEL_4"
        case .level41: return "LEVEL_4_1"
        case .level42: return "LEVEL_4_2"
        case .level5: return "LEVEL_5"
        case .level51: return "LEVEL_5_1"
        case .level52: return "LEVEL_5_2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264CodecLevel(rawValue: rawValue) ?? H264CodecLevel.sdkUnknown(rawValue)
    }
}

/// H.264 Profile. High 4:2:2 and 10-bit profiles are only available with the AVC-I License.
public enum H264CodecProfile {
    case baseline
    case high
    case high10bit
    case high422
    case high42210bit
    case main
    case sdkUnknown(String)
}

extension H264CodecProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264CodecProfile] {
        return [
            .baseline,
            .high,
            .high10bit,
            .high422,
            .high42210bit,
            .main,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .baseline: return "BASELINE"
        case .high: return "HIGH"
        case .high10bit: return "HIGH_10BIT"
        case .high422: return "HIGH_422"
        case .high42210bit: return "HIGH_422_10BIT"
        case .main: return "MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264CodecProfile(rawValue: rawValue) ?? H264CodecProfile.sdkUnknown(rawValue)
    }
}

/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
public enum H264DynamicSubGop {
    case adaptive
    case `static`
    case sdkUnknown(String)
}

extension H264DynamicSubGop : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264DynamicSubGop] {
        return [
            .adaptive,
            .static,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adaptive: return "ADAPTIVE"
        case .static: return "STATIC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264DynamicSubGop(rawValue: rawValue) ?? H264DynamicSubGop.sdkUnknown(rawValue)
    }
}

/// Entropy encoding mode. Use CABAC (must be in Main or High profile) or CAVLC.
public enum H264EntropyEncoding {
    case cabac
    case cavlc
    case sdkUnknown(String)
}

extension H264EntropyEncoding : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264EntropyEncoding] {
        return [
            .cabac,
            .cavlc,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cabac: return "CABAC"
        case .cavlc: return "CAVLC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264EntropyEncoding(rawValue: rawValue) ?? H264EntropyEncoding.sdkUnknown(rawValue)
    }
}

/// Keep the default value, PAFF, to have MediaConvert use PAFF encoding for interlaced outputs. Choose Force field (FORCE_FIELD) to disable PAFF encoding and create separate interlaced fields.
public enum H264FieldEncoding {
    case forceField
    case paff
    case sdkUnknown(String)
}

extension H264FieldEncoding : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264FieldEncoding] {
        return [
            .forceField,
            .paff,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .forceField: return "FORCE_FIELD"
        case .paff: return "PAFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264FieldEncoding(rawValue: rawValue) ?? H264FieldEncoding.sdkUnknown(rawValue)
    }
}

/// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264FlickerAdaptiveQuantization is Disabled (DISABLED). Change this value to Enabled (ENABLED) to reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. To manually enable or disable H264FlickerAdaptiveQuantization, you must set Adaptive quantization (H264AdaptiveQuantization) to a value other than AUTO.
public enum H264FlickerAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264FlickerAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264FlickerAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264FlickerAdaptiveQuantization(rawValue: rawValue) ?? H264FlickerAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum H264FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension H264FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264FramerateControl(rawValue: rawValue) ?? H264FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum H264FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension H264FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264FramerateConversionAlgorithm(rawValue: rawValue) ?? H264FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// If enable, use reference B frames for GOP structures that have B frames > 1.
public enum H264GopBReference {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264GopBReference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264GopBReference] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264GopBReference(rawValue: rawValue) ?? H264GopBReference.sdkUnknown(rawValue)
    }
}

/// Indicates if the GOP Size in H264 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
public enum H264GopSizeUnits {
    case frames
    case seconds
    case sdkUnknown(String)
}

extension H264GopSizeUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264GopSizeUnits] {
        return [
            .frames,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .frames: return "FRAMES"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264GopSizeUnits(rawValue: rawValue) ?? H264GopSizeUnits.sdkUnknown(rawValue)
    }
}

/// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
public enum H264InterlaceMode {
    case bottomField
    case followBottomField
    case followTopField
    case progressive
    case topField
    case sdkUnknown(String)
}

extension H264InterlaceMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264InterlaceMode] {
        return [
            .bottomField,
            .followBottomField,
            .followTopField,
            .progressive,
            .topField,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bottomField: return "BOTTOM_FIELD"
        case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
        case .followTopField: return "FOLLOW_TOP_FIELD"
        case .progressive: return "PROGRESSIVE"
        case .topField: return "TOP_FIELD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264InterlaceMode(rawValue: rawValue) ?? H264InterlaceMode.sdkUnknown(rawValue)
    }
}

/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
public enum H264ParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension H264ParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264ParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264ParControl(rawValue: rawValue) ?? H264ParControl.sdkUnknown(rawValue)
    }
}

/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
public enum H264QualityTuningLevel {
    case multiPassHq
    case singlePass
    case singlePassHq
    case sdkUnknown(String)
}

extension H264QualityTuningLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264QualityTuningLevel] {
        return [
            .multiPassHq,
            .singlePass,
            .singlePassHq,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiPassHq: return "MULTI_PASS_HQ"
        case .singlePass: return "SINGLE_PASS"
        case .singlePassHq: return "SINGLE_PASS_HQ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264QualityTuningLevel(rawValue: rawValue) ?? H264QualityTuningLevel.sdkUnknown(rawValue)
    }
}

extension H264QvbrSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxAverageBitrate = "maxAverageBitrate"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case qvbrQualityLevelFineTune = "qvbrQualityLevelFineTune"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxAverageBitrate != 0 {
            try encodeContainer.encode(maxAverageBitrate, forKey: .maxAverageBitrate)
        }
        if qvbrQualityLevel != 0 {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if qvbrQualityLevelFineTune != 0.0 {
            try encodeContainer.encode(qvbrQualityLevelFineTune, forKey: .qvbrQualityLevelFineTune)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxAverageBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxAverageBitrate)
        maxAverageBitrate = maxAverageBitrateDecoded
        let qvbrQualityLevelDecoded = try containerValues.decode(Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let qvbrQualityLevelFineTuneDecoded = try containerValues.decode(Double.self, forKey: .qvbrQualityLevelFineTune)
        qvbrQualityLevelFineTune = qvbrQualityLevelFineTuneDecoded
    }
}

extension H264QvbrSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H264QvbrSettings(maxAverageBitrate: \(String(describing: maxAverageBitrate)), qvbrQualityLevel: \(String(describing: qvbrQualityLevel)), qvbrQualityLevelFineTune: \(String(describing: qvbrQualityLevelFineTune)))"}
}

/// Settings for quality-defined variable bitrate encoding with the H.264 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
public struct H264QvbrSettings: Equatable {
    /// Use this setting only when Rate control mode is QVBR and Quality tuning level is Multi-pass HQ. For Max average bitrate values suited to the complexity of your input video, the service limits the average bitrate of the video part of this output to the value that you choose. That is, the total size of the video element is less than or equal to the value you set multiplied by the number of seconds of encoded output.
    public let maxAverageBitrate: Int
    /// Required when you use QVBR rate control mode. That is, when you specify qvbrSettings within h264Settings. Specify the general target quality level for this output, from 1 to 10. Use higher numbers for greater quality. Level 10 results in nearly lossless compression. The quality level for most broadcast-quality transcodes is between 6 and 9. Optionally, to specify a value between whole numbers, also provide a value for the setting qvbrQualityLevelFineTune. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33.
    public let qvbrQualityLevel: Int
    /// Optional. Specify a value here to set the QVBR quality to a level that is between whole numbers. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33. MediaConvert rounds your QVBR quality level to the nearest third of a whole number. For example, if you set qvbrQualityLevel to 7 and you set qvbrQualityLevelFineTune to .25, your actual QVBR quality level is 7.33.
    public let qvbrQualityLevelFineTune: Double

    public init (
        maxAverageBitrate: Int = 0,
        qvbrQualityLevel: Int = 0,
        qvbrQualityLevelFineTune: Double = 0.0
    )
    {
        self.maxAverageBitrate = maxAverageBitrate
        self.qvbrQualityLevel = qvbrQualityLevel
        self.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune
    }
}

/// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
public enum H264RateControlMode {
    case cbr
    case qvbr
    case vbr
    case sdkUnknown(String)
}

extension H264RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264RateControlMode] {
        return [
            .cbr,
            .qvbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .qvbr: return "QVBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264RateControlMode(rawValue: rawValue) ?? H264RateControlMode.sdkUnknown(rawValue)
    }
}

/// Places a PPS header on each encoded picture, even if repeated.
public enum H264RepeatPps {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264RepeatPps : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264RepeatPps] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264RepeatPps(rawValue: rawValue) ?? H264RepeatPps.sdkUnknown(rawValue)
    }
}

/// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
public enum H264ScanTypeConversionMode {
    case interlaced
    case interlacedOptimize
    case sdkUnknown(String)
}

extension H264ScanTypeConversionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264ScanTypeConversionMode] {
        return [
            .interlaced,
            .interlacedOptimize,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264ScanTypeConversionMode(rawValue: rawValue) ?? H264ScanTypeConversionMode.sdkUnknown(rawValue)
    }
}

/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
public enum H264SceneChangeDetect {
    case disabled
    case enabled
    case transitionDetection
    case sdkUnknown(String)
}

extension H264SceneChangeDetect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264SceneChangeDetect] {
        return [
            .disabled,
            .enabled,
            .transitionDetection,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .transitionDetection: return "TRANSITION_DETECTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264SceneChangeDetect(rawValue: rawValue) ?? H264SceneChangeDetect.sdkUnknown(rawValue)
    }
}

extension H264Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case bitrate = "bitrate"
        case codecLevel = "codecLevel"
        case codecProfile = "codecProfile"
        case dynamicSubGop = "dynamicSubGop"
        case entropyEncoding = "entropyEncoding"
        case fieldEncoding = "fieldEncoding"
        case flickerAdaptiveQuantization = "flickerAdaptiveQuantization"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopBReference = "gopBReference"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case hrdBufferInitialFillPercentage = "hrdBufferInitialFillPercentage"
        case hrdBufferSize = "hrdBufferSize"
        case interlaceMode = "interlaceMode"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case numberReferenceFrames = "numberReferenceFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case qvbrSettings = "qvbrSettings"
        case rateControlMode = "rateControlMode"
        case repeatPps = "repeatPps"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case slowPal = "slowPal"
        case softness = "softness"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
        case syntax = "syntax"
        case telecine = "telecine"
        case temporalAdaptiveQuantization = "temporalAdaptiveQuantization"
        case unregisteredSeiTimecode = "unregisteredSeiTimecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codecLevel = codecLevel {
            try encodeContainer.encode(codecLevel.rawValue, forKey: .codecLevel)
        }
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let dynamicSubGop = dynamicSubGop {
            try encodeContainer.encode(dynamicSubGop.rawValue, forKey: .dynamicSubGop)
        }
        if let entropyEncoding = entropyEncoding {
            try encodeContainer.encode(entropyEncoding.rawValue, forKey: .entropyEncoding)
        }
        if let fieldEncoding = fieldEncoding {
            try encodeContainer.encode(fieldEncoding.rawValue, forKey: .fieldEncoding)
        }
        if let flickerAdaptiveQuantization = flickerAdaptiveQuantization {
            try encodeContainer.encode(flickerAdaptiveQuantization.rawValue, forKey: .flickerAdaptiveQuantization)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopBReference = gopBReference {
            try encodeContainer.encode(gopBReference.rawValue, forKey: .gopBReference)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if hrdBufferInitialFillPercentage != 0 {
            try encodeContainer.encode(hrdBufferInitialFillPercentage, forKey: .hrdBufferInitialFillPercentage)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if minIInterval != 0 {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if numberBFramesBetweenReferenceFrames != 0 {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if numberReferenceFrames != 0 {
            try encodeContainer.encode(numberReferenceFrames, forKey: .numberReferenceFrames)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let qvbrSettings = qvbrSettings {
            try encodeContainer.encode(qvbrSettings, forKey: .qvbrSettings)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let repeatPps = repeatPps {
            try encodeContainer.encode(repeatPps.rawValue, forKey: .repeatPps)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if softness != 0 {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAdaptiveQuantization = spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
        if let syntax = syntax {
            try encodeContainer.encode(syntax.rawValue, forKey: .syntax)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
        if let temporalAdaptiveQuantization = temporalAdaptiveQuantization {
            try encodeContainer.encode(temporalAdaptiveQuantization.rawValue, forKey: .temporalAdaptiveQuantization)
        }
        if let unregisteredSeiTimecode = unregisteredSeiTimecode {
            try encodeContainer.encode(unregisteredSeiTimecode.rawValue, forKey: .unregisteredSeiTimecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codecLevelDecoded = try containerValues.decodeIfPresent(H264CodecLevel.self, forKey: .codecLevel)
        codecLevel = codecLevelDecoded
        let codecProfileDecoded = try containerValues.decodeIfPresent(H264CodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let dynamicSubGopDecoded = try containerValues.decodeIfPresent(H264DynamicSubGop.self, forKey: .dynamicSubGop)
        dynamicSubGop = dynamicSubGopDecoded
        let entropyEncodingDecoded = try containerValues.decodeIfPresent(H264EntropyEncoding.self, forKey: .entropyEncoding)
        entropyEncoding = entropyEncodingDecoded
        let fieldEncodingDecoded = try containerValues.decodeIfPresent(H264FieldEncoding.self, forKey: .fieldEncoding)
        fieldEncoding = fieldEncodingDecoded
        let flickerAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264FlickerAdaptiveQuantization.self, forKey: .flickerAdaptiveQuantization)
        flickerAdaptiveQuantization = flickerAdaptiveQuantizationDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(H264FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(H264FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopBReferenceDecoded = try containerValues.decodeIfPresent(H264GopBReference.self, forKey: .gopBReference)
        gopBReference = gopBReferenceDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(H264GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let hrdBufferInitialFillPercentageDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferInitialFillPercentage)
        hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentageDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(H264InterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decode(Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let numberReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberReferenceFrames)
        numberReferenceFrames = numberReferenceFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(H264ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(H264QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let qvbrSettingsDecoded = try containerValues.decodeIfPresent(H264QvbrSettings.self, forKey: .qvbrSettings)
        qvbrSettings = qvbrSettingsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(H264RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let repeatPpsDecoded = try containerValues.decodeIfPresent(H264RepeatPps.self, forKey: .repeatPps)
        repeatPps = repeatPpsDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(H264ScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(H264SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(H264SlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let softnessDecoded = try containerValues.decode(Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
        let syntaxDecoded = try containerValues.decodeIfPresent(H264Syntax.self, forKey: .syntax)
        syntax = syntaxDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(H264Telecine.self, forKey: .telecine)
        telecine = telecineDecoded
        let temporalAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264TemporalAdaptiveQuantization.self, forKey: .temporalAdaptiveQuantization)
        temporalAdaptiveQuantization = temporalAdaptiveQuantizationDecoded
        let unregisteredSeiTimecodeDecoded = try containerValues.decodeIfPresent(H264UnregisteredSeiTimecode.self, forKey: .unregisteredSeiTimecode)
        unregisteredSeiTimecode = unregisteredSeiTimecodeDecoded
    }
}

extension H264Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H264Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), bitrate: \(String(describing: bitrate)), codecLevel: \(String(describing: codecLevel)), codecProfile: \(String(describing: codecProfile)), dynamicSubGop: \(String(describing: dynamicSubGop)), entropyEncoding: \(String(describing: entropyEncoding)), fieldEncoding: \(String(describing: fieldEncoding)), flickerAdaptiveQuantization: \(String(describing: flickerAdaptiveQuantization)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopBReference: \(String(describing: gopBReference)), gopClosedCadence: \(String(describing: gopClosedCadence)), gopSize: \(String(describing: gopSize)), gopSizeUnits: \(String(describing: gopSizeUnits)), hrdBufferInitialFillPercentage: \(String(describing: hrdBufferInitialFillPercentage)), hrdBufferSize: \(String(describing: hrdBufferSize)), interlaceMode: \(String(describing: interlaceMode)), maxBitrate: \(String(describing: maxBitrate)), minIInterval: \(String(describing: minIInterval)), numberBFramesBetweenReferenceFrames: \(String(describing: numberBFramesBetweenReferenceFrames)), numberReferenceFrames: \(String(describing: numberReferenceFrames)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), qualityTuningLevel: \(String(describing: qualityTuningLevel)), qvbrSettings: \(String(describing: qvbrSettings)), rateControlMode: \(String(describing: rateControlMode)), repeatPps: \(String(describing: repeatPps)), scanTypeConversionMode: \(String(describing: scanTypeConversionMode)), sceneChangeDetect: \(String(describing: sceneChangeDetect)), slices: \(String(describing: slices)), slowPal: \(String(describing: slowPal)), softness: \(String(describing: softness)), spatialAdaptiveQuantization: \(String(describing: spatialAdaptiveQuantization)), syntax: \(String(describing: syntax)), telecine: \(String(describing: telecine)), temporalAdaptiveQuantization: \(String(describing: temporalAdaptiveQuantization)), unregisteredSeiTimecode: \(String(describing: unregisteredSeiTimecode)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value H_264.
public struct H264Settings: Equatable {
    /// Keep the default value, Auto (AUTO), for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set H264AdaptiveQuantization to a value other than Auto (AUTO). Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization (H264AdaptiveQuantization) to Off (OFF). Related settings: The value that you choose here applies to the following settings: H264FlickerAdaptiveQuantization, H264SpatialAdaptiveQuantization, and H264TemporalAdaptiveQuantization.
    public let adaptiveQuantization: H264AdaptiveQuantization?
    /// Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.
    public let bitrate: Int
    /// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto (AUTO).
    public let codecLevel: H264CodecLevel?
    /// H.264 Profile. High 4:2:2 and 10-bit profiles are only available with the AVC-I License.
    public let codecProfile: H264CodecProfile?
    /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
    public let dynamicSubGop: H264DynamicSubGop?
    /// Entropy encoding mode. Use CABAC (must be in Main or High profile) or CAVLC.
    public let entropyEncoding: H264EntropyEncoding?
    /// Keep the default value, PAFF, to have MediaConvert use PAFF encoding for interlaced outputs. Choose Force field (FORCE_FIELD) to disable PAFF encoding and create separate interlaced fields.
    public let fieldEncoding: H264FieldEncoding?
    /// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264FlickerAdaptiveQuantization is Disabled (DISABLED). Change this value to Enabled (ENABLED) to reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. To manually enable or disable H264FlickerAdaptiveQuantization, you must set Adaptive quantization (H264AdaptiveQuantization) to a value other than AUTO.
    public let flickerAdaptiveQuantization: H264FlickerAdaptiveQuantization?
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: H264FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: H264FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// If enable, use reference B frames for GOP structures that have B frames > 1.
    public let gopBReference: H264GopBReference?
    /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
    public let gopClosedCadence: Int
    /// GOP Length (keyframe interval) in frames or seconds. Must be greater than zero.
    public let gopSize: Double
    /// Indicates if the GOP Size in H264 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
    public let gopSizeUnits: H264GopSizeUnits?
    /// Percentage of the buffer that should initially be filled (HRD buffer model).
    public let hrdBufferInitialFillPercentage: Int
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    public let hrdBufferSize: Int
    /// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public let interlaceMode: H264InterlaceMode?
    /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.
    public let maxBitrate: Int
    /// Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. This setting is only used when Scene Change Detect is enabled. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
    public let minIInterval: Int
    /// Number of B-frames between reference frames.
    public let numberBFramesBetweenReferenceFrames: Int
    /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
    public let numberReferenceFrames: Int
    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public let parControl: H264ParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public let qualityTuningLevel: H264QualityTuningLevel?
    /// Settings for quality-defined variable bitrate encoding with the H.264 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
    public let qvbrSettings: H264QvbrSettings?
    /// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
    public let rateControlMode: H264RateControlMode?
    /// Places a PPS header on each encoded picture, even if repeated.
    public let repeatPps: H264RepeatPps?
    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
    public let scanTypeConversionMode: H264ScanTypeConversionMode?
    /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
    public let sceneChangeDetect: H264SceneChangeDetect?
    /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
    public let slices: Int
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    public let slowPal: H264SlowPal?
    /// Ignore this setting unless you need to comply with a specification that requires a specific value. If you don't have a specification requirement, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness (sharpness) or by enabling a noise reducer filter (noiseReducerFilter). The Softness (softness) setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
    public let softness: Int
    /// Only use this setting when you change the default value, Auto (AUTO), for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264SpatialAdaptiveQuantization is Enabled (ENABLED). Keep this default value to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to set H264SpatialAdaptiveQuantization to Disabled (DISABLED). Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (H264AdaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher. To manually enable or disable H264SpatialAdaptiveQuantization, you must set Adaptive quantization (H264AdaptiveQuantization) to a value other than AUTO.
    public let spatialAdaptiveQuantization: H264SpatialAdaptiveQuantization?
    /// Produces a bitstream compliant with SMPTE RP-2027.
    public let syntax: H264Syntax?
    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine (HARD) produces a 29.97i output. Soft telecine (SOFT) produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public let telecine: H264Telecine?
    /// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264TemporalAdaptiveQuantization is Enabled (ENABLED). Keep this default value to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to set H264TemporalAdaptiveQuantization to Disabled (DISABLED). Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization). To manually enable or disable H264TemporalAdaptiveQuantization, you must set Adaptive quantization (H264AdaptiveQuantization) to a value other than AUTO.
    public let temporalAdaptiveQuantization: H264TemporalAdaptiveQuantization?
    /// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
    public let unregisteredSeiTimecode: H264UnregisteredSeiTimecode?

    public init (
        adaptiveQuantization: H264AdaptiveQuantization? = nil,
        bitrate: Int = 0,
        codecLevel: H264CodecLevel? = nil,
        codecProfile: H264CodecProfile? = nil,
        dynamicSubGop: H264DynamicSubGop? = nil,
        entropyEncoding: H264EntropyEncoding? = nil,
        fieldEncoding: H264FieldEncoding? = nil,
        flickerAdaptiveQuantization: H264FlickerAdaptiveQuantization? = nil,
        framerateControl: H264FramerateControl? = nil,
        framerateConversionAlgorithm: H264FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopBReference: H264GopBReference? = nil,
        gopClosedCadence: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: H264GopSizeUnits? = nil,
        hrdBufferInitialFillPercentage: Int = 0,
        hrdBufferSize: Int = 0,
        interlaceMode: H264InterlaceMode? = nil,
        maxBitrate: Int = 0,
        minIInterval: Int = 0,
        numberBFramesBetweenReferenceFrames: Int = 0,
        numberReferenceFrames: Int = 0,
        parControl: H264ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        qualityTuningLevel: H264QualityTuningLevel? = nil,
        qvbrSettings: H264QvbrSettings? = nil,
        rateControlMode: H264RateControlMode? = nil,
        repeatPps: H264RepeatPps? = nil,
        scanTypeConversionMode: H264ScanTypeConversionMode? = nil,
        sceneChangeDetect: H264SceneChangeDetect? = nil,
        slices: Int = 0,
        slowPal: H264SlowPal? = nil,
        softness: Int = 0,
        spatialAdaptiveQuantization: H264SpatialAdaptiveQuantization? = nil,
        syntax: H264Syntax? = nil,
        telecine: H264Telecine? = nil,
        temporalAdaptiveQuantization: H264TemporalAdaptiveQuantization? = nil,
        unregisteredSeiTimecode: H264UnregisteredSeiTimecode? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.bitrate = bitrate
        self.codecLevel = codecLevel
        self.codecProfile = codecProfile
        self.dynamicSubGop = dynamicSubGop
        self.entropyEncoding = entropyEncoding
        self.fieldEncoding = fieldEncoding
        self.flickerAdaptiveQuantization = flickerAdaptiveQuantization
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopBReference = gopBReference
        self.gopClosedCadence = gopClosedCadence
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage
        self.hrdBufferSize = hrdBufferSize
        self.interlaceMode = interlaceMode
        self.maxBitrate = maxBitrate
        self.minIInterval = minIInterval
        self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
        self.numberReferenceFrames = numberReferenceFrames
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.qualityTuningLevel = qualityTuningLevel
        self.qvbrSettings = qvbrSettings
        self.rateControlMode = rateControlMode
        self.repeatPps = repeatPps
        self.scanTypeConversionMode = scanTypeConversionMode
        self.sceneChangeDetect = sceneChangeDetect
        self.slices = slices
        self.slowPal = slowPal
        self.softness = softness
        self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
        self.syntax = syntax
        self.telecine = telecine
        self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
        self.unregisteredSeiTimecode = unregisteredSeiTimecode
    }
}

/// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
public enum H264SlowPal {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264SlowPal : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264SlowPal] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264SlowPal(rawValue: rawValue) ?? H264SlowPal.sdkUnknown(rawValue)
    }
}

/// Only use this setting when you change the default value, Auto (AUTO), for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264SpatialAdaptiveQuantization is Enabled (ENABLED). Keep this default value to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to set H264SpatialAdaptiveQuantization to Disabled (DISABLED). Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (H264AdaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher. To manually enable or disable H264SpatialAdaptiveQuantization, you must set Adaptive quantization (H264AdaptiveQuantization) to a value other than AUTO.
public enum H264SpatialAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264SpatialAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264SpatialAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264SpatialAdaptiveQuantization(rawValue: rawValue) ?? H264SpatialAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Produces a bitstream compliant with SMPTE RP-2027.
public enum H264Syntax {
    case `default`
    case rp2027
    case sdkUnknown(String)
}

extension H264Syntax : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264Syntax] {
        return [
            .default,
            .rp2027,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .rp2027: return "RP2027"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264Syntax(rawValue: rawValue) ?? H264Syntax.sdkUnknown(rawValue)
    }
}

/// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine (HARD) produces a 29.97i output. Soft telecine (SOFT) produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
public enum H264Telecine {
    case hard
    case `none`
    case soft
    case sdkUnknown(String)
}

extension H264Telecine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264Telecine] {
        return [
            .hard,
            .none,
            .soft,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hard: return "HARD"
        case .none: return "NONE"
        case .soft: return "SOFT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264Telecine(rawValue: rawValue) ?? H264Telecine.sdkUnknown(rawValue)
    }
}

/// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264TemporalAdaptiveQuantization is Enabled (ENABLED). Keep this default value to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to set H264TemporalAdaptiveQuantization to Disabled (DISABLED). Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization). To manually enable or disable H264TemporalAdaptiveQuantization, you must set Adaptive quantization (H264AdaptiveQuantization) to a value other than AUTO.
public enum H264TemporalAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264TemporalAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264TemporalAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264TemporalAdaptiveQuantization(rawValue: rawValue) ?? H264TemporalAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
public enum H264UnregisteredSeiTimecode {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H264UnregisteredSeiTimecode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264UnregisteredSeiTimecode] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264UnregisteredSeiTimecode(rawValue: rawValue) ?? H264UnregisteredSeiTimecode.sdkUnknown(rawValue)
    }
}

/// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
public enum H265AdaptiveQuantization {
    case high
    case higher
    case low
    case max
    case medium
    case off
    case sdkUnknown(String)
}

extension H265AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265AdaptiveQuantization] {
        return [
            .high,
            .higher,
            .low,
            .max,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .higher: return "HIGHER"
        case .low: return "LOW"
        case .max: return "MAX"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265AdaptiveQuantization(rawValue: rawValue) ?? H265AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).
public enum H265AlternateTransferFunctionSei {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265AlternateTransferFunctionSei : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265AlternateTransferFunctionSei] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265AlternateTransferFunctionSei(rawValue: rawValue) ?? H265AlternateTransferFunctionSei.sdkUnknown(rawValue)
    }
}

/// H.265 Level.
public enum H265CodecLevel {
    case auto
    case level1
    case level2
    case level21
    case level3
    case level31
    case level4
    case level41
    case level5
    case level51
    case level52
    case level6
    case level61
    case level62
    case sdkUnknown(String)
}

extension H265CodecLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265CodecLevel] {
        return [
            .auto,
            .level1,
            .level2,
            .level21,
            .level3,
            .level31,
            .level4,
            .level41,
            .level5,
            .level51,
            .level52,
            .level6,
            .level61,
            .level62,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .level1: return "LEVEL_1"
        case .level2: return "LEVEL_2"
        case .level21: return "LEVEL_2_1"
        case .level3: return "LEVEL_3"
        case .level31: return "LEVEL_3_1"
        case .level4: return "LEVEL_4"
        case .level41: return "LEVEL_4_1"
        case .level5: return "LEVEL_5"
        case .level51: return "LEVEL_5_1"
        case .level52: return "LEVEL_5_2"
        case .level6: return "LEVEL_6"
        case .level61: return "LEVEL_6_1"
        case .level62: return "LEVEL_6_2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265CodecLevel(rawValue: rawValue) ?? H265CodecLevel.sdkUnknown(rawValue)
    }
}

/// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
public enum H265CodecProfile {
    case main10High
    case main10Main
    case main42210bitHigh
    case main42210bitMain
    case main4228bitHigh
    case main4228bitMain
    case mainHigh
    case mainMain
    case sdkUnknown(String)
}

extension H265CodecProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265CodecProfile] {
        return [
            .main10High,
            .main10Main,
            .main42210bitHigh,
            .main42210bitMain,
            .main4228bitHigh,
            .main4228bitMain,
            .mainHigh,
            .mainMain,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .main10High: return "MAIN10_HIGH"
        case .main10Main: return "MAIN10_MAIN"
        case .main42210bitHigh: return "MAIN_422_10BIT_HIGH"
        case .main42210bitMain: return "MAIN_422_10BIT_MAIN"
        case .main4228bitHigh: return "MAIN_422_8BIT_HIGH"
        case .main4228bitMain: return "MAIN_422_8BIT_MAIN"
        case .mainHigh: return "MAIN_HIGH"
        case .mainMain: return "MAIN_MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265CodecProfile(rawValue: rawValue) ?? H265CodecProfile.sdkUnknown(rawValue)
    }
}

/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
public enum H265DynamicSubGop {
    case adaptive
    case `static`
    case sdkUnknown(String)
}

extension H265DynamicSubGop : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265DynamicSubGop] {
        return [
            .adaptive,
            .static,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adaptive: return "ADAPTIVE"
        case .static: return "STATIC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265DynamicSubGop(rawValue: rawValue) ?? H265DynamicSubGop.sdkUnknown(rawValue)
    }
}

/// Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off (OFF).
public enum H265FlickerAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265FlickerAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265FlickerAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265FlickerAdaptiveQuantization(rawValue: rawValue) ?? H265FlickerAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum H265FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension H265FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265FramerateControl(rawValue: rawValue) ?? H265FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum H265FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension H265FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265FramerateConversionAlgorithm(rawValue: rawValue) ?? H265FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// If enable, use reference B frames for GOP structures that have B frames > 1.
public enum H265GopBReference {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265GopBReference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265GopBReference] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265GopBReference(rawValue: rawValue) ?? H265GopBReference.sdkUnknown(rawValue)
    }
}

/// Indicates if the GOP Size in H265 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
public enum H265GopSizeUnits {
    case frames
    case seconds
    case sdkUnknown(String)
}

extension H265GopSizeUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265GopSizeUnits] {
        return [
            .frames,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .frames: return "FRAMES"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265GopSizeUnits(rawValue: rawValue) ?? H265GopSizeUnits.sdkUnknown(rawValue)
    }
}

/// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
public enum H265InterlaceMode {
    case bottomField
    case followBottomField
    case followTopField
    case progressive
    case topField
    case sdkUnknown(String)
}

extension H265InterlaceMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265InterlaceMode] {
        return [
            .bottomField,
            .followBottomField,
            .followTopField,
            .progressive,
            .topField,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bottomField: return "BOTTOM_FIELD"
        case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
        case .followTopField: return "FOLLOW_TOP_FIELD"
        case .progressive: return "PROGRESSIVE"
        case .topField: return "TOP_FIELD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265InterlaceMode(rawValue: rawValue) ?? H265InterlaceMode.sdkUnknown(rawValue)
    }
}

/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
public enum H265ParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension H265ParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265ParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265ParControl(rawValue: rawValue) ?? H265ParControl.sdkUnknown(rawValue)
    }
}

/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
public enum H265QualityTuningLevel {
    case multiPassHq
    case singlePass
    case singlePassHq
    case sdkUnknown(String)
}

extension H265QualityTuningLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265QualityTuningLevel] {
        return [
            .multiPassHq,
            .singlePass,
            .singlePassHq,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiPassHq: return "MULTI_PASS_HQ"
        case .singlePass: return "SINGLE_PASS"
        case .singlePassHq: return "SINGLE_PASS_HQ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265QualityTuningLevel(rawValue: rawValue) ?? H265QualityTuningLevel.sdkUnknown(rawValue)
    }
}

extension H265QvbrSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxAverageBitrate = "maxAverageBitrate"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case qvbrQualityLevelFineTune = "qvbrQualityLevelFineTune"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxAverageBitrate != 0 {
            try encodeContainer.encode(maxAverageBitrate, forKey: .maxAverageBitrate)
        }
        if qvbrQualityLevel != 0 {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if qvbrQualityLevelFineTune != 0.0 {
            try encodeContainer.encode(qvbrQualityLevelFineTune, forKey: .qvbrQualityLevelFineTune)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxAverageBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxAverageBitrate)
        maxAverageBitrate = maxAverageBitrateDecoded
        let qvbrQualityLevelDecoded = try containerValues.decode(Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let qvbrQualityLevelFineTuneDecoded = try containerValues.decode(Double.self, forKey: .qvbrQualityLevelFineTune)
        qvbrQualityLevelFineTune = qvbrQualityLevelFineTuneDecoded
    }
}

extension H265QvbrSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H265QvbrSettings(maxAverageBitrate: \(String(describing: maxAverageBitrate)), qvbrQualityLevel: \(String(describing: qvbrQualityLevel)), qvbrQualityLevelFineTune: \(String(describing: qvbrQualityLevelFineTune)))"}
}

/// Settings for quality-defined variable bitrate encoding with the H.265 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
public struct H265QvbrSettings: Equatable {
    /// Use this setting only when Rate control mode is QVBR and Quality tuning level is Multi-pass HQ. For Max average bitrate values suited to the complexity of your input video, the service limits the average bitrate of the video part of this output to the value that you choose. That is, the total size of the video element is less than or equal to the value you set multiplied by the number of seconds of encoded output.
    public let maxAverageBitrate: Int
    /// Required when you use QVBR rate control mode. That is, when you specify qvbrSettings within h265Settings. Specify the general target quality level for this output, from 1 to 10. Use higher numbers for greater quality. Level 10 results in nearly lossless compression. The quality level for most broadcast-quality transcodes is between 6 and 9. Optionally, to specify a value between whole numbers, also provide a value for the setting qvbrQualityLevelFineTune. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33.
    public let qvbrQualityLevel: Int
    /// Optional. Specify a value here to set the QVBR quality to a level that is between whole numbers. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33. MediaConvert rounds your QVBR quality level to the nearest third of a whole number. For example, if you set qvbrQualityLevel to 7 and you set qvbrQualityLevelFineTune to .25, your actual QVBR quality level is 7.33.
    public let qvbrQualityLevelFineTune: Double

    public init (
        maxAverageBitrate: Int = 0,
        qvbrQualityLevel: Int = 0,
        qvbrQualityLevelFineTune: Double = 0.0
    )
    {
        self.maxAverageBitrate = maxAverageBitrate
        self.qvbrQualityLevel = qvbrQualityLevel
        self.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune
    }
}

/// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
public enum H265RateControlMode {
    case cbr
    case qvbr
    case vbr
    case sdkUnknown(String)
}

extension H265RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265RateControlMode] {
        return [
            .cbr,
            .qvbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .qvbr: return "QVBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265RateControlMode(rawValue: rawValue) ?? H265RateControlMode.sdkUnknown(rawValue)
    }
}

/// Specify Sample Adaptive Offset (SAO) filter strength.  Adaptive mode dynamically selects best strength based on content
public enum H265SampleAdaptiveOffsetFilterMode {
    case adaptive
    case `default`
    case off
    case sdkUnknown(String)
}

extension H265SampleAdaptiveOffsetFilterMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265SampleAdaptiveOffsetFilterMode] {
        return [
            .adaptive,
            .default,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adaptive: return "ADAPTIVE"
        case .default: return "DEFAULT"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265SampleAdaptiveOffsetFilterMode(rawValue: rawValue) ?? H265SampleAdaptiveOffsetFilterMode.sdkUnknown(rawValue)
    }
}

/// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
public enum H265ScanTypeConversionMode {
    case interlaced
    case interlacedOptimize
    case sdkUnknown(String)
}

extension H265ScanTypeConversionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265ScanTypeConversionMode] {
        return [
            .interlaced,
            .interlacedOptimize,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265ScanTypeConversionMode(rawValue: rawValue) ?? H265ScanTypeConversionMode.sdkUnknown(rawValue)
    }
}

/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
public enum H265SceneChangeDetect {
    case disabled
    case enabled
    case transitionDetection
    case sdkUnknown(String)
}

extension H265SceneChangeDetect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265SceneChangeDetect] {
        return [
            .disabled,
            .enabled,
            .transitionDetection,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case .transitionDetection: return "TRANSITION_DETECTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265SceneChangeDetect(rawValue: rawValue) ?? H265SceneChangeDetect.sdkUnknown(rawValue)
    }
}

extension H265Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case alternateTransferFunctionSei = "alternateTransferFunctionSei"
        case bitrate = "bitrate"
        case codecLevel = "codecLevel"
        case codecProfile = "codecProfile"
        case dynamicSubGop = "dynamicSubGop"
        case flickerAdaptiveQuantization = "flickerAdaptiveQuantization"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopBReference = "gopBReference"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case hrdBufferInitialFillPercentage = "hrdBufferInitialFillPercentage"
        case hrdBufferSize = "hrdBufferSize"
        case interlaceMode = "interlaceMode"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case numberReferenceFrames = "numberReferenceFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case qvbrSettings = "qvbrSettings"
        case rateControlMode = "rateControlMode"
        case sampleAdaptiveOffsetFilterMode = "sampleAdaptiveOffsetFilterMode"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case slowPal = "slowPal"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
        case telecine = "telecine"
        case temporalAdaptiveQuantization = "temporalAdaptiveQuantization"
        case temporalIds = "temporalIds"
        case tiles = "tiles"
        case unregisteredSeiTimecode = "unregisteredSeiTimecode"
        case writeMp4PackagingType = "writeMp4PackagingType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let alternateTransferFunctionSei = alternateTransferFunctionSei {
            try encodeContainer.encode(alternateTransferFunctionSei.rawValue, forKey: .alternateTransferFunctionSei)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codecLevel = codecLevel {
            try encodeContainer.encode(codecLevel.rawValue, forKey: .codecLevel)
        }
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let dynamicSubGop = dynamicSubGop {
            try encodeContainer.encode(dynamicSubGop.rawValue, forKey: .dynamicSubGop)
        }
        if let flickerAdaptiveQuantization = flickerAdaptiveQuantization {
            try encodeContainer.encode(flickerAdaptiveQuantization.rawValue, forKey: .flickerAdaptiveQuantization)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopBReference = gopBReference {
            try encodeContainer.encode(gopBReference.rawValue, forKey: .gopBReference)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if hrdBufferInitialFillPercentage != 0 {
            try encodeContainer.encode(hrdBufferInitialFillPercentage, forKey: .hrdBufferInitialFillPercentage)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if minIInterval != 0 {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if numberBFramesBetweenReferenceFrames != 0 {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if numberReferenceFrames != 0 {
            try encodeContainer.encode(numberReferenceFrames, forKey: .numberReferenceFrames)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let qvbrSettings = qvbrSettings {
            try encodeContainer.encode(qvbrSettings, forKey: .qvbrSettings)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let sampleAdaptiveOffsetFilterMode = sampleAdaptiveOffsetFilterMode {
            try encodeContainer.encode(sampleAdaptiveOffsetFilterMode.rawValue, forKey: .sampleAdaptiveOffsetFilterMode)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let spatialAdaptiveQuantization = spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
        if let temporalAdaptiveQuantization = temporalAdaptiveQuantization {
            try encodeContainer.encode(temporalAdaptiveQuantization.rawValue, forKey: .temporalAdaptiveQuantization)
        }
        if let temporalIds = temporalIds {
            try encodeContainer.encode(temporalIds.rawValue, forKey: .temporalIds)
        }
        if let tiles = tiles {
            try encodeContainer.encode(tiles.rawValue, forKey: .tiles)
        }
        if let unregisteredSeiTimecode = unregisteredSeiTimecode {
            try encodeContainer.encode(unregisteredSeiTimecode.rawValue, forKey: .unregisteredSeiTimecode)
        }
        if let writeMp4PackagingType = writeMp4PackagingType {
            try encodeContainer.encode(writeMp4PackagingType.rawValue, forKey: .writeMp4PackagingType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H265AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let alternateTransferFunctionSeiDecoded = try containerValues.decodeIfPresent(H265AlternateTransferFunctionSei.self, forKey: .alternateTransferFunctionSei)
        alternateTransferFunctionSei = alternateTransferFunctionSeiDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codecLevelDecoded = try containerValues.decodeIfPresent(H265CodecLevel.self, forKey: .codecLevel)
        codecLevel = codecLevelDecoded
        let codecProfileDecoded = try containerValues.decodeIfPresent(H265CodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let dynamicSubGopDecoded = try containerValues.decodeIfPresent(H265DynamicSubGop.self, forKey: .dynamicSubGop)
        dynamicSubGop = dynamicSubGopDecoded
        let flickerAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H265FlickerAdaptiveQuantization.self, forKey: .flickerAdaptiveQuantization)
        flickerAdaptiveQuantization = flickerAdaptiveQuantizationDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(H265FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(H265FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopBReferenceDecoded = try containerValues.decodeIfPresent(H265GopBReference.self, forKey: .gopBReference)
        gopBReference = gopBReferenceDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(H265GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let hrdBufferInitialFillPercentageDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferInitialFillPercentage)
        hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentageDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(H265InterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decode(Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let numberReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberReferenceFrames)
        numberReferenceFrames = numberReferenceFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(H265ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(H265QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let qvbrSettingsDecoded = try containerValues.decodeIfPresent(H265QvbrSettings.self, forKey: .qvbrSettings)
        qvbrSettings = qvbrSettingsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(H265RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let sampleAdaptiveOffsetFilterModeDecoded = try containerValues.decodeIfPresent(H265SampleAdaptiveOffsetFilterMode.self, forKey: .sampleAdaptiveOffsetFilterMode)
        sampleAdaptiveOffsetFilterMode = sampleAdaptiveOffsetFilterModeDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(H265ScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(H265SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(H265SlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H265SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(H265Telecine.self, forKey: .telecine)
        telecine = telecineDecoded
        let temporalAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H265TemporalAdaptiveQuantization.self, forKey: .temporalAdaptiveQuantization)
        temporalAdaptiveQuantization = temporalAdaptiveQuantizationDecoded
        let temporalIdsDecoded = try containerValues.decodeIfPresent(H265TemporalIds.self, forKey: .temporalIds)
        temporalIds = temporalIdsDecoded
        let tilesDecoded = try containerValues.decodeIfPresent(H265Tiles.self, forKey: .tiles)
        tiles = tilesDecoded
        let unregisteredSeiTimecodeDecoded = try containerValues.decodeIfPresent(H265UnregisteredSeiTimecode.self, forKey: .unregisteredSeiTimecode)
        unregisteredSeiTimecode = unregisteredSeiTimecodeDecoded
        let writeMp4PackagingTypeDecoded = try containerValues.decodeIfPresent(H265WriteMp4PackagingType.self, forKey: .writeMp4PackagingType)
        writeMp4PackagingType = writeMp4PackagingTypeDecoded
    }
}

extension H265Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "H265Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), alternateTransferFunctionSei: \(String(describing: alternateTransferFunctionSei)), bitrate: \(String(describing: bitrate)), codecLevel: \(String(describing: codecLevel)), codecProfile: \(String(describing: codecProfile)), dynamicSubGop: \(String(describing: dynamicSubGop)), flickerAdaptiveQuantization: \(String(describing: flickerAdaptiveQuantization)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopBReference: \(String(describing: gopBReference)), gopClosedCadence: \(String(describing: gopClosedCadence)), gopSize: \(String(describing: gopSize)), gopSizeUnits: \(String(describing: gopSizeUnits)), hrdBufferInitialFillPercentage: \(String(describing: hrdBufferInitialFillPercentage)), hrdBufferSize: \(String(describing: hrdBufferSize)), interlaceMode: \(String(describing: interlaceMode)), maxBitrate: \(String(describing: maxBitrate)), minIInterval: \(String(describing: minIInterval)), numberBFramesBetweenReferenceFrames: \(String(describing: numberBFramesBetweenReferenceFrames)), numberReferenceFrames: \(String(describing: numberReferenceFrames)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), qualityTuningLevel: \(String(describing: qualityTuningLevel)), qvbrSettings: \(String(describing: qvbrSettings)), rateControlMode: \(String(describing: rateControlMode)), sampleAdaptiveOffsetFilterMode: \(String(describing: sampleAdaptiveOffsetFilterMode)), scanTypeConversionMode: \(String(describing: scanTypeConversionMode)), sceneChangeDetect: \(String(describing: sceneChangeDetect)), slices: \(String(describing: slices)), slowPal: \(String(describing: slowPal)), spatialAdaptiveQuantization: \(String(describing: spatialAdaptiveQuantization)), telecine: \(String(describing: telecine)), temporalAdaptiveQuantization: \(String(describing: temporalAdaptiveQuantization)), temporalIds: \(String(describing: temporalIds)), tiles: \(String(describing: tiles)), unregisteredSeiTimecode: \(String(describing: unregisteredSeiTimecode)), writeMp4PackagingType: \(String(describing: writeMp4PackagingType)))"}
}

/// Settings for H265 codec
public struct H265Settings: Equatable {
    /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
    public let adaptiveQuantization: H265AdaptiveQuantization?
    /// Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).
    public let alternateTransferFunctionSei: H265AlternateTransferFunctionSei?
    /// Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.
    public let bitrate: Int
    /// H.265 Level.
    public let codecLevel: H265CodecLevel?
    /// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
    public let codecProfile: H265CodecProfile?
    /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
    public let dynamicSubGop: H265DynamicSubGop?
    /// Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off (OFF).
    public let flickerAdaptiveQuantization: H265FlickerAdaptiveQuantization?
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: H265FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: H265FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// If enable, use reference B frames for GOP structures that have B frames > 1.
    public let gopBReference: H265GopBReference?
    /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
    public let gopClosedCadence: Int
    /// GOP Length (keyframe interval) in frames or seconds. Must be greater than zero.
    public let gopSize: Double
    /// Indicates if the GOP Size in H265 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
    public let gopSizeUnits: H265GopSizeUnits?
    /// Percentage of the buffer that should initially be filled (HRD buffer model).
    public let hrdBufferInitialFillPercentage: Int
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    public let hrdBufferSize: Int
    /// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public let interlaceMode: H265InterlaceMode?
    /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.
    public let maxBitrate: Int
    /// Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. This setting is only used when Scene Change Detect is enabled. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
    public let minIInterval: Int
    /// Number of B-frames between reference frames.
    public let numberBFramesBetweenReferenceFrames: Int
    /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
    public let numberReferenceFrames: Int
    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public let parControl: H265ParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public let qualityTuningLevel: H265QualityTuningLevel?
    /// Settings for quality-defined variable bitrate encoding with the H.265 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
    public let qvbrSettings: H265QvbrSettings?
    /// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
    public let rateControlMode: H265RateControlMode?
    /// Specify Sample Adaptive Offset (SAO) filter strength.  Adaptive mode dynamically selects best strength based on content
    public let sampleAdaptiveOffsetFilterMode: H265SampleAdaptiveOffsetFilterMode?
    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
    public let scanTypeConversionMode: H265ScanTypeConversionMode?
    /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
    public let sceneChangeDetect: H265SceneChangeDetect?
    /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
    public let slices: Int
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    public let slowPal: H265SlowPal?
    /// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public let spatialAdaptiveQuantization: H265SpatialAdaptiveQuantization?
    /// This field applies only if the Streams > Advanced > Framerate (framerate) field  is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer  field (deinterlace_mode) and the Streams > Advanced > Interlaced Mode field (interlace_mode)  to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
    public let telecine: H265Telecine?
    /// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
    public let temporalAdaptiveQuantization: H265TemporalAdaptiveQuantization?
    /// Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.
    public let temporalIds: H265TemporalIds?
    /// Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.
    public let tiles: H265Tiles?
    /// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
    public let unregisteredSeiTimecode: H265UnregisteredSeiTimecode?
    /// If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.
    public let writeMp4PackagingType: H265WriteMp4PackagingType?

    public init (
        adaptiveQuantization: H265AdaptiveQuantization? = nil,
        alternateTransferFunctionSei: H265AlternateTransferFunctionSei? = nil,
        bitrate: Int = 0,
        codecLevel: H265CodecLevel? = nil,
        codecProfile: H265CodecProfile? = nil,
        dynamicSubGop: H265DynamicSubGop? = nil,
        flickerAdaptiveQuantization: H265FlickerAdaptiveQuantization? = nil,
        framerateControl: H265FramerateControl? = nil,
        framerateConversionAlgorithm: H265FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopBReference: H265GopBReference? = nil,
        gopClosedCadence: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: H265GopSizeUnits? = nil,
        hrdBufferInitialFillPercentage: Int = 0,
        hrdBufferSize: Int = 0,
        interlaceMode: H265InterlaceMode? = nil,
        maxBitrate: Int = 0,
        minIInterval: Int = 0,
        numberBFramesBetweenReferenceFrames: Int = 0,
        numberReferenceFrames: Int = 0,
        parControl: H265ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        qualityTuningLevel: H265QualityTuningLevel? = nil,
        qvbrSettings: H265QvbrSettings? = nil,
        rateControlMode: H265RateControlMode? = nil,
        sampleAdaptiveOffsetFilterMode: H265SampleAdaptiveOffsetFilterMode? = nil,
        scanTypeConversionMode: H265ScanTypeConversionMode? = nil,
        sceneChangeDetect: H265SceneChangeDetect? = nil,
        slices: Int = 0,
        slowPal: H265SlowPal? = nil,
        spatialAdaptiveQuantization: H265SpatialAdaptiveQuantization? = nil,
        telecine: H265Telecine? = nil,
        temporalAdaptiveQuantization: H265TemporalAdaptiveQuantization? = nil,
        temporalIds: H265TemporalIds? = nil,
        tiles: H265Tiles? = nil,
        unregisteredSeiTimecode: H265UnregisteredSeiTimecode? = nil,
        writeMp4PackagingType: H265WriteMp4PackagingType? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.alternateTransferFunctionSei = alternateTransferFunctionSei
        self.bitrate = bitrate
        self.codecLevel = codecLevel
        self.codecProfile = codecProfile
        self.dynamicSubGop = dynamicSubGop
        self.flickerAdaptiveQuantization = flickerAdaptiveQuantization
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopBReference = gopBReference
        self.gopClosedCadence = gopClosedCadence
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage
        self.hrdBufferSize = hrdBufferSize
        self.interlaceMode = interlaceMode
        self.maxBitrate = maxBitrate
        self.minIInterval = minIInterval
        self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
        self.numberReferenceFrames = numberReferenceFrames
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.qualityTuningLevel = qualityTuningLevel
        self.qvbrSettings = qvbrSettings
        self.rateControlMode = rateControlMode
        self.sampleAdaptiveOffsetFilterMode = sampleAdaptiveOffsetFilterMode
        self.scanTypeConversionMode = scanTypeConversionMode
        self.sceneChangeDetect = sceneChangeDetect
        self.slices = slices
        self.slowPal = slowPal
        self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
        self.telecine = telecine
        self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
        self.temporalIds = temporalIds
        self.tiles = tiles
        self.unregisteredSeiTimecode = unregisteredSeiTimecode
        self.writeMp4PackagingType = writeMp4PackagingType
    }
}

/// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
public enum H265SlowPal {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265SlowPal : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265SlowPal] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265SlowPal(rawValue: rawValue) ?? H265SlowPal.sdkUnknown(rawValue)
    }
}

/// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
public enum H265SpatialAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265SpatialAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265SpatialAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265SpatialAdaptiveQuantization(rawValue: rawValue) ?? H265SpatialAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// This field applies only if the Streams > Advanced > Framerate (framerate) field  is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer  field (deinterlace_mode) and the Streams > Advanced > Interlaced Mode field (interlace_mode)  to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
public enum H265Telecine {
    case hard
    case `none`
    case soft
    case sdkUnknown(String)
}

extension H265Telecine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265Telecine] {
        return [
            .hard,
            .none,
            .soft,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hard: return "HARD"
        case .none: return "NONE"
        case .soft: return "SOFT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265Telecine(rawValue: rawValue) ?? H265Telecine.sdkUnknown(rawValue)
    }
}

/// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
public enum H265TemporalAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265TemporalAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265TemporalAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265TemporalAdaptiveQuantization(rawValue: rawValue) ?? H265TemporalAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.
public enum H265TemporalIds {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265TemporalIds : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265TemporalIds] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265TemporalIds(rawValue: rawValue) ?? H265TemporalIds.sdkUnknown(rawValue)
    }
}

/// Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.
public enum H265Tiles {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265Tiles : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265Tiles] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265Tiles(rawValue: rawValue) ?? H265Tiles.sdkUnknown(rawValue)
    }
}

/// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
public enum H265UnregisteredSeiTimecode {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265UnregisteredSeiTimecode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265UnregisteredSeiTimecode] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265UnregisteredSeiTimecode(rawValue: rawValue) ?? H265UnregisteredSeiTimecode.sdkUnknown(rawValue)
    }
}

/// If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.
public enum H265WriteMp4PackagingType {
    case hev1
    case hvc1
    case sdkUnknown(String)
}

extension H265WriteMp4PackagingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265WriteMp4PackagingType] {
        return [
            .hev1,
            .hvc1,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hev1: return "HEV1"
        case .hvc1: return "HVC1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265WriteMp4PackagingType(rawValue: rawValue) ?? H265WriteMp4PackagingType.sdkUnknown(rawValue)
    }
}

extension Hdr10Metadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bluePrimaryX = "bluePrimaryX"
        case bluePrimaryY = "bluePrimaryY"
        case greenPrimaryX = "greenPrimaryX"
        case greenPrimaryY = "greenPrimaryY"
        case maxContentLightLevel = "maxContentLightLevel"
        case maxFrameAverageLightLevel = "maxFrameAverageLightLevel"
        case maxLuminance = "maxLuminance"
        case minLuminance = "minLuminance"
        case redPrimaryX = "redPrimaryX"
        case redPrimaryY = "redPrimaryY"
        case whitePointX = "whitePointX"
        case whitePointY = "whitePointY"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bluePrimaryX != 0 {
            try encodeContainer.encode(bluePrimaryX, forKey: .bluePrimaryX)
        }
        if bluePrimaryY != 0 {
            try encodeContainer.encode(bluePrimaryY, forKey: .bluePrimaryY)
        }
        if greenPrimaryX != 0 {
            try encodeContainer.encode(greenPrimaryX, forKey: .greenPrimaryX)
        }
        if greenPrimaryY != 0 {
            try encodeContainer.encode(greenPrimaryY, forKey: .greenPrimaryY)
        }
        if maxContentLightLevel != 0 {
            try encodeContainer.encode(maxContentLightLevel, forKey: .maxContentLightLevel)
        }
        if maxFrameAverageLightLevel != 0 {
            try encodeContainer.encode(maxFrameAverageLightLevel, forKey: .maxFrameAverageLightLevel)
        }
        if maxLuminance != 0 {
            try encodeContainer.encode(maxLuminance, forKey: .maxLuminance)
        }
        if minLuminance != 0 {
            try encodeContainer.encode(minLuminance, forKey: .minLuminance)
        }
        if redPrimaryX != 0 {
            try encodeContainer.encode(redPrimaryX, forKey: .redPrimaryX)
        }
        if redPrimaryY != 0 {
            try encodeContainer.encode(redPrimaryY, forKey: .redPrimaryY)
        }
        if whitePointX != 0 {
            try encodeContainer.encode(whitePointX, forKey: .whitePointX)
        }
        if whitePointY != 0 {
            try encodeContainer.encode(whitePointY, forKey: .whitePointY)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bluePrimaryXDecoded = try containerValues.decode(Int.self, forKey: .bluePrimaryX)
        bluePrimaryX = bluePrimaryXDecoded
        let bluePrimaryYDecoded = try containerValues.decode(Int.self, forKey: .bluePrimaryY)
        bluePrimaryY = bluePrimaryYDecoded
        let greenPrimaryXDecoded = try containerValues.decode(Int.self, forKey: .greenPrimaryX)
        greenPrimaryX = greenPrimaryXDecoded
        let greenPrimaryYDecoded = try containerValues.decode(Int.self, forKey: .greenPrimaryY)
        greenPrimaryY = greenPrimaryYDecoded
        let maxContentLightLevelDecoded = try containerValues.decode(Int.self, forKey: .maxContentLightLevel)
        maxContentLightLevel = maxContentLightLevelDecoded
        let maxFrameAverageLightLevelDecoded = try containerValues.decode(Int.self, forKey: .maxFrameAverageLightLevel)
        maxFrameAverageLightLevel = maxFrameAverageLightLevelDecoded
        let maxLuminanceDecoded = try containerValues.decode(Int.self, forKey: .maxLuminance)
        maxLuminance = maxLuminanceDecoded
        let minLuminanceDecoded = try containerValues.decode(Int.self, forKey: .minLuminance)
        minLuminance = minLuminanceDecoded
        let redPrimaryXDecoded = try containerValues.decode(Int.self, forKey: .redPrimaryX)
        redPrimaryX = redPrimaryXDecoded
        let redPrimaryYDecoded = try containerValues.decode(Int.self, forKey: .redPrimaryY)
        redPrimaryY = redPrimaryYDecoded
        let whitePointXDecoded = try containerValues.decode(Int.self, forKey: .whitePointX)
        whitePointX = whitePointXDecoded
        let whitePointYDecoded = try containerValues.decode(Int.self, forKey: .whitePointY)
        whitePointY = whitePointYDecoded
    }
}

extension Hdr10Metadata: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Hdr10Metadata(bluePrimaryX: \(String(describing: bluePrimaryX)), bluePrimaryY: \(String(describing: bluePrimaryY)), greenPrimaryX: \(String(describing: greenPrimaryX)), greenPrimaryY: \(String(describing: greenPrimaryY)), maxContentLightLevel: \(String(describing: maxContentLightLevel)), maxFrameAverageLightLevel: \(String(describing: maxFrameAverageLightLevel)), maxLuminance: \(String(describing: maxLuminance)), minLuminance: \(String(describing: minLuminance)), redPrimaryX: \(String(describing: redPrimaryX)), redPrimaryY: \(String(describing: redPrimaryY)), whitePointX: \(String(describing: whitePointX)), whitePointY: \(String(describing: whitePointY)))"}
}

/// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
public struct Hdr10Metadata: Equatable {
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let bluePrimaryX: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let bluePrimaryY: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let greenPrimaryX: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let greenPrimaryY: Int
    /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter.  This setting doesn't have a default value; you must specify a value that is suitable for the content.
    public let maxContentLightLevel: Int
    /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    public let maxFrameAverageLightLevel: Int
    /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
    public let maxLuminance: Int
    /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
    public let minLuminance: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let redPrimaryX: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let redPrimaryY: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let whitePointX: Int
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    public let whitePointY: Int

    public init (
        bluePrimaryX: Int = 0,
        bluePrimaryY: Int = 0,
        greenPrimaryX: Int = 0,
        greenPrimaryY: Int = 0,
        maxContentLightLevel: Int = 0,
        maxFrameAverageLightLevel: Int = 0,
        maxLuminance: Int = 0,
        minLuminance: Int = 0,
        redPrimaryX: Int = 0,
        redPrimaryY: Int = 0,
        whitePointX: Int = 0,
        whitePointY: Int = 0
    )
    {
        self.bluePrimaryX = bluePrimaryX
        self.bluePrimaryY = bluePrimaryY
        self.greenPrimaryX = greenPrimaryX
        self.greenPrimaryY = greenPrimaryY
        self.maxContentLightLevel = maxContentLightLevel
        self.maxFrameAverageLightLevel = maxFrameAverageLightLevel
        self.maxLuminance = maxLuminance
        self.minLuminance = minLuminance
        self.redPrimaryX = redPrimaryX
        self.redPrimaryY = redPrimaryY
        self.whitePointX = whitePointX
        self.whitePointY = whitePointY
    }
}

public enum HlsAdMarkers {
    case elemental
    case elementalScte35
    case sdkUnknown(String)
}

extension HlsAdMarkers : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAdMarkers] {
        return [
            .elemental,
            .elementalScte35,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .elemental: return "ELEMENTAL"
        case .elementalScte35: return "ELEMENTAL_SCTE35"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAdMarkers(rawValue: rawValue) ?? HlsAdMarkers.sdkUnknown(rawValue)
    }
}

extension HlsAdditionalManifest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case manifestNameModifier = "manifestNameModifier"
        case selectedOutputs = "selectedOutputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestNameModifier = manifestNameModifier {
            try encodeContainer.encode(manifestNameModifier, forKey: .manifestNameModifier)
        }
        if let selectedOutputs = selectedOutputs {
            var selectedOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectedOutputs)
            for __listof__stringmin10 in selectedOutputs {
                try selectedOutputsContainer.encode(__listof__stringmin10)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestNameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .manifestNameModifier)
        manifestNameModifier = manifestNameModifierDecoded
        let selectedOutputsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .selectedOutputs)
        var selectedOutputsDecoded0:[String]? = nil
        if let selectedOutputsContainer = selectedOutputsContainer {
            selectedOutputsDecoded0 = [String]()
            for string0 in selectedOutputsContainer {
                if let string0 = string0 {
                    selectedOutputsDecoded0?.append(string0)
                }
            }
        }
        selectedOutputs = selectedOutputsDecoded0
    }
}

extension HlsAdditionalManifest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsAdditionalManifest(manifestNameModifier: \(String(describing: manifestNameModifier)), selectedOutputs: \(String(describing: selectedOutputs)))"}
}

/// Specify the details for each additional HLS manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
public struct HlsAdditionalManifest: Equatable {
    /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your HLS group is film-name.m3u8. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.m3u8. For HLS output groups, specify a manifestNameModifier that is different from the nameModifier of the output. The service uses the output name modifier to create unique names for the individual variant manifests.
    public let manifestNameModifier: String?
    /// Specify the outputs that you want this additional top-level manifest to reference.
    public let selectedOutputs: [String]?

    public init (
        manifestNameModifier: String? = nil,
        selectedOutputs: [String]? = nil
    )
    {
        self.manifestNameModifier = manifestNameModifier
        self.selectedOutputs = selectedOutputs
    }
}

/// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic (AUTOMATIC) to create a raw audio-only file with no container. Regardless of the value that you specify here, if this output has video, the service will place outputs into an MPEG2-TS container.
public enum HlsAudioOnlyContainer {
    case automatic
    case m2ts
    case sdkUnknown(String)
}

extension HlsAudioOnlyContainer : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAudioOnlyContainer] {
        return [
            .automatic,
            .m2ts,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .automatic: return "AUTOMATIC"
        case .m2ts: return "M2TS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAudioOnlyContainer(rawValue: rawValue) ?? HlsAudioOnlyContainer.sdkUnknown(rawValue)
    }
}

/// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
public enum HlsAudioOnlyHeader {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsAudioOnlyHeader : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAudioOnlyHeader] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAudioOnlyHeader(rawValue: rawValue) ?? HlsAudioOnlyHeader.sdkUnknown(rawValue)
    }
}

/// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
public enum HlsAudioTrackType {
    case alternateAudioAutoSelect
    case alternateAudioAutoSelectDefault
    case alternateAudioNotAutoSelect
    case audioOnlyVariantStream
    case sdkUnknown(String)
}

extension HlsAudioTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsAudioTrackType] {
        return [
            .alternateAudioAutoSelect,
            .alternateAudioAutoSelectDefault,
            .alternateAudioNotAutoSelect,
            .audioOnlyVariantStream,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
        case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
        case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
        case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsAudioTrackType(rawValue: rawValue) ?? HlsAudioTrackType.sdkUnknown(rawValue)
    }
}

extension HlsCaptionLanguageMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case captionChannel = "captionChannel"
        case customLanguageCode = "customLanguageCode"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if captionChannel != 0 {
            try encodeContainer.encode(captionChannel, forKey: .captionChannel)
        }
        if let customLanguageCode = customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageDescription = languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captionChannelDecoded = try containerValues.decode(Int.self, forKey: .captionChannel)
        captionChannel = captionChannelDecoded
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
    }
}

extension HlsCaptionLanguageMapping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsCaptionLanguageMapping(captionChannel: \(String(describing: captionChannel)), customLanguageCode: \(String(describing: customLanguageCode)), languageCode: \(String(describing: languageCode)), languageDescription: \(String(describing: languageDescription)))"}
}

/// Caption Language Mapping
public struct HlsCaptionLanguageMapping: Equatable {
    /// Caption channel.
    public let captionChannel: Int
    /// Specify the language for this captions channel, using the ISO 639-2 or ISO 639-3 three-letter language code
    public let customLanguageCode: String?
    /// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
    public let languageCode: LanguageCode?
    /// Caption language description.
    public let languageDescription: String?

    public init (
        captionChannel: Int = 0,
        customLanguageCode: String? = nil,
        languageCode: LanguageCode? = nil,
        languageDescription: String? = nil
    )
    {
        self.captionChannel = captionChannel
        self.customLanguageCode = customLanguageCode
        self.languageCode = languageCode
        self.languageDescription = languageDescription
    }
}

/// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
public enum HlsCaptionLanguageSetting {
    case insert
    case `none`
    case omit
    case sdkUnknown(String)
}

extension HlsCaptionLanguageSetting : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsCaptionLanguageSetting] {
        return [
            .insert,
            .none,
            .omit,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .none: return "NONE"
        case .omit: return "OMIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsCaptionLanguageSetting(rawValue: rawValue) ?? HlsCaptionLanguageSetting.sdkUnknown(rawValue)
    }
}

/// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
public enum HlsClientCache {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension HlsClientCache : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsClientCache] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsClientCache(rawValue: rawValue) ?? HlsClientCache.sdkUnknown(rawValue)
    }
}

/// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
public enum HlsCodecSpecification {
    case rfc4281
    case rfc6381
    case sdkUnknown(String)
}

extension HlsCodecSpecification : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsCodecSpecification] {
        return [
            .rfc4281,
            .rfc6381,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rfc4281: return "RFC_4281"
        case .rfc6381: return "RFC_6381"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsCodecSpecification(rawValue: rawValue) ?? HlsCodecSpecification.sdkUnknown(rawValue)
    }
}

/// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
public enum HlsDescriptiveVideoServiceFlag {
    case dontFlag
    case flag
    case sdkUnknown(String)
}

extension HlsDescriptiveVideoServiceFlag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsDescriptiveVideoServiceFlag] {
        return [
            .dontFlag,
            .flag,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dontFlag: return "DONT_FLAG"
        case .flag: return "FLAG"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsDescriptiveVideoServiceFlag(rawValue: rawValue) ?? HlsDescriptiveVideoServiceFlag.sdkUnknown(rawValue)
    }
}

/// Indicates whether segments should be placed in subdirectories.
public enum HlsDirectoryStructure {
    case singleDirectory
    case subdirectoryPerStream
    case sdkUnknown(String)
}

extension HlsDirectoryStructure : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsDirectoryStructure] {
        return [
            .singleDirectory,
            .subdirectoryPerStream,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .singleDirectory: return "SINGLE_DIRECTORY"
        case .subdirectoryPerStream: return "SUBDIRECTORY_PER_STREAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsDirectoryStructure(rawValue: rawValue) ?? HlsDirectoryStructure.sdkUnknown(rawValue)
    }
}

extension HlsEncryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constantInitializationVector = "constantInitializationVector"
        case encryptionMethod = "encryptionMethod"
        case initializationVectorInManifest = "initializationVectorInManifest"
        case offlineEncrypted = "offlineEncrypted"
        case spekeKeyProvider = "spekeKeyProvider"
        case staticKeyProvider = "staticKeyProvider"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constantInitializationVector = constantInitializationVector {
            try encodeContainer.encode(constantInitializationVector, forKey: .constantInitializationVector)
        }
        if let encryptionMethod = encryptionMethod {
            try encodeContainer.encode(encryptionMethod.rawValue, forKey: .encryptionMethod)
        }
        if let initializationVectorInManifest = initializationVectorInManifest {
            try encodeContainer.encode(initializationVectorInManifest.rawValue, forKey: .initializationVectorInManifest)
        }
        if let offlineEncrypted = offlineEncrypted {
            try encodeContainer.encode(offlineEncrypted.rawValue, forKey: .offlineEncrypted)
        }
        if let spekeKeyProvider = spekeKeyProvider {
            try encodeContainer.encode(spekeKeyProvider, forKey: .spekeKeyProvider)
        }
        if let staticKeyProvider = staticKeyProvider {
            try encodeContainer.encode(staticKeyProvider, forKey: .staticKeyProvider)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constantInitializationVectorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .constantInitializationVector)
        constantInitializationVector = constantInitializationVectorDecoded
        let encryptionMethodDecoded = try containerValues.decodeIfPresent(HlsEncryptionType.self, forKey: .encryptionMethod)
        encryptionMethod = encryptionMethodDecoded
        let initializationVectorInManifestDecoded = try containerValues.decodeIfPresent(HlsInitializationVectorInManifest.self, forKey: .initializationVectorInManifest)
        initializationVectorInManifest = initializationVectorInManifestDecoded
        let offlineEncryptedDecoded = try containerValues.decodeIfPresent(HlsOfflineEncrypted.self, forKey: .offlineEncrypted)
        offlineEncrypted = offlineEncryptedDecoded
        let spekeKeyProviderDecoded = try containerValues.decodeIfPresent(SpekeKeyProvider.self, forKey: .spekeKeyProvider)
        spekeKeyProvider = spekeKeyProviderDecoded
        let staticKeyProviderDecoded = try containerValues.decodeIfPresent(StaticKeyProvider.self, forKey: .staticKeyProvider)
        staticKeyProvider = staticKeyProviderDecoded
        let typeDecoded = try containerValues.decodeIfPresent(HlsKeyProviderType.self, forKey: .type)
        type = typeDecoded
    }
}

extension HlsEncryptionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsEncryptionSettings(constantInitializationVector: \(String(describing: constantInitializationVector)), encryptionMethod: \(String(describing: encryptionMethod)), initializationVectorInManifest: \(String(describing: initializationVectorInManifest)), offlineEncrypted: \(String(describing: offlineEncrypted)), spekeKeyProvider: \(String(describing: spekeKeyProvider)), staticKeyProvider: \(String(describing: staticKeyProvider)), type: \(String(describing: type)))"}
}

/// Settings for HLS encryption
public struct HlsEncryptionSettings: Equatable {
    /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
    public let constantInitializationVector: String?
    /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
    public let encryptionMethod: HlsEncryptionType?
    /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
    public let initializationVectorInManifest: HlsInitializationVectorInManifest?
    /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
    public let offlineEncrypted: HlsOfflineEncrypted?
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    public let spekeKeyProvider: SpekeKeyProvider?
    /// Use these settings to set up encryption with a static key provider.
    public let staticKeyProvider: StaticKeyProvider?
    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    public let type: HlsKeyProviderType?

    public init (
        constantInitializationVector: String? = nil,
        encryptionMethod: HlsEncryptionType? = nil,
        initializationVectorInManifest: HlsInitializationVectorInManifest? = nil,
        offlineEncrypted: HlsOfflineEncrypted? = nil,
        spekeKeyProvider: SpekeKeyProvider? = nil,
        staticKeyProvider: StaticKeyProvider? = nil,
        type: HlsKeyProviderType? = nil
    )
    {
        self.constantInitializationVector = constantInitializationVector
        self.encryptionMethod = encryptionMethod
        self.initializationVectorInManifest = initializationVectorInManifest
        self.offlineEncrypted = offlineEncrypted
        self.spekeKeyProvider = spekeKeyProvider
        self.staticKeyProvider = staticKeyProvider
        self.type = type
    }
}

/// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
public enum HlsEncryptionType {
    case aes128
    case sampleAes
    case sdkUnknown(String)
}

extension HlsEncryptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsEncryptionType] {
        return [
            .aes128,
            .sampleAes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aes128: return "AES128"
        case .sampleAes: return "SAMPLE_AES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsEncryptionType(rawValue: rawValue) ?? HlsEncryptionType.sdkUnknown(rawValue)
    }
}

extension HlsGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adMarkers = "adMarkers"
        case additionalManifests = "additionalManifests"
        case audioOnlyHeader = "audioOnlyHeader"
        case baseUrl = "baseUrl"
        case captionLanguageMappings = "captionLanguageMappings"
        case captionLanguageSetting = "captionLanguageSetting"
        case clientCache = "clientCache"
        case codecSpecification = "codecSpecification"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case directoryStructure = "directoryStructure"
        case encryption = "encryption"
        case manifestCompression = "manifestCompression"
        case manifestDurationFormat = "manifestDurationFormat"
        case minFinalSegmentLength = "minFinalSegmentLength"
        case minSegmentLength = "minSegmentLength"
        case outputSelection = "outputSelection"
        case programDateTime = "programDateTime"
        case programDateTimePeriod = "programDateTimePeriod"
        case segmentControl = "segmentControl"
        case segmentLength = "segmentLength"
        case segmentsPerSubdirectory = "segmentsPerSubdirectory"
        case streamInfResolution = "streamInfResolution"
        case timedMetadataId3Frame = "timedMetadataId3Frame"
        case timedMetadataId3Period = "timedMetadataId3Period"
        case timestampDeltaMilliseconds = "timestampDeltaMilliseconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = adMarkers {
            var adMarkersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adMarkers)
            for __listofhlsadmarkers0 in adMarkers {
                try adMarkersContainer.encode(__listofhlsadmarkers0.rawValue)
            }
        }
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofhlsadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofhlsadditionalmanifest0)
            }
        }
        if let audioOnlyHeader = audioOnlyHeader {
            try encodeContainer.encode(audioOnlyHeader.rawValue, forKey: .audioOnlyHeader)
        }
        if let baseUrl = baseUrl {
            try encodeContainer.encode(baseUrl, forKey: .baseUrl)
        }
        if let captionLanguageMappings = captionLanguageMappings {
            var captionLanguageMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionLanguageMappings)
            for __listofhlscaptionlanguagemapping0 in captionLanguageMappings {
                try captionLanguageMappingsContainer.encode(__listofhlscaptionlanguagemapping0)
            }
        }
        if let captionLanguageSetting = captionLanguageSetting {
            try encodeContainer.encode(captionLanguageSetting.rawValue, forKey: .captionLanguageSetting)
        }
        if let clientCache = clientCache {
            try encodeContainer.encode(clientCache.rawValue, forKey: .clientCache)
        }
        if let codecSpecification = codecSpecification {
            try encodeContainer.encode(codecSpecification.rawValue, forKey: .codecSpecification)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let directoryStructure = directoryStructure {
            try encodeContainer.encode(directoryStructure.rawValue, forKey: .directoryStructure)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let manifestCompression = manifestCompression {
            try encodeContainer.encode(manifestCompression.rawValue, forKey: .manifestCompression)
        }
        if let manifestDurationFormat = manifestDurationFormat {
            try encodeContainer.encode(manifestDurationFormat.rawValue, forKey: .manifestDurationFormat)
        }
        if minFinalSegmentLength != 0.0 {
            try encodeContainer.encode(minFinalSegmentLength, forKey: .minFinalSegmentLength)
        }
        if minSegmentLength != 0 {
            try encodeContainer.encode(minSegmentLength, forKey: .minSegmentLength)
        }
        if let outputSelection = outputSelection {
            try encodeContainer.encode(outputSelection.rawValue, forKey: .outputSelection)
        }
        if let programDateTime = programDateTime {
            try encodeContainer.encode(programDateTime.rawValue, forKey: .programDateTime)
        }
        if programDateTimePeriod != 0 {
            try encodeContainer.encode(programDateTimePeriod, forKey: .programDateTimePeriod)
        }
        if let segmentControl = segmentControl {
            try encodeContainer.encode(segmentControl.rawValue, forKey: .segmentControl)
        }
        if segmentLength != 0 {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if segmentsPerSubdirectory != 0 {
            try encodeContainer.encode(segmentsPerSubdirectory, forKey: .segmentsPerSubdirectory)
        }
        if let streamInfResolution = streamInfResolution {
            try encodeContainer.encode(streamInfResolution.rawValue, forKey: .streamInfResolution)
        }
        if let timedMetadataId3Frame = timedMetadataId3Frame {
            try encodeContainer.encode(timedMetadataId3Frame.rawValue, forKey: .timedMetadataId3Frame)
        }
        if timedMetadataId3Period != 0 {
            try encodeContainer.encode(timedMetadataId3Period, forKey: .timedMetadataId3Period)
        }
        if timestampDeltaMilliseconds != 0 {
            try encodeContainer.encode(timestampDeltaMilliseconds, forKey: .timestampDeltaMilliseconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersContainer = try containerValues.decodeIfPresent([HlsAdMarkers?].self, forKey: .adMarkers)
        var adMarkersDecoded0:[HlsAdMarkers]? = nil
        if let adMarkersContainer = adMarkersContainer {
            adMarkersDecoded0 = [HlsAdMarkers]()
            for string0 in adMarkersContainer {
                if let string0 = string0 {
                    adMarkersDecoded0?.append(string0)
                }
            }
        }
        adMarkers = adMarkersDecoded0
        let additionalManifestsContainer = try containerValues.decodeIfPresent([HlsAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[HlsAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [HlsAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let audioOnlyHeaderDecoded = try containerValues.decodeIfPresent(HlsAudioOnlyHeader.self, forKey: .audioOnlyHeader)
        audioOnlyHeader = audioOnlyHeaderDecoded
        let baseUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseUrl)
        baseUrl = baseUrlDecoded
        let captionLanguageMappingsContainer = try containerValues.decodeIfPresent([HlsCaptionLanguageMapping?].self, forKey: .captionLanguageMappings)
        var captionLanguageMappingsDecoded0:[HlsCaptionLanguageMapping]? = nil
        if let captionLanguageMappingsContainer = captionLanguageMappingsContainer {
            captionLanguageMappingsDecoded0 = [HlsCaptionLanguageMapping]()
            for structure0 in captionLanguageMappingsContainer {
                if let structure0 = structure0 {
                    captionLanguageMappingsDecoded0?.append(structure0)
                }
            }
        }
        captionLanguageMappings = captionLanguageMappingsDecoded0
        let captionLanguageSettingDecoded = try containerValues.decodeIfPresent(HlsCaptionLanguageSetting.self, forKey: .captionLanguageSetting)
        captionLanguageSetting = captionLanguageSettingDecoded
        let clientCacheDecoded = try containerValues.decodeIfPresent(HlsClientCache.self, forKey: .clientCache)
        clientCache = clientCacheDecoded
        let codecSpecificationDecoded = try containerValues.decodeIfPresent(HlsCodecSpecification.self, forKey: .codecSpecification)
        codecSpecification = codecSpecificationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let directoryStructureDecoded = try containerValues.decodeIfPresent(HlsDirectoryStructure.self, forKey: .directoryStructure)
        directoryStructure = directoryStructureDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(HlsEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let manifestCompressionDecoded = try containerValues.decodeIfPresent(HlsManifestCompression.self, forKey: .manifestCompression)
        manifestCompression = manifestCompressionDecoded
        let manifestDurationFormatDecoded = try containerValues.decodeIfPresent(HlsManifestDurationFormat.self, forKey: .manifestDurationFormat)
        manifestDurationFormat = manifestDurationFormatDecoded
        let minFinalSegmentLengthDecoded = try containerValues.decode(Double.self, forKey: .minFinalSegmentLength)
        minFinalSegmentLength = minFinalSegmentLengthDecoded
        let minSegmentLengthDecoded = try containerValues.decode(Int.self, forKey: .minSegmentLength)
        minSegmentLength = minSegmentLengthDecoded
        let outputSelectionDecoded = try containerValues.decodeIfPresent(HlsOutputSelection.self, forKey: .outputSelection)
        outputSelection = outputSelectionDecoded
        let programDateTimeDecoded = try containerValues.decodeIfPresent(HlsProgramDateTime.self, forKey: .programDateTime)
        programDateTime = programDateTimeDecoded
        let programDateTimePeriodDecoded = try containerValues.decode(Int.self, forKey: .programDateTimePeriod)
        programDateTimePeriod = programDateTimePeriodDecoded
        let segmentControlDecoded = try containerValues.decodeIfPresent(HlsSegmentControl.self, forKey: .segmentControl)
        segmentControl = segmentControlDecoded
        let segmentLengthDecoded = try containerValues.decode(Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let segmentsPerSubdirectoryDecoded = try containerValues.decode(Int.self, forKey: .segmentsPerSubdirectory)
        segmentsPerSubdirectory = segmentsPerSubdirectoryDecoded
        let streamInfResolutionDecoded = try containerValues.decodeIfPresent(HlsStreamInfResolution.self, forKey: .streamInfResolution)
        streamInfResolution = streamInfResolutionDecoded
        let timedMetadataId3FrameDecoded = try containerValues.decodeIfPresent(HlsTimedMetadataId3Frame.self, forKey: .timedMetadataId3Frame)
        timedMetadataId3Frame = timedMetadataId3FrameDecoded
        let timedMetadataId3PeriodDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataId3Period)
        timedMetadataId3Period = timedMetadataId3PeriodDecoded
        let timestampDeltaMillisecondsDecoded = try containerValues.decode(Int.self, forKey: .timestampDeltaMilliseconds)
        timestampDeltaMilliseconds = timestampDeltaMillisecondsDecoded
    }
}

extension HlsGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsGroupSettings(adMarkers: \(String(describing: adMarkers)), additionalManifests: \(String(describing: additionalManifests)), audioOnlyHeader: \(String(describing: audioOnlyHeader)), baseUrl: \(String(describing: baseUrl)), captionLanguageMappings: \(String(describing: captionLanguageMappings)), captionLanguageSetting: \(String(describing: captionLanguageSetting)), clientCache: \(String(describing: clientCache)), codecSpecification: \(String(describing: codecSpecification)), destination: \(String(describing: destination)), destinationSettings: \(String(describing: destinationSettings)), directoryStructure: \(String(describing: directoryStructure)), encryption: \(String(describing: encryption)), manifestCompression: \(String(describing: manifestCompression)), manifestDurationFormat: \(String(describing: manifestDurationFormat)), minFinalSegmentLength: \(String(describing: minFinalSegmentLength)), minSegmentLength: \(String(describing: minSegmentLength)), outputSelection: \(String(describing: outputSelection)), programDateTime: \(String(describing: programDateTime)), programDateTimePeriod: \(String(describing: programDateTimePeriod)), segmentControl: \(String(describing: segmentControl)), segmentLength: \(String(describing: segmentLength)), segmentsPerSubdirectory: \(String(describing: segmentsPerSubdirectory)), streamInfResolution: \(String(describing: streamInfResolution)), timedMetadataId3Frame: \(String(describing: timedMetadataId3Frame)), timedMetadataId3Period: \(String(describing: timedMetadataId3Period)), timestampDeltaMilliseconds: \(String(describing: timestampDeltaMilliseconds)))"}
}

/// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to HLS_GROUP_SETTINGS.
public struct HlsGroupSettings: Equatable {
    /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
    public let adMarkers: [HlsAdMarkers]?
    /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
    public let additionalManifests: [HlsAdditionalManifest]?
    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
    public let audioOnlyHeader: HlsAudioOnlyHeader?
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    public let baseUrl: String?
    /// Language to be used on Caption outputs
    public let captionLanguageMappings: [HlsCaptionLanguageMapping]?
    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    public let captionLanguageSetting: HlsCaptionLanguageSetting?
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    public let clientCache: HlsClientCache?
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    public let codecSpecification: HlsCodecSpecification?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// Indicates whether segments should be placed in subdirectories.
    public let directoryStructure: HlsDirectoryStructure?
    /// DRM settings.
    public let encryption: HlsEncryptionSettings?
    /// When set to GZIP, compresses HLS playlist.
    public let manifestCompression: HlsManifestCompression?
    /// Indicates whether the output manifest should use floating point values for segment duration.
    public let manifestDurationFormat: HlsManifestDurationFormat?
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    public let minFinalSegmentLength: Double
    /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    public let minSegmentLength: Int
    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    public let outputSelection: HlsOutputSelection?
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    public let programDateTime: HlsProgramDateTime?
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    public let programDateTimePeriod: Int
    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    public let segmentControl: HlsSegmentControl?
    /// Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
    public let segmentLength: Int
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
    public let segmentsPerSubdirectory: Int
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    public let streamInfResolution: HlsStreamInfResolution?
    /// Indicates ID3 frame that has the timecode.
    public let timedMetadataId3Frame: HlsTimedMetadataId3Frame?
    /// Timed Metadata interval in seconds.
    public let timedMetadataId3Period: Int
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    public let timestampDeltaMilliseconds: Int

    public init (
        adMarkers: [HlsAdMarkers]? = nil,
        additionalManifests: [HlsAdditionalManifest]? = nil,
        audioOnlyHeader: HlsAudioOnlyHeader? = nil,
        baseUrl: String? = nil,
        captionLanguageMappings: [HlsCaptionLanguageMapping]? = nil,
        captionLanguageSetting: HlsCaptionLanguageSetting? = nil,
        clientCache: HlsClientCache? = nil,
        codecSpecification: HlsCodecSpecification? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        directoryStructure: HlsDirectoryStructure? = nil,
        encryption: HlsEncryptionSettings? = nil,
        manifestCompression: HlsManifestCompression? = nil,
        manifestDurationFormat: HlsManifestDurationFormat? = nil,
        minFinalSegmentLength: Double = 0.0,
        minSegmentLength: Int = 0,
        outputSelection: HlsOutputSelection? = nil,
        programDateTime: HlsProgramDateTime? = nil,
        programDateTimePeriod: Int = 0,
        segmentControl: HlsSegmentControl? = nil,
        segmentLength: Int = 0,
        segmentsPerSubdirectory: Int = 0,
        streamInfResolution: HlsStreamInfResolution? = nil,
        timedMetadataId3Frame: HlsTimedMetadataId3Frame? = nil,
        timedMetadataId3Period: Int = 0,
        timestampDeltaMilliseconds: Int = 0
    )
    {
        self.adMarkers = adMarkers
        self.additionalManifests = additionalManifests
        self.audioOnlyHeader = audioOnlyHeader
        self.baseUrl = baseUrl
        self.captionLanguageMappings = captionLanguageMappings
        self.captionLanguageSetting = captionLanguageSetting
        self.clientCache = clientCache
        self.codecSpecification = codecSpecification
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.directoryStructure = directoryStructure
        self.encryption = encryption
        self.manifestCompression = manifestCompression
        self.manifestDurationFormat = manifestDurationFormat
        self.minFinalSegmentLength = minFinalSegmentLength
        self.minSegmentLength = minSegmentLength
        self.outputSelection = outputSelection
        self.programDateTime = programDateTime
        self.programDateTimePeriod = programDateTimePeriod
        self.segmentControl = segmentControl
        self.segmentLength = segmentLength
        self.segmentsPerSubdirectory = segmentsPerSubdirectory
        self.streamInfResolution = streamInfResolution
        self.timedMetadataId3Frame = timedMetadataId3Frame
        self.timedMetadataId3Period = timedMetadataId3Period
        self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
    }
}

/// Choose Include (INCLUDE) to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
public enum HlsIFrameOnlyManifest {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsIFrameOnlyManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsIFrameOnlyManifest] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsIFrameOnlyManifest(rawValue: rawValue) ?? HlsIFrameOnlyManifest.sdkUnknown(rawValue)
    }
}

/// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
public enum HlsInitializationVectorInManifest {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsInitializationVectorInManifest : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsInitializationVectorInManifest] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsInitializationVectorInManifest(rawValue: rawValue) ?? HlsInitializationVectorInManifest.sdkUnknown(rawValue)
    }
}

/// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
public enum HlsKeyProviderType {
    case speke
    case staticKey
    case sdkUnknown(String)
}

extension HlsKeyProviderType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsKeyProviderType] {
        return [
            .speke,
            .staticKey,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .speke: return "SPEKE"
        case .staticKey: return "STATIC_KEY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsKeyProviderType(rawValue: rawValue) ?? HlsKeyProviderType.sdkUnknown(rawValue)
    }
}

/// When set to GZIP, compresses HLS playlist.
public enum HlsManifestCompression {
    case gzip
    case `none`
    case sdkUnknown(String)
}

extension HlsManifestCompression : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsManifestCompression] {
        return [
            .gzip,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .gzip: return "GZIP"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsManifestCompression(rawValue: rawValue) ?? HlsManifestCompression.sdkUnknown(rawValue)
    }
}

/// Indicates whether the output manifest should use floating point values for segment duration.
public enum HlsManifestDurationFormat {
    case floatingPoint
    case integer
    case sdkUnknown(String)
}

extension HlsManifestDurationFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsManifestDurationFormat] {
        return [
            .floatingPoint,
            .integer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .floatingPoint: return "FLOATING_POINT"
        case .integer: return "INTEGER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsManifestDurationFormat(rawValue: rawValue) ?? HlsManifestDurationFormat.sdkUnknown(rawValue)
    }
}

/// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
public enum HlsOfflineEncrypted {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension HlsOfflineEncrypted : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsOfflineEncrypted] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsOfflineEncrypted(rawValue: rawValue) ?? HlsOfflineEncrypted.sdkUnknown(rawValue)
    }
}

/// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
public enum HlsOutputSelection {
    case manifestsAndSegments
    case segmentsOnly
    case sdkUnknown(String)
}

extension HlsOutputSelection : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsOutputSelection] {
        return [
            .manifestsAndSegments,
            .segmentsOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .manifestsAndSegments: return "MANIFESTS_AND_SEGMENTS"
        case .segmentsOnly: return "SEGMENTS_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsOutputSelection(rawValue: rawValue) ?? HlsOutputSelection.sdkUnknown(rawValue)
    }
}

/// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
public enum HlsProgramDateTime {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsProgramDateTime : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsProgramDateTime] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsProgramDateTime(rawValue: rawValue) ?? HlsProgramDateTime.sdkUnknown(rawValue)
    }
}

/// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
public enum HlsSegmentControl {
    case segmentedFiles
    case singleFile
    case sdkUnknown(String)
}

extension HlsSegmentControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsSegmentControl] {
        return [
            .segmentedFiles,
            .singleFile,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .segmentedFiles: return "SEGMENTED_FILES"
        case .singleFile: return "SINGLE_FILE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsSegmentControl(rawValue: rawValue) ?? HlsSegmentControl.sdkUnknown(rawValue)
    }
}

extension HlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioGroupId = "audioGroupId"
        case audioOnlyContainer = "audioOnlyContainer"
        case audioRenditionSets = "audioRenditionSets"
        case audioTrackType = "audioTrackType"
        case descriptiveVideoServiceFlag = "descriptiveVideoServiceFlag"
        case iFrameOnlyManifest = "iFrameOnlyManifest"
        case segmentModifier = "segmentModifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioGroupId = audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioOnlyContainer = audioOnlyContainer {
            try encodeContainer.encode(audioOnlyContainer.rawValue, forKey: .audioOnlyContainer)
        }
        if let audioRenditionSets = audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let audioTrackType = audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let descriptiveVideoServiceFlag = descriptiveVideoServiceFlag {
            try encodeContainer.encode(descriptiveVideoServiceFlag.rawValue, forKey: .descriptiveVideoServiceFlag)
        }
        if let iFrameOnlyManifest = iFrameOnlyManifest {
            try encodeContainer.encode(iFrameOnlyManifest.rawValue, forKey: .iFrameOnlyManifest)
        }
        if let segmentModifier = segmentModifier {
            try encodeContainer.encode(segmentModifier, forKey: .segmentModifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioOnlyContainerDecoded = try containerValues.decodeIfPresent(HlsAudioOnlyContainer.self, forKey: .audioOnlyContainer)
        audioOnlyContainer = audioOnlyContainerDecoded
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(HlsAudioTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let descriptiveVideoServiceFlagDecoded = try containerValues.decodeIfPresent(HlsDescriptiveVideoServiceFlag.self, forKey: .descriptiveVideoServiceFlag)
        descriptiveVideoServiceFlag = descriptiveVideoServiceFlagDecoded
        let iFrameOnlyManifestDecoded = try containerValues.decodeIfPresent(HlsIFrameOnlyManifest.self, forKey: .iFrameOnlyManifest)
        iFrameOnlyManifest = iFrameOnlyManifestDecoded
        let segmentModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .segmentModifier)
        segmentModifier = segmentModifierDecoded
    }
}

extension HlsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HlsSettings(audioGroupId: \(String(describing: audioGroupId)), audioOnlyContainer: \(String(describing: audioOnlyContainer)), audioRenditionSets: \(String(describing: audioRenditionSets)), audioTrackType: \(String(describing: audioTrackType)), descriptiveVideoServiceFlag: \(String(describing: descriptiveVideoServiceFlag)), iFrameOnlyManifest: \(String(describing: iFrameOnlyManifest)), segmentModifier: \(String(describing: segmentModifier)))"}
}

/// Settings for HLS output groups
public struct HlsSettings: Equatable {
    /// Specifies the group to which the audio rendition belongs.
    public let audioGroupId: String?
    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic (AUTOMATIC) to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
    public let audioOnlyContainer: HlsAudioOnlyContainer?
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    public let audioRenditionSets: String?
    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    public let audioTrackType: HlsAudioTrackType?
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    public let descriptiveVideoServiceFlag: HlsDescriptiveVideoServiceFlag?
    /// Choose Include (INCLUDE) to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
    public let iFrameOnlyManifest: HlsIFrameOnlyManifest?
    /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
    public let segmentModifier: String?

    public init (
        audioGroupId: String? = nil,
        audioOnlyContainer: HlsAudioOnlyContainer? = nil,
        audioRenditionSets: String? = nil,
        audioTrackType: HlsAudioTrackType? = nil,
        descriptiveVideoServiceFlag: HlsDescriptiveVideoServiceFlag? = nil,
        iFrameOnlyManifest: HlsIFrameOnlyManifest? = nil,
        segmentModifier: String? = nil
    )
    {
        self.audioGroupId = audioGroupId
        self.audioOnlyContainer = audioOnlyContainer
        self.audioRenditionSets = audioRenditionSets
        self.audioTrackType = audioTrackType
        self.descriptiveVideoServiceFlag = descriptiveVideoServiceFlag
        self.iFrameOnlyManifest = iFrameOnlyManifest
        self.segmentModifier = segmentModifier
    }
}

/// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
public enum HlsStreamInfResolution {
    case exclude
    case include
    case sdkUnknown(String)
}

extension HlsStreamInfResolution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsStreamInfResolution] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsStreamInfResolution(rawValue: rawValue) ?? HlsStreamInfResolution.sdkUnknown(rawValue)
    }
}

/// Indicates ID3 frame that has the timecode.
public enum HlsTimedMetadataId3Frame {
    case `none`
    case priv
    case tdrl
    case sdkUnknown(String)
}

extension HlsTimedMetadataId3Frame : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HlsTimedMetadataId3Frame] {
        return [
            .none,
            .priv,
            .tdrl,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .priv: return "PRIV"
        case .tdrl: return "TDRL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HlsTimedMetadataId3Frame(rawValue: rawValue) ?? HlsTimedMetadataId3Frame.sdkUnknown(rawValue)
    }
}

extension HopDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case priority = "priority"
        case queue = "queue"
        case waitMinutes = "waitMinutes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if waitMinutes != 0 {
            try encodeContainer.encode(waitMinutes, forKey: .waitMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let waitMinutesDecoded = try containerValues.decode(Int.self, forKey: .waitMinutes)
        waitMinutes = waitMinutesDecoded
    }
}

extension HopDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HopDestination(priority: \(String(describing: priority)), queue: \(String(describing: queue)), waitMinutes: \(String(describing: waitMinutes)))"}
}

/// Optional. Configuration for a destination queue to which the job can hop once a customer-defined minimum wait time has passed.
public struct HopDestination: Equatable {
    /// Optional. When you set up a job to use queue hopping, you can specify a different relative priority for the job in the destination queue. If you don't specify, the relative priority will remain the same as in the previous queue.
    public let priority: Int
    /// Optional unless the job is submitted on the default queue. When you set up a job to use queue hopping, you can specify a destination queue. This queue cannot be the original queue to which the job is submitted. If the original queue isn't the default queue and you don't specify the destination queue, the job will move to the default queue.
    public let queue: String?
    /// Required for setting up a job to use queue hopping. Minimum wait time in minutes until the job can hop to the destination queue. Valid range is 1 to 1440 minutes, inclusive.
    public let waitMinutes: Int

    public init (
        priority: Int = 0,
        queue: String? = nil,
        waitMinutes: Int = 0
    )
    {
        self.priority = priority
        self.queue = queue
        self.waitMinutes = waitMinutes
    }
}

extension Id3Insertion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id3 = "id3"
        case timecode = "timecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id3 = id3 {
            try encodeContainer.encode(id3, forKey: .id3)
        }
        if let timecode = timecode {
            try encodeContainer.encode(timecode, forKey: .timecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let id3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .id3)
        id3 = id3Decoded
        let timecodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timecode)
        timecode = timecodeDecoded
    }
}

extension Id3Insertion: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Id3Insertion(id3: \(String(describing: id3)), timecode: \(String(describing: timecode)))"}
}

/// To insert ID3 tags in your output, specify two values. Use ID3 tag (Id3) to specify the base 64 encoded string and use Timecode (TimeCode) to specify the time when the tag should be inserted. To insert multiple ID3 tags in your output, create multiple instances of ID3 insertion (Id3Insertion).
public struct Id3Insertion: Equatable {
    /// Use ID3 tag (Id3) to provide a tag value in base64-encode format.
    public let id3: String?
    /// Provide a Timecode (TimeCode) in HH:MM:SS:FF or HH:MM:SS;FF format.
    public let timecode: String?

    public init (
        id3: String? = nil,
        timecode: String? = nil
    )
    {
        self.id3 = id3
        self.timecode = timecode
    }
}

extension ImageInserter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case insertableImages = "insertableImages"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insertableImages = insertableImages {
            var insertableImagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insertableImages)
            for __listofinsertableimage0 in insertableImages {
                try insertableImagesContainer.encode(__listofinsertableimage0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insertableImagesContainer = try containerValues.decodeIfPresent([InsertableImage?].self, forKey: .insertableImages)
        var insertableImagesDecoded0:[InsertableImage]? = nil
        if let insertableImagesContainer = insertableImagesContainer {
            insertableImagesDecoded0 = [InsertableImage]()
            for structure0 in insertableImagesContainer {
                if let structure0 = structure0 {
                    insertableImagesDecoded0?.append(structure0)
                }
            }
        }
        insertableImages = insertableImagesDecoded0
    }
}

extension ImageInserter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ImageInserter(insertableImages: \(String(describing: insertableImages)))"}
}

/// Use the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input or output individually. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/graphic-overlay.html. This setting is disabled by default.
public struct ImageInserter: Equatable {
    /// Specify the images that you want to overlay on your video. The images must be PNG or TGA files.
    public let insertableImages: [InsertableImage]?

    public init (
        insertableImages: [InsertableImage]? = nil
    )
    {
        self.insertableImages = insertableImages
    }
}

extension ImscDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case stylePassthrough = "stylePassthrough"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stylePassthrough = stylePassthrough {
            try encodeContainer.encode(stylePassthrough.rawValue, forKey: .stylePassthrough)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stylePassthroughDecoded = try containerValues.decodeIfPresent(ImscStylePassthrough.self, forKey: .stylePassthrough)
        stylePassthrough = stylePassthroughDecoded
    }
}

extension ImscDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ImscDestinationSettings(stylePassthrough: \(String(describing: stylePassthrough)))"}
}

/// Settings related to IMSC captions. IMSC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to IMSC.
public struct ImscDestinationSettings: Equatable {
    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    public let stylePassthrough: ImscStylePassthrough?

    public init (
        stylePassthrough: ImscStylePassthrough? = nil
    )
    {
        self.stylePassthrough = stylePassthrough
    }
}

/// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
public enum ImscStylePassthrough {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension ImscStylePassthrough : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ImscStylePassthrough] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ImscStylePassthrough(rawValue: rawValue) ?? ImscStylePassthrough.sdkUnknown(rawValue)
    }
}

extension Input: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSelectorGroups = "audioSelectorGroups"
        case audioSelectors = "audioSelectors"
        case captionSelectors = "captionSelectors"
        case crop = "crop"
        case deblockFilter = "deblockFilter"
        case decryptionSettings = "decryptionSettings"
        case denoiseFilter = "denoiseFilter"
        case fileInput = "fileInput"
        case filterEnable = "filterEnable"
        case filterStrength = "filterStrength"
        case imageInserter = "imageInserter"
        case inputClippings = "inputClippings"
        case inputScanType = "inputScanType"
        case position = "position"
        case programNumber = "programNumber"
        case psiControl = "psiControl"
        case supplementalImps = "supplementalImps"
        case timecodeSource = "timecodeSource"
        case timecodeStart = "timecodeStart"
        case videoSelector = "videoSelector"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorGroups = audioSelectorGroups {
            var audioSelectorGroupsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .audioSelectorGroups)
            for (dictKey0, __mapofaudioselectorgroup0) in audioSelectorGroups {
                try audioSelectorGroupsContainer.encode(__mapofaudioselectorgroup0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let audioSelectors = audioSelectors {
            var audioSelectorsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .audioSelectors)
            for (dictKey0, __mapofaudioselector0) in audioSelectors {
                try audioSelectorsContainer.encode(__mapofaudioselector0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let captionSelectors = captionSelectors {
            var captionSelectorsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .captionSelectors)
            for (dictKey0, __mapofcaptionselector0) in captionSelectors {
                try captionSelectorsContainer.encode(__mapofcaptionselector0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let crop = crop {
            try encodeContainer.encode(crop, forKey: .crop)
        }
        if let deblockFilter = deblockFilter {
            try encodeContainer.encode(deblockFilter.rawValue, forKey: .deblockFilter)
        }
        if let decryptionSettings = decryptionSettings {
            try encodeContainer.encode(decryptionSettings, forKey: .decryptionSettings)
        }
        if let denoiseFilter = denoiseFilter {
            try encodeContainer.encode(denoiseFilter.rawValue, forKey: .denoiseFilter)
        }
        if let fileInput = fileInput {
            try encodeContainer.encode(fileInput, forKey: .fileInput)
        }
        if let filterEnable = filterEnable {
            try encodeContainer.encode(filterEnable.rawValue, forKey: .filterEnable)
        }
        if filterStrength != 0 {
            try encodeContainer.encode(filterStrength, forKey: .filterStrength)
        }
        if let imageInserter = imageInserter {
            try encodeContainer.encode(imageInserter, forKey: .imageInserter)
        }
        if let inputClippings = inputClippings {
            var inputClippingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputClippings)
            for __listofinputclipping0 in inputClippings {
                try inputClippingsContainer.encode(__listofinputclipping0)
            }
        }
        if let inputScanType = inputScanType {
            try encodeContainer.encode(inputScanType.rawValue, forKey: .inputScanType)
        }
        if let position = position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let psiControl = psiControl {
            try encodeContainer.encode(psiControl.rawValue, forKey: .psiControl)
        }
        if let supplementalImps = supplementalImps {
            var supplementalImpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supplementalImps)
            for __listof__stringpatterns3assetmapxml0 in supplementalImps {
                try supplementalImpsContainer.encode(__listof__stringpatterns3assetmapxml0)
            }
        }
        if let timecodeSource = timecodeSource {
            try encodeContainer.encode(timecodeSource.rawValue, forKey: .timecodeSource)
        }
        if let timecodeStart = timecodeStart {
            try encodeContainer.encode(timecodeStart, forKey: .timecodeStart)
        }
        if let videoSelector = videoSelector {
            try encodeContainer.encode(videoSelector, forKey: .videoSelector)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorGroupsContainer = try containerValues.decodeIfPresent([String: AudioSelectorGroup?].self, forKey: .audioSelectorGroups)
        var audioSelectorGroupsDecoded0: [String:AudioSelectorGroup]? = nil
        if let audioSelectorGroupsContainer = audioSelectorGroupsContainer {
            audioSelectorGroupsDecoded0 = [String:AudioSelectorGroup]()
            for (key0, audioselectorgroup0) in audioSelectorGroupsContainer {
                if let audioselectorgroup0 = audioselectorgroup0 {
                    audioSelectorGroupsDecoded0?[key0] = audioselectorgroup0
                }
            }
        }
        audioSelectorGroups = audioSelectorGroupsDecoded0
        let audioSelectorsContainer = try containerValues.decodeIfPresent([String: AudioSelector?].self, forKey: .audioSelectors)
        var audioSelectorsDecoded0: [String:AudioSelector]? = nil
        if let audioSelectorsContainer = audioSelectorsContainer {
            audioSelectorsDecoded0 = [String:AudioSelector]()
            for (key0, audioselector0) in audioSelectorsContainer {
                if let audioselector0 = audioselector0 {
                    audioSelectorsDecoded0?[key0] = audioselector0
                }
            }
        }
        audioSelectors = audioSelectorsDecoded0
        let captionSelectorsContainer = try containerValues.decodeIfPresent([String: CaptionSelector?].self, forKey: .captionSelectors)
        var captionSelectorsDecoded0: [String:CaptionSelector]? = nil
        if let captionSelectorsContainer = captionSelectorsContainer {
            captionSelectorsDecoded0 = [String:CaptionSelector]()
            for (key0, captionselector0) in captionSelectorsContainer {
                if let captionselector0 = captionselector0 {
                    captionSelectorsDecoded0?[key0] = captionselector0
                }
            }
        }
        captionSelectors = captionSelectorsDecoded0
        let cropDecoded = try containerValues.decodeIfPresent(Rectangle.self, forKey: .crop)
        crop = cropDecoded
        let deblockFilterDecoded = try containerValues.decodeIfPresent(InputDeblockFilter.self, forKey: .deblockFilter)
        deblockFilter = deblockFilterDecoded
        let decryptionSettingsDecoded = try containerValues.decodeIfPresent(InputDecryptionSettings.self, forKey: .decryptionSettings)
        decryptionSettings = decryptionSettingsDecoded
        let denoiseFilterDecoded = try containerValues.decodeIfPresent(InputDenoiseFilter.self, forKey: .denoiseFilter)
        denoiseFilter = denoiseFilterDecoded
        let fileInputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileInput)
        fileInput = fileInputDecoded
        let filterEnableDecoded = try containerValues.decodeIfPresent(InputFilterEnable.self, forKey: .filterEnable)
        filterEnable = filterEnableDecoded
        let filterStrengthDecoded = try containerValues.decode(Int.self, forKey: .filterStrength)
        filterStrength = filterStrengthDecoded
        let imageInserterDecoded = try containerValues.decodeIfPresent(ImageInserter.self, forKey: .imageInserter)
        imageInserter = imageInserterDecoded
        let inputClippingsContainer = try containerValues.decodeIfPresent([InputClipping?].self, forKey: .inputClippings)
        var inputClippingsDecoded0:[InputClipping]? = nil
        if let inputClippingsContainer = inputClippingsContainer {
            inputClippingsDecoded0 = [InputClipping]()
            for structure0 in inputClippingsContainer {
                if let structure0 = structure0 {
                    inputClippingsDecoded0?.append(structure0)
                }
            }
        }
        inputClippings = inputClippingsDecoded0
        let inputScanTypeDecoded = try containerValues.decodeIfPresent(InputScanType.self, forKey: .inputScanType)
        inputScanType = inputScanTypeDecoded
        let positionDecoded = try containerValues.decodeIfPresent(Rectangle.self, forKey: .position)
        position = positionDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let psiControlDecoded = try containerValues.decodeIfPresent(InputPsiControl.self, forKey: .psiControl)
        psiControl = psiControlDecoded
        let supplementalImpsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .supplementalImps)
        var supplementalImpsDecoded0:[String]? = nil
        if let supplementalImpsContainer = supplementalImpsContainer {
            supplementalImpsDecoded0 = [String]()
            for string0 in supplementalImpsContainer {
                if let string0 = string0 {
                    supplementalImpsDecoded0?.append(string0)
                }
            }
        }
        supplementalImps = supplementalImpsDecoded0
        let timecodeSourceDecoded = try containerValues.decodeIfPresent(InputTimecodeSource.self, forKey: .timecodeSource)
        timecodeSource = timecodeSourceDecoded
        let timecodeStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timecodeStart)
        timecodeStart = timecodeStartDecoded
        let videoSelectorDecoded = try containerValues.decodeIfPresent(VideoSelector.self, forKey: .videoSelector)
        videoSelector = videoSelectorDecoded
    }
}

extension Input: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Input(audioSelectorGroups: \(String(describing: audioSelectorGroups)), audioSelectors: \(String(describing: audioSelectors)), captionSelectors: \(String(describing: captionSelectors)), crop: \(String(describing: crop)), deblockFilter: \(String(describing: deblockFilter)), decryptionSettings: \(String(describing: decryptionSettings)), denoiseFilter: \(String(describing: denoiseFilter)), fileInput: \(String(describing: fileInput)), filterEnable: \(String(describing: filterEnable)), filterStrength: \(String(describing: filterStrength)), imageInserter: \(String(describing: imageInserter)), inputClippings: \(String(describing: inputClippings)), inputScanType: \(String(describing: inputScanType)), position: \(String(describing: position)), programNumber: \(String(describing: programNumber)), psiControl: \(String(describing: psiControl)), supplementalImps: \(String(describing: supplementalImps)), timecodeSource: \(String(describing: timecodeSource)), timecodeStart: \(String(describing: timecodeStart)), videoSelector: \(String(describing: videoSelector)))"}
}

/// Use inputs to define the source files used in your transcoding job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/specify-input-settings.html. You can use multiple video inputs to do input stitching. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/assembling-multiple-inputs-and-input-clips.html
public struct Input: Equatable {
    /// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab (AudioDescription). Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
    public let audioSelectorGroups: [String:AudioSelectorGroup]?
    /// Use Audio selectors (AudioSelectors) to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
    public let audioSelectors: [String:AudioSelector]?
    /// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 20 captions selectors per input.
    public let captionSelectors: [String:CaptionSelector]?
    /// Use Cropping selection (crop) to specify the video area that the service will include in the output video frame. If you specify a value here, it will override any value that you specify in the output setting Cropping selection (crop).
    public let crop: Rectangle?
    /// Enable Deblock (InputDeblockFilter) to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
    public let deblockFilter: InputDeblockFilter?
    /// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
    public let decryptionSettings: InputDecryptionSettings?
    /// Enable Denoise (InputDenoiseFilter) to filter noise from the input.  Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
    public let denoiseFilter: InputDenoiseFilter?
    /// Specify the source file for your transcoding job. You can use multiple inputs in a single job. The service concatenates these inputs, in the order that you specify them in the job, to create the outputs. If your input format is IMF, specify your input by providing the path to your CPL. For example, "s3://bucket/vf/cpl.xml". If the CPL is in an incomplete IMP, make sure to use *Supplemental IMPs* (SupplementalImps) to specify any supplemental IMPs that contain assets referenced by the CPL.
    public let fileInput: String?
    /// Specify how the transcoding service applies the denoise and deblock filters. You must also enable the filters separately, with Denoise (InputDenoiseFilter) and Deblock (InputDeblockFilter). * Auto - The transcoding service determines whether to apply filtering, depending on input type and quality. * Disable - The input is not filtered. This is true even if you use the API to enable them in (InputDeblockFilter) and (InputDeblockFilter). * Force - The input is filtered regardless of input type.
    public let filterEnable: InputFilterEnable?
    /// Use Filter strength (FilterStrength) to adjust the magnitude the input filter settings (Deblock and Denoise). The range is -5 to 5. Default is 0.
    public let filterStrength: Int
    /// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input individually. This setting is disabled by default.
    public let imageInserter: ImageInserter?
    /// (InputClippings) contains sets of start and end times that together specify a portion of the input to be used in the outputs. If you provide only a start time, the clip will be the entire input from that point to the end. If you provide only an end time, it will be the entire input up to that point. When you specify more than one input clip, the transcoding service creates the job outputs by stringing the clips together in the order you specify them.
    public let inputClippings: [InputClipping]?
    /// When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn't automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don't specify, the default value is Auto (AUTO). Auto is the correct setting for all inputs that are not PsF. Don't set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
    public let inputScanType: InputScanType?
    /// Use Selection placement (position) to define the video area in your output frame. The area outside of the rectangle that you specify here is black. If you specify a value here, it will override any value that you specify in the output setting Selection placement (position). If you specify a value here, this will override any AFD values in your input, even if you set Respond to AFD (RespondToAfd) to Respond (RESPOND). If you specify a value here, this will ignore anything that you specify for the setting Scaling Behavior (scalingBehavior).
    public let position: Rectangle?
    /// Use Program (programNumber) to select a specific program from within a multi-program transport stream. Note that Quad 4K is not currently supported. Default is the first program within the transport stream. If the program you specify doesn't exist, the transcoding service will use this default.
    public let programNumber: Int
    /// Set PSI control (InputPsiControl) for transport stream inputs to specify which data the demux process to scans. * Ignore PSI - Scan all PIDs for audio and video. * Use PSI - Scan only PSI data.
    public let psiControl: InputPsiControl?
    /// Provide a list of any necessary supplemental IMPs. You need supplemental IMPs if the CPL that you're using for your input is in an incomplete IMP. Specify either the supplemental IMP directories with a trailing slash or the ASSETMAP.xml files. For example ["s3://bucket/ov/", "s3://bucket/vf2/ASSETMAP.xml"]. You don't need to specify the IMP that contains your input CPL, because the service automatically detects it.
    public let supplementalImps: [String]?
    /// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
    public let timecodeSource: InputTimecodeSource?
    /// Specify the timecode that you want the service to use for this input's initial frame. To use this setting, you must set the Timecode source setting, located under the input settings (InputTimecodeSource), to Specified start (SPECIFIEDSTART). For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
    public let timecodeStart: String?
    /// Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
    public let videoSelector: VideoSelector?

    public init (
        audioSelectorGroups: [String:AudioSelectorGroup]? = nil,
        audioSelectors: [String:AudioSelector]? = nil,
        captionSelectors: [String:CaptionSelector]? = nil,
        crop: Rectangle? = nil,
        deblockFilter: InputDeblockFilter? = nil,
        decryptionSettings: InputDecryptionSettings? = nil,
        denoiseFilter: InputDenoiseFilter? = nil,
        fileInput: String? = nil,
        filterEnable: InputFilterEnable? = nil,
        filterStrength: Int = 0,
        imageInserter: ImageInserter? = nil,
        inputClippings: [InputClipping]? = nil,
        inputScanType: InputScanType? = nil,
        position: Rectangle? = nil,
        programNumber: Int = 0,
        psiControl: InputPsiControl? = nil,
        supplementalImps: [String]? = nil,
        timecodeSource: InputTimecodeSource? = nil,
        timecodeStart: String? = nil,
        videoSelector: VideoSelector? = nil
    )
    {
        self.audioSelectorGroups = audioSelectorGroups
        self.audioSelectors = audioSelectors
        self.captionSelectors = captionSelectors
        self.crop = crop
        self.deblockFilter = deblockFilter
        self.decryptionSettings = decryptionSettings
        self.denoiseFilter = denoiseFilter
        self.fileInput = fileInput
        self.filterEnable = filterEnable
        self.filterStrength = filterStrength
        self.imageInserter = imageInserter
        self.inputClippings = inputClippings
        self.inputScanType = inputScanType
        self.position = position
        self.programNumber = programNumber
        self.psiControl = psiControl
        self.supplementalImps = supplementalImps
        self.timecodeSource = timecodeSource
        self.timecodeStart = timecodeStart
        self.videoSelector = videoSelector
    }
}

extension InputClipping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTimecode = "endTimecode"
        case startTimecode = "startTimecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTimecode = endTimecode {
            try encodeContainer.encode(endTimecode, forKey: .endTimecode)
        }
        if let startTimecode = startTimecode {
            try encodeContainer.encode(startTimecode, forKey: .startTimecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endTimecodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTimecode)
        endTimecode = endTimecodeDecoded
        let startTimecodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTimecode)
        startTimecode = startTimecodeDecoded
    }
}

extension InputClipping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputClipping(endTimecode: \(String(describing: endTimecode)), startTimecode: \(String(describing: startTimecode)))"}
}

/// To transcode only portions of your input, include one input clip for each part of your input that you want in your output. All input clips that you specify will be included in every output of the job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/assembling-multiple-inputs-and-input-clips.html.
public struct InputClipping: Equatable {
    /// Set End timecode (EndTimecode) to the end of the portion of the input you are clipping. The frame corresponding to the End timecode value is included in the clip. Start timecode or End timecode may be left blank, but not both. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When choosing this value, take into account your setting for timecode source under input settings (InputTimecodeSource). For example, if you have embedded timecodes that start at 01:00:00:00 and you want your clip to end six minutes into the video, use 01:06:00:00.
    public let endTimecode: String?
    /// Set Start timecode (StartTimecode) to the beginning of the portion of the input you are clipping. The frame corresponding to the Start timecode value is included in the clip. Start timecode or End timecode may be left blank, but not both. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When choosing this value, take into account your setting for Input timecode source. For example, if you have embedded timecodes that start at 01:00:00:00 and you want your clip to begin five minutes into the video, use 01:05:00:00.
    public let startTimecode: String?

    public init (
        endTimecode: String? = nil,
        startTimecode: String? = nil
    )
    {
        self.endTimecode = endTimecode
        self.startTimecode = startTimecode
    }
}

/// Enable Deblock (InputDeblockFilter) to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
public enum InputDeblockFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension InputDeblockFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDeblockFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDeblockFilter(rawValue: rawValue) ?? InputDeblockFilter.sdkUnknown(rawValue)
    }
}

extension InputDecryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decryptionMode = "decryptionMode"
        case encryptedDecryptionKey = "encryptedDecryptionKey"
        case initializationVector = "initializationVector"
        case kmsKeyRegion = "kmsKeyRegion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decryptionMode = decryptionMode {
            try encodeContainer.encode(decryptionMode.rawValue, forKey: .decryptionMode)
        }
        if let encryptedDecryptionKey = encryptedDecryptionKey {
            try encodeContainer.encode(encryptedDecryptionKey, forKey: .encryptedDecryptionKey)
        }
        if let initializationVector = initializationVector {
            try encodeContainer.encode(initializationVector, forKey: .initializationVector)
        }
        if let kmsKeyRegion = kmsKeyRegion {
            try encodeContainer.encode(kmsKeyRegion, forKey: .kmsKeyRegion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decryptionModeDecoded = try containerValues.decodeIfPresent(DecryptionMode.self, forKey: .decryptionMode)
        decryptionMode = decryptionModeDecoded
        let encryptedDecryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptedDecryptionKey)
        encryptedDecryptionKey = encryptedDecryptionKeyDecoded
        let initializationVectorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .initializationVector)
        initializationVector = initializationVectorDecoded
        let kmsKeyRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyRegion)
        kmsKeyRegion = kmsKeyRegionDecoded
    }
}

extension InputDecryptionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputDecryptionSettings(decryptionMode: \(String(describing: decryptionMode)), encryptedDecryptionKey: \(String(describing: encryptedDecryptionKey)), initializationVector: \(String(describing: initializationVector)), kmsKeyRegion: \(String(describing: kmsKeyRegion)))"}
}

/// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
public struct InputDecryptionSettings: Equatable {
    /// Specify the encryption mode that you used to encrypt your input files.
    public let decryptionMode: DecryptionMode?
    /// Warning! Don't provide your encryption key in plaintext. Your job settings could be intercepted, making your encrypted content vulnerable. Specify the encrypted version of the data key that you used to encrypt your content. The data key must be encrypted by AWS Key Management Service (KMS). The key can be 128, 192, or 256 bits.
    public let encryptedDecryptionKey: String?
    /// Specify the initialization vector that you used when you encrypted your content before uploading it to Amazon S3. You can use a 16-byte initialization vector with any encryption mode. Or, you can use a 12-byte initialization vector with GCM or CTR. MediaConvert accepts only initialization vectors that are base64-encoded.
    public let initializationVector: String?
    /// Specify the AWS Region for AWS Key Management Service (KMS) that you used to encrypt your data key, if that Region is different from the one you are using for AWS Elemental MediaConvert.
    public let kmsKeyRegion: String?

    public init (
        decryptionMode: DecryptionMode? = nil,
        encryptedDecryptionKey: String? = nil,
        initializationVector: String? = nil,
        kmsKeyRegion: String? = nil
    )
    {
        self.decryptionMode = decryptionMode
        self.encryptedDecryptionKey = encryptedDecryptionKey
        self.initializationVector = initializationVector
        self.kmsKeyRegion = kmsKeyRegion
    }
}

/// Enable Denoise (InputDenoiseFilter) to filter noise from the input.  Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
public enum InputDenoiseFilter {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension InputDenoiseFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputDenoiseFilter] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputDenoiseFilter(rawValue: rawValue) ?? InputDenoiseFilter.sdkUnknown(rawValue)
    }
}

/// Specify how the transcoding service applies the denoise and deblock filters. You must also enable the filters separately, with Denoise (InputDenoiseFilter) and Deblock (InputDeblockFilter). * Auto - The transcoding service determines whether to apply filtering, depending on input type and quality. * Disable - The input is not filtered. This is true even if you use the API to enable them in (InputDeblockFilter) and (InputDeblockFilter). * Force - The input is filtered regardless of input type.
public enum InputFilterEnable {
    case auto
    case disable
    case force
    case sdkUnknown(String)
}

extension InputFilterEnable : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputFilterEnable] {
        return [
            .auto,
            .disable,
            .force,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .disable: return "DISABLE"
        case .force: return "FORCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputFilterEnable(rawValue: rawValue) ?? InputFilterEnable.sdkUnknown(rawValue)
    }
}

/// Set PSI control (InputPsiControl) for transport stream inputs to specify which data the demux process to scans. * Ignore PSI - Scan all PIDs for audio and video. * Use PSI - Scan only PSI data.
public enum InputPsiControl {
    case ignorePsi
    case usePsi
    case sdkUnknown(String)
}

extension InputPsiControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputPsiControl] {
        return [
            .ignorePsi,
            .usePsi,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignorePsi: return "IGNORE_PSI"
        case .usePsi: return "USE_PSI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputPsiControl(rawValue: rawValue) ?? InputPsiControl.sdkUnknown(rawValue)
    }
}

/// Use Rotate (InputRotate) to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
public enum InputRotate {
    case auto
    case degrees180
    case degrees270
    case degrees90
    case degree0
    case sdkUnknown(String)
}

extension InputRotate : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputRotate] {
        return [
            .auto,
            .degrees180,
            .degrees270,
            .degrees90,
            .degree0,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .degrees180: return "DEGREES_180"
        case .degrees270: return "DEGREES_270"
        case .degrees90: return "DEGREES_90"
        case .degree0: return "DEGREE_0"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputRotate(rawValue: rawValue) ?? InputRotate.sdkUnknown(rawValue)
    }
}

/// Use this setting when your input video codec is AVC-Intra. Ignore this setting for all other inputs. If the sample range metadata in your input video is accurate, or if you don't know about sample range, keep the default value, Follow (FOLLOW), for this setting. When you do, the service automatically detects your input sample range. If your input video has metadata indicating the wrong sample range, specify the accurate sample range here. When you do, MediaConvert ignores any sample range information in the input metadata. Regardless of whether MediaConvert uses the input sample range or the sample range that you specify, MediaConvert uses the sample range for transcoding and also writes it to the output metadata.
public enum InputSampleRange {
    case follow
    case fullRange
    case limitedRange
    case sdkUnknown(String)
}

extension InputSampleRange : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputSampleRange] {
        return [
            .follow,
            .fullRange,
            .limitedRange,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .follow: return "FOLLOW"
        case .fullRange: return "FULL_RANGE"
        case .limitedRange: return "LIMITED_RANGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputSampleRange(rawValue: rawValue) ?? InputSampleRange.sdkUnknown(rawValue)
    }
}

/// When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn't automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don't specify, the default value is Auto (AUTO). Auto is the correct setting for all inputs that are not PsF. Don't set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
public enum InputScanType {
    case auto
    case psf
    case sdkUnknown(String)
}

extension InputScanType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputScanType] {
        return [
            .auto,
            .psf,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .psf: return "PSF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputScanType(rawValue: rawValue) ?? InputScanType.sdkUnknown(rawValue)
    }
}

extension InputTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioSelectorGroups = "audioSelectorGroups"
        case audioSelectors = "audioSelectors"
        case captionSelectors = "captionSelectors"
        case crop = "crop"
        case deblockFilter = "deblockFilter"
        case denoiseFilter = "denoiseFilter"
        case filterEnable = "filterEnable"
        case filterStrength = "filterStrength"
        case imageInserter = "imageInserter"
        case inputClippings = "inputClippings"
        case inputScanType = "inputScanType"
        case position = "position"
        case programNumber = "programNumber"
        case psiControl = "psiControl"
        case timecodeSource = "timecodeSource"
        case timecodeStart = "timecodeStart"
        case videoSelector = "videoSelector"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorGroups = audioSelectorGroups {
            var audioSelectorGroupsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .audioSelectorGroups)
            for (dictKey0, __mapofaudioselectorgroup0) in audioSelectorGroups {
                try audioSelectorGroupsContainer.encode(__mapofaudioselectorgroup0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let audioSelectors = audioSelectors {
            var audioSelectorsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .audioSelectors)
            for (dictKey0, __mapofaudioselector0) in audioSelectors {
                try audioSelectorsContainer.encode(__mapofaudioselector0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let captionSelectors = captionSelectors {
            var captionSelectorsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .captionSelectors)
            for (dictKey0, __mapofcaptionselector0) in captionSelectors {
                try captionSelectorsContainer.encode(__mapofcaptionselector0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let crop = crop {
            try encodeContainer.encode(crop, forKey: .crop)
        }
        if let deblockFilter = deblockFilter {
            try encodeContainer.encode(deblockFilter.rawValue, forKey: .deblockFilter)
        }
        if let denoiseFilter = denoiseFilter {
            try encodeContainer.encode(denoiseFilter.rawValue, forKey: .denoiseFilter)
        }
        if let filterEnable = filterEnable {
            try encodeContainer.encode(filterEnable.rawValue, forKey: .filterEnable)
        }
        if filterStrength != 0 {
            try encodeContainer.encode(filterStrength, forKey: .filterStrength)
        }
        if let imageInserter = imageInserter {
            try encodeContainer.encode(imageInserter, forKey: .imageInserter)
        }
        if let inputClippings = inputClippings {
            var inputClippingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputClippings)
            for __listofinputclipping0 in inputClippings {
                try inputClippingsContainer.encode(__listofinputclipping0)
            }
        }
        if let inputScanType = inputScanType {
            try encodeContainer.encode(inputScanType.rawValue, forKey: .inputScanType)
        }
        if let position = position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let psiControl = psiControl {
            try encodeContainer.encode(psiControl.rawValue, forKey: .psiControl)
        }
        if let timecodeSource = timecodeSource {
            try encodeContainer.encode(timecodeSource.rawValue, forKey: .timecodeSource)
        }
        if let timecodeStart = timecodeStart {
            try encodeContainer.encode(timecodeStart, forKey: .timecodeStart)
        }
        if let videoSelector = videoSelector {
            try encodeContainer.encode(videoSelector, forKey: .videoSelector)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorGroupsContainer = try containerValues.decodeIfPresent([String: AudioSelectorGroup?].self, forKey: .audioSelectorGroups)
        var audioSelectorGroupsDecoded0: [String:AudioSelectorGroup]? = nil
        if let audioSelectorGroupsContainer = audioSelectorGroupsContainer {
            audioSelectorGroupsDecoded0 = [String:AudioSelectorGroup]()
            for (key0, audioselectorgroup0) in audioSelectorGroupsContainer {
                if let audioselectorgroup0 = audioselectorgroup0 {
                    audioSelectorGroupsDecoded0?[key0] = audioselectorgroup0
                }
            }
        }
        audioSelectorGroups = audioSelectorGroupsDecoded0
        let audioSelectorsContainer = try containerValues.decodeIfPresent([String: AudioSelector?].self, forKey: .audioSelectors)
        var audioSelectorsDecoded0: [String:AudioSelector]? = nil
        if let audioSelectorsContainer = audioSelectorsContainer {
            audioSelectorsDecoded0 = [String:AudioSelector]()
            for (key0, audioselector0) in audioSelectorsContainer {
                if let audioselector0 = audioselector0 {
                    audioSelectorsDecoded0?[key0] = audioselector0
                }
            }
        }
        audioSelectors = audioSelectorsDecoded0
        let captionSelectorsContainer = try containerValues.decodeIfPresent([String: CaptionSelector?].self, forKey: .captionSelectors)
        var captionSelectorsDecoded0: [String:CaptionSelector]? = nil
        if let captionSelectorsContainer = captionSelectorsContainer {
            captionSelectorsDecoded0 = [String:CaptionSelector]()
            for (key0, captionselector0) in captionSelectorsContainer {
                if let captionselector0 = captionselector0 {
                    captionSelectorsDecoded0?[key0] = captionselector0
                }
            }
        }
        captionSelectors = captionSelectorsDecoded0
        let cropDecoded = try containerValues.decodeIfPresent(Rectangle.self, forKey: .crop)
        crop = cropDecoded
        let deblockFilterDecoded = try containerValues.decodeIfPresent(InputDeblockFilter.self, forKey: .deblockFilter)
        deblockFilter = deblockFilterDecoded
        let denoiseFilterDecoded = try containerValues.decodeIfPresent(InputDenoiseFilter.self, forKey: .denoiseFilter)
        denoiseFilter = denoiseFilterDecoded
        let filterEnableDecoded = try containerValues.decodeIfPresent(InputFilterEnable.self, forKey: .filterEnable)
        filterEnable = filterEnableDecoded
        let filterStrengthDecoded = try containerValues.decode(Int.self, forKey: .filterStrength)
        filterStrength = filterStrengthDecoded
        let imageInserterDecoded = try containerValues.decodeIfPresent(ImageInserter.self, forKey: .imageInserter)
        imageInserter = imageInserterDecoded
        let inputClippingsContainer = try containerValues.decodeIfPresent([InputClipping?].self, forKey: .inputClippings)
        var inputClippingsDecoded0:[InputClipping]? = nil
        if let inputClippingsContainer = inputClippingsContainer {
            inputClippingsDecoded0 = [InputClipping]()
            for structure0 in inputClippingsContainer {
                if let structure0 = structure0 {
                    inputClippingsDecoded0?.append(structure0)
                }
            }
        }
        inputClippings = inputClippingsDecoded0
        let inputScanTypeDecoded = try containerValues.decodeIfPresent(InputScanType.self, forKey: .inputScanType)
        inputScanType = inputScanTypeDecoded
        let positionDecoded = try containerValues.decodeIfPresent(Rectangle.self, forKey: .position)
        position = positionDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let psiControlDecoded = try containerValues.decodeIfPresent(InputPsiControl.self, forKey: .psiControl)
        psiControl = psiControlDecoded
        let timecodeSourceDecoded = try containerValues.decodeIfPresent(InputTimecodeSource.self, forKey: .timecodeSource)
        timecodeSource = timecodeSourceDecoded
        let timecodeStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timecodeStart)
        timecodeStart = timecodeStartDecoded
        let videoSelectorDecoded = try containerValues.decodeIfPresent(VideoSelector.self, forKey: .videoSelector)
        videoSelector = videoSelectorDecoded
    }
}

extension InputTemplate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputTemplate(audioSelectorGroups: \(String(describing: audioSelectorGroups)), audioSelectors: \(String(describing: audioSelectors)), captionSelectors: \(String(describing: captionSelectors)), crop: \(String(describing: crop)), deblockFilter: \(String(describing: deblockFilter)), denoiseFilter: \(String(describing: denoiseFilter)), filterEnable: \(String(describing: filterEnable)), filterStrength: \(String(describing: filterStrength)), imageInserter: \(String(describing: imageInserter)), inputClippings: \(String(describing: inputClippings)), inputScanType: \(String(describing: inputScanType)), position: \(String(describing: position)), programNumber: \(String(describing: programNumber)), psiControl: \(String(describing: psiControl)), timecodeSource: \(String(describing: timecodeSource)), timecodeStart: \(String(describing: timecodeStart)), videoSelector: \(String(describing: videoSelector)))"}
}

/// Specified video input in a template.
public struct InputTemplate: Equatable {
    /// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab (AudioDescription). Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
    public let audioSelectorGroups: [String:AudioSelectorGroup]?
    /// Use Audio selectors (AudioSelectors) to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
    public let audioSelectors: [String:AudioSelector]?
    /// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 20 captions selectors per input.
    public let captionSelectors: [String:CaptionSelector]?
    /// Use Cropping selection (crop) to specify the video area that the service will include in the output video frame. If you specify a value here, it will override any value that you specify in the output setting Cropping selection (crop).
    public let crop: Rectangle?
    /// Enable Deblock (InputDeblockFilter) to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
    public let deblockFilter: InputDeblockFilter?
    /// Enable Denoise (InputDenoiseFilter) to filter noise from the input.  Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
    public let denoiseFilter: InputDenoiseFilter?
    /// Specify how the transcoding service applies the denoise and deblock filters. You must also enable the filters separately, with Denoise (InputDenoiseFilter) and Deblock (InputDeblockFilter). * Auto - The transcoding service determines whether to apply filtering, depending on input type and quality. * Disable - The input is not filtered. This is true even if you use the API to enable them in (InputDeblockFilter) and (InputDeblockFilter). * Force - The input is filtered regardless of input type.
    public let filterEnable: InputFilterEnable?
    /// Use Filter strength (FilterStrength) to adjust the magnitude the input filter settings (Deblock and Denoise). The range is -5 to 5. Default is 0.
    public let filterStrength: Int
    /// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input individually. This setting is disabled by default.
    public let imageInserter: ImageInserter?
    /// (InputClippings) contains sets of start and end times that together specify a portion of the input to be used in the outputs. If you provide only a start time, the clip will be the entire input from that point to the end. If you provide only an end time, it will be the entire input up to that point. When you specify more than one input clip, the transcoding service creates the job outputs by stringing the clips together in the order you specify them.
    public let inputClippings: [InputClipping]?
    /// When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn't automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don't specify, the default value is Auto (AUTO). Auto is the correct setting for all inputs that are not PsF. Don't set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
    public let inputScanType: InputScanType?
    /// Use Selection placement (position) to define the video area in your output frame. The area outside of the rectangle that you specify here is black. If you specify a value here, it will override any value that you specify in the output setting Selection placement (position). If you specify a value here, this will override any AFD values in your input, even if you set Respond to AFD (RespondToAfd) to Respond (RESPOND). If you specify a value here, this will ignore anything that you specify for the setting Scaling Behavior (scalingBehavior).
    public let position: Rectangle?
    /// Use Program (programNumber) to select a specific program from within a multi-program transport stream. Note that Quad 4K is not currently supported. Default is the first program within the transport stream. If the program you specify doesn't exist, the transcoding service will use this default.
    public let programNumber: Int
    /// Set PSI control (InputPsiControl) for transport stream inputs to specify which data the demux process to scans. * Ignore PSI - Scan all PIDs for audio and video. * Use PSI - Scan only PSI data.
    public let psiControl: InputPsiControl?
    /// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
    public let timecodeSource: InputTimecodeSource?
    /// Specify the timecode that you want the service to use for this input's initial frame. To use this setting, you must set the Timecode source setting, located under the input settings (InputTimecodeSource), to Specified start (SPECIFIEDSTART). For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
    public let timecodeStart: String?
    /// Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
    public let videoSelector: VideoSelector?

    public init (
        audioSelectorGroups: [String:AudioSelectorGroup]? = nil,
        audioSelectors: [String:AudioSelector]? = nil,
        captionSelectors: [String:CaptionSelector]? = nil,
        crop: Rectangle? = nil,
        deblockFilter: InputDeblockFilter? = nil,
        denoiseFilter: InputDenoiseFilter? = nil,
        filterEnable: InputFilterEnable? = nil,
        filterStrength: Int = 0,
        imageInserter: ImageInserter? = nil,
        inputClippings: [InputClipping]? = nil,
        inputScanType: InputScanType? = nil,
        position: Rectangle? = nil,
        programNumber: Int = 0,
        psiControl: InputPsiControl? = nil,
        timecodeSource: InputTimecodeSource? = nil,
        timecodeStart: String? = nil,
        videoSelector: VideoSelector? = nil
    )
    {
        self.audioSelectorGroups = audioSelectorGroups
        self.audioSelectors = audioSelectors
        self.captionSelectors = captionSelectors
        self.crop = crop
        self.deblockFilter = deblockFilter
        self.denoiseFilter = denoiseFilter
        self.filterEnable = filterEnable
        self.filterStrength = filterStrength
        self.imageInserter = imageInserter
        self.inputClippings = inputClippings
        self.inputScanType = inputScanType
        self.position = position
        self.programNumber = programNumber
        self.psiControl = psiControl
        self.timecodeSource = timecodeSource
        self.timecodeStart = timecodeStart
        self.videoSelector = videoSelector
    }
}

/// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
public enum InputTimecodeSource {
    case embedded
    case specifiedstart
    case zerobased
    case sdkUnknown(String)
}

extension InputTimecodeSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InputTimecodeSource] {
        return [
            .embedded,
            .specifiedstart,
            .zerobased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .embedded: return "EMBEDDED"
        case .specifiedstart: return "SPECIFIEDSTART"
        case .zerobased: return "ZEROBASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InputTimecodeSource(rawValue: rawValue) ?? InputTimecodeSource.sdkUnknown(rawValue)
    }
}

extension InsertableImage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "duration"
        case fadeIn = "fadeIn"
        case fadeOut = "fadeOut"
        case height = "height"
        case imageInserterInput = "imageInserterInput"
        case imageX = "imageX"
        case imageY = "imageY"
        case layer = "layer"
        case opacity = "opacity"
        case startTime = "startTime"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if fadeIn != 0 {
            try encodeContainer.encode(fadeIn, forKey: .fadeIn)
        }
        if fadeOut != 0 {
            try encodeContainer.encode(fadeOut, forKey: .fadeOut)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let imageInserterInput = imageInserterInput {
            try encodeContainer.encode(imageInserterInput, forKey: .imageInserterInput)
        }
        if imageX != 0 {
            try encodeContainer.encode(imageX, forKey: .imageX)
        }
        if imageY != 0 {
            try encodeContainer.encode(imageY, forKey: .imageY)
        }
        if layer != 0 {
            try encodeContainer.encode(layer, forKey: .layer)
        }
        if opacity != 0 {
            try encodeContainer.encode(opacity, forKey: .opacity)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let fadeInDecoded = try containerValues.decode(Int.self, forKey: .fadeIn)
        fadeIn = fadeInDecoded
        let fadeOutDecoded = try containerValues.decode(Int.self, forKey: .fadeOut)
        fadeOut = fadeOutDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let imageInserterInputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageInserterInput)
        imageInserterInput = imageInserterInputDecoded
        let imageXDecoded = try containerValues.decode(Int.self, forKey: .imageX)
        imageX = imageXDecoded
        let imageYDecoded = try containerValues.decode(Int.self, forKey: .imageY)
        imageY = imageYDecoded
        let layerDecoded = try containerValues.decode(Int.self, forKey: .layer)
        layer = layerDecoded
        let opacityDecoded = try containerValues.decode(Int.self, forKey: .opacity)
        opacity = opacityDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension InsertableImage: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InsertableImage(duration: \(String(describing: duration)), fadeIn: \(String(describing: fadeIn)), fadeOut: \(String(describing: fadeOut)), height: \(String(describing: height)), imageInserterInput: \(String(describing: imageInserterInput)), imageX: \(String(describing: imageX)), imageY: \(String(describing: imageY)), layer: \(String(describing: layer)), opacity: \(String(describing: opacity)), startTime: \(String(describing: startTime)), width: \(String(describing: width)))"}
}

/// These settings apply to a specific graphic overlay. You can include multiple overlays in your job.
public struct InsertableImage: Equatable {
    /// Specify the time, in milliseconds, for the image to remain on the output video. This duration includes fade-in time but not fade-out time.
    public let duration: Int
    /// Specify the length of time, in milliseconds, between the Start time that you specify for the image insertion and the time that the image appears at full opacity. Full opacity is the level that you specify for the opacity setting. If you don't specify a value for Fade-in, the image will appear abruptly at the overlay start time.
    public let fadeIn: Int
    /// Specify the length of time, in milliseconds, between the end of the time that you have specified for the image overlay Duration and when the overlaid image has faded to total transparency. If you don't specify a value for Fade-out, the image will disappear abruptly at the end of the inserted image duration.
    public let fadeOut: Int
    /// Specify the height of the inserted image in pixels. If you specify a value that's larger than the video resolution height, the service will crop your overlaid image to fit. To use the native height of the image, keep this setting blank.
    public let height: Int
    /// Specify the HTTP, HTTPS, or Amazon S3 location of the image that you want to overlay on the video. Use a PNG or TGA file.
    public let imageInserterInput: String?
    /// Specify the distance, in pixels, between the inserted image and the left edge of the video frame. Required for any image overlay that you specify.
    public let imageX: Int
    /// Specify the distance, in pixels, between the overlaid image and the top edge of the video frame. Required for any image overlay that you specify.
    public let imageY: Int
    /// Specify how overlapping inserted images appear. Images with higher values for Layer appear on top of images with lower values for Layer.
    public let layer: Int
    /// Use Opacity (Opacity) to specify how much of the underlying video shows through the inserted image. 0 is transparent and 100 is fully opaque. Default is 50.
    public let opacity: Int
    /// Specify the timecode of the frame that you want the overlay to first appear on. This must be in timecode (HH:MM:SS:FF or HH:MM:SS;FF) format. Remember to take into account your timecode source settings.
    public let startTime: String?
    /// Specify the width of the inserted image in pixels. If you specify a value that's larger than the video resolution width, the service will crop your overlaid image to fit. To use the native width of the image, keep this setting blank.
    public let width: Int

    public init (
        duration: Int = 0,
        fadeIn: Int = 0,
        fadeOut: Int = 0,
        height: Int = 0,
        imageInserterInput: String? = nil,
        imageX: Int = 0,
        imageY: Int = 0,
        layer: Int = 0,
        opacity: Int = 0,
        startTime: String? = nil,
        width: Int = 0
    )
    {
        self.duration = duration
        self.fadeIn = fadeIn
        self.fadeOut = fadeOut
        self.height = height
        self.imageInserterInput = imageInserterInput
        self.imageX = imageX
        self.imageY = imageY
        self.layer = layer
        self.opacity = opacity
        self.startTime = startTime
        self.width = width
    }
}

extension InternalServerErrorException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServerErrorException(message: \(String(describing: message)))"}
}

extension InternalServerErrorException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InternalServerErrorExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service encountered an unexpected condition and can't fulfill your request.
public struct InternalServerErrorException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorExceptionBody: Equatable {
    public let message: String?
}

extension InternalServerErrorExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Job: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case accelerationStatus = "accelerationStatus"
        case arn = "arn"
        case billingTagsSource = "billingTagsSource"
        case createdAt = "createdAt"
        case currentPhase = "currentPhase"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case hopDestinations = "hopDestinations"
        case id = "id"
        case jobPercentComplete = "jobPercentComplete"
        case jobTemplate = "jobTemplate"
        case messages = "messages"
        case outputGroupDetails = "outputGroupDetails"
        case priority = "priority"
        case queue = "queue"
        case queueTransitions = "queueTransitions"
        case retryCount = "retryCount"
        case role = "role"
        case settings = "settings"
        case simulateReservedQueue = "simulateReservedQueue"
        case status = "status"
        case statusUpdateInterval = "statusUpdateInterval"
        case timing = "timing"
        case userMetadata = "userMetadata"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let accelerationStatus = accelerationStatus {
            try encodeContainer.encode(accelerationStatus.rawValue, forKey: .accelerationStatus)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let billingTagsSource = billingTagsSource {
            try encodeContainer.encode(billingTagsSource.rawValue, forKey: .billingTagsSource)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let currentPhase = currentPhase {
            try encodeContainer.encode(currentPhase.rawValue, forKey: .currentPhase)
        }
        if errorCode != 0 {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if jobPercentComplete != 0 {
            try encodeContainer.encode(jobPercentComplete, forKey: .jobPercentComplete)
        }
        if let jobTemplate = jobTemplate {
            try encodeContainer.encode(jobTemplate, forKey: .jobTemplate)
        }
        if let messages = messages {
            try encodeContainer.encode(messages, forKey: .messages)
        }
        if let outputGroupDetails = outputGroupDetails {
            var outputGroupDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroupDetails)
            for __listofoutputgroupdetail0 in outputGroupDetails {
                try outputGroupDetailsContainer.encode(__listofoutputgroupdetail0)
            }
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let queueTransitions = queueTransitions {
            var queueTransitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queueTransitions)
            for __listofqueuetransition0 in queueTransitions {
                try queueTransitionsContainer.encode(__listofqueuetransition0)
            }
        }
        if retryCount != 0 {
            try encodeContainer.encode(retryCount, forKey: .retryCount)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let simulateReservedQueue = simulateReservedQueue {
            try encodeContainer.encode(simulateReservedQueue.rawValue, forKey: .simulateReservedQueue)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusUpdateInterval = statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let timing = timing {
            try encodeContainer.encode(timing, forKey: .timing)
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .userMetadata)
            for (dictKey0, __mapof__string0) in userMetadata {
                try userMetadataContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let accelerationStatusDecoded = try containerValues.decodeIfPresent(AccelerationStatus.self, forKey: .accelerationStatus)
        accelerationStatus = accelerationStatusDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let billingTagsSourceDecoded = try containerValues.decodeIfPresent(BillingTagsSource.self, forKey: .billingTagsSource)
        billingTagsSource = billingTagsSourceDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let currentPhaseDecoded = try containerValues.decodeIfPresent(JobPhase.self, forKey: .currentPhase)
        currentPhase = currentPhaseDecoded
        let errorCodeDecoded = try containerValues.decode(Int.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let jobPercentCompleteDecoded = try containerValues.decode(Int.self, forKey: .jobPercentComplete)
        jobPercentComplete = jobPercentCompleteDecoded
        let jobTemplateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
        let messagesDecoded = try containerValues.decodeIfPresent(JobMessages.self, forKey: .messages)
        messages = messagesDecoded
        let outputGroupDetailsContainer = try containerValues.decodeIfPresent([OutputGroupDetail?].self, forKey: .outputGroupDetails)
        var outputGroupDetailsDecoded0:[OutputGroupDetail]? = nil
        if let outputGroupDetailsContainer = outputGroupDetailsContainer {
            outputGroupDetailsDecoded0 = [OutputGroupDetail]()
            for structure0 in outputGroupDetailsContainer {
                if let structure0 = structure0 {
                    outputGroupDetailsDecoded0?.append(structure0)
                }
            }
        }
        outputGroupDetails = outputGroupDetailsDecoded0
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let queueTransitionsContainer = try containerValues.decodeIfPresent([QueueTransition?].self, forKey: .queueTransitions)
        var queueTransitionsDecoded0:[QueueTransition]? = nil
        if let queueTransitionsContainer = queueTransitionsContainer {
            queueTransitionsDecoded0 = [QueueTransition]()
            for structure0 in queueTransitionsContainer {
                if let structure0 = structure0 {
                    queueTransitionsDecoded0?.append(structure0)
                }
            }
        }
        queueTransitions = queueTransitionsDecoded0
        let retryCountDecoded = try containerValues.decode(Int.self, forKey: .retryCount)
        retryCount = retryCountDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(JobSettings.self, forKey: .settings)
        settings = settingsDecoded
        let simulateReservedQueueDecoded = try containerValues.decodeIfPresent(SimulateReservedQueue.self, forKey: .simulateReservedQueue)
        simulateReservedQueue = simulateReservedQueueDecoded
        let statusDecoded = try containerValues.decodeIfPresent(JobStatus.self, forKey: .status)
        status = statusDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
        let timingDecoded = try containerValues.decodeIfPresent(Timing.self, forKey: .timing)
        timing = timingDecoded
        let userMetadataContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .userMetadata)
        var userMetadataDecoded0: [String:String]? = nil
        if let userMetadataContainer = userMetadataContainer {
            userMetadataDecoded0 = [String:String]()
            for (key0, __string0) in userMetadataContainer {
                if let __string0 = __string0 {
                    userMetadataDecoded0?[key0] = __string0
                }
            }
        }
        userMetadata = userMetadataDecoded0
    }
}

extension Job: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Job(accelerationSettings: \(String(describing: accelerationSettings)), accelerationStatus: \(String(describing: accelerationStatus)), arn: \(String(describing: arn)), billingTagsSource: \(String(describing: billingTagsSource)), createdAt: \(String(describing: createdAt)), currentPhase: \(String(describing: currentPhase)), errorCode: \(String(describing: errorCode)), errorMessage: \(String(describing: errorMessage)), hopDestinations: \(String(describing: hopDestinations)), id: \(String(describing: id)), jobPercentComplete: \(String(describing: jobPercentComplete)), jobTemplate: \(String(describing: jobTemplate)), messages: \(String(describing: messages)), outputGroupDetails: \(String(describing: outputGroupDetails)), priority: \(String(describing: priority)), queue: \(String(describing: queue)), queueTransitions: \(String(describing: queueTransitions)), retryCount: \(String(describing: retryCount)), role: \(String(describing: role)), settings: \(String(describing: settings)), simulateReservedQueue: \(String(describing: simulateReservedQueue)), status: \(String(describing: status)), statusUpdateInterval: \(String(describing: statusUpdateInterval)), timing: \(String(describing: timing)), userMetadata: \(String(describing: userMetadata)))"}
}

/// Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
public struct Job: Equatable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    public let accelerationSettings: AccelerationSettings?
    /// Describes whether the current job is running with accelerated transcoding. For jobs that have Acceleration (AccelerationMode) set to DISABLED, AccelerationStatus is always NOT_APPLICABLE. For jobs that have Acceleration (AccelerationMode) set to ENABLED or PREFERRED, AccelerationStatus is one of the other states. AccelerationStatus is IN_PROGRESS initially, while the service determines whether the input files and job settings are compatible with accelerated transcoding. If they are, AcclerationStatus is ACCELERATED. If your input files and job settings aren't compatible with accelerated transcoding, the service either fails your job or runs it without accelerated transcoding, depending on how you set Acceleration (AccelerationMode). When the service runs your job without accelerated transcoding, AccelerationStatus is NOT_ACCELERATED.
    public let accelerationStatus: AccelerationStatus?
    /// An identifier for this resource that is unique within all of AWS.
    public let arn: String?
    /// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
    public let billingTagsSource: BillingTagsSource?
    /// The time, in Unix epoch format in seconds, when the job got created.
    public let createdAt: Date?
    /// A job's phase can be PROBING, TRANSCODING OR UPLOADING
    public let currentPhase: JobPhase?
    /// Error code for the job
    public let errorCode: Int
    /// Error message of Job
    public let errorMessage: String?
    /// Optional list of hop destinations.
    public let hopDestinations: [HopDestination]?
    /// A portion of the job's ARN, unique within your AWS Elemental MediaConvert resources
    public let id: String?
    /// An estimate of how far your job has progressed. This estimate is shown as a percentage of the total time from when your job leaves its queue to when your output files appear in your output Amazon S3 bucket. AWS Elemental MediaConvert provides jobPercentComplete in CloudWatch STATUS_UPDATE events and in the response to GetJob and ListJobs requests. The jobPercentComplete estimate is reliable for the following input containers: Quicktime, Transport Stream, MP4, and MXF. For some jobs, the service can't provide information about job progress. In those cases, jobPercentComplete returns a null value.
    public let jobPercentComplete: Int
    /// The job template that the job is created from, if it is created from a job template.
    public let jobTemplate: String?
    /// Provides messages from the service about jobs that you have already successfully submitted.
    public let messages: JobMessages?
    /// List of output group details
    public let outputGroupDetails: [OutputGroupDetail]?
    /// Relative priority on the job.
    public let priority: Int
    /// When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public let queue: String?
    /// The job's queue hopping history.
    public let queueTransitions: [QueueTransition]?
    /// The number of times that the service automatically attempted to process your job after encountering an error.
    public let retryCount: Int
    /// The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
    public let role: String?
    /// JobSettings contains all the transcode settings for a job.
    public let settings: JobSettings?
    /// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
    public let simulateReservedQueue: SimulateReservedQueue?
    /// A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    public let status: JobStatus?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public let statusUpdateInterval: StatusUpdateInterval?
    /// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
    public let timing: Timing?
    /// User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.
    public let userMetadata: [String:String]?

    public init (
        accelerationSettings: AccelerationSettings? = nil,
        accelerationStatus: AccelerationStatus? = nil,
        arn: String? = nil,
        billingTagsSource: BillingTagsSource? = nil,
        createdAt: Date? = nil,
        currentPhase: JobPhase? = nil,
        errorCode: Int = 0,
        errorMessage: String? = nil,
        hopDestinations: [HopDestination]? = nil,
        id: String? = nil,
        jobPercentComplete: Int = 0,
        jobTemplate: String? = nil,
        messages: JobMessages? = nil,
        outputGroupDetails: [OutputGroupDetail]? = nil,
        priority: Int = 0,
        queue: String? = nil,
        queueTransitions: [QueueTransition]? = nil,
        retryCount: Int = 0,
        role: String? = nil,
        settings: JobSettings? = nil,
        simulateReservedQueue: SimulateReservedQueue? = nil,
        status: JobStatus? = nil,
        statusUpdateInterval: StatusUpdateInterval? = nil,
        timing: Timing? = nil,
        userMetadata: [String:String]? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.accelerationStatus = accelerationStatus
        self.arn = arn
        self.billingTagsSource = billingTagsSource
        self.createdAt = createdAt
        self.currentPhase = currentPhase
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.hopDestinations = hopDestinations
        self.id = id
        self.jobPercentComplete = jobPercentComplete
        self.jobTemplate = jobTemplate
        self.messages = messages
        self.outputGroupDetails = outputGroupDetails
        self.priority = priority
        self.queue = queue
        self.queueTransitions = queueTransitions
        self.retryCount = retryCount
        self.role = role
        self.settings = settings
        self.simulateReservedQueue = simulateReservedQueue
        self.status = status
        self.statusUpdateInterval = statusUpdateInterval
        self.timing = timing
        self.userMetadata = userMetadata
    }
}

extension JobMessages: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case info = "info"
        case warning = "warning"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let info = info {
            var infoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .info)
            for __listof__string0 in info {
                try infoContainer.encode(__listof__string0)
            }
        }
        if let warning = warning {
            var warningContainer = encodeContainer.nestedUnkeyedContainer(forKey: .warning)
            for __listof__string0 in warning {
                try warningContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let infoContainer = try containerValues.decodeIfPresent([String?].self, forKey: .info)
        var infoDecoded0:[String]? = nil
        if let infoContainer = infoContainer {
            infoDecoded0 = [String]()
            for string0 in infoContainer {
                if let string0 = string0 {
                    infoDecoded0?.append(string0)
                }
            }
        }
        info = infoDecoded0
        let warningContainer = try containerValues.decodeIfPresent([String?].self, forKey: .warning)
        var warningDecoded0:[String]? = nil
        if let warningContainer = warningContainer {
            warningDecoded0 = [String]()
            for string0 in warningContainer {
                if let string0 = string0 {
                    warningDecoded0?.append(string0)
                }
            }
        }
        warning = warningDecoded0
    }
}

extension JobMessages: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobMessages(info: \(String(describing: info)), warning: \(String(describing: warning)))"}
}

/// Provides messages from the service about jobs that you have already successfully submitted.
public struct JobMessages: Equatable {
    /// List of messages that are informational only and don't indicate a problem with your job.
    public let info: [String]?
    /// List of messages that warn about conditions that might cause your job not to run or to fail.
    public let warning: [String]?

    public init (
        info: [String]? = nil,
        warning: [String]? = nil
    )
    {
        self.info = info
        self.warning = warning
    }
}

/// A job's phase can be PROBING, TRANSCODING OR UPLOADING
public enum JobPhase {
    case probing
    case transcoding
    case uploading
    case sdkUnknown(String)
}

extension JobPhase : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [JobPhase] {
        return [
            .probing,
            .transcoding,
            .uploading,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .probing: return "PROBING"
        case .transcoding: return "TRANSCODING"
        case .uploading: return "UPLOADING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = JobPhase(rawValue: rawValue) ?? JobPhase.sdkUnknown(rawValue)
    }
}

extension JobSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adAvailOffset = "adAvailOffset"
        case availBlanking = "availBlanking"
        case esam = "esam"
        case inputs = "inputs"
        case kantarWatermark = "kantarWatermark"
        case motionImageInserter = "motionImageInserter"
        case nielsenConfiguration = "nielsenConfiguration"
        case nielsenNonLinearWatermark = "nielsenNonLinearWatermark"
        case outputGroups = "outputGroups"
        case timecodeConfig = "timecodeConfig"
        case timedMetadataInsertion = "timedMetadataInsertion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if adAvailOffset != 0 {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let availBlanking = availBlanking {
            try encodeContainer.encode(availBlanking, forKey: .availBlanking)
        }
        if let esam = esam {
            try encodeContainer.encode(esam, forKey: .esam)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for __listofinput0 in inputs {
                try inputsContainer.encode(__listofinput0)
            }
        }
        if let kantarWatermark = kantarWatermark {
            try encodeContainer.encode(kantarWatermark, forKey: .kantarWatermark)
        }
        if let motionImageInserter = motionImageInserter {
            try encodeContainer.encode(motionImageInserter, forKey: .motionImageInserter)
        }
        if let nielsenConfiguration = nielsenConfiguration {
            try encodeContainer.encode(nielsenConfiguration, forKey: .nielsenConfiguration)
        }
        if let nielsenNonLinearWatermark = nielsenNonLinearWatermark {
            try encodeContainer.encode(nielsenNonLinearWatermark, forKey: .nielsenNonLinearWatermark)
        }
        if let outputGroups = outputGroups {
            var outputGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroups)
            for __listofoutputgroup0 in outputGroups {
                try outputGroupsContainer.encode(__listofoutputgroup0)
            }
        }
        if let timecodeConfig = timecodeConfig {
            try encodeContainer.encode(timecodeConfig, forKey: .timecodeConfig)
        }
        if let timedMetadataInsertion = timedMetadataInsertion {
            try encodeContainer.encode(timedMetadataInsertion, forKey: .timedMetadataInsertion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decode(Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let availBlankingDecoded = try containerValues.decodeIfPresent(AvailBlanking.self, forKey: .availBlanking)
        availBlanking = availBlankingDecoded
        let esamDecoded = try containerValues.decodeIfPresent(EsamSettings.self, forKey: .esam)
        esam = esamDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Input?].self, forKey: .inputs)
        var inputsDecoded0:[Input]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Input]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let kantarWatermarkDecoded = try containerValues.decodeIfPresent(KantarWatermarkSettings.self, forKey: .kantarWatermark)
        kantarWatermark = kantarWatermarkDecoded
        let motionImageInserterDecoded = try containerValues.decodeIfPresent(MotionImageInserter.self, forKey: .motionImageInserter)
        motionImageInserter = motionImageInserterDecoded
        let nielsenConfigurationDecoded = try containerValues.decodeIfPresent(NielsenConfiguration.self, forKey: .nielsenConfiguration)
        nielsenConfiguration = nielsenConfigurationDecoded
        let nielsenNonLinearWatermarkDecoded = try containerValues.decodeIfPresent(NielsenNonLinearWatermarkSettings.self, forKey: .nielsenNonLinearWatermark)
        nielsenNonLinearWatermark = nielsenNonLinearWatermarkDecoded
        let outputGroupsContainer = try containerValues.decodeIfPresent([OutputGroup?].self, forKey: .outputGroups)
        var outputGroupsDecoded0:[OutputGroup]? = nil
        if let outputGroupsContainer = outputGroupsContainer {
            outputGroupsDecoded0 = [OutputGroup]()
            for structure0 in outputGroupsContainer {
                if let structure0 = structure0 {
                    outputGroupsDecoded0?.append(structure0)
                }
            }
        }
        outputGroups = outputGroupsDecoded0
        let timecodeConfigDecoded = try containerValues.decodeIfPresent(TimecodeConfig.self, forKey: .timecodeConfig)
        timecodeConfig = timecodeConfigDecoded
        let timedMetadataInsertionDecoded = try containerValues.decodeIfPresent(TimedMetadataInsertion.self, forKey: .timedMetadataInsertion)
        timedMetadataInsertion = timedMetadataInsertionDecoded
    }
}

extension JobSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobSettings(adAvailOffset: \(String(describing: adAvailOffset)), availBlanking: \(String(describing: availBlanking)), esam: \(String(describing: esam)), inputs: \(String(describing: inputs)), kantarWatermark: \(String(describing: kantarWatermark)), motionImageInserter: \(String(describing: motionImageInserter)), nielsenConfiguration: \(String(describing: nielsenConfiguration)), nielsenNonLinearWatermark: \(String(describing: nielsenNonLinearWatermark)), outputGroups: \(String(describing: outputGroups)), timecodeConfig: \(String(describing: timecodeConfig)), timedMetadataInsertion: \(String(describing: timedMetadataInsertion)))"}
}

/// JobSettings contains all the transcode settings for a job.
public struct JobSettings: Equatable {
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time.
    public let adAvailOffset: Int
    /// Settings for ad avail blanking.  Video can be blanked or overlaid with an image, and audio muted during SCTE-35 triggered ad avails.
    public let availBlanking: AvailBlanking?
    /// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
    public let esam: EsamSettings?
    /// Use Inputs (inputs) to define source file used in the transcode job. There can be multiple inputs add in a job. These inputs will be concantenated together to create the output.
    public let inputs: [Input]?
    /// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
    public let kantarWatermark: KantarWatermarkSettings?
    /// Overlay motion graphics on top of your video. The motion graphics that you specify here appear on all outputs in all output groups. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/motion-graphic-overlay.html.
    public let motionImageInserter: MotionImageInserter?
    /// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration (nielsenConfiguration), MediaConvert enables PCM to ID3 tagging for all outputs in the job. To enable Nielsen configuration programmatically, include an instance of nielsenConfiguration in your JSON job specification. Even if you don't include any children of nielsenConfiguration, you still enable the setting.
    public let nielsenConfiguration: NielsenConfiguration?
    /// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that  MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to  specifying these values, you also need to set up your cloud TIC server. These settings apply to  every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
    public let nielsenNonLinearWatermark: NielsenNonLinearWatermarkSettings?
    /// (OutputGroups) contains one group of settings for each set of outputs that share a common package type. All unpackaged files (MPEG-4, MPEG-2 TS, Quicktime, MXF, and no container) are grouped in a single output group as well. Required in (OutputGroups) is a group of settings that apply to the whole group. This required object depends on the value you set for (Type) under (OutputGroups)>(OutputGroupSettings). Type, settings object pairs are as follows. * FILE_GROUP_SETTINGS, FileGroupSettings * HLS_GROUP_SETTINGS, HlsGroupSettings * DASH_ISO_GROUP_SETTINGS, DashIsoGroupSettings * MS_SMOOTH_GROUP_SETTINGS, MsSmoothGroupSettings * CMAF_GROUP_SETTINGS, CmafGroupSettings
    public let outputGroups: [OutputGroup]?
    /// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
    public let timecodeConfig: TimecodeConfig?
    /// Enable Timed metadata insertion (TimedMetadataInsertion) to include ID3 tags in any HLS outputs. To include timed metadata, you must enable it here, enable it in each output container, and specify tags and timecodes in ID3 insertion (Id3Insertion) objects.
    public let timedMetadataInsertion: TimedMetadataInsertion?

    public init (
        adAvailOffset: Int = 0,
        availBlanking: AvailBlanking? = nil,
        esam: EsamSettings? = nil,
        inputs: [Input]? = nil,
        kantarWatermark: KantarWatermarkSettings? = nil,
        motionImageInserter: MotionImageInserter? = nil,
        nielsenConfiguration: NielsenConfiguration? = nil,
        nielsenNonLinearWatermark: NielsenNonLinearWatermarkSettings? = nil,
        outputGroups: [OutputGroup]? = nil,
        timecodeConfig: TimecodeConfig? = nil,
        timedMetadataInsertion: TimedMetadataInsertion? = nil
    )
    {
        self.adAvailOffset = adAvailOffset
        self.availBlanking = availBlanking
        self.esam = esam
        self.inputs = inputs
        self.kantarWatermark = kantarWatermark
        self.motionImageInserter = motionImageInserter
        self.nielsenConfiguration = nielsenConfiguration
        self.nielsenNonLinearWatermark = nielsenNonLinearWatermark
        self.outputGroups = outputGroups
        self.timecodeConfig = timecodeConfig
        self.timedMetadataInsertion = timedMetadataInsertion
    }
}

/// A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
public enum JobStatus {
    case canceled
    case complete
    case error
    case progressing
    case submitted
    case sdkUnknown(String)
}

extension JobStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [JobStatus] {
        return [
            .canceled,
            .complete,
            .error,
            .progressing,
            .submitted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .canceled: return "CANCELED"
        case .complete: return "COMPLETE"
        case .error: return "ERROR"
        case .progressing: return "PROGRESSING"
        case .submitted: return "SUBMITTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
    }
}

extension JobTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case arn = "arn"
        case category = "category"
        case createdAt = "createdAt"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case lastUpdated = "lastUpdated"
        case name = "name"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let statusUpdateInterval = statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(JobTemplateSettings.self, forKey: .settings)
        settings = settingsDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}

extension JobTemplate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobTemplate(accelerationSettings: \(String(describing: accelerationSettings)), arn: \(String(describing: arn)), category: \(String(describing: category)), createdAt: \(String(describing: createdAt)), description: \(String(describing: description)), hopDestinations: \(String(describing: hopDestinations)), lastUpdated: \(String(describing: lastUpdated)), name: \(String(describing: name)), priority: \(String(describing: priority)), queue: \(String(describing: queue)), settings: \(String(describing: settings)), statusUpdateInterval: \(String(describing: statusUpdateInterval)), type: \(String(describing: type)))"}
}

/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
public struct JobTemplate: Equatable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    public let accelerationSettings: AccelerationSettings?
    /// An identifier for this resource that is unique within all of AWS.
    public let arn: String?
    /// An optional category you create to organize your job templates.
    public let category: String?
    /// The timestamp in epoch seconds for Job template creation.
    public let createdAt: Date?
    /// An optional description you create for each job template.
    public let description: String?
    /// Optional list of hop destinations.
    public let hopDestinations: [HopDestination]?
    /// The timestamp in epoch seconds when the Job template was last updated.
    public let lastUpdated: Date?
    /// A name you create for each job template. Each name must be unique within your account.
    public let name: String?
    /// Relative priority on the job.
    public let priority: Int
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    public let queue: String?
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    public let settings: JobTemplateSettings?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public let statusUpdateInterval: StatusUpdateInterval?
    /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
    public let type: `Type`?

    public init (
        accelerationSettings: AccelerationSettings? = nil,
        arn: String? = nil,
        category: String? = nil,
        createdAt: Date? = nil,
        description: String? = nil,
        hopDestinations: [HopDestination]? = nil,
        lastUpdated: Date? = nil,
        name: String? = nil,
        priority: Int = 0,
        queue: String? = nil,
        settings: JobTemplateSettings? = nil,
        statusUpdateInterval: StatusUpdateInterval? = nil,
        type: `Type`? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.arn = arn
        self.category = category
        self.createdAt = createdAt
        self.description = description
        self.hopDestinations = hopDestinations
        self.lastUpdated = lastUpdated
        self.name = name
        self.priority = priority
        self.queue = queue
        self.settings = settings
        self.statusUpdateInterval = statusUpdateInterval
        self.type = type
    }
}

/// Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
public enum JobTemplateListBy {
    case creationDate
    case name
    case system
    case sdkUnknown(String)
}

extension JobTemplateListBy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [JobTemplateListBy] {
        return [
            .creationDate,
            .name,
            .system,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .creationDate: return "CREATION_DATE"
        case .name: return "NAME"
        case .system: return "SYSTEM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = JobTemplateListBy(rawValue: rawValue) ?? JobTemplateListBy.sdkUnknown(rawValue)
    }
}

extension JobTemplateSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adAvailOffset = "adAvailOffset"
        case availBlanking = "availBlanking"
        case esam = "esam"
        case inputs = "inputs"
        case kantarWatermark = "kantarWatermark"
        case motionImageInserter = "motionImageInserter"
        case nielsenConfiguration = "nielsenConfiguration"
        case nielsenNonLinearWatermark = "nielsenNonLinearWatermark"
        case outputGroups = "outputGroups"
        case timecodeConfig = "timecodeConfig"
        case timedMetadataInsertion = "timedMetadataInsertion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if adAvailOffset != 0 {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let availBlanking = availBlanking {
            try encodeContainer.encode(availBlanking, forKey: .availBlanking)
        }
        if let esam = esam {
            try encodeContainer.encode(esam, forKey: .esam)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for __listofinputtemplate0 in inputs {
                try inputsContainer.encode(__listofinputtemplate0)
            }
        }
        if let kantarWatermark = kantarWatermark {
            try encodeContainer.encode(kantarWatermark, forKey: .kantarWatermark)
        }
        if let motionImageInserter = motionImageInserter {
            try encodeContainer.encode(motionImageInserter, forKey: .motionImageInserter)
        }
        if let nielsenConfiguration = nielsenConfiguration {
            try encodeContainer.encode(nielsenConfiguration, forKey: .nielsenConfiguration)
        }
        if let nielsenNonLinearWatermark = nielsenNonLinearWatermark {
            try encodeContainer.encode(nielsenNonLinearWatermark, forKey: .nielsenNonLinearWatermark)
        }
        if let outputGroups = outputGroups {
            var outputGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroups)
            for __listofoutputgroup0 in outputGroups {
                try outputGroupsContainer.encode(__listofoutputgroup0)
            }
        }
        if let timecodeConfig = timecodeConfig {
            try encodeContainer.encode(timecodeConfig, forKey: .timecodeConfig)
        }
        if let timedMetadataInsertion = timedMetadataInsertion {
            try encodeContainer.encode(timedMetadataInsertion, forKey: .timedMetadataInsertion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decode(Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let availBlankingDecoded = try containerValues.decodeIfPresent(AvailBlanking.self, forKey: .availBlanking)
        availBlanking = availBlankingDecoded
        let esamDecoded = try containerValues.decodeIfPresent(EsamSettings.self, forKey: .esam)
        esam = esamDecoded
        let inputsContainer = try containerValues.decodeIfPresent([InputTemplate?].self, forKey: .inputs)
        var inputsDecoded0:[InputTemplate]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [InputTemplate]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let kantarWatermarkDecoded = try containerValues.decodeIfPresent(KantarWatermarkSettings.self, forKey: .kantarWatermark)
        kantarWatermark = kantarWatermarkDecoded
        let motionImageInserterDecoded = try containerValues.decodeIfPresent(MotionImageInserter.self, forKey: .motionImageInserter)
        motionImageInserter = motionImageInserterDecoded
        let nielsenConfigurationDecoded = try containerValues.decodeIfPresent(NielsenConfiguration.self, forKey: .nielsenConfiguration)
        nielsenConfiguration = nielsenConfigurationDecoded
        let nielsenNonLinearWatermarkDecoded = try containerValues.decodeIfPresent(NielsenNonLinearWatermarkSettings.self, forKey: .nielsenNonLinearWatermark)
        nielsenNonLinearWatermark = nielsenNonLinearWatermarkDecoded
        let outputGroupsContainer = try containerValues.decodeIfPresent([OutputGroup?].self, forKey: .outputGroups)
        var outputGroupsDecoded0:[OutputGroup]? = nil
        if let outputGroupsContainer = outputGroupsContainer {
            outputGroupsDecoded0 = [OutputGroup]()
            for structure0 in outputGroupsContainer {
                if let structure0 = structure0 {
                    outputGroupsDecoded0?.append(structure0)
                }
            }
        }
        outputGroups = outputGroupsDecoded0
        let timecodeConfigDecoded = try containerValues.decodeIfPresent(TimecodeConfig.self, forKey: .timecodeConfig)
        timecodeConfig = timecodeConfigDecoded
        let timedMetadataInsertionDecoded = try containerValues.decodeIfPresent(TimedMetadataInsertion.self, forKey: .timedMetadataInsertion)
        timedMetadataInsertion = timedMetadataInsertionDecoded
    }
}

extension JobTemplateSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobTemplateSettings(adAvailOffset: \(String(describing: adAvailOffset)), availBlanking: \(String(describing: availBlanking)), esam: \(String(describing: esam)), inputs: \(String(describing: inputs)), kantarWatermark: \(String(describing: kantarWatermark)), motionImageInserter: \(String(describing: motionImageInserter)), nielsenConfiguration: \(String(describing: nielsenConfiguration)), nielsenNonLinearWatermark: \(String(describing: nielsenNonLinearWatermark)), outputGroups: \(String(describing: outputGroups)), timecodeConfig: \(String(describing: timecodeConfig)), timedMetadataInsertion: \(String(describing: timedMetadataInsertion)))"}
}

/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
public struct JobTemplateSettings: Equatable {
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time.
    public let adAvailOffset: Int
    /// Settings for ad avail blanking.  Video can be blanked or overlaid with an image, and audio muted during SCTE-35 triggered ad avails.
    public let availBlanking: AvailBlanking?
    /// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
    public let esam: EsamSettings?
    /// Use Inputs (inputs) to define the source file used in the transcode job. There can only be one input in a job template.  Using the API, you can include multiple inputs when referencing a job template.
    public let inputs: [InputTemplate]?
    /// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
    public let kantarWatermark: KantarWatermarkSettings?
    /// Overlay motion graphics on top of your video. The motion graphics that you specify here appear on all outputs in all output groups. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/motion-graphic-overlay.html.
    public let motionImageInserter: MotionImageInserter?
    /// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration (nielsenConfiguration), MediaConvert enables PCM to ID3 tagging for all outputs in the job. To enable Nielsen configuration programmatically, include an instance of nielsenConfiguration in your JSON job specification. Even if you don't include any children of nielsenConfiguration, you still enable the setting.
    public let nielsenConfiguration: NielsenConfiguration?
    /// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that  MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to  specifying these values, you also need to set up your cloud TIC server. These settings apply to  every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
    public let nielsenNonLinearWatermark: NielsenNonLinearWatermarkSettings?
    /// (OutputGroups) contains one group of settings for each set of outputs that share a common package type. All unpackaged files (MPEG-4, MPEG-2 TS, Quicktime, MXF, and no container) are grouped in a single output group as well. Required in (OutputGroups) is a group of settings that apply to the whole group. This required object depends on the value you set for (Type) under (OutputGroups)>(OutputGroupSettings). Type, settings object pairs are as follows. * FILE_GROUP_SETTINGS, FileGroupSettings * HLS_GROUP_SETTINGS, HlsGroupSettings * DASH_ISO_GROUP_SETTINGS, DashIsoGroupSettings * MS_SMOOTH_GROUP_SETTINGS, MsSmoothGroupSettings * CMAF_GROUP_SETTINGS, CmafGroupSettings
    public let outputGroups: [OutputGroup]?
    /// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
    public let timecodeConfig: TimecodeConfig?
    /// Enable Timed metadata insertion (TimedMetadataInsertion) to include ID3 tags in any HLS outputs. To include timed metadata, you must enable it here, enable it in each output container, and specify tags and timecodes in ID3 insertion (Id3Insertion) objects.
    public let timedMetadataInsertion: TimedMetadataInsertion?

    public init (
        adAvailOffset: Int = 0,
        availBlanking: AvailBlanking? = nil,
        esam: EsamSettings? = nil,
        inputs: [InputTemplate]? = nil,
        kantarWatermark: KantarWatermarkSettings? = nil,
        motionImageInserter: MotionImageInserter? = nil,
        nielsenConfiguration: NielsenConfiguration? = nil,
        nielsenNonLinearWatermark: NielsenNonLinearWatermarkSettings? = nil,
        outputGroups: [OutputGroup]? = nil,
        timecodeConfig: TimecodeConfig? = nil,
        timedMetadataInsertion: TimedMetadataInsertion? = nil
    )
    {
        self.adAvailOffset = adAvailOffset
        self.availBlanking = availBlanking
        self.esam = esam
        self.inputs = inputs
        self.kantarWatermark = kantarWatermark
        self.motionImageInserter = motionImageInserter
        self.nielsenConfiguration = nielsenConfiguration
        self.nielsenNonLinearWatermark = nielsenNonLinearWatermark
        self.outputGroups = outputGroups
        self.timecodeConfig = timecodeConfig
        self.timedMetadataInsertion = timedMetadataInsertion
    }
}

extension KantarWatermarkSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelName = "channelName"
        case contentReference = "contentReference"
        case credentialsSecretName = "credentialsSecretName"
        case fileOffset = "fileOffset"
        case kantarLicenseId = "kantarLicenseId"
        case kantarServerUrl = "kantarServerUrl"
        case logDestination = "logDestination"
        case metadata3 = "metadata3"
        case metadata4 = "metadata4"
        case metadata5 = "metadata5"
        case metadata6 = "metadata6"
        case metadata7 = "metadata7"
        case metadata8 = "metadata8"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let contentReference = contentReference {
            try encodeContainer.encode(contentReference, forKey: .contentReference)
        }
        if let credentialsSecretName = credentialsSecretName {
            try encodeContainer.encode(credentialsSecretName, forKey: .credentialsSecretName)
        }
        if fileOffset != 0.0 {
            try encodeContainer.encode(fileOffset, forKey: .fileOffset)
        }
        if kantarLicenseId != 0 {
            try encodeContainer.encode(kantarLicenseId, forKey: .kantarLicenseId)
        }
        if let kantarServerUrl = kantarServerUrl {
            try encodeContainer.encode(kantarServerUrl, forKey: .kantarServerUrl)
        }
        if let logDestination = logDestination {
            try encodeContainer.encode(logDestination, forKey: .logDestination)
        }
        if let metadata3 = metadata3 {
            try encodeContainer.encode(metadata3, forKey: .metadata3)
        }
        if let metadata4 = metadata4 {
            try encodeContainer.encode(metadata4, forKey: .metadata4)
        }
        if let metadata5 = metadata5 {
            try encodeContainer.encode(metadata5, forKey: .metadata5)
        }
        if let metadata6 = metadata6 {
            try encodeContainer.encode(metadata6, forKey: .metadata6)
        }
        if let metadata7 = metadata7 {
            try encodeContainer.encode(metadata7, forKey: .metadata7)
        }
        if let metadata8 = metadata8 {
            try encodeContainer.encode(metadata8, forKey: .metadata8)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let contentReferenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentReference)
        contentReference = contentReferenceDecoded
        let credentialsSecretNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .credentialsSecretName)
        credentialsSecretName = credentialsSecretNameDecoded
        let fileOffsetDecoded = try containerValues.decode(Double.self, forKey: .fileOffset)
        fileOffset = fileOffsetDecoded
        let kantarLicenseIdDecoded = try containerValues.decode(Int.self, forKey: .kantarLicenseId)
        kantarLicenseId = kantarLicenseIdDecoded
        let kantarServerUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kantarServerUrl)
        kantarServerUrl = kantarServerUrlDecoded
        let logDestinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logDestination)
        logDestination = logDestinationDecoded
        let metadata3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata3)
        metadata3 = metadata3Decoded
        let metadata4Decoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata4)
        metadata4 = metadata4Decoded
        let metadata5Decoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata5)
        metadata5 = metadata5Decoded
        let metadata6Decoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata6)
        metadata6 = metadata6Decoded
        let metadata7Decoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata7)
        metadata7 = metadata7Decoded
        let metadata8Decoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata8)
        metadata8 = metadata8Decoded
    }
}

extension KantarWatermarkSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KantarWatermarkSettings(channelName: \(String(describing: channelName)), contentReference: \(String(describing: contentReference)), credentialsSecretName: \(String(describing: credentialsSecretName)), fileOffset: \(String(describing: fileOffset)), kantarLicenseId: \(String(describing: kantarLicenseId)), kantarServerUrl: \(String(describing: kantarServerUrl)), logDestination: \(String(describing: logDestination)), metadata3: \(String(describing: metadata3)), metadata4: \(String(describing: metadata4)), metadata5: \(String(describing: metadata5)), metadata6: \(String(describing: metadata6)), metadata7: \(String(describing: metadata7)), metadata8: \(String(describing: metadata8)))"}
}

/// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
public struct KantarWatermarkSettings: Equatable {
    /// Provide an audio channel name from your Kantar audio license.
    public let channelName: String?
    /// Specify a unique identifier for Kantar to use for this piece of content.
    public let contentReference: String?
    /// Provide the name of the AWS Secrets Manager secret where your Kantar credentials are stored. Note that your MediaConvert service role must provide access to this secret. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/granting-permissions-for-mediaconvert-to-access-secrets-manager-secret.html. For instructions on creating a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html, in the AWS Secrets Manager User Guide.
    public let credentialsSecretName: String?
    /// Optional. Specify an offset, in whole seconds, from the start of your output and the beginning of the watermarking. When you don't specify an offset, Kantar defaults to zero.
    public let fileOffset: Double
    /// Provide your Kantar license ID number. You should get this number from Kantar.
    public let kantarLicenseId: Int
    /// Provide the HTTPS endpoint to the Kantar server. You should get this endpoint from Kantar.
    public let kantarServerUrl: String?
    /// Optional. Specify the Amazon S3 bucket where you want MediaConvert to store your Kantar watermark XML logs. When you don't specify a bucket, MediaConvert doesn't save these logs. Note that your MediaConvert service role must provide access to this location. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
    public let logDestination: String?
    /// You can optionally use this field to specify the first timestamp that Kantar embeds during watermarking. Kantar suggests that you be very cautious when using this Kantar feature, and that you use it only on channels that are managed specifically for use with this feature by your Audience Measurement Operator. For more information about this feature, contact Kantar technical support.
    public let metadata3: String?
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    public let metadata4: String?
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    public let metadata5: String?
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    public let metadata6: String?
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    public let metadata7: String?
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    public let metadata8: String?

    public init (
        channelName: String? = nil,
        contentReference: String? = nil,
        credentialsSecretName: String? = nil,
        fileOffset: Double = 0.0,
        kantarLicenseId: Int = 0,
        kantarServerUrl: String? = nil,
        logDestination: String? = nil,
        metadata3: String? = nil,
        metadata4: String? = nil,
        metadata5: String? = nil,
        metadata6: String? = nil,
        metadata7: String? = nil,
        metadata8: String? = nil
    )
    {
        self.channelName = channelName
        self.contentReference = contentReference
        self.credentialsSecretName = credentialsSecretName
        self.fileOffset = fileOffset
        self.kantarLicenseId = kantarLicenseId
        self.kantarServerUrl = kantarServerUrl
        self.logDestination = logDestination
        self.metadata3 = metadata3
        self.metadata4 = metadata4
        self.metadata5 = metadata5
        self.metadata6 = metadata6
        self.metadata7 = metadata7
        self.metadata8 = metadata8
    }
}

/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
public enum LanguageCode {
    case aar
    case abk
    case afr
    case aka
    case amh
    case ara
    case arg
    case asm
    case ava
    case ave
    case aym
    case aze
    case bak
    case bam
    case bel
    case ben
    case bih
    case bis
    case bod
    case bos
    case bre
    case bul
    case cat
    case ces
    case cha
    case che
    case chu
    case chv
    case cor
    case cos
    case cre
    case cym
    case dan
    case deu
    case div
    case dzo
    case ell
    case eng
    case enm
    case epo
    case est
    case eus
    case ewe
    case fao
    case fas
    case fij
    case fin
    case fra
    case frm
    case fry
    case ful
    case ger
    case gla
    case gle
    case glg
    case glv
    case grn
    case guj
    case hat
    case hau
    case heb
    case her
    case hin
    case hmo
    case hrv
    case hun
    case hye
    case ibo
    case ido
    case iii
    case iku
    case ile
    case ina
    case ind
    case ipk
    case isl
    case ita
    case jav
    case jpn
    case kal
    case kan
    case kas
    case kat
    case kau
    case kaz
    case khm
    case kik
    case kin
    case kir
    case kom
    case kon
    case kor
    case kua
    case kur
    case lao
    case lat
    case lav
    case lim
    case lin
    case lit
    case ltz
    case lub
    case lug
    case mah
    case mal
    case mar
    case mkd
    case mlg
    case mlt
    case mon
    case mri
    case msa
    case mya
    case nau
    case nav
    case nbl
    case nde
    case ndo
    case nep
    case nld
    case nno
    case nob
    case nor
    case nya
    case oci
    case oji
    case ori
    case orj
    case orm
    case oss
    case pan
    case pli
    case pol
    case por
    case pus
    case qaa
    case qpc
    case que
    case roh
    case ron
    case run
    case rus
    case sag
    case san
    case sin
    case slk
    case slv
    case sme
    case smo
    case sna
    case snd
    case som
    case sot
    case spa
    case sqi
    case srb
    case srd
    case ssw
    case sun
    case swa
    case swe
    case tah
    case tam
    case tat
    case tel
    case tgk
    case tgl
    case tha
    case tir
    case tng
    case ton
    case tsn
    case tso
    case tuk
    case tur
    case twi
    case uig
    case ukr
    case urd
    case uzb
    case ven
    case vie
    case vol
    case wln
    case wol
    case xho
    case yid
    case yor
    case zha
    case zho
    case zul
    case sdkUnknown(String)
}

extension LanguageCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LanguageCode] {
        return [
            .aar,
            .abk,
            .afr,
            .aka,
            .amh,
            .ara,
            .arg,
            .asm,
            .ava,
            .ave,
            .aym,
            .aze,
            .bak,
            .bam,
            .bel,
            .ben,
            .bih,
            .bis,
            .bod,
            .bos,
            .bre,
            .bul,
            .cat,
            .ces,
            .cha,
            .che,
            .chu,
            .chv,
            .cor,
            .cos,
            .cre,
            .cym,
            .dan,
            .deu,
            .div,
            .dzo,
            .ell,
            .eng,
            .enm,
            .epo,
            .est,
            .eus,
            .ewe,
            .fao,
            .fas,
            .fij,
            .fin,
            .fra,
            .frm,
            .fry,
            .ful,
            .ger,
            .gla,
            .gle,
            .glg,
            .glv,
            .grn,
            .guj,
            .hat,
            .hau,
            .heb,
            .her,
            .hin,
            .hmo,
            .hrv,
            .hun,
            .hye,
            .ibo,
            .ido,
            .iii,
            .iku,
            .ile,
            .ina,
            .ind,
            .ipk,
            .isl,
            .ita,
            .jav,
            .jpn,
            .kal,
            .kan,
            .kas,
            .kat,
            .kau,
            .kaz,
            .khm,
            .kik,
            .kin,
            .kir,
            .kom,
            .kon,
            .kor,
            .kua,
            .kur,
            .lao,
            .lat,
            .lav,
            .lim,
            .lin,
            .lit,
            .ltz,
            .lub,
            .lug,
            .mah,
            .mal,
            .mar,
            .mkd,
            .mlg,
            .mlt,
            .mon,
            .mri,
            .msa,
            .mya,
            .nau,
            .nav,
            .nbl,
            .nde,
            .ndo,
            .nep,
            .nld,
            .nno,
            .nob,
            .nor,
            .nya,
            .oci,
            .oji,
            .ori,
            .orj,
            .orm,
            .oss,
            .pan,
            .pli,
            .pol,
            .por,
            .pus,
            .qaa,
            .qpc,
            .que,
            .roh,
            .ron,
            .run,
            .rus,
            .sag,
            .san,
            .sin,
            .slk,
            .slv,
            .sme,
            .smo,
            .sna,
            .snd,
            .som,
            .sot,
            .spa,
            .sqi,
            .srb,
            .srd,
            .ssw,
            .sun,
            .swa,
            .swe,
            .tah,
            .tam,
            .tat,
            .tel,
            .tgk,
            .tgl,
            .tha,
            .tir,
            .tng,
            .ton,
            .tsn,
            .tso,
            .tuk,
            .tur,
            .twi,
            .uig,
            .ukr,
            .urd,
            .uzb,
            .ven,
            .vie,
            .vol,
            .wln,
            .wol,
            .xho,
            .yid,
            .yor,
            .zha,
            .zho,
            .zul,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aar: return "AAR"
        case .abk: return "ABK"
        case .afr: return "AFR"
        case .aka: return "AKA"
        case .amh: return "AMH"
        case .ara: return "ARA"
        case .arg: return "ARG"
        case .asm: return "ASM"
        case .ava: return "AVA"
        case .ave: return "AVE"
        case .aym: return "AYM"
        case .aze: return "AZE"
        case .bak: return "BAK"
        case .bam: return "BAM"
        case .bel: return "BEL"
        case .ben: return "BEN"
        case .bih: return "BIH"
        case .bis: return "BIS"
        case .bod: return "BOD"
        case .bos: return "BOS"
        case .bre: return "BRE"
        case .bul: return "BUL"
        case .cat: return "CAT"
        case .ces: return "CES"
        case .cha: return "CHA"
        case .che: return "CHE"
        case .chu: return "CHU"
        case .chv: return "CHV"
        case .cor: return "COR"
        case .cos: return "COS"
        case .cre: return "CRE"
        case .cym: return "CYM"
        case .dan: return "DAN"
        case .deu: return "DEU"
        case .div: return "DIV"
        case .dzo: return "DZO"
        case .ell: return "ELL"
        case .eng: return "ENG"
        case .enm: return "ENM"
        case .epo: return "EPO"
        case .est: return "EST"
        case .eus: return "EUS"
        case .ewe: return "EWE"
        case .fao: return "FAO"
        case .fas: return "FAS"
        case .fij: return "FIJ"
        case .fin: return "FIN"
        case .fra: return "FRA"
        case .frm: return "FRM"
        case .fry: return "FRY"
        case .ful: return "FUL"
        case .ger: return "GER"
        case .gla: return "GLA"
        case .gle: return "GLE"
        case .glg: return "GLG"
        case .glv: return "GLV"
        case .grn: return "GRN"
        case .guj: return "GUJ"
        case .hat: return "HAT"
        case .hau: return "HAU"
        case .heb: return "HEB"
        case .her: return "HER"
        case .hin: return "HIN"
        case .hmo: return "HMO"
        case .hrv: return "HRV"
        case .hun: return "HUN"
        case .hye: return "HYE"
        case .ibo: return "IBO"
        case .ido: return "IDO"
        case .iii: return "III"
        case .iku: return "IKU"
        case .ile: return "ILE"
        case .ina: return "INA"
        case .ind: return "IND"
        case .ipk: return "IPK"
        case .isl: return "ISL"
        case .ita: return "ITA"
        case .jav: return "JAV"
        case .jpn: return "JPN"
        case .kal: return "KAL"
        case .kan: return "KAN"
        case .kas: return "KAS"
        case .kat: return "KAT"
        case .kau: return "KAU"
        case .kaz: return "KAZ"
        case .khm: return "KHM"
        case .kik: return "KIK"
        case .kin: return "KIN"
        case .kir: return "KIR"
        case .kom: return "KOM"
        case .kon: return "KON"
        case .kor: return "KOR"
        case .kua: return "KUA"
        case .kur: return "KUR"
        case .lao: return "LAO"
        case .lat: return "LAT"
        case .lav: return "LAV"
        case .lim: return "LIM"
        case .lin: return "LIN"
        case .lit: return "LIT"
        case .ltz: return "LTZ"
        case .lub: return "LUB"
        case .lug: return "LUG"
        case .mah: return "MAH"
        case .mal: return "MAL"
        case .mar: return "MAR"
        case .mkd: return "MKD"
        case .mlg: return "MLG"
        case .mlt: return "MLT"
        case .mon: return "MON"
        case .mri: return "MRI"
        case .msa: return "MSA"
        case .mya: return "MYA"
        case .nau: return "NAU"
        case .nav: return "NAV"
        case .nbl: return "NBL"
        case .nde: return "NDE"
        case .ndo: return "NDO"
        case .nep: return "NEP"
        case .nld: return "NLD"
        case .nno: return "NNO"
        case .nob: return "NOB"
        case .nor: return "NOR"
        case .nya: return "NYA"
        case .oci: return "OCI"
        case .oji: return "OJI"
        case .ori: return "ORI"
        case .orj: return "ORJ"
        case .orm: return "ORM"
        case .oss: return "OSS"
        case .pan: return "PAN"
        case .pli: return "PLI"
        case .pol: return "POL"
        case .por: return "POR"
        case .pus: return "PUS"
        case .qaa: return "QAA"
        case .qpc: return "QPC"
        case .que: return "QUE"
        case .roh: return "ROH"
        case .ron: return "RON"
        case .run: return "RUN"
        case .rus: return "RUS"
        case .sag: return "SAG"
        case .san: return "SAN"
        case .sin: return "SIN"
        case .slk: return "SLK"
        case .slv: return "SLV"
        case .sme: return "SME"
        case .smo: return "SMO"
        case .sna: return "SNA"
        case .snd: return "SND"
        case .som: return "SOM"
        case .sot: return "SOT"
        case .spa: return "SPA"
        case .sqi: return "SQI"
        case .srb: return "SRB"
        case .srd: return "SRD"
        case .ssw: return "SSW"
        case .sun: return "SUN"
        case .swa: return "SWA"
        case .swe: return "SWE"
        case .tah: return "TAH"
        case .tam: return "TAM"
        case .tat: return "TAT"
        case .tel: return "TEL"
        case .tgk: return "TGK"
        case .tgl: return "TGL"
        case .tha: return "THA"
        case .tir: return "TIR"
        case .tng: return "TNG"
        case .ton: return "TON"
        case .tsn: return "TSN"
        case .tso: return "TSO"
        case .tuk: return "TUK"
        case .tur: return "TUR"
        case .twi: return "TWI"
        case .uig: return "UIG"
        case .ukr: return "UKR"
        case .urd: return "URD"
        case .uzb: return "UZB"
        case .ven: return "VEN"
        case .vie: return "VIE"
        case .vol: return "VOL"
        case .wln: return "WLN"
        case .wol: return "WOL"
        case .xho: return "XHO"
        case .yid: return "YID"
        case .yor: return "YOR"
        case .zha: return "ZHA"
        case .zho: return "ZHO"
        case .zul: return "ZUL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
    }
}

extension ListJobTemplatesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListJobTemplatesInput(category: \(String(describing: category)), listBy: \(String(describing: listBy)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), order: \(String(describing: order)))"}
}

extension ListJobTemplatesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListJobTemplatesInputHeadersMiddleware: Middleware {
    public let id: String = "ListJobTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobTemplatesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobTemplatesInput>
    public typealias MOutput = OperationOutput<ListJobTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobTemplatesOutputError>
}

public struct ListJobTemplatesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListJobTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobTemplatesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let order = input.operationInput.order {
            let orderQueryItem = URLQueryItem(name: "order".urlPercentEncoding(), value: String(order.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(orderQueryItem)
        }
        if let category = input.operationInput.category {
            let categoryQueryItem = URLQueryItem(name: "category".urlPercentEncoding(), value: String(category).urlPercentEncoding())
            input.builder.withQueryItem(categoryQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let listBy = input.operationInput.listBy {
            let listByQueryItem = URLQueryItem(name: "listBy".urlPercentEncoding(), value: String(listBy.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(listByQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobTemplatesInput>
    public typealias MOutput = OperationOutput<ListJobTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobTemplatesOutputError>
}

public struct ListJobTemplatesInput: Equatable {
    /// Optionally, specify a job template category to limit responses to only job templates from that category.
    public let category: String?
    /// Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    public let listBy: JobTemplateListBy?
    /// Optional. Number of job templates, up to twenty, that will be returned at one time.
    public let maxResults: Int
    /// Use this string, provided with the response to a previous request, to request the next batch of job templates.
    public let nextToken: String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public let order: Order?

    public init (
        category: String? = nil,
        listBy: JobTemplateListBy? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        order: Order? = nil
    )
    {
        self.category = category
        self.listBy = listBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
    }
}

struct ListJobTemplatesInputBody: Equatable {
}

extension ListJobTemplatesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListJobTemplatesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobTemplatesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobTemplatesOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobTemplatesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListJobTemplatesOutputResponse(jobTemplates: \(String(describing: jobTemplates)), nextToken: \(String(describing: nextToken)))"}
}

extension ListJobTemplatesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListJobTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.jobTemplates = output.jobTemplates
            self.nextToken = output.nextToken
        } else {
            self.jobTemplates = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobTemplatesOutputResponse: Equatable {
    /// List of Job templates.
    public let jobTemplates: [JobTemplate]?
    /// Use this string to request the next batch of job templates.
    public let nextToken: String?

    public init (
        jobTemplates: [JobTemplate]? = nil,
        nextToken: String? = nil
    )
    {
        self.jobTemplates = jobTemplates
        self.nextToken = nextToken
    }
}

struct ListJobTemplatesOutputResponseBody: Equatable {
    public let jobTemplates: [JobTemplate]?
    public let nextToken: String?
}

extension ListJobTemplatesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobTemplates = "jobTemplates"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplatesContainer = try containerValues.decodeIfPresent([JobTemplate?].self, forKey: .jobTemplates)
        var jobTemplatesDecoded0:[JobTemplate]? = nil
        if let jobTemplatesContainer = jobTemplatesContainer {
            jobTemplatesDecoded0 = [JobTemplate]()
            for structure0 in jobTemplatesContainer {
                if let structure0 = structure0 {
                    jobTemplatesDecoded0?.append(structure0)
                }
            }
        }
        jobTemplates = jobTemplatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListJobsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), order: \(String(describing: order)), queue: \(String(describing: queue)), status: \(String(describing: status)))"}
}

extension ListJobsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListJobsInputHeadersMiddleware: Middleware {
    public let id: String = "ListJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobsInput>
    public typealias MOutput = OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobsOutputError>
}

public struct ListJobsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let order = input.operationInput.order {
            let orderQueryItem = URLQueryItem(name: "order".urlPercentEncoding(), value: String(order.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(orderQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = URLQueryItem(name: "status".urlPercentEncoding(), value: String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let queue = input.operationInput.queue {
            let queueQueryItem = URLQueryItem(name: "queue".urlPercentEncoding(), value: String(queue).urlPercentEncoding())
            input.builder.withQueryItem(queueQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobsInput>
    public typealias MOutput = OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobsOutputError>
}

public struct ListJobsInput: Equatable {
    /// Optional. Number of jobs, up to twenty, that will be returned at one time.
    public let maxResults: Int
    /// Optional. Use this string, provided with the response to a previous request, to request the next batch of jobs.
    public let nextToken: String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public let order: Order?
    /// Optional. Provide a queue name to get back only jobs from that queue.
    public let queue: String?
    /// Optional. A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    public let status: JobStatus?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil,
        order: Order? = nil,
        queue: String? = nil,
        status: JobStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
        self.queue = queue
        self.status = status
    }
}

struct ListJobsInputBody: Equatable {
}

extension ListJobsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListJobsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListJobsOutputResponse(jobs: \(String(describing: jobs)), nextToken: \(String(describing: nextToken)))"}
}

extension ListJobsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListJobsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.jobs = output.jobs
            self.nextToken = output.nextToken
        } else {
            self.jobs = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobsOutputResponse: Equatable {
    /// List of jobs
    public let jobs: [Job]?
    /// Use this string to request the next batch of jobs.
    public let nextToken: String?

    public init (
        jobs: [Job]? = nil,
        nextToken: String? = nil
    )
    {
        self.jobs = jobs
        self.nextToken = nextToken
    }
}

struct ListJobsOutputResponseBody: Equatable {
    public let jobs: [Job]?
    public let nextToken: String?
}

extension ListJobsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobs = "jobs"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([Job?].self, forKey: .jobs)
        var jobsDecoded0:[Job]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [Job]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPresetsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListPresetsInput(category: \(String(describing: category)), listBy: \(String(describing: listBy)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), order: \(String(describing: order)))"}
}

extension ListPresetsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListPresetsInputHeadersMiddleware: Middleware {
    public let id: String = "ListPresetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPresetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPresetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPresetsInput>
    public typealias MOutput = OperationOutput<ListPresetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPresetsOutputError>
}

public struct ListPresetsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListPresetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPresetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPresetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let order = input.operationInput.order {
            let orderQueryItem = URLQueryItem(name: "order".urlPercentEncoding(), value: String(order.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(orderQueryItem)
        }
        if let category = input.operationInput.category {
            let categoryQueryItem = URLQueryItem(name: "category".urlPercentEncoding(), value: String(category).urlPercentEncoding())
            input.builder.withQueryItem(categoryQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let listBy = input.operationInput.listBy {
            let listByQueryItem = URLQueryItem(name: "listBy".urlPercentEncoding(), value: String(listBy.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(listByQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPresetsInput>
    public typealias MOutput = OperationOutput<ListPresetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPresetsOutputError>
}

public struct ListPresetsInput: Equatable {
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    public let category: String?
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    public let listBy: PresetListBy?
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    public let maxResults: Int
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    public let nextToken: String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public let order: Order?

    public init (
        category: String? = nil,
        listBy: PresetListBy? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        order: Order? = nil
    )
    {
        self.category = category
        self.listBy = listBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
    }
}

struct ListPresetsInputBody: Equatable {
}

extension ListPresetsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListPresetsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPresetsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPresetsOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPresetsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListPresetsOutputResponse(nextToken: \(String(describing: nextToken)), presets: \(String(describing: presets)))"}
}

extension ListPresetsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListPresetsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.presets = output.presets
        } else {
            self.nextToken = nil
            self.presets = nil
        }
    }
}

public struct ListPresetsOutputResponse: Equatable {
    /// Use this string to request the next batch of presets.
    public let nextToken: String?
    /// List of presets
    public let presets: [Preset]?

    public init (
        nextToken: String? = nil,
        presets: [Preset]? = nil
    )
    {
        self.nextToken = nextToken
        self.presets = presets
    }
}

struct ListPresetsOutputResponseBody: Equatable {
    public let nextToken: String?
    public let presets: [Preset]?
}

extension ListPresetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case presets = "presets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let presetsContainer = try containerValues.decodeIfPresent([Preset?].self, forKey: .presets)
        var presetsDecoded0:[Preset]? = nil
        if let presetsContainer = presetsContainer {
            presetsDecoded0 = [Preset]()
            for structure0 in presetsContainer {
                if let structure0 = structure0 {
                    presetsDecoded0?.append(structure0)
                }
            }
        }
        presets = presetsDecoded0
    }
}

extension ListQueuesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListQueuesInput(listBy: \(String(describing: listBy)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), order: \(String(describing: order)))"}
}

extension ListQueuesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListQueuesInputHeadersMiddleware: Middleware {
    public let id: String = "ListQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueuesInput>
    public typealias MOutput = OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueuesOutputError>
}

public struct ListQueuesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let order = input.operationInput.order {
            let orderQueryItem = URLQueryItem(name: "order".urlPercentEncoding(), value: String(order.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(orderQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(input.operationInput.maxResults).urlPercentEncoding())
        input.builder.withQueryItem(maxResultsQueryItem)
        if let listBy = input.operationInput.listBy {
            let listByQueryItem = URLQueryItem(name: "listBy".urlPercentEncoding(), value: String(listBy.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(listByQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListQueuesInput>
    public typealias MOutput = OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListQueuesOutputError>
}

public struct ListQueuesInput: Equatable {
    /// Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
    public let listBy: QueueListBy?
    /// Optional. Number of queues, up to twenty, that will be returned at one time.
    public let maxResults: Int
    /// Use this string, provided with the response to a previous request, to request the next batch of queues.
    public let nextToken: String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public let order: Order?

    public init (
        listBy: QueueListBy? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        order: Order? = nil
    )
    {
        self.listBy = listBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
    }
}

struct ListQueuesInputBody: Equatable {
}

extension ListQueuesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListQueuesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQueuesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQueuesOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQueuesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListQueuesOutputResponse(nextToken: \(String(describing: nextToken)), queues: \(String(describing: queues)))"}
}

extension ListQueuesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListQueuesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.queues = output.queues
        } else {
            self.nextToken = nil
            self.queues = nil
        }
    }
}

public struct ListQueuesOutputResponse: Equatable {
    /// Use this string to request the next batch of queues.
    public let nextToken: String?
    /// List of queues.
    public let queues: [Queue]?

    public init (
        nextToken: String? = nil,
        queues: [Queue]? = nil
    )
    {
        self.nextToken = nextToken
        self.queues = queues
    }
}

struct ListQueuesOutputResponseBody: Equatable {
    public let nextToken: String?
    public let queues: [Queue]?
}

extension ListQueuesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case queues = "queues"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let queuesContainer = try containerValues.decodeIfPresent([Queue?].self, forKey: .queues)
        var queuesDecoded0:[Queue]? = nil
        if let queuesContainer = queuesContainer {
            queuesDecoded0 = [Queue]()
            for structure0 in queuesContainer {
                if let structure0 = structure0 {
                    queuesDecoded0?.append(structure0)
                }
            }
        }
        queues = queuesDecoded0
    }
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(arn: \(String(describing: arn)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to list tags for. To get the ARN, send a GET request with the resource name.
    public let arn: String?

    public init (
        arn: String? = nil
    )
    {
        self.arn = arn
    }
}

struct ListTagsForResourceInputBody: Equatable {
}

extension ListTagsForResourceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(resourceTags: \(String(describing: resourceTags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.resourceTags = output.resourceTags
        } else {
            self.resourceTags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
    public let resourceTags: ResourceTags?

    public init (
        resourceTags: ResourceTags? = nil
    )
    {
        self.resourceTags = resourceTags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let resourceTags: ResourceTags?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceTags = "resourceTags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTagsDecoded = try containerValues.decodeIfPresent(ResourceTags.self, forKey: .resourceTags)
        resourceTags = resourceTagsDecoded
    }
}

/// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
public enum M2tsAudioBufferModel {
    case atsc
    case dvb
    case sdkUnknown(String)
}

extension M2tsAudioBufferModel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAudioBufferModel] {
        return [
            .atsc,
            .dvb,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .atsc: return "ATSC"
        case .dvb: return "DVB"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAudioBufferModel(rawValue: rawValue) ?? M2tsAudioBufferModel.sdkUnknown(rawValue)
    }
}

/// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
public enum M2tsAudioDuration {
    case defaultCodecDuration
    case matchVideoDuration
    case sdkUnknown(String)
}

extension M2tsAudioDuration : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsAudioDuration] {
        return [
            .defaultCodecDuration,
            .matchVideoDuration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
        case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsAudioDuration(rawValue: rawValue) ?? M2tsAudioDuration.sdkUnknown(rawValue)
    }
}

/// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex  buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
public enum M2tsBufferModel {
    case multiplex
    case `none`
    case sdkUnknown(String)
}

extension M2tsBufferModel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsBufferModel] {
        return [
            .multiplex,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiplex: return "MULTIPLEX"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsBufferModel(rawValue: rawValue) ?? M2tsBufferModel.sdkUnknown(rawValue)
    }
}

/// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
public enum M2tsEbpAudioInterval {
    case videoAndFixedIntervals
    case videoInterval
    case sdkUnknown(String)
}

extension M2tsEbpAudioInterval : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsEbpAudioInterval] {
        return [
            .videoAndFixedIntervals,
            .videoInterval,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .videoAndFixedIntervals: return "VIDEO_AND_FIXED_INTERVALS"
        case .videoInterval: return "VIDEO_INTERVAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsEbpAudioInterval(rawValue: rawValue) ?? M2tsEbpAudioInterval.sdkUnknown(rawValue)
    }
}

/// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
public enum M2tsEbpPlacement {
    case videoAndAudioPids
    case videoPid
    case sdkUnknown(String)
}

extension M2tsEbpPlacement : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsEbpPlacement] {
        return [
            .videoAndAudioPids,
            .videoPid,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .videoAndAudioPids: return "VIDEO_AND_AUDIO_PIDS"
        case .videoPid: return "VIDEO_PID"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsEbpPlacement(rawValue: rawValue) ?? M2tsEbpPlacement.sdkUnknown(rawValue)
    }
}

/// Controls whether to include the ES Rate field in the PES header.
public enum M2tsEsRateInPes {
    case exclude
    case include
    case sdkUnknown(String)
}

extension M2tsEsRateInPes : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsEsRateInPes] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsEsRateInPes(rawValue: rawValue) ?? M2tsEsRateInPes.sdkUnknown(rawValue)
    }
}

/// Keep the default value (DEFAULT) unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force (FORCE).
public enum M2tsForceTsVideoEbpOrder {
    case `default`
    case force
    case sdkUnknown(String)
}

extension M2tsForceTsVideoEbpOrder : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsForceTsVideoEbpOrder] {
        return [
            .default,
            .force,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .force: return "FORCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsForceTsVideoEbpOrder(rawValue: rawValue) ?? M2tsForceTsVideoEbpOrder.sdkUnknown(rawValue)
    }
}

/// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
public enum M2tsNielsenId3 {
    case insert
    case `none`
    case sdkUnknown(String)
}

extension M2tsNielsenId3 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsNielsenId3] {
        return [
            .insert,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsNielsenId3(rawValue: rawValue) ?? M2tsNielsenId3.sdkUnknown(rawValue)
    }
}

/// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
public enum M2tsPcrControl {
    case configuredPcrPeriod
    case pcrEveryPesPacket
    case sdkUnknown(String)
}

extension M2tsPcrControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsPcrControl] {
        return [
            .configuredPcrPeriod,
            .pcrEveryPesPacket,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
        case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsPcrControl(rawValue: rawValue) ?? M2tsPcrControl.sdkUnknown(rawValue)
    }
}

/// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
public enum M2tsRateMode {
    case cbr
    case vbr
    case sdkUnknown(String)
}

extension M2tsRateMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsRateMode] {
        return [
            .cbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsRateMode(rawValue: rawValue) ?? M2tsRateMode.sdkUnknown(rawValue)
    }
}

extension M2tsScte35Esam: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scte35EsamPid = "scte35EsamPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scte35EsamPid != 0 {
            try encodeContainer.encode(scte35EsamPid, forKey: .scte35EsamPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scte35EsamPidDecoded = try containerValues.decode(Int.self, forKey: .scte35EsamPid)
        scte35EsamPid = scte35EsamPidDecoded
    }
}

extension M2tsScte35Esam: CustomDebugStringConvertible {
    public var debugDescription: String {
        "M2tsScte35Esam(scte35EsamPid: \(String(describing: scte35EsamPid)))"}
}

/// Settings for SCTE-35 signals from ESAM. Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
public struct M2tsScte35Esam: Equatable {
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream generated by ESAM.
    public let scte35EsamPid: Int

    public init (
        scte35EsamPid: Int = 0
    )
    {
        self.scte35EsamPid = scte35EsamPid
    }
}

/// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE). Also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml). Also enable ESAM SCTE-35 (include the property scte35Esam).
public enum M2tsScte35Source {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension M2tsScte35Source : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsScte35Source] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsScte35Source(rawValue: rawValue) ?? M2tsScte35Source.sdkUnknown(rawValue)
    }
}

/// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
public enum M2tsSegmentationMarkers {
    case ebp
    case ebpLegacy
    case `none`
    case psiSegstart
    case raiAdapt
    case raiSegstart
    case sdkUnknown(String)
}

extension M2tsSegmentationMarkers : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsSegmentationMarkers] {
        return [
            .ebp,
            .ebpLegacy,
            .none,
            .psiSegstart,
            .raiAdapt,
            .raiSegstart,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ebp: return "EBP"
        case .ebpLegacy: return "EBP_LEGACY"
        case .none: return "NONE"
        case .psiSegstart: return "PSI_SEGSTART"
        case .raiAdapt: return "RAI_ADAPT"
        case .raiSegstart: return "RAI_SEGSTART"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsSegmentationMarkers(rawValue: rawValue) ?? M2tsSegmentationMarkers.sdkUnknown(rawValue)
    }
}

/// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
public enum M2tsSegmentationStyle {
    case maintainCadence
    case resetCadence
    case sdkUnknown(String)
}

extension M2tsSegmentationStyle : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M2tsSegmentationStyle] {
        return [
            .maintainCadence,
            .resetCadence,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .maintainCadence: return "MAINTAIN_CADENCE"
        case .resetCadence: return "RESET_CADENCE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M2tsSegmentationStyle(rawValue: rawValue) ?? M2tsSegmentationStyle.sdkUnknown(rawValue)
    }
}

extension M2tsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioBufferModel = "audioBufferModel"
        case audioDuration = "audioDuration"
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case bitrate = "bitrate"
        case bufferModel = "bufferModel"
        case dvbNitSettings = "dvbNitSettings"
        case dvbSdtSettings = "dvbSdtSettings"
        case dvbSubPids = "dvbSubPids"
        case dvbTdtSettings = "dvbTdtSettings"
        case dvbTeletextPid = "dvbTeletextPid"
        case ebpAudioInterval = "ebpAudioInterval"
        case ebpPlacement = "ebpPlacement"
        case esRateInPes = "esRateInPes"
        case forceTsVideoEbpOrder = "forceTsVideoEbpOrder"
        case fragmentTime = "fragmentTime"
        case maxPcrInterval = "maxPcrInterval"
        case minEbpInterval = "minEbpInterval"
        case nielsenId3 = "nielsenId3"
        case nullPacketBitrate = "nullPacketBitrate"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case privateMetadataPid = "privateMetadataPid"
        case programNumber = "programNumber"
        case rateMode = "rateMode"
        case scte35Esam = "scte35Esam"
        case scte35Pid = "scte35Pid"
        case scte35Source = "scte35Source"
        case segmentationMarkers = "segmentationMarkers"
        case segmentationStyle = "segmentationStyle"
        case segmentationTime = "segmentationTime"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioBufferModel = audioBufferModel {
            try encodeContainer.encode(audioBufferModel.rawValue, forKey: .audioBufferModel)
        }
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if audioFramesPerPes != 0 {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = audioPids {
            var audioPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioPids)
            for __listof__integermin32max81820 in audioPids {
                try audioPidsContainer.encode(__listof__integermin32max81820)
            }
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufferModel = bufferModel {
            try encodeContainer.encode(bufferModel.rawValue, forKey: .bufferModel)
        }
        if let dvbNitSettings = dvbNitSettings {
            try encodeContainer.encode(dvbNitSettings, forKey: .dvbNitSettings)
        }
        if let dvbSdtSettings = dvbSdtSettings {
            try encodeContainer.encode(dvbSdtSettings, forKey: .dvbSdtSettings)
        }
        if let dvbSubPids = dvbSubPids {
            var dvbSubPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dvbSubPids)
            for __listof__integermin32max81820 in dvbSubPids {
                try dvbSubPidsContainer.encode(__listof__integermin32max81820)
            }
        }
        if let dvbTdtSettings = dvbTdtSettings {
            try encodeContainer.encode(dvbTdtSettings, forKey: .dvbTdtSettings)
        }
        if dvbTeletextPid != 0 {
            try encodeContainer.encode(dvbTeletextPid, forKey: .dvbTeletextPid)
        }
        if let ebpAudioInterval = ebpAudioInterval {
            try encodeContainer.encode(ebpAudioInterval.rawValue, forKey: .ebpAudioInterval)
        }
        if let ebpPlacement = ebpPlacement {
            try encodeContainer.encode(ebpPlacement.rawValue, forKey: .ebpPlacement)
        }
        if let esRateInPes = esRateInPes {
            try encodeContainer.encode(esRateInPes.rawValue, forKey: .esRateInPes)
        }
        if let forceTsVideoEbpOrder = forceTsVideoEbpOrder {
            try encodeContainer.encode(forceTsVideoEbpOrder.rawValue, forKey: .forceTsVideoEbpOrder)
        }
        if fragmentTime != 0.0 {
            try encodeContainer.encode(fragmentTime, forKey: .fragmentTime)
        }
        if maxPcrInterval != 0 {
            try encodeContainer.encode(maxPcrInterval, forKey: .maxPcrInterval)
        }
        if minEbpInterval != 0 {
            try encodeContainer.encode(minEbpInterval, forKey: .minEbpInterval)
        }
        if let nielsenId3 = nielsenId3 {
            try encodeContainer.encode(nielsenId3.rawValue, forKey: .nielsenId3)
        }
        if nullPacketBitrate != 0.0 {
            try encodeContainer.encode(nullPacketBitrate, forKey: .nullPacketBitrate)
        }
        if patInterval != 0 {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if pcrPid != 0 {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if pmtInterval != 0 {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if pmtPid != 0 {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if privateMetadataPid != 0 {
            try encodeContainer.encode(privateMetadataPid, forKey: .privateMetadataPid)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let rateMode = rateMode {
            try encodeContainer.encode(rateMode.rawValue, forKey: .rateMode)
        }
        if let scte35Esam = scte35Esam {
            try encodeContainer.encode(scte35Esam, forKey: .scte35Esam)
        }
        if scte35Pid != 0 {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let scte35Source = scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
        if let segmentationMarkers = segmentationMarkers {
            try encodeContainer.encode(segmentationMarkers.rawValue, forKey: .segmentationMarkers)
        }
        if let segmentationStyle = segmentationStyle {
            try encodeContainer.encode(segmentationStyle.rawValue, forKey: .segmentationStyle)
        }
        if segmentationTime != 0.0 {
            try encodeContainer.encode(segmentationTime, forKey: .segmentationTime)
        }
        if timedMetadataPid != 0 {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if videoPid != 0 {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioBufferModelDecoded = try containerValues.decodeIfPresent(M2tsAudioBufferModel.self, forKey: .audioBufferModel)
        audioBufferModel = audioBufferModelDecoded
        let audioDurationDecoded = try containerValues.decodeIfPresent(M2tsAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioFramesPerPesDecoded = try containerValues.decode(Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .audioPids)
        var audioPidsDecoded0:[Int]? = nil
        if let audioPidsContainer = audioPidsContainer {
            audioPidsDecoded0 = [Int]()
            for integer0 in audioPidsContainer {
                if let integer0 = integer0 {
                    audioPidsDecoded0?.append(integer0)
                }
            }
        }
        audioPids = audioPidsDecoded0
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufferModelDecoded = try containerValues.decodeIfPresent(M2tsBufferModel.self, forKey: .bufferModel)
        bufferModel = bufferModelDecoded
        let dvbNitSettingsDecoded = try containerValues.decodeIfPresent(DvbNitSettings.self, forKey: .dvbNitSettings)
        dvbNitSettings = dvbNitSettingsDecoded
        let dvbSdtSettingsDecoded = try containerValues.decodeIfPresent(DvbSdtSettings.self, forKey: .dvbSdtSettings)
        dvbSdtSettings = dvbSdtSettingsDecoded
        let dvbSubPidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .dvbSubPids)
        var dvbSubPidsDecoded0:[Int]? = nil
        if let dvbSubPidsContainer = dvbSubPidsContainer {
            dvbSubPidsDecoded0 = [Int]()
            for integer0 in dvbSubPidsContainer {
                if let integer0 = integer0 {
                    dvbSubPidsDecoded0?.append(integer0)
                }
            }
        }
        dvbSubPids = dvbSubPidsDecoded0
        let dvbTdtSettingsDecoded = try containerValues.decodeIfPresent(DvbTdtSettings.self, forKey: .dvbTdtSettings)
        dvbTdtSettings = dvbTdtSettingsDecoded
        let dvbTeletextPidDecoded = try containerValues.decode(Int.self, forKey: .dvbTeletextPid)
        dvbTeletextPid = dvbTeletextPidDecoded
        let ebpAudioIntervalDecoded = try containerValues.decodeIfPresent(M2tsEbpAudioInterval.self, forKey: .ebpAudioInterval)
        ebpAudioInterval = ebpAudioIntervalDecoded
        let ebpPlacementDecoded = try containerValues.decodeIfPresent(M2tsEbpPlacement.self, forKey: .ebpPlacement)
        ebpPlacement = ebpPlacementDecoded
        let esRateInPesDecoded = try containerValues.decodeIfPresent(M2tsEsRateInPes.self, forKey: .esRateInPes)
        esRateInPes = esRateInPesDecoded
        let forceTsVideoEbpOrderDecoded = try containerValues.decodeIfPresent(M2tsForceTsVideoEbpOrder.self, forKey: .forceTsVideoEbpOrder)
        forceTsVideoEbpOrder = forceTsVideoEbpOrderDecoded
        let fragmentTimeDecoded = try containerValues.decode(Double.self, forKey: .fragmentTime)
        fragmentTime = fragmentTimeDecoded
        let maxPcrIntervalDecoded = try containerValues.decode(Int.self, forKey: .maxPcrInterval)
        maxPcrInterval = maxPcrIntervalDecoded
        let minEbpIntervalDecoded = try containerValues.decode(Int.self, forKey: .minEbpInterval)
        minEbpInterval = minEbpIntervalDecoded
        let nielsenId3Decoded = try containerValues.decodeIfPresent(M2tsNielsenId3.self, forKey: .nielsenId3)
        nielsenId3 = nielsenId3Decoded
        let nullPacketBitrateDecoded = try containerValues.decode(Double.self, forKey: .nullPacketBitrate)
        nullPacketBitrate = nullPacketBitrateDecoded
        let patIntervalDecoded = try containerValues.decode(Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(M2tsPcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPidDecoded = try containerValues.decode(Int.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decode(Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decode(Int.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let privateMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .privateMetadataPid)
        privateMetadataPid = privateMetadataPidDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let rateModeDecoded = try containerValues.decodeIfPresent(M2tsRateMode.self, forKey: .rateMode)
        rateMode = rateModeDecoded
        let scte35EsamDecoded = try containerValues.decodeIfPresent(M2tsScte35Esam.self, forKey: .scte35Esam)
        scte35Esam = scte35EsamDecoded
        let scte35PidDecoded = try containerValues.decode(Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(M2tsScte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
        let segmentationMarkersDecoded = try containerValues.decodeIfPresent(M2tsSegmentationMarkers.self, forKey: .segmentationMarkers)
        segmentationMarkers = segmentationMarkersDecoded
        let segmentationStyleDecoded = try containerValues.decodeIfPresent(M2tsSegmentationStyle.self, forKey: .segmentationStyle)
        segmentationStyle = segmentationStyleDecoded
        let segmentationTimeDecoded = try containerValues.decode(Double.self, forKey: .segmentationTime)
        segmentationTime = segmentationTimeDecoded
        let timedMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decode(Int.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension M2tsSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "M2tsSettings(audioBufferModel: \(String(describing: audioBufferModel)), audioDuration: \(String(describing: audioDuration)), audioFramesPerPes: \(String(describing: audioFramesPerPes)), audioPids: \(String(describing: audioPids)), bitrate: \(String(describing: bitrate)), bufferModel: \(String(describing: bufferModel)), dvbNitSettings: \(String(describing: dvbNitSettings)), dvbSdtSettings: \(String(describing: dvbSdtSettings)), dvbSubPids: \(String(describing: dvbSubPids)), dvbTdtSettings: \(String(describing: dvbTdtSettings)), dvbTeletextPid: \(String(describing: dvbTeletextPid)), ebpAudioInterval: \(String(describing: ebpAudioInterval)), ebpPlacement: \(String(describing: ebpPlacement)), esRateInPes: \(String(describing: esRateInPes)), forceTsVideoEbpOrder: \(String(describing: forceTsVideoEbpOrder)), fragmentTime: \(String(describing: fragmentTime)), maxPcrInterval: \(String(describing: maxPcrInterval)), minEbpInterval: \(String(describing: minEbpInterval)), nielsenId3: \(String(describing: nielsenId3)), nullPacketBitrate: \(String(describing: nullPacketBitrate)), patInterval: \(String(describing: patInterval)), pcrControl: \(String(describing: pcrControl)), pcrPid: \(String(describing: pcrPid)), pmtInterval: \(String(describing: pmtInterval)), pmtPid: \(String(describing: pmtPid)), privateMetadataPid: \(String(describing: privateMetadataPid)), programNumber: \(String(describing: programNumber)), rateMode: \(String(describing: rateMode)), scte35Esam: \(String(describing: scte35Esam)), scte35Pid: \(String(describing: scte35Pid)), scte35Source: \(String(describing: scte35Source)), segmentationMarkers: \(String(describing: segmentationMarkers)), segmentationStyle: \(String(describing: segmentationStyle)), segmentationTime: \(String(describing: segmentationTime)), timedMetadataPid: \(String(describing: timedMetadataPid)), transportStreamId: \(String(describing: transportStreamId)), videoPid: \(String(describing: videoPid)))"}
}

/// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container (ContainerType) is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
public struct M2tsSettings: Equatable {
    /// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
    public let audioBufferModel: M2tsAudioBufferModel?
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: M2tsAudioDuration?
    /// The number of audio frames to insert for each PES packet.
    public let audioFramesPerPes: Int
    /// Specify the packet identifiers (PIDs) for any elementary audio streams you include in this output. Specify multiple PIDs as a JSON array. Default is the range 482-492.
    public let audioPids: [Int]?
    /// Specify the output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate. Other common values are 3750000, 7500000, and 15000000.
    public let bitrate: Int
    /// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex  buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
    public let bufferModel: M2tsBufferModel?
    /// Use these settings to insert a DVB Network Information Table (NIT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
    public let dvbNitSettings: DvbNitSettings?
    /// Use these settings to insert a DVB Service Description Table (SDT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
    public let dvbSdtSettings: DvbSdtSettings?
    /// Specify the packet identifiers (PIDs) for DVB subtitle data included in this output. Specify multiple PIDs as a JSON array. Default is the range 460-479.
    public let dvbSubPids: [Int]?
    /// Use these settings to insert a DVB Time and Date Table (TDT) in the transport stream of this output. When you work directly in your JSON job specification, include this object only when your job has a transport stream output and the container settings contain the object M2tsSettings.
    public let dvbTdtSettings: DvbTdtSettings?
    /// Specify the packet identifier (PID) for DVB teletext data you include in this output. Default is 499.
    public let dvbTeletextPid: Int
    /// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
    public let ebpAudioInterval: M2tsEbpAudioInterval?
    /// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
    public let ebpPlacement: M2tsEbpPlacement?
    /// Controls whether to include the ES Rate field in the PES header.
    public let esRateInPes: M2tsEsRateInPes?
    /// Keep the default value (DEFAULT) unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force (FORCE).
    public let forceTsVideoEbpOrder: M2tsForceTsVideoEbpOrder?
    /// The length, in seconds, of each fragment. Only used with EBP markers.
    public let fragmentTime: Double
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    public let maxPcrInterval: Int
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    public let minEbpInterval: Int
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3: M2tsNielsenId3?
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    public let nullPacketBitrate: Double
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let patInterval: Int
    /// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
    public let pcrControl: M2tsPcrControl?
    /// Specify the packet identifier (PID) for the program clock reference (PCR) in this output. If you do not specify a value, the service will use the value for Video PID (VideoPid).
    public let pcrPid: Int
    /// Specify the number of milliseconds between instances of the program map table (PMT) in the output transport stream.
    public let pmtInterval: Int
    /// Specify the packet identifier (PID) for the program map table (PMT) itself. Default is 480.
    public let pmtPid: Int
    /// Specify the packet identifier (PID) of the private metadata stream. Default is 503.
    public let privateMetadataPid: Int
    /// Use Program number (programNumber) to specify the program number used in the program map table (PMT) for this output. Default is 1. Program numbers and program map tables are parts of MPEG-2 transport stream containers, used for organizing data.
    public let programNumber: Int
    /// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
    public let rateMode: M2tsRateMode?
    /// Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    public let scte35Esam: M2tsScte35Esam?
    /// Specify the packet identifier (PID) of the SCTE-35 stream in the transport stream.
    public let scte35Pid: Int
    /// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE). Also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml). Also enable ESAM SCTE-35 (include the property scte35Esam).
    public let scte35Source: M2tsScte35Source?
    /// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    public let segmentationMarkers: M2tsSegmentationMarkers?
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
    public let segmentationStyle: M2tsSegmentationStyle?
    /// Specify the length, in seconds, of each segment. Required unless markers is set to _none_.
    public let segmentationTime: Double
    /// Specify the packet identifier (PID) for timed metadata in this output. Default is 502.
    public let timedMetadataPid: Int
    /// Specify the ID for the transport stream itself in the program map table for this output. Transport stream IDs and program map tables are parts of MPEG-2 transport stream containers, used for organizing data.
    public let transportStreamId: Int
    /// Specify the packet identifier (PID) of the elementary video stream in the transport stream.
    public let videoPid: Int

    public init (
        audioBufferModel: M2tsAudioBufferModel? = nil,
        audioDuration: M2tsAudioDuration? = nil,
        audioFramesPerPes: Int = 0,
        audioPids: [Int]? = nil,
        bitrate: Int = 0,
        bufferModel: M2tsBufferModel? = nil,
        dvbNitSettings: DvbNitSettings? = nil,
        dvbSdtSettings: DvbSdtSettings? = nil,
        dvbSubPids: [Int]? = nil,
        dvbTdtSettings: DvbTdtSettings? = nil,
        dvbTeletextPid: Int = 0,
        ebpAudioInterval: M2tsEbpAudioInterval? = nil,
        ebpPlacement: M2tsEbpPlacement? = nil,
        esRateInPes: M2tsEsRateInPes? = nil,
        forceTsVideoEbpOrder: M2tsForceTsVideoEbpOrder? = nil,
        fragmentTime: Double = 0.0,
        maxPcrInterval: Int = 0,
        minEbpInterval: Int = 0,
        nielsenId3: M2tsNielsenId3? = nil,
        nullPacketBitrate: Double = 0.0,
        patInterval: Int = 0,
        pcrControl: M2tsPcrControl? = nil,
        pcrPid: Int = 0,
        pmtInterval: Int = 0,
        pmtPid: Int = 0,
        privateMetadataPid: Int = 0,
        programNumber: Int = 0,
        rateMode: M2tsRateMode? = nil,
        scte35Esam: M2tsScte35Esam? = nil,
        scte35Pid: Int = 0,
        scte35Source: M2tsScte35Source? = nil,
        segmentationMarkers: M2tsSegmentationMarkers? = nil,
        segmentationStyle: M2tsSegmentationStyle? = nil,
        segmentationTime: Double = 0.0,
        timedMetadataPid: Int = 0,
        transportStreamId: Int = 0,
        videoPid: Int = 0
    )
    {
        self.audioBufferModel = audioBufferModel
        self.audioDuration = audioDuration
        self.audioFramesPerPes = audioFramesPerPes
        self.audioPids = audioPids
        self.bitrate = bitrate
        self.bufferModel = bufferModel
        self.dvbNitSettings = dvbNitSettings
        self.dvbSdtSettings = dvbSdtSettings
        self.dvbSubPids = dvbSubPids
        self.dvbTdtSettings = dvbTdtSettings
        self.dvbTeletextPid = dvbTeletextPid
        self.ebpAudioInterval = ebpAudioInterval
        self.ebpPlacement = ebpPlacement
        self.esRateInPes = esRateInPes
        self.forceTsVideoEbpOrder = forceTsVideoEbpOrder
        self.fragmentTime = fragmentTime
        self.maxPcrInterval = maxPcrInterval
        self.minEbpInterval = minEbpInterval
        self.nielsenId3 = nielsenId3
        self.nullPacketBitrate = nullPacketBitrate
        self.patInterval = patInterval
        self.pcrControl = pcrControl
        self.pcrPid = pcrPid
        self.pmtInterval = pmtInterval
        self.pmtPid = pmtPid
        self.privateMetadataPid = privateMetadataPid
        self.programNumber = programNumber
        self.rateMode = rateMode
        self.scte35Esam = scte35Esam
        self.scte35Pid = scte35Pid
        self.scte35Source = scte35Source
        self.segmentationMarkers = segmentationMarkers
        self.segmentationStyle = segmentationStyle
        self.segmentationTime = segmentationTime
        self.timedMetadataPid = timedMetadataPid
        self.transportStreamId = transportStreamId
        self.videoPid = videoPid
    }
}

/// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
public enum M3u8AudioDuration {
    case defaultCodecDuration
    case matchVideoDuration
    case sdkUnknown(String)
}

extension M3u8AudioDuration : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8AudioDuration] {
        return [
            .defaultCodecDuration,
            .matchVideoDuration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
        case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8AudioDuration(rawValue: rawValue) ?? M3u8AudioDuration.sdkUnknown(rawValue)
    }
}

/// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
public enum M3u8NielsenId3 {
    case insert
    case `none`
    case sdkUnknown(String)
}

extension M3u8NielsenId3 : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8NielsenId3] {
        return [
            .insert,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8NielsenId3(rawValue: rawValue) ?? M3u8NielsenId3.sdkUnknown(rawValue)
    }
}

/// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
public enum M3u8PcrControl {
    case configuredPcrPeriod
    case pcrEveryPesPacket
    case sdkUnknown(String)
}

extension M3u8PcrControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8PcrControl] {
        return [
            .configuredPcrPeriod,
            .pcrEveryPesPacket,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
        case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8PcrControl(rawValue: rawValue) ?? M3u8PcrControl.sdkUnknown(rawValue)
    }
}

/// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE) if you don't want manifest conditioning. Choose Passthrough (PASSTHROUGH) and choose Ad markers (adMarkers) if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml).
public enum M3u8Scte35Source {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension M3u8Scte35Source : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [M3u8Scte35Source] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = M3u8Scte35Source(rawValue: rawValue) ?? M3u8Scte35Source.sdkUnknown(rawValue)
    }
}

extension M3u8Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDuration = "audioDuration"
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case maxPcrInterval = "maxPcrInterval"
        case nielsenId3 = "nielsenId3"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case privateMetadataPid = "privateMetadataPid"
        case programNumber = "programNumber"
        case scte35Pid = "scte35Pid"
        case scte35Source = "scte35Source"
        case timedMetadata = "timedMetadata"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if audioFramesPerPes != 0 {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = audioPids {
            var audioPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioPids)
            for __listof__integermin32max81820 in audioPids {
                try audioPidsContainer.encode(__listof__integermin32max81820)
            }
        }
        if maxPcrInterval != 0 {
            try encodeContainer.encode(maxPcrInterval, forKey: .maxPcrInterval)
        }
        if let nielsenId3 = nielsenId3 {
            try encodeContainer.encode(nielsenId3.rawValue, forKey: .nielsenId3)
        }
        if patInterval != 0 {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if pcrPid != 0 {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if pmtInterval != 0 {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if pmtPid != 0 {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if privateMetadataPid != 0 {
            try encodeContainer.encode(privateMetadataPid, forKey: .privateMetadataPid)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if scte35Pid != 0 {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let scte35Source = scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
        if let timedMetadata = timedMetadata {
            try encodeContainer.encode(timedMetadata.rawValue, forKey: .timedMetadata)
        }
        if timedMetadataPid != 0 {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if videoPid != 0 {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationDecoded = try containerValues.decodeIfPresent(M3u8AudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioFramesPerPesDecoded = try containerValues.decode(Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .audioPids)
        var audioPidsDecoded0:[Int]? = nil
        if let audioPidsContainer = audioPidsContainer {
            audioPidsDecoded0 = [Int]()
            for integer0 in audioPidsContainer {
                if let integer0 = integer0 {
                    audioPidsDecoded0?.append(integer0)
                }
            }
        }
        audioPids = audioPidsDecoded0
        let maxPcrIntervalDecoded = try containerValues.decode(Int.self, forKey: .maxPcrInterval)
        maxPcrInterval = maxPcrIntervalDecoded
        let nielsenId3Decoded = try containerValues.decodeIfPresent(M3u8NielsenId3.self, forKey: .nielsenId3)
        nielsenId3 = nielsenId3Decoded
        let patIntervalDecoded = try containerValues.decode(Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(M3u8PcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPidDecoded = try containerValues.decode(Int.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decode(Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decode(Int.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let privateMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .privateMetadataPid)
        privateMetadataPid = privateMetadataPidDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let scte35PidDecoded = try containerValues.decode(Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(M3u8Scte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
        let timedMetadataDecoded = try containerValues.decodeIfPresent(TimedMetadata.self, forKey: .timedMetadata)
        timedMetadata = timedMetadataDecoded
        let timedMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decode(Int.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension M3u8Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "M3u8Settings(audioDuration: \(String(describing: audioDuration)), audioFramesPerPes: \(String(describing: audioFramesPerPes)), audioPids: \(String(describing: audioPids)), maxPcrInterval: \(String(describing: maxPcrInterval)), nielsenId3: \(String(describing: nielsenId3)), patInterval: \(String(describing: patInterval)), pcrControl: \(String(describing: pcrControl)), pcrPid: \(String(describing: pcrPid)), pmtInterval: \(String(describing: pmtInterval)), pmtPid: \(String(describing: pmtPid)), privateMetadataPid: \(String(describing: privateMetadataPid)), programNumber: \(String(describing: programNumber)), scte35Pid: \(String(describing: scte35Pid)), scte35Source: \(String(describing: scte35Source)), timedMetadata: \(String(describing: timedMetadata)), timedMetadataPid: \(String(describing: timedMetadataPid)), transportStreamId: \(String(describing: transportStreamId)), videoPid: \(String(describing: videoPid)))"}
}

/// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
public struct M3u8Settings: Equatable {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: M3u8AudioDuration?
    /// The number of audio frames to insert for each PES packet.
    public let audioFramesPerPes: Int
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    public let audioPids: [Int]?
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    public let maxPcrInterval: Int
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3: M3u8NielsenId3?
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let patInterval: Int
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    public let pcrControl: M3u8PcrControl?
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    public let pcrPid: Int
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let pmtInterval: Int
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    public let pmtPid: Int
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    public let privateMetadataPid: Int
    /// The value of the program number field in the Program Map Table.
    public let programNumber: Int
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    public let scte35Pid: Int
    /// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE) if you don't want manifest conditioning. Choose Passthrough (PASSTHROUGH) and choose Ad markers (adMarkers) if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml).
    public let scte35Source: M3u8Scte35Source?
    /// Applies only to HLS outputs. Use this setting to specify whether the service inserts the ID3 timed metadata from the input in this output.
    public let timedMetadata: TimedMetadata?
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream.
    public let timedMetadataPid: Int
    /// The value of the transport stream ID field in the Program Map Table.
    public let transportStreamId: Int
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    public let videoPid: Int

    public init (
        audioDuration: M3u8AudioDuration? = nil,
        audioFramesPerPes: Int = 0,
        audioPids: [Int]? = nil,
        maxPcrInterval: Int = 0,
        nielsenId3: M3u8NielsenId3? = nil,
        patInterval: Int = 0,
        pcrControl: M3u8PcrControl? = nil,
        pcrPid: Int = 0,
        pmtInterval: Int = 0,
        pmtPid: Int = 0,
        privateMetadataPid: Int = 0,
        programNumber: Int = 0,
        scte35Pid: Int = 0,
        scte35Source: M3u8Scte35Source? = nil,
        timedMetadata: TimedMetadata? = nil,
        timedMetadataPid: Int = 0,
        transportStreamId: Int = 0,
        videoPid: Int = 0
    )
    {
        self.audioDuration = audioDuration
        self.audioFramesPerPes = audioFramesPerPes
        self.audioPids = audioPids
        self.maxPcrInterval = maxPcrInterval
        self.nielsenId3 = nielsenId3
        self.patInterval = patInterval
        self.pcrControl = pcrControl
        self.pcrPid = pcrPid
        self.pmtInterval = pmtInterval
        self.pmtPid = pmtPid
        self.privateMetadataPid = privateMetadataPid
        self.programNumber = programNumber
        self.scte35Pid = scte35Pid
        self.scte35Source = scte35Source
        self.timedMetadata = timedMetadata
        self.timedMetadataPid = timedMetadataPid
        self.transportStreamId = transportStreamId
        self.videoPid = videoPid
    }
}

extension MotionImageInserter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case framerate = "framerate"
        case input = "input"
        case insertionMode = "insertionMode"
        case offset = "offset"
        case playback = "playback"
        case startTime = "startTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let framerate = framerate {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let insertionMode = insertionMode {
            try encodeContainer.encode(insertionMode.rawValue, forKey: .insertionMode)
        }
        if let offset = offset {
            try encodeContainer.encode(offset, forKey: .offset)
        }
        if let playback = playback {
            try encodeContainer.encode(playback.rawValue, forKey: .playback)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let framerateDecoded = try containerValues.decodeIfPresent(MotionImageInsertionFramerate.self, forKey: .framerate)
        framerate = framerateDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let insertionModeDecoded = try containerValues.decodeIfPresent(MotionImageInsertionMode.self, forKey: .insertionMode)
        insertionMode = insertionModeDecoded
        let offsetDecoded = try containerValues.decodeIfPresent(MotionImageInsertionOffset.self, forKey: .offset)
        offset = offsetDecoded
        let playbackDecoded = try containerValues.decodeIfPresent(MotionImagePlayback.self, forKey: .playback)
        playback = playbackDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension MotionImageInserter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionImageInserter(framerate: \(String(describing: framerate)), input: \(String(describing: input)), insertionMode: \(String(describing: insertionMode)), offset: \(String(describing: offset)), playback: \(String(describing: playback)), startTime: \(String(describing: startTime)))"}
}

/// Overlay motion graphics on top of your video. The motion graphics that you specify here appear on all outputs in all output groups. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/motion-graphic-overlay.html.
public struct MotionImageInserter: Equatable {
    /// If your motion graphic asset is a .mov file, keep this setting unspecified. If your motion graphic asset is a series of .png files, specify the frame rate of the overlay in frames per second, as a fraction. For example, specify 24 fps as 24/1. Make sure that the number of images in your series matches the frame rate and your intended overlay duration. For example, if you want a 30-second overlay at 30 fps, you should have 900 .png images. This overlay frame rate doesn't need to match the frame rate of the underlying video.
    public let framerate: MotionImageInsertionFramerate?
    /// Specify the .mov file or series of .png files that you want to overlay on your video. For .png files, provide the file name of the first file in the series. Make sure that the names of the .png files end with sequential numbers that specify the order that they are played in. For example, overlay_000.png, overlay_001.png, overlay_002.png, and so on. The sequence must start at zero, and each image file name must have the same number of digits. Pad your initial file names with enough zeros to complete the sequence. For example, if the first image is overlay_0.png, there can be only 10 images in the sequence, with the last image being overlay_9.png. But if the first image is overlay_00.png, there can be 100 images in the sequence.
    public let input: String?
    /// Choose the type of motion graphic asset that you are providing for your overlay. You can choose either a .mov file or a series of .png files.
    public let insertionMode: MotionImageInsertionMode?
    /// Use Offset to specify the placement of your motion graphic overlay on the video frame. Specify in pixels, from the upper-left corner of the frame. If you don't specify an offset, the service scales your overlay to the full size of the frame. Otherwise, the service inserts the overlay at its native resolution and scales the size up or down with any video scaling.
    public let offset: MotionImageInsertionOffset?
    /// Specify whether your motion graphic overlay repeats on a loop or plays only once.
    public let playback: MotionImagePlayback?
    /// Specify when the motion overlay begins. Use timecode format (HH:MM:SS:FF or HH:MM:SS;FF). Make sure that the timecode you provide here takes into account how you have set up your timecode configuration under both job settings and input settings. The simplest way to do that is to set both to start at 0. If you need to set up your job to follow timecodes embedded in your source that don't start at zero, make sure that you specify a start time that is after the first embedded timecode. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/setting-up-timecode.html Find job-wide and input timecode configuration settings in your JSON job settings specification at settings>timecodeConfig>source and settings>inputs>timecodeSource.
    public let startTime: String?

    public init (
        framerate: MotionImageInsertionFramerate? = nil,
        input: String? = nil,
        insertionMode: MotionImageInsertionMode? = nil,
        offset: MotionImageInsertionOffset? = nil,
        playback: MotionImagePlayback? = nil,
        startTime: String? = nil
    )
    {
        self.framerate = framerate
        self.input = input
        self.insertionMode = insertionMode
        self.offset = offset
        self.playback = playback
        self.startTime = startTime
    }
}

extension MotionImageInsertionFramerate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
    }
}

extension MotionImageInsertionFramerate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionImageInsertionFramerate(framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)))"}
}

/// For motion overlays that don't have a built-in frame rate, specify the frame rate of the overlay in frames per second, as a fraction. For example, specify 24 fps as 24/1. The overlay frame rate doesn't need to match the frame rate of the underlying video.
public struct MotionImageInsertionFramerate: Equatable {
    /// The bottom of the fraction that expresses your overlay frame rate. For example, if your frame rate is 24 fps, set this value to 1.
    public let framerateDenominator: Int
    /// The top of the fraction that expresses your overlay frame rate. For example, if your frame rate is 24 fps, set this value to 24.
    public let framerateNumerator: Int

    public init (
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0
    )
    {
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
    }
}

/// Choose the type of motion graphic asset that you are providing for your overlay. You can choose either a .mov file or a series of .png files.
public enum MotionImageInsertionMode {
    case mov
    case png
    case sdkUnknown(String)
}

extension MotionImageInsertionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MotionImageInsertionMode] {
        return [
            .mov,
            .png,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mov: return "MOV"
        case .png: return "PNG"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MotionImageInsertionMode(rawValue: rawValue) ?? MotionImageInsertionMode.sdkUnknown(rawValue)
    }
}

extension MotionImageInsertionOffset: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case imageX = "imageX"
        case imageY = "imageY"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if imageX != 0 {
            try encodeContainer.encode(imageX, forKey: .imageX)
        }
        if imageY != 0 {
            try encodeContainer.encode(imageY, forKey: .imageY)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageXDecoded = try containerValues.decode(Int.self, forKey: .imageX)
        imageX = imageXDecoded
        let imageYDecoded = try containerValues.decode(Int.self, forKey: .imageY)
        imageY = imageYDecoded
    }
}

extension MotionImageInsertionOffset: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MotionImageInsertionOffset(imageX: \(String(describing: imageX)), imageY: \(String(describing: imageY)))"}
}

/// Specify the offset between the upper-left corner of the video frame and the top left corner of the overlay.
public struct MotionImageInsertionOffset: Equatable {
    /// Set the distance, in pixels, between the overlay and the left edge of the video frame.
    public let imageX: Int
    /// Set the distance, in pixels, between the overlay and the top edge of the video frame.
    public let imageY: Int

    public init (
        imageX: Int = 0,
        imageY: Int = 0
    )
    {
        self.imageX = imageX
        self.imageY = imageY
    }
}

/// Specify whether your motion graphic overlay repeats on a loop or plays only once.
public enum MotionImagePlayback {
    case once
    case `repeat`
    case sdkUnknown(String)
}

extension MotionImagePlayback : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MotionImagePlayback] {
        return [
            .once,
            .repeat,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .once: return "ONCE"
        case .repeat: return "REPEAT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MotionImagePlayback(rawValue: rawValue) ?? MotionImagePlayback.sdkUnknown(rawValue)
    }
}

/// When enabled, include 'clap' atom if appropriate for the video output settings.
public enum MovClapAtom {
    case exclude
    case include
    case sdkUnknown(String)
}

extension MovClapAtom : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MovClapAtom] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MovClapAtom(rawValue: rawValue) ?? MovClapAtom.sdkUnknown(rawValue)
    }
}

/// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
public enum MovCslgAtom {
    case exclude
    case include
    case sdkUnknown(String)
}

extension MovCslgAtom : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MovCslgAtom] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MovCslgAtom(rawValue: rawValue) ?? MovCslgAtom.sdkUnknown(rawValue)
    }
}

/// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
public enum MovMpeg2FourCCControl {
    case mpeg
    case xdcam
    case sdkUnknown(String)
}

extension MovMpeg2FourCCControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MovMpeg2FourCCControl] {
        return [
            .mpeg,
            .xdcam,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mpeg: return "MPEG"
        case .xdcam: return "XDCAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MovMpeg2FourCCControl(rawValue: rawValue) ?? MovMpeg2FourCCControl.sdkUnknown(rawValue)
    }
}

/// To make this output compatible with Omenon, keep the default value, OMNEON. Unless you need Omneon compatibility, set this value to NONE. When you keep the default value, OMNEON, MediaConvert increases the length of the edit list atom. This might cause file rejections when a recipient of the output file doesn't expct this extra padding.
public enum MovPaddingControl {
    case `none`
    case omneon
    case sdkUnknown(String)
}

extension MovPaddingControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MovPaddingControl] {
        return [
            .none,
            .omneon,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .omneon: return "OMNEON"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MovPaddingControl(rawValue: rawValue) ?? MovPaddingControl.sdkUnknown(rawValue)
    }
}

/// Always keep the default value (SELF_CONTAINED) for this setting.
public enum MovReference {
    case external
    case selfContained
    case sdkUnknown(String)
}

extension MovReference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MovReference] {
        return [
            .external,
            .selfContained,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .external: return "EXTERNAL"
        case .selfContained: return "SELF_CONTAINED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MovReference(rawValue: rawValue) ?? MovReference.sdkUnknown(rawValue)
    }
}

extension MovSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clapAtom = "clapAtom"
        case cslgAtom = "cslgAtom"
        case mpeg2FourCCControl = "mpeg2FourCCControl"
        case paddingControl = "paddingControl"
        case reference = "reference"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clapAtom = clapAtom {
            try encodeContainer.encode(clapAtom.rawValue, forKey: .clapAtom)
        }
        if let cslgAtom = cslgAtom {
            try encodeContainer.encode(cslgAtom.rawValue, forKey: .cslgAtom)
        }
        if let mpeg2FourCCControl = mpeg2FourCCControl {
            try encodeContainer.encode(mpeg2FourCCControl.rawValue, forKey: .mpeg2FourCCControl)
        }
        if let paddingControl = paddingControl {
            try encodeContainer.encode(paddingControl.rawValue, forKey: .paddingControl)
        }
        if let reference = reference {
            try encodeContainer.encode(reference.rawValue, forKey: .reference)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clapAtomDecoded = try containerValues.decodeIfPresent(MovClapAtom.self, forKey: .clapAtom)
        clapAtom = clapAtomDecoded
        let cslgAtomDecoded = try containerValues.decodeIfPresent(MovCslgAtom.self, forKey: .cslgAtom)
        cslgAtom = cslgAtomDecoded
        let mpeg2FourCCControlDecoded = try containerValues.decodeIfPresent(MovMpeg2FourCCControl.self, forKey: .mpeg2FourCCControl)
        mpeg2FourCCControl = mpeg2FourCCControlDecoded
        let paddingControlDecoded = try containerValues.decodeIfPresent(MovPaddingControl.self, forKey: .paddingControl)
        paddingControl = paddingControlDecoded
        let referenceDecoded = try containerValues.decodeIfPresent(MovReference.self, forKey: .reference)
        reference = referenceDecoded
    }
}

extension MovSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MovSettings(clapAtom: \(String(describing: clapAtom)), cslgAtom: \(String(describing: cslgAtom)), mpeg2FourCCControl: \(String(describing: mpeg2FourCCControl)), paddingControl: \(String(describing: paddingControl)), reference: \(String(describing: reference)))"}
}

/// These settings relate to your QuickTime MOV output container.
public struct MovSettings: Equatable {
    /// When enabled, include 'clap' atom if appropriate for the video output settings.
    public let clapAtom: MovClapAtom?
    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    public let cslgAtom: MovCslgAtom?
    /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
    public let mpeg2FourCCControl: MovMpeg2FourCCControl?
    /// To make this output compatible with Omenon, keep the default value, OMNEON. Unless you need Omneon compatibility, set this value to NONE. When you keep the default value, OMNEON, MediaConvert increases the length of the edit list atom. This might cause file rejections when a recipient of the output file doesn't expct this extra padding.
    public let paddingControl: MovPaddingControl?
    /// Always keep the default value (SELF_CONTAINED) for this setting.
    public let reference: MovReference?

    public init (
        clapAtom: MovClapAtom? = nil,
        cslgAtom: MovCslgAtom? = nil,
        mpeg2FourCCControl: MovMpeg2FourCCControl? = nil,
        paddingControl: MovPaddingControl? = nil,
        reference: MovReference? = nil
    )
    {
        self.clapAtom = clapAtom
        self.cslgAtom = cslgAtom
        self.mpeg2FourCCControl = mpeg2FourCCControl
        self.paddingControl = paddingControl
        self.reference = reference
    }
}

extension Mp2Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case channels = "channels"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension Mp2Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mp2Settings(bitrate: \(String(describing: bitrate)), channels: \(String(describing: channels)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value MP2.
public struct Mp2Settings: Equatable {
    /// Specify the average bitrate in bits per second.
    public let bitrate: Int
    /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in the console will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
    public let channels: Int
    /// Sample rate in hz.
    public let sampleRate: Int

    public init (
        bitrate: Int = 0,
        channels: Int = 0,
        sampleRate: Int = 0
    )
    {
        self.bitrate = bitrate
        self.channels = channels
        self.sampleRate = sampleRate
    }
}

/// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
public enum Mp3RateControlMode {
    case cbr
    case vbr
    case sdkUnknown(String)
}

extension Mp3RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mp3RateControlMode] {
        return [
            .cbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mp3RateControlMode(rawValue: rawValue) ?? Mp3RateControlMode.sdkUnknown(rawValue)
    }
}

extension Mp3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case channels = "channels"
        case rateControlMode = "rateControlMode"
        case sampleRate = "sampleRate"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if vbrQuality != 0 {
            try encodeContainer.encode(vbrQuality, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Mp3RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let vbrQualityDecoded = try containerValues.decode(Int.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}

extension Mp3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mp3Settings(bitrate: \(String(describing: bitrate)), channels: \(String(describing: channels)), rateControlMode: \(String(describing: rateControlMode)), sampleRate: \(String(describing: sampleRate)), vbrQuality: \(String(describing: vbrQuality)))"}
}

/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value MP3.
public struct Mp3Settings: Equatable {
    /// Specify the average bitrate in bits per second.
    public let bitrate: Int
    /// Specify the number of channels in this output audio track. Choosing Mono on the console gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    public let channels: Int
    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    public let rateControlMode: Mp3RateControlMode?
    /// Sample rate in hz.
    public let sampleRate: Int
    /// Required when you set Bitrate control mode (rateControlMode) to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
    public let vbrQuality: Int

    public init (
        bitrate: Int = 0,
        channels: Int = 0,
        rateControlMode: Mp3RateControlMode? = nil,
        sampleRate: Int = 0,
        vbrQuality: Int = 0
    )
    {
        self.bitrate = bitrate
        self.channels = channels
        self.rateControlMode = rateControlMode
        self.sampleRate = sampleRate
        self.vbrQuality = vbrQuality
    }
}

/// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
public enum Mp4CslgAtom {
    case exclude
    case include
    case sdkUnknown(String)
}

extension Mp4CslgAtom : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mp4CslgAtom] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mp4CslgAtom(rawValue: rawValue) ?? Mp4CslgAtom.sdkUnknown(rawValue)
    }
}

/// Inserts a free-space box immediately after the moov box.
public enum Mp4FreeSpaceBox {
    case exclude
    case include
    case sdkUnknown(String)
}

extension Mp4FreeSpaceBox : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mp4FreeSpaceBox] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mp4FreeSpaceBox(rawValue: rawValue) ?? Mp4FreeSpaceBox.sdkUnknown(rawValue)
    }
}

/// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
public enum Mp4MoovPlacement {
    case normal
    case progressiveDownload
    case sdkUnknown(String)
}

extension Mp4MoovPlacement : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mp4MoovPlacement] {
        return [
            .normal,
            .progressiveDownload,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .normal: return "NORMAL"
        case .progressiveDownload: return "PROGRESSIVE_DOWNLOAD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mp4MoovPlacement(rawValue: rawValue) ?? Mp4MoovPlacement.sdkUnknown(rawValue)
    }
}

extension Mp4Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDuration = "audioDuration"
        case cslgAtom = "cslgAtom"
        case cttsVersion = "cttsVersion"
        case freeSpaceBox = "freeSpaceBox"
        case moovPlacement = "moovPlacement"
        case mp4MajorBrand = "mp4MajorBrand"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if let cslgAtom = cslgAtom {
            try encodeContainer.encode(cslgAtom.rawValue, forKey: .cslgAtom)
        }
        if cttsVersion != 0 {
            try encodeContainer.encode(cttsVersion, forKey: .cttsVersion)
        }
        if let freeSpaceBox = freeSpaceBox {
            try encodeContainer.encode(freeSpaceBox.rawValue, forKey: .freeSpaceBox)
        }
        if let moovPlacement = moovPlacement {
            try encodeContainer.encode(moovPlacement.rawValue, forKey: .moovPlacement)
        }
        if let mp4MajorBrand = mp4MajorBrand {
            try encodeContainer.encode(mp4MajorBrand, forKey: .mp4MajorBrand)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationDecoded = try containerValues.decodeIfPresent(CmfcAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let cslgAtomDecoded = try containerValues.decodeIfPresent(Mp4CslgAtom.self, forKey: .cslgAtom)
        cslgAtom = cslgAtomDecoded
        let cttsVersionDecoded = try containerValues.decode(Int.self, forKey: .cttsVersion)
        cttsVersion = cttsVersionDecoded
        let freeSpaceBoxDecoded = try containerValues.decodeIfPresent(Mp4FreeSpaceBox.self, forKey: .freeSpaceBox)
        freeSpaceBox = freeSpaceBoxDecoded
        let moovPlacementDecoded = try containerValues.decodeIfPresent(Mp4MoovPlacement.self, forKey: .moovPlacement)
        moovPlacement = moovPlacementDecoded
        let mp4MajorBrandDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mp4MajorBrand)
        mp4MajorBrand = mp4MajorBrandDecoded
    }
}

extension Mp4Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mp4Settings(audioDuration: \(String(describing: audioDuration)), cslgAtom: \(String(describing: cslgAtom)), cttsVersion: \(String(describing: cttsVersion)), freeSpaceBox: \(String(describing: freeSpaceBox)), moovPlacement: \(String(describing: moovPlacement)), mp4MajorBrand: \(String(describing: mp4MajorBrand)))"}
}

/// These settings relate to your MP4 output container. You can create audio only outputs with this container. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/supported-codecs-containers-audio-only.html#output-codecs-and-containers-supported-for-audio-only.
public struct Mp4Settings: Equatable {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: CmfcAudioDuration?
    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    public let cslgAtom: Mp4CslgAtom?
    /// Ignore this setting unless compliance to the CTTS box version specification matters in your workflow. Specify a value of 1 to set your CTTS box version to 1 and make your output compliant with the specification. When you specify a value of 1, you must also set CSLG atom (cslgAtom) to the value INCLUDE. Keep the default value 0 to set your CTTS box version to 0. This can provide backward compatibility for some players and packagers.
    public let cttsVersion: Int
    /// Inserts a free-space box immediately after the moov box.
    public let freeSpaceBox: Mp4FreeSpaceBox?
    /// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
    public let moovPlacement: Mp4MoovPlacement?
    /// Overrides the "Major Brand" field in the output file. Usually not necessary to specify.
    public let mp4MajorBrand: String?

    public init (
        audioDuration: CmfcAudioDuration? = nil,
        cslgAtom: Mp4CslgAtom? = nil,
        cttsVersion: Int = 0,
        freeSpaceBox: Mp4FreeSpaceBox? = nil,
        moovPlacement: Mp4MoovPlacement? = nil,
        mp4MajorBrand: String? = nil
    )
    {
        self.audioDuration = audioDuration
        self.cslgAtom = cslgAtom
        self.cttsVersion = cttsVersion
        self.freeSpaceBox = freeSpaceBox
        self.moovPlacement = moovPlacement
        self.mp4MajorBrand = mp4MajorBrand
    }
}

/// Optional. Choose Include (INCLUDE) to have MediaConvert mark up your DASH manifest with <Accessibility> elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude (EXCLUDE), to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest: <Accessibility schemeIdUri="urn:scte:dash:cc:cea-608:2015" value="CC1=eng"/>
public enum MpdAccessibilityCaptionHints {
    case exclude
    case include
    case sdkUnknown(String)
}

extension MpdAccessibilityCaptionHints : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MpdAccessibilityCaptionHints] {
        return [
            .exclude,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "EXCLUDE"
        case .include: return "INCLUDE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MpdAccessibilityCaptionHints(rawValue: rawValue) ?? MpdAccessibilityCaptionHints.sdkUnknown(rawValue)
    }
}

/// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
public enum MpdAudioDuration {
    case defaultCodecDuration
    case matchVideoDuration
    case sdkUnknown(String)
}

extension MpdAudioDuration : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MpdAudioDuration] {
        return [
            .defaultCodecDuration,
            .matchVideoDuration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
        case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MpdAudioDuration(rawValue: rawValue) ?? MpdAudioDuration.sdkUnknown(rawValue)
    }
}

/// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions.  You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
public enum MpdCaptionContainerType {
    case fragmentedMp4
    case raw
    case sdkUnknown(String)
}

extension MpdCaptionContainerType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MpdCaptionContainerType] {
        return [
            .fragmentedMp4,
            .raw,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fragmentedMp4: return "FRAGMENTED_MP4"
        case .raw: return "RAW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MpdCaptionContainerType(rawValue: rawValue) ?? MpdCaptionContainerType.sdkUnknown(rawValue)
    }
}

/// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
public enum MpdScte35Esam {
    case insert
    case `none`
    case sdkUnknown(String)
}

extension MpdScte35Esam : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MpdScte35Esam] {
        return [
            .insert,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .insert: return "INSERT"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MpdScte35Esam(rawValue: rawValue) ?? MpdScte35Esam.sdkUnknown(rawValue)
    }
}

/// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
public enum MpdScte35Source {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension MpdScte35Source : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MpdScte35Source] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MpdScte35Source(rawValue: rawValue) ?? MpdScte35Source.sdkUnknown(rawValue)
    }
}

extension MpdSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessibilityCaptionHints = "accessibilityCaptionHints"
        case audioDuration = "audioDuration"
        case captionContainerType = "captionContainerType"
        case scte35Esam = "scte35Esam"
        case scte35Source = "scte35Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessibilityCaptionHints = accessibilityCaptionHints {
            try encodeContainer.encode(accessibilityCaptionHints.rawValue, forKey: .accessibilityCaptionHints)
        }
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if let captionContainerType = captionContainerType {
            try encodeContainer.encode(captionContainerType.rawValue, forKey: .captionContainerType)
        }
        if let scte35Esam = scte35Esam {
            try encodeContainer.encode(scte35Esam.rawValue, forKey: .scte35Esam)
        }
        if let scte35Source = scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessibilityCaptionHintsDecoded = try containerValues.decodeIfPresent(MpdAccessibilityCaptionHints.self, forKey: .accessibilityCaptionHints)
        accessibilityCaptionHints = accessibilityCaptionHintsDecoded
        let audioDurationDecoded = try containerValues.decodeIfPresent(MpdAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let captionContainerTypeDecoded = try containerValues.decodeIfPresent(MpdCaptionContainerType.self, forKey: .captionContainerType)
        captionContainerType = captionContainerTypeDecoded
        let scte35EsamDecoded = try containerValues.decodeIfPresent(MpdScte35Esam.self, forKey: .scte35Esam)
        scte35Esam = scte35EsamDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(MpdScte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
    }
}

extension MpdSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MpdSettings(accessibilityCaptionHints: \(String(describing: accessibilityCaptionHints)), audioDuration: \(String(describing: audioDuration)), captionContainerType: \(String(describing: captionContainerType)), scte35Esam: \(String(describing: scte35Esam)), scte35Source: \(String(describing: scte35Source)))"}
}

/// These settings relate to the fragmented MP4 container for the segments in your DASH outputs.
public struct MpdSettings: Equatable {
    /// Optional. Choose Include (INCLUDE) to have MediaConvert mark up your DASH manifest with <Accessibility> elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude (EXCLUDE), to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest: <Accessibility schemeIdUri="urn:scte:dash:cc:cea-608:2015" value="CC1=eng"/>
    public let accessibilityCaptionHints: MpdAccessibilityCaptionHints?
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: MpdAudioDuration?
    /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions.  You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
    public let captionContainerType: MpdCaptionContainerType?
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    public let scte35Esam: MpdScte35Esam?
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    public let scte35Source: MpdScte35Source?

    public init (
        accessibilityCaptionHints: MpdAccessibilityCaptionHints? = nil,
        audioDuration: MpdAudioDuration? = nil,
        captionContainerType: MpdCaptionContainerType? = nil,
        scte35Esam: MpdScte35Esam? = nil,
        scte35Source: MpdScte35Source? = nil
    )
    {
        self.accessibilityCaptionHints = accessibilityCaptionHints
        self.audioDuration = audioDuration
        self.captionContainerType = captionContainerType
        self.scte35Esam = scte35Esam
        self.scte35Source = scte35Source
    }
}

/// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
public enum Mpeg2AdaptiveQuantization {
    case high
    case low
    case medium
    case off
    case sdkUnknown(String)
}

extension Mpeg2AdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2AdaptiveQuantization] {
        return [
            .high,
            .low,
            .medium,
            .off,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .low: return "LOW"
        case .medium: return "MEDIUM"
        case .off: return "OFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2AdaptiveQuantization(rawValue: rawValue) ?? Mpeg2AdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Use Level (Mpeg2CodecLevel) to set the MPEG-2 level for the video output.
public enum Mpeg2CodecLevel {
    case auto
    case high
    case high1440
    case low
    case main
    case sdkUnknown(String)
}

extension Mpeg2CodecLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2CodecLevel] {
        return [
            .auto,
            .high,
            .high1440,
            .low,
            .main,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .high: return "HIGH"
        case .high1440: return "HIGH1440"
        case .low: return "LOW"
        case .main: return "MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2CodecLevel(rawValue: rawValue) ?? Mpeg2CodecLevel.sdkUnknown(rawValue)
    }
}

/// Use Profile (Mpeg2CodecProfile) to set the MPEG-2 profile for the video output.
public enum Mpeg2CodecProfile {
    case main
    case profile422
    case sdkUnknown(String)
}

extension Mpeg2CodecProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2CodecProfile] {
        return [
            .main,
            .profile422,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .main: return "MAIN"
        case .profile422: return "PROFILE_422"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2CodecProfile(rawValue: rawValue) ?? Mpeg2CodecProfile.sdkUnknown(rawValue)
    }
}

/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
public enum Mpeg2DynamicSubGop {
    case adaptive
    case `static`
    case sdkUnknown(String)
}

extension Mpeg2DynamicSubGop : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2DynamicSubGop] {
        return [
            .adaptive,
            .static,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adaptive: return "ADAPTIVE"
        case .static: return "STATIC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2DynamicSubGop(rawValue: rawValue) ?? Mpeg2DynamicSubGop.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum Mpeg2FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Mpeg2FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2FramerateControl(rawValue: rawValue) ?? Mpeg2FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum Mpeg2FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension Mpeg2FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2FramerateConversionAlgorithm(rawValue: rawValue) ?? Mpeg2FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// Indicates if the GOP Size in MPEG2 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
public enum Mpeg2GopSizeUnits {
    case frames
    case seconds
    case sdkUnknown(String)
}

extension Mpeg2GopSizeUnits : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2GopSizeUnits] {
        return [
            .frames,
            .seconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .frames: return "FRAMES"
        case .seconds: return "SECONDS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2GopSizeUnits(rawValue: rawValue) ?? Mpeg2GopSizeUnits.sdkUnknown(rawValue)
    }
}

/// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
public enum Mpeg2InterlaceMode {
    case bottomField
    case followBottomField
    case followTopField
    case progressive
    case topField
    case sdkUnknown(String)
}

extension Mpeg2InterlaceMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2InterlaceMode] {
        return [
            .bottomField,
            .followBottomField,
            .followTopField,
            .progressive,
            .topField,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bottomField: return "BOTTOM_FIELD"
        case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
        case .followTopField: return "FOLLOW_TOP_FIELD"
        case .progressive: return "PROGRESSIVE"
        case .topField: return "TOP_FIELD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2InterlaceMode(rawValue: rawValue) ?? Mpeg2InterlaceMode.sdkUnknown(rawValue)
    }
}

/// Use Intra DC precision (Mpeg2IntraDcPrecision) to set quantization precision for intra-block DC coefficients. If you choose the value auto, the service will automatically select the precision based on the per-frame compression ratio.
public enum Mpeg2IntraDcPrecision {
    case auto
    case intraDcPrecision10
    case intraDcPrecision11
    case intraDcPrecision8
    case intraDcPrecision9
    case sdkUnknown(String)
}

extension Mpeg2IntraDcPrecision : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2IntraDcPrecision] {
        return [
            .auto,
            .intraDcPrecision10,
            .intraDcPrecision11,
            .intraDcPrecision8,
            .intraDcPrecision9,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .intraDcPrecision10: return "INTRA_DC_PRECISION_10"
        case .intraDcPrecision11: return "INTRA_DC_PRECISION_11"
        case .intraDcPrecision8: return "INTRA_DC_PRECISION_8"
        case .intraDcPrecision9: return "INTRA_DC_PRECISION_9"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2IntraDcPrecision(rawValue: rawValue) ?? Mpeg2IntraDcPrecision.sdkUnknown(rawValue)
    }
}

/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
public enum Mpeg2ParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Mpeg2ParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2ParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2ParControl(rawValue: rawValue) ?? Mpeg2ParControl.sdkUnknown(rawValue)
    }
}

/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
public enum Mpeg2QualityTuningLevel {
    case multiPass
    case singlePass
    case sdkUnknown(String)
}

extension Mpeg2QualityTuningLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2QualityTuningLevel] {
        return [
            .multiPass,
            .singlePass,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiPass: return "MULTI_PASS"
        case .singlePass: return "SINGLE_PASS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2QualityTuningLevel(rawValue: rawValue) ?? Mpeg2QualityTuningLevel.sdkUnknown(rawValue)
    }
}

/// Use Rate control mode (Mpeg2RateControlMode) to specify whether the bitrate is variable (vbr) or constant (cbr).
public enum Mpeg2RateControlMode {
    case cbr
    case vbr
    case sdkUnknown(String)
}

extension Mpeg2RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2RateControlMode] {
        return [
            .cbr,
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbr: return "CBR"
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2RateControlMode(rawValue: rawValue) ?? Mpeg2RateControlMode.sdkUnknown(rawValue)
    }
}

/// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
public enum Mpeg2ScanTypeConversionMode {
    case interlaced
    case interlacedOptimize
    case sdkUnknown(String)
}

extension Mpeg2ScanTypeConversionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2ScanTypeConversionMode] {
        return [
            .interlaced,
            .interlacedOptimize,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2ScanTypeConversionMode(rawValue: rawValue) ?? Mpeg2ScanTypeConversionMode.sdkUnknown(rawValue)
    }
}

/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default.
public enum Mpeg2SceneChangeDetect {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Mpeg2SceneChangeDetect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2SceneChangeDetect] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2SceneChangeDetect(rawValue: rawValue) ?? Mpeg2SceneChangeDetect.sdkUnknown(rawValue)
    }
}

extension Mpeg2Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case bitrate = "bitrate"
        case codecLevel = "codecLevel"
        case codecProfile = "codecProfile"
        case dynamicSubGop = "dynamicSubGop"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case hrdBufferInitialFillPercentage = "hrdBufferInitialFillPercentage"
        case hrdBufferSize = "hrdBufferSize"
        case interlaceMode = "interlaceMode"
        case intraDcPrecision = "intraDcPrecision"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case rateControlMode = "rateControlMode"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case sceneChangeDetect = "sceneChangeDetect"
        case slowPal = "slowPal"
        case softness = "softness"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
        case syntax = "syntax"
        case telecine = "telecine"
        case temporalAdaptiveQuantization = "temporalAdaptiveQuantization"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codecLevel = codecLevel {
            try encodeContainer.encode(codecLevel.rawValue, forKey: .codecLevel)
        }
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let dynamicSubGop = dynamicSubGop {
            try encodeContainer.encode(dynamicSubGop.rawValue, forKey: .dynamicSubGop)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if hrdBufferInitialFillPercentage != 0 {
            try encodeContainer.encode(hrdBufferInitialFillPercentage, forKey: .hrdBufferInitialFillPercentage)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if let intraDcPrecision = intraDcPrecision {
            try encodeContainer.encode(intraDcPrecision.rawValue, forKey: .intraDcPrecision)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if minIInterval != 0 {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if numberBFramesBetweenReferenceFrames != 0 {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if softness != 0 {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAdaptiveQuantization = spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
        if let syntax = syntax {
            try encodeContainer.encode(syntax.rawValue, forKey: .syntax)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
        if let temporalAdaptiveQuantization = temporalAdaptiveQuantization {
            try encodeContainer.encode(temporalAdaptiveQuantization.rawValue, forKey: .temporalAdaptiveQuantization)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Mpeg2AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codecLevelDecoded = try containerValues.decodeIfPresent(Mpeg2CodecLevel.self, forKey: .codecLevel)
        codecLevel = codecLevelDecoded
        let codecProfileDecoded = try containerValues.decodeIfPresent(Mpeg2CodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let dynamicSubGopDecoded = try containerValues.decodeIfPresent(Mpeg2DynamicSubGop.self, forKey: .dynamicSubGop)
        dynamicSubGop = dynamicSubGopDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(Mpeg2FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Mpeg2FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(Mpeg2GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let hrdBufferInitialFillPercentageDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferInitialFillPercentage)
        hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentageDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(Mpeg2InterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let intraDcPrecisionDecoded = try containerValues.decodeIfPresent(Mpeg2IntraDcPrecision.self, forKey: .intraDcPrecision)
        intraDcPrecision = intraDcPrecisionDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decode(Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(Mpeg2ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(Mpeg2QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Mpeg2RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(Mpeg2ScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(Mpeg2SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(Mpeg2SlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let softnessDecoded = try containerValues.decode(Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Mpeg2SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
        let syntaxDecoded = try containerValues.decodeIfPresent(Mpeg2Syntax.self, forKey: .syntax)
        syntax = syntaxDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(Mpeg2Telecine.self, forKey: .telecine)
        telecine = telecineDecoded
        let temporalAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(Mpeg2TemporalAdaptiveQuantization.self, forKey: .temporalAdaptiveQuantization)
        temporalAdaptiveQuantization = temporalAdaptiveQuantizationDecoded
    }
}

extension Mpeg2Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Mpeg2Settings(adaptiveQuantization: \(String(describing: adaptiveQuantization)), bitrate: \(String(describing: bitrate)), codecLevel: \(String(describing: codecLevel)), codecProfile: \(String(describing: codecProfile)), dynamicSubGop: \(String(describing: dynamicSubGop)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopClosedCadence: \(String(describing: gopClosedCadence)), gopSize: \(String(describing: gopSize)), gopSizeUnits: \(String(describing: gopSizeUnits)), hrdBufferInitialFillPercentage: \(String(describing: hrdBufferInitialFillPercentage)), hrdBufferSize: \(String(describing: hrdBufferSize)), interlaceMode: \(String(describing: interlaceMode)), intraDcPrecision: \(String(describing: intraDcPrecision)), maxBitrate: \(String(describing: maxBitrate)), minIInterval: \(String(describing: minIInterval)), numberBFramesBetweenReferenceFrames: \(String(describing: numberBFramesBetweenReferenceFrames)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), qualityTuningLevel: \(String(describing: qualityTuningLevel)), rateControlMode: \(String(describing: rateControlMode)), scanTypeConversionMode: \(String(describing: scanTypeConversionMode)), sceneChangeDetect: \(String(describing: sceneChangeDetect)), slowPal: \(String(describing: slowPal)), softness: \(String(describing: softness)), spatialAdaptiveQuantization: \(String(describing: spatialAdaptiveQuantization)), syntax: \(String(describing: syntax)), telecine: \(String(describing: telecine)), temporalAdaptiveQuantization: \(String(describing: temporalAdaptiveQuantization)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value MPEG2.
public struct Mpeg2Settings: Equatable {
    /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
    public let adaptiveQuantization: Mpeg2AdaptiveQuantization?
    /// Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.
    public let bitrate: Int
    /// Use Level (Mpeg2CodecLevel) to set the MPEG-2 level for the video output.
    public let codecLevel: Mpeg2CodecLevel?
    /// Use Profile (Mpeg2CodecProfile) to set the MPEG-2 profile for the video output.
    public let codecProfile: Mpeg2CodecProfile?
    /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
    public let dynamicSubGop: Mpeg2DynamicSubGop?
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: Mpeg2FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: Mpeg2FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
    public let gopClosedCadence: Int
    /// GOP Length (keyframe interval) in frames or seconds. Must be greater than zero.
    public let gopSize: Double
    /// Indicates if the GOP Size in MPEG2 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
    public let gopSizeUnits: Mpeg2GopSizeUnits?
    /// Percentage of the buffer that should initially be filled (HRD buffer model).
    public let hrdBufferInitialFillPercentage: Int
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    public let hrdBufferSize: Int
    /// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public let interlaceMode: Mpeg2InterlaceMode?
    /// Use Intra DC precision (Mpeg2IntraDcPrecision) to set quantization precision for intra-block DC coefficients. If you choose the value auto, the service will automatically select the precision based on the per-frame compression ratio.
    public let intraDcPrecision: Mpeg2IntraDcPrecision?
    /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000.
    public let maxBitrate: Int
    /// Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. This setting is only used when Scene Change Detect is enabled. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
    public let minIInterval: Int
    /// Number of B-frames between reference frames.
    public let numberBFramesBetweenReferenceFrames: Int
    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public let parControl: Mpeg2ParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public let qualityTuningLevel: Mpeg2QualityTuningLevel?
    /// Use Rate control mode (Mpeg2RateControlMode) to specify whether the bitrate is variable (vbr) or constant (cbr).
    public let rateControlMode: Mpeg2RateControlMode?
    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
    public let scanTypeConversionMode: Mpeg2ScanTypeConversionMode?
    /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default.
    public let sceneChangeDetect: Mpeg2SceneChangeDetect?
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    public let slowPal: Mpeg2SlowPal?
    /// Ignore this setting unless you need to comply with a specification that requires a specific value. If you don't have a specification requirement, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness (sharpness) or by enabling a noise reducer filter (noiseReducerFilter). The Softness (softness) setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, to use the AWS Elemental default matrices. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
    public let softness: Int
    /// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public let spatialAdaptiveQuantization: Mpeg2SpatialAdaptiveQuantization?
    /// Specify whether this output's video uses the D10 syntax. Keep the default value to  not use the syntax. Related settings: When you choose D10 (D_10) for your MXF  profile (profile), you must also set this value to to D10 (D_10).
    public let syntax: Mpeg2Syntax?
    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine (HARD) produces a 29.97i output. Soft telecine (SOFT) produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public let telecine: Mpeg2Telecine?
    /// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
    public let temporalAdaptiveQuantization: Mpeg2TemporalAdaptiveQuantization?

    public init (
        adaptiveQuantization: Mpeg2AdaptiveQuantization? = nil,
        bitrate: Int = 0,
        codecLevel: Mpeg2CodecLevel? = nil,
        codecProfile: Mpeg2CodecProfile? = nil,
        dynamicSubGop: Mpeg2DynamicSubGop? = nil,
        framerateControl: Mpeg2FramerateControl? = nil,
        framerateConversionAlgorithm: Mpeg2FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopClosedCadence: Int = 0,
        gopSize: Double = 0.0,
        gopSizeUnits: Mpeg2GopSizeUnits? = nil,
        hrdBufferInitialFillPercentage: Int = 0,
        hrdBufferSize: Int = 0,
        interlaceMode: Mpeg2InterlaceMode? = nil,
        intraDcPrecision: Mpeg2IntraDcPrecision? = nil,
        maxBitrate: Int = 0,
        minIInterval: Int = 0,
        numberBFramesBetweenReferenceFrames: Int = 0,
        parControl: Mpeg2ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        qualityTuningLevel: Mpeg2QualityTuningLevel? = nil,
        rateControlMode: Mpeg2RateControlMode? = nil,
        scanTypeConversionMode: Mpeg2ScanTypeConversionMode? = nil,
        sceneChangeDetect: Mpeg2SceneChangeDetect? = nil,
        slowPal: Mpeg2SlowPal? = nil,
        softness: Int = 0,
        spatialAdaptiveQuantization: Mpeg2SpatialAdaptiveQuantization? = nil,
        syntax: Mpeg2Syntax? = nil,
        telecine: Mpeg2Telecine? = nil,
        temporalAdaptiveQuantization: Mpeg2TemporalAdaptiveQuantization? = nil
    )
    {
        self.adaptiveQuantization = adaptiveQuantization
        self.bitrate = bitrate
        self.codecLevel = codecLevel
        self.codecProfile = codecProfile
        self.dynamicSubGop = dynamicSubGop
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopClosedCadence = gopClosedCadence
        self.gopSize = gopSize
        self.gopSizeUnits = gopSizeUnits
        self.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage
        self.hrdBufferSize = hrdBufferSize
        self.interlaceMode = interlaceMode
        self.intraDcPrecision = intraDcPrecision
        self.maxBitrate = maxBitrate
        self.minIInterval = minIInterval
        self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.qualityTuningLevel = qualityTuningLevel
        self.rateControlMode = rateControlMode
        self.scanTypeConversionMode = scanTypeConversionMode
        self.sceneChangeDetect = sceneChangeDetect
        self.slowPal = slowPal
        self.softness = softness
        self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
        self.syntax = syntax
        self.telecine = telecine
        self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
    }
}

/// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
public enum Mpeg2SlowPal {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Mpeg2SlowPal : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2SlowPal] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2SlowPal(rawValue: rawValue) ?? Mpeg2SlowPal.sdkUnknown(rawValue)
    }
}

/// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
public enum Mpeg2SpatialAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Mpeg2SpatialAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2SpatialAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2SpatialAdaptiveQuantization(rawValue: rawValue) ?? Mpeg2SpatialAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

/// Specify whether this output's video uses the D10 syntax. Keep the default value to  not use the syntax. Related settings: When you choose D10 (D_10) for your MXF  profile (profile), you must also set this value to to D10 (D_10).
public enum Mpeg2Syntax {
    case `default`
    case d10
    case sdkUnknown(String)
}

extension Mpeg2Syntax : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2Syntax] {
        return [
            .default,
            .d10,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .d10: return "D_10"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2Syntax(rawValue: rawValue) ?? Mpeg2Syntax.sdkUnknown(rawValue)
    }
}

/// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine (HARD) produces a 29.97i output. Soft telecine (SOFT) produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
public enum Mpeg2Telecine {
    case hard
    case `none`
    case soft
    case sdkUnknown(String)
}

extension Mpeg2Telecine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2Telecine] {
        return [
            .hard,
            .none,
            .soft,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hard: return "HARD"
        case .none: return "NONE"
        case .soft: return "SOFT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2Telecine(rawValue: rawValue) ?? Mpeg2Telecine.sdkUnknown(rawValue)
    }
}

/// Keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
public enum Mpeg2TemporalAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Mpeg2TemporalAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Mpeg2TemporalAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Mpeg2TemporalAdaptiveQuantization(rawValue: rawValue) ?? Mpeg2TemporalAdaptiveQuantization.sdkUnknown(rawValue)
    }
}

extension MsSmoothAdditionalManifest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case manifestNameModifier = "manifestNameModifier"
        case selectedOutputs = "selectedOutputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestNameModifier = manifestNameModifier {
            try encodeContainer.encode(manifestNameModifier, forKey: .manifestNameModifier)
        }
        if let selectedOutputs = selectedOutputs {
            var selectedOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectedOutputs)
            for __listof__stringmin10 in selectedOutputs {
                try selectedOutputsContainer.encode(__listof__stringmin10)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestNameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .manifestNameModifier)
        manifestNameModifier = manifestNameModifierDecoded
        let selectedOutputsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .selectedOutputs)
        var selectedOutputsDecoded0:[String]? = nil
        if let selectedOutputsContainer = selectedOutputsContainer {
            selectedOutputsDecoded0 = [String]()
            for string0 in selectedOutputsContainer {
                if let string0 = string0 {
                    selectedOutputsDecoded0?.append(string0)
                }
            }
        }
        selectedOutputs = selectedOutputsDecoded0
    }
}

extension MsSmoothAdditionalManifest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MsSmoothAdditionalManifest(manifestNameModifier: \(String(describing: manifestNameModifier)), selectedOutputs: \(String(describing: selectedOutputs)))"}
}

/// Specify the details for each additional Microsoft Smooth Streaming manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
public struct MsSmoothAdditionalManifest: Equatable {
    /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your Microsoft Smooth group is film-name.ismv. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.ismv.
    public let manifestNameModifier: String?
    /// Specify the outputs that you want this additional top-level manifest to reference.
    public let selectedOutputs: [String]?

    public init (
        manifestNameModifier: String? = nil,
        selectedOutputs: [String]? = nil
    )
    {
        self.manifestNameModifier = manifestNameModifier
        self.selectedOutputs = selectedOutputs
    }
}

/// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
public enum MsSmoothAudioDeduplication {
    case combineDuplicateStreams
    case `none`
    case sdkUnknown(String)
}

extension MsSmoothAudioDeduplication : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MsSmoothAudioDeduplication] {
        return [
            .combineDuplicateStreams,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .combineDuplicateStreams: return "COMBINE_DUPLICATE_STREAMS"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MsSmoothAudioDeduplication(rawValue: rawValue) ?? MsSmoothAudioDeduplication.sdkUnknown(rawValue)
    }
}

extension MsSmoothEncryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case spekeKeyProvider = "spekeKeyProvider"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let spekeKeyProvider = spekeKeyProvider {
            try encodeContainer.encode(spekeKeyProvider, forKey: .spekeKeyProvider)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let spekeKeyProviderDecoded = try containerValues.decodeIfPresent(SpekeKeyProvider.self, forKey: .spekeKeyProvider)
        spekeKeyProvider = spekeKeyProviderDecoded
    }
}

extension MsSmoothEncryptionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MsSmoothEncryptionSettings(spekeKeyProvider: \(String(describing: spekeKeyProvider)))"}
}

/// If you are using DRM, set DRM System (MsSmoothEncryptionSettings) to specify the value SpekeKeyProvider.
public struct MsSmoothEncryptionSettings: Equatable {
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    public let spekeKeyProvider: SpekeKeyProvider?

    public init (
        spekeKeyProvider: SpekeKeyProvider? = nil
    )
    {
        self.spekeKeyProvider = spekeKeyProvider
    }
}

extension MsSmoothGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalManifests = "additionalManifests"
        case audioDeduplication = "audioDeduplication"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case encryption = "encryption"
        case fragmentLength = "fragmentLength"
        case manifestEncoding = "manifestEncoding"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofmssmoothadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofmssmoothadditionalmanifest0)
            }
        }
        if let audioDeduplication = audioDeduplication {
            try encodeContainer.encode(audioDeduplication.rawValue, forKey: .audioDeduplication)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if fragmentLength != 0 {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let manifestEncoding = manifestEncoding {
            try encodeContainer.encode(manifestEncoding.rawValue, forKey: .manifestEncoding)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalManifestsContainer = try containerValues.decodeIfPresent([MsSmoothAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[MsSmoothAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [MsSmoothAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let audioDeduplicationDecoded = try containerValues.decodeIfPresent(MsSmoothAudioDeduplication.self, forKey: .audioDeduplication)
        audioDeduplication = audioDeduplicationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MsSmoothEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let fragmentLengthDecoded = try containerValues.decode(Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let manifestEncodingDecoded = try containerValues.decodeIfPresent(MsSmoothManifestEncoding.self, forKey: .manifestEncoding)
        manifestEncoding = manifestEncodingDecoded
    }
}

extension MsSmoothGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MsSmoothGroupSettings(additionalManifests: \(String(describing: additionalManifests)), audioDeduplication: \(String(describing: audioDeduplication)), destination: \(String(describing: destination)), destinationSettings: \(String(describing: destinationSettings)), encryption: \(String(describing: encryption)), fragmentLength: \(String(describing: fragmentLength)), manifestEncoding: \(String(describing: manifestEncoding)))"}
}

/// Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to MS_SMOOTH_GROUP_SETTINGS.
public struct MsSmoothGroupSettings: Equatable {
    /// By default, the service creates one .ism Microsoft Smooth Streaming manifest for each Microsoft Smooth Streaming output group in your job. This default manifest references every output in the output group. To create additional manifests that reference a subset of the outputs in the output group, specify a list of them here.
    public let additionalManifests: [MsSmoothAdditionalManifest]?
    /// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
    public let audioDeduplication: MsSmoothAudioDeduplication?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// If you are using DRM, set DRM System (MsSmoothEncryptionSettings) to specify the value SpekeKeyProvider.
    public let encryption: MsSmoothEncryptionSettings?
    /// Use Fragment length (FragmentLength) to specify the mp4 fragment sizes in seconds. Fragment length must be compatible with GOP size and frame rate.
    public let fragmentLength: Int
    /// Use Manifest encoding (MsSmoothManifestEncoding) to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
    public let manifestEncoding: MsSmoothManifestEncoding?

    public init (
        additionalManifests: [MsSmoothAdditionalManifest]? = nil,
        audioDeduplication: MsSmoothAudioDeduplication? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        encryption: MsSmoothEncryptionSettings? = nil,
        fragmentLength: Int = 0,
        manifestEncoding: MsSmoothManifestEncoding? = nil
    )
    {
        self.additionalManifests = additionalManifests
        self.audioDeduplication = audioDeduplication
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.encryption = encryption
        self.fragmentLength = fragmentLength
        self.manifestEncoding = manifestEncoding
    }
}

/// Use Manifest encoding (MsSmoothManifestEncoding) to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
public enum MsSmoothManifestEncoding {
    case utf16
    case utf8
    case sdkUnknown(String)
}

extension MsSmoothManifestEncoding : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MsSmoothManifestEncoding] {
        return [
            .utf16,
            .utf8,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .utf16: return "UTF16"
        case .utf8: return "UTF8"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MsSmoothManifestEncoding(rawValue: rawValue) ?? MsSmoothManifestEncoding.sdkUnknown(rawValue)
    }
}

/// Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don't copy (NO_COPY) to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream (COPY_FROM_VIDEO) to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output's video encoding settings.
public enum MxfAfdSignaling {
    case copyFromVideo
    case noCopy
    case sdkUnknown(String)
}

extension MxfAfdSignaling : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MxfAfdSignaling] {
        return [
            .copyFromVideo,
            .noCopy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .copyFromVideo: return "COPY_FROM_VIDEO"
        case .noCopy: return "NO_COPY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MxfAfdSignaling(rawValue: rawValue) ?? MxfAfdSignaling.sdkUnknown(rawValue)
    }
}

/// Specify the MXF profile, also called shim, for this output. When you choose Auto, MediaConvert chooses a profile based on the video codec and resolution. For a list of codecs supported with each MXF profile, see https://docs.aws.amazon.com/mediaconvert/latest/ug/codecs-supported-with-each-mxf-profile.html. For more information about the automatic selection behavior, see https://docs.aws.amazon.com/mediaconvert/latest/ug/default-automatic-selection-of-mxf-profiles.html.
public enum MxfProfile {
    case d10
    case op1a
    case xdcam
    case sdkUnknown(String)
}

extension MxfProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MxfProfile] {
        return [
            .d10,
            .op1a,
            .xdcam,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .d10: return "D_10"
        case .op1a: return "OP1A"
        case .xdcam: return "XDCAM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MxfProfile(rawValue: rawValue) ?? MxfProfile.sdkUnknown(rawValue)
    }
}

extension MxfSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case afdSignaling = "afdSignaling"
        case profile = "profile"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MxfAfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MxfProfile.self, forKey: .profile)
        profile = profileDecoded
    }
}

extension MxfSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MxfSettings(afdSignaling: \(String(describing: afdSignaling)), profile: \(String(describing: profile)))"}
}

/// These settings relate to your MXF output container.
public struct MxfSettings: Equatable {
    /// Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don't copy (NO_COPY) to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream (COPY_FROM_VIDEO) to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output's video encoding settings.
    public let afdSignaling: MxfAfdSignaling?
    /// Specify the MXF profile, also called shim, for this output. When you choose Auto, MediaConvert chooses a profile based on the video codec and resolution. For a list of codecs supported with each MXF profile, see https://docs.aws.amazon.com/mediaconvert/latest/ug/codecs-supported-with-each-mxf-profile.html. For more information about the automatic selection behavior, see https://docs.aws.amazon.com/mediaconvert/latest/ug/default-automatic-selection-of-mxf-profiles.html.
    public let profile: MxfProfile?

    public init (
        afdSignaling: MxfAfdSignaling? = nil,
        profile: MxfProfile? = nil
    )
    {
        self.afdSignaling = afdSignaling
        self.profile = profile
    }
}

extension NexGuardFileMarkerSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case license = "license"
        case payload = "payload"
        case preset = "preset"
        case strength = "strength"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let license = license {
            try encodeContainer.encode(license, forKey: .license)
        }
        if payload != 0 {
            try encodeContainer.encode(payload, forKey: .payload)
        }
        if let preset = preset {
            try encodeContainer.encode(preset, forKey: .preset)
        }
        if let strength = strength {
            try encodeContainer.encode(strength.rawValue, forKey: .strength)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .license)
        license = licenseDecoded
        let payloadDecoded = try containerValues.decode(Int.self, forKey: .payload)
        payload = payloadDecoded
        let presetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preset)
        preset = presetDecoded
        let strengthDecoded = try containerValues.decodeIfPresent(WatermarkingStrength.self, forKey: .strength)
        strength = strengthDecoded
    }
}

extension NexGuardFileMarkerSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NexGuardFileMarkerSettings(license: \(String(describing: license)), payload: \(String(describing: payload)), preset: \(String(describing: preset)), strength: \(String(describing: strength)))"}
}

/// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
public struct NexGuardFileMarkerSettings: Equatable {
    /// Use the base64 license string that Nagra provides you. Enter it directly in your JSON job specification or in the console. Required when you include Nagra NexGuard File Marker watermarking (NexGuardWatermarkingSettings) in your job.
    public let license: String?
    /// Specify the payload ID that you want associated with this output. Valid values vary depending on your Nagra NexGuard forensic watermarking workflow. Required when you include Nagra NexGuard File Marker watermarking (NexGuardWatermarkingSettings) in your job. For PreRelease Content (NGPR/G2), specify an integer from 1 through 4,194,303. You must generate a unique ID for each asset you watermark, and keep a record of which ID you have assigned to each asset. Neither Nagra nor MediaConvert keep track of the relationship between output files and your IDs. For OTT Streaming, create two adaptive bitrate (ABR) stacks for each asset. Do this by setting up two output groups. For one output group, set the value of Payload ID (payload) to 0 in every output. For the other output group, set Payload ID (payload) to 1 in every output.
    public let payload: Int
    /// Enter one of the watermarking preset strings that Nagra provides you. Required when you include Nagra NexGuard File Marker watermarking (NexGuardWatermarkingSettings) in your job.
    public let preset: String?
    /// Optional. Ignore this setting unless Nagra support directs you to specify a value. When you don't specify a value here, the Nagra NexGuard library uses its default value.
    public let strength: WatermarkingStrength?

    public init (
        license: String? = nil,
        payload: Int = 0,
        preset: String? = nil,
        strength: WatermarkingStrength? = nil
    )
    {
        self.license = license
        self.payload = payload
        self.preset = preset
        self.strength = strength
    }
}

/// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW (NAES2_AND_NW), you must provide a value for the setting SID (sourceId). When you choose CBET (CBET), you must provide a value for the setting CSID (cbetSourceId). When you choose NAES 2, NW, and CBET (NAES2_AND_NW_AND_CBET), you must provide values for both of these settings.
public enum NielsenActiveWatermarkProcessType {
    case cbet
    case naes2AndNw
    case naes2AndNwAndCbet
    case sdkUnknown(String)
}

extension NielsenActiveWatermarkProcessType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NielsenActiveWatermarkProcessType] {
        return [
            .cbet,
            .naes2AndNw,
            .naes2AndNwAndCbet,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cbet: return "CBET"
        case .naes2AndNw: return "NAES2_AND_NW"
        case .naes2AndNwAndCbet: return "NAES2_AND_NW_AND_CBET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NielsenActiveWatermarkProcessType(rawValue: rawValue) ?? NielsenActiveWatermarkProcessType.sdkUnknown(rawValue)
    }
}

extension NielsenConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case breakoutCode = "breakoutCode"
        case distributorId = "distributorId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if breakoutCode != 0 {
            try encodeContainer.encode(breakoutCode, forKey: .breakoutCode)
        }
        if let distributorId = distributorId {
            try encodeContainer.encode(distributorId, forKey: .distributorId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let breakoutCodeDecoded = try containerValues.decode(Int.self, forKey: .breakoutCode)
        breakoutCode = breakoutCodeDecoded
        let distributorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributorId)
        distributorId = distributorIdDecoded
    }
}

extension NielsenConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NielsenConfiguration(breakoutCode: \(String(describing: breakoutCode)), distributorId: \(String(describing: distributorId)))"}
}

/// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration (nielsenConfiguration), MediaConvert enables PCM to ID3 tagging for all outputs in the job. To enable Nielsen configuration programmatically, include an instance of nielsenConfiguration in your JSON job specification. Even if you don't include any children of nielsenConfiguration, you still enable the setting.
public struct NielsenConfiguration: Equatable {
    /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
    public let breakoutCode: Int
    /// Use Distributor ID (DistributorID) to specify the distributor ID that is assigned to your organization by Neilsen.
    public let distributorId: String?

    public init (
        breakoutCode: Int = 0,
        distributorId: String? = nil
    )
    {
        self.breakoutCode = breakoutCode
        self.distributorId = distributorId
    }
}

extension NielsenNonLinearWatermarkSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeWatermarkProcess = "activeWatermarkProcess"
        case adiFilename = "adiFilename"
        case assetId = "assetId"
        case assetName = "assetName"
        case cbetSourceId = "cbetSourceId"
        case episodeId = "episodeId"
        case metadataDestination = "metadataDestination"
        case sourceId = "sourceId"
        case sourceWatermarkStatus = "sourceWatermarkStatus"
        case ticServerUrl = "ticServerUrl"
        case uniqueTicPerAudioTrack = "uniqueTicPerAudioTrack"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeWatermarkProcess = activeWatermarkProcess {
            try encodeContainer.encode(activeWatermarkProcess.rawValue, forKey: .activeWatermarkProcess)
        }
        if let adiFilename = adiFilename {
            try encodeContainer.encode(adiFilename, forKey: .adiFilename)
        }
        if let assetId = assetId {
            try encodeContainer.encode(assetId, forKey: .assetId)
        }
        if let assetName = assetName {
            try encodeContainer.encode(assetName, forKey: .assetName)
        }
        if let cbetSourceId = cbetSourceId {
            try encodeContainer.encode(cbetSourceId, forKey: .cbetSourceId)
        }
        if let episodeId = episodeId {
            try encodeContainer.encode(episodeId, forKey: .episodeId)
        }
        if let metadataDestination = metadataDestination {
            try encodeContainer.encode(metadataDestination, forKey: .metadataDestination)
        }
        if sourceId != 0 {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceWatermarkStatus = sourceWatermarkStatus {
            try encodeContainer.encode(sourceWatermarkStatus.rawValue, forKey: .sourceWatermarkStatus)
        }
        if let ticServerUrl = ticServerUrl {
            try encodeContainer.encode(ticServerUrl, forKey: .ticServerUrl)
        }
        if let uniqueTicPerAudioTrack = uniqueTicPerAudioTrack {
            try encodeContainer.encode(uniqueTicPerAudioTrack.rawValue, forKey: .uniqueTicPerAudioTrack)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeWatermarkProcessDecoded = try containerValues.decodeIfPresent(NielsenActiveWatermarkProcessType.self, forKey: .activeWatermarkProcess)
        activeWatermarkProcess = activeWatermarkProcessDecoded
        let adiFilenameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adiFilename)
        adiFilename = adiFilenameDecoded
        let assetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assetId)
        assetId = assetIdDecoded
        let assetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assetName)
        assetName = assetNameDecoded
        let cbetSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cbetSourceId)
        cbetSourceId = cbetSourceIdDecoded
        let episodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .episodeId)
        episodeId = episodeIdDecoded
        let metadataDestinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metadataDestination)
        metadataDestination = metadataDestinationDecoded
        let sourceIdDecoded = try containerValues.decode(Int.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let sourceWatermarkStatusDecoded = try containerValues.decodeIfPresent(NielsenSourceWatermarkStatusType.self, forKey: .sourceWatermarkStatus)
        sourceWatermarkStatus = sourceWatermarkStatusDecoded
        let ticServerUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ticServerUrl)
        ticServerUrl = ticServerUrlDecoded
        let uniqueTicPerAudioTrackDecoded = try containerValues.decodeIfPresent(NielsenUniqueTicPerAudioTrackType.self, forKey: .uniqueTicPerAudioTrack)
        uniqueTicPerAudioTrack = uniqueTicPerAudioTrackDecoded
    }
}

extension NielsenNonLinearWatermarkSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NielsenNonLinearWatermarkSettings(activeWatermarkProcess: \(String(describing: activeWatermarkProcess)), adiFilename: \(String(describing: adiFilename)), assetId: \(String(describing: assetId)), assetName: \(String(describing: assetName)), cbetSourceId: \(String(describing: cbetSourceId)), episodeId: \(String(describing: episodeId)), metadataDestination: \(String(describing: metadataDestination)), sourceId: \(String(describing: sourceId)), sourceWatermarkStatus: \(String(describing: sourceWatermarkStatus)), ticServerUrl: \(String(describing: ticServerUrl)), uniqueTicPerAudioTrack: \(String(describing: uniqueTicPerAudioTrack)))"}
}

/// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that  MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to  specifying these values, you also need to set up your cloud TIC server. These settings apply to  every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
public struct NielsenNonLinearWatermarkSettings: Equatable {
    /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW (NAES2_AND_NW), you must provide a value for the setting SID (sourceId). When you choose CBET (CBET), you must provide a value for the setting CSID (cbetSourceId). When you choose NAES 2, NW, and CBET (NAES2_AND_NW_AND_CBET), you must provide values for both of these settings.
    public let activeWatermarkProcess: NielsenActiveWatermarkProcessType?
    /// Optional. Use this setting when you want the service to include an ADI file in the Nielsen  metadata .zip file. To provide an ADI file, store it in Amazon S3 and provide a URL to it  here. The URL should be in the following format: S3://bucket/path/ADI-file. For more information about the metadata .zip file, see the setting Metadata destination (metadataDestination).
    public let adiFilename: String?
    /// Use the asset ID that you provide to Nielsen to uniquely identify this asset. Required for all Nielsen non-linear watermarking.
    public let assetId: String?
    /// Use the asset name that you provide to Nielsen for this asset. Required for all Nielsen non-linear watermarking.
    public let assetName: String?
    /// Use the CSID that Nielsen provides to you. This CBET source ID should be unique to your Nielsen account but common to all of your output assets that have CBET watermarking. Required when you choose a value for the setting Watermark types (ActiveWatermarkProcess) that includes CBET.
    public let cbetSourceId: String?
    /// Optional. If this asset uses an episode ID with Nielsen, provide it here.
    public let episodeId: String?
    /// Specify the Amazon S3 location where you want MediaConvert to save your Nielsen non-linear metadata .zip file. This Amazon S3 bucket must be in the same Region as the one where you do your MediaConvert transcoding. If you want to include an ADI file in this .zip file, use the setting ADI file (adiFilename) to specify it. MediaConvert delivers the Nielsen metadata .zip files only to your metadata destination Amazon S3 bucket. It doesn't deliver the .zip files to Nielsen. You are responsible for delivering the metadata .zip files to Nielsen.
    public let metadataDestination: String?
    /// Use the SID that Nielsen provides to you. This source ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking. This ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking.
    public let sourceId: Int
    /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked (WATERMARKED), the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already  have non-linear Nielsen watermarks.
    public let sourceWatermarkStatus: NielsenSourceWatermarkStatusType?
    /// Specify the endpoint for the TIC server that you have deployed and configured in the AWS Cloud. Required for all Nielsen non-linear watermarking. MediaConvert can't connect directly to a TIC server. Instead, you must use API Gateway to provide a RESTful interface between MediaConvert and a TIC server that you deploy in your AWS account. For more information on deploying a TIC server in your AWS account and the required API Gateway, contact Nielsen support.
    public let ticServerUrl: String?
    /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs (SAME_TICS_PER_TRACK). To create assets that have unique TIC values for each audio track, choose Use unique TICs (RESERVE_UNIQUE_TICS_PER_TRACK).
    public let uniqueTicPerAudioTrack: NielsenUniqueTicPerAudioTrackType?

    public init (
        activeWatermarkProcess: NielsenActiveWatermarkProcessType? = nil,
        adiFilename: String? = nil,
        assetId: String? = nil,
        assetName: String? = nil,
        cbetSourceId: String? = nil,
        episodeId: String? = nil,
        metadataDestination: String? = nil,
        sourceId: Int = 0,
        sourceWatermarkStatus: NielsenSourceWatermarkStatusType? = nil,
        ticServerUrl: String? = nil,
        uniqueTicPerAudioTrack: NielsenUniqueTicPerAudioTrackType? = nil
    )
    {
        self.activeWatermarkProcess = activeWatermarkProcess
        self.adiFilename = adiFilename
        self.assetId = assetId
        self.assetName = assetName
        self.cbetSourceId = cbetSourceId
        self.episodeId = episodeId
        self.metadataDestination = metadataDestination
        self.sourceId = sourceId
        self.sourceWatermarkStatus = sourceWatermarkStatus
        self.ticServerUrl = ticServerUrl
        self.uniqueTicPerAudioTrack = uniqueTicPerAudioTrack
    }
}

/// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked (WATERMARKED), the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already  have non-linear Nielsen watermarks.
public enum NielsenSourceWatermarkStatusType {
    case clean
    case watermarked
    case sdkUnknown(String)
}

extension NielsenSourceWatermarkStatusType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NielsenSourceWatermarkStatusType] {
        return [
            .clean,
            .watermarked,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .clean: return "CLEAN"
        case .watermarked: return "WATERMARKED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NielsenSourceWatermarkStatusType(rawValue: rawValue) ?? NielsenSourceWatermarkStatusType.sdkUnknown(rawValue)
    }
}

/// To create assets that have the same TIC values in each audio track, keep the default value Share TICs (SAME_TICS_PER_TRACK). To create assets that have unique TIC values for each audio track, choose Use unique TICs (RESERVE_UNIQUE_TICS_PER_TRACK).
public enum NielsenUniqueTicPerAudioTrackType {
    case reserveUniqueTicsPerTrack
    case sameTicsPerTrack
    case sdkUnknown(String)
}

extension NielsenUniqueTicPerAudioTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NielsenUniqueTicPerAudioTrackType] {
        return [
            .reserveUniqueTicsPerTrack,
            .sameTicsPerTrack,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .reserveUniqueTicsPerTrack: return "RESERVE_UNIQUE_TICS_PER_TRACK"
        case .sameTicsPerTrack: return "SAME_TICS_PER_TRACK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NielsenUniqueTicPerAudioTrackType(rawValue: rawValue) ?? NielsenUniqueTicPerAudioTrackType.sdkUnknown(rawValue)
    }
}

/// Optional. When you set Noise reducer (noiseReducer) to Temporal (TEMPORAL), you can use this setting to apply sharpening. The default behavior, Auto (AUTO), allows the transcoder to determine whether to apply filtering, depending on input type and quality. When you set Noise reducer to Temporal, your output bandwidth is reduced. When Post temporal sharpening is also enabled, that bandwidth reduction is smaller.
public enum NoiseFilterPostTemporalSharpening {
    case auto
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension NoiseFilterPostTemporalSharpening : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NoiseFilterPostTemporalSharpening] {
        return [
            .auto,
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NoiseFilterPostTemporalSharpening(rawValue: rawValue) ?? NoiseFilterPostTemporalSharpening.sdkUnknown(rawValue)
    }
}

extension NoiseReducer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "filter"
        case filterSettings = "filterSettings"
        case spatialFilterSettings = "spatialFilterSettings"
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter.rawValue, forKey: .filter)
        }
        if let filterSettings = filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let spatialFilterSettings = spatialFilterSettings {
            try encodeContainer.encode(spatialFilterSettings, forKey: .spatialFilterSettings)
        }
        if let temporalFilterSettings = temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(NoiseReducerFilter.self, forKey: .filter)
        filter = filterDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(NoiseReducerFilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let spatialFilterSettingsDecoded = try containerValues.decodeIfPresent(NoiseReducerSpatialFilterSettings.self, forKey: .spatialFilterSettings)
        spatialFilterSettings = spatialFilterSettingsDecoded
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(NoiseReducerTemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension NoiseReducer: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NoiseReducer(filter: \(String(describing: filter)), filterSettings: \(String(describing: filterSettings)), spatialFilterSettings: \(String(describing: spatialFilterSettings)), temporalFilterSettings: \(String(describing: temporalFilterSettings)))"}
}

/// Enable the Noise reducer (NoiseReducer) feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default. When you enable Noise reducer (NoiseReducer), you must also select a value for Noise reducer filter (NoiseReducerFilter).
public struct NoiseReducer: Equatable {
    /// Use Noise reducer filter (NoiseReducerFilter) to select one of the following spatial image filtering functions. To use this setting, you must also enable Noise reducer (NoiseReducer). * Bilateral preserves edges while reducing noise. * Mean (softest), Gaussian, Lanczos, and Sharpen (sharpest) do convolution filtering. * Conserve does min/max noise reduction. * Spatial does frequency-domain filtering based on JND principles. * Temporal optimizes video quality for complex motion.
    public let filter: NoiseReducerFilter?
    /// Settings for a noise reducer filter
    public let filterSettings: NoiseReducerFilterSettings?
    /// Noise reducer filter settings for spatial filter.
    public let spatialFilterSettings: NoiseReducerSpatialFilterSettings?
    /// Noise reducer filter settings for temporal filter.
    public let temporalFilterSettings: NoiseReducerTemporalFilterSettings?

    public init (
        filter: NoiseReducerFilter? = nil,
        filterSettings: NoiseReducerFilterSettings? = nil,
        spatialFilterSettings: NoiseReducerSpatialFilterSettings? = nil,
        temporalFilterSettings: NoiseReducerTemporalFilterSettings? = nil
    )
    {
        self.filter = filter
        self.filterSettings = filterSettings
        self.spatialFilterSettings = spatialFilterSettings
        self.temporalFilterSettings = temporalFilterSettings
    }
}

/// Use Noise reducer filter (NoiseReducerFilter) to select one of the following spatial image filtering functions. To use this setting, you must also enable Noise reducer (NoiseReducer). * Bilateral preserves edges while reducing noise. * Mean (softest), Gaussian, Lanczos, and Sharpen (sharpest) do convolution filtering. * Conserve does min/max noise reduction. * Spatial does frequency-domain filtering based on JND principles. * Temporal optimizes video quality for complex motion.
public enum NoiseReducerFilter {
    case bilateral
    case conserve
    case gaussian
    case lanczos
    case mean
    case sharpen
    case spatial
    case temporal
    case sdkUnknown(String)
}

extension NoiseReducerFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NoiseReducerFilter] {
        return [
            .bilateral,
            .conserve,
            .gaussian,
            .lanczos,
            .mean,
            .sharpen,
            .spatial,
            .temporal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bilateral: return "BILATERAL"
        case .conserve: return "CONSERVE"
        case .gaussian: return "GAUSSIAN"
        case .lanczos: return "LANCZOS"
        case .mean: return "MEAN"
        case .sharpen: return "SHARPEN"
        case .spatial: return "SPATIAL"
        case .temporal: return "TEMPORAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NoiseReducerFilter(rawValue: rawValue) ?? NoiseReducerFilter.sdkUnknown(rawValue)
    }
}

extension NoiseReducerFilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case strength = "strength"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if strength != 0 {
            try encodeContainer.encode(strength, forKey: .strength)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let strengthDecoded = try containerValues.decode(Int.self, forKey: .strength)
        strength = strengthDecoded
    }
}

extension NoiseReducerFilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NoiseReducerFilterSettings(strength: \(String(describing: strength)))"}
}

/// Settings for a noise reducer filter
public struct NoiseReducerFilterSettings: Equatable {
    /// Relative strength of noise reducing filter. Higher values produce stronger filtering.
    public let strength: Int

    public init (
        strength: Int = 0
    )
    {
        self.strength = strength
    }
}

extension NoiseReducerSpatialFilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case postFilterSharpenStrength = "postFilterSharpenStrength"
        case speed = "speed"
        case strength = "strength"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if postFilterSharpenStrength != 0 {
            try encodeContainer.encode(postFilterSharpenStrength, forKey: .postFilterSharpenStrength)
        }
        if speed != 0 {
            try encodeContainer.encode(speed, forKey: .speed)
        }
        if strength != 0 {
            try encodeContainer.encode(strength, forKey: .strength)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let postFilterSharpenStrengthDecoded = try containerValues.decode(Int.self, forKey: .postFilterSharpenStrength)
        postFilterSharpenStrength = postFilterSharpenStrengthDecoded
        let speedDecoded = try containerValues.decode(Int.self, forKey: .speed)
        speed = speedDecoded
        let strengthDecoded = try containerValues.decode(Int.self, forKey: .strength)
        strength = strengthDecoded
    }
}

extension NoiseReducerSpatialFilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NoiseReducerSpatialFilterSettings(postFilterSharpenStrength: \(String(describing: postFilterSharpenStrength)), speed: \(String(describing: speed)), strength: \(String(describing: strength)))"}
}

/// Noise reducer filter settings for spatial filter.
public struct NoiseReducerSpatialFilterSettings: Equatable {
    /// Specify strength of post noise reduction sharpening filter, with 0 disabling the filter and 3 enabling it at maximum strength.
    public let postFilterSharpenStrength: Int
    /// The speed of the filter, from -2 (lower speed) to 3 (higher speed), with 0 being the nominal value.
    public let speed: Int
    /// Relative strength of noise reducing filter. Higher values produce stronger filtering.
    public let strength: Int

    public init (
        postFilterSharpenStrength: Int = 0,
        speed: Int = 0,
        strength: Int = 0
    )
    {
        self.postFilterSharpenStrength = postFilterSharpenStrength
        self.speed = speed
        self.strength = strength
    }
}

extension NoiseReducerTemporalFilterSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aggressiveMode = "aggressiveMode"
        case postTemporalSharpening = "postTemporalSharpening"
        case speed = "speed"
        case strength = "strength"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if aggressiveMode != 0 {
            try encodeContainer.encode(aggressiveMode, forKey: .aggressiveMode)
        }
        if let postTemporalSharpening = postTemporalSharpening {
            try encodeContainer.encode(postTemporalSharpening.rawValue, forKey: .postTemporalSharpening)
        }
        if speed != 0 {
            try encodeContainer.encode(speed, forKey: .speed)
        }
        if strength != 0 {
            try encodeContainer.encode(strength, forKey: .strength)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggressiveModeDecoded = try containerValues.decode(Int.self, forKey: .aggressiveMode)
        aggressiveMode = aggressiveModeDecoded
        let postTemporalSharpeningDecoded = try containerValues.decodeIfPresent(NoiseFilterPostTemporalSharpening.self, forKey: .postTemporalSharpening)
        postTemporalSharpening = postTemporalSharpeningDecoded
        let speedDecoded = try containerValues.decode(Int.self, forKey: .speed)
        speed = speedDecoded
        let strengthDecoded = try containerValues.decode(Int.self, forKey: .strength)
        strength = strengthDecoded
    }
}

extension NoiseReducerTemporalFilterSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NoiseReducerTemporalFilterSettings(aggressiveMode: \(String(describing: aggressiveMode)), postTemporalSharpening: \(String(describing: postTemporalSharpening)), speed: \(String(describing: speed)), strength: \(String(describing: strength)))"}
}

/// Noise reducer filter settings for temporal filter.
public struct NoiseReducerTemporalFilterSettings: Equatable {
    /// Use Aggressive mode for content that has complex motion. Higher values produce stronger temporal filtering. This filters highly complex scenes more aggressively and creates better VQ for low bitrate outputs.
    public let aggressiveMode: Int
    /// Optional. When you set Noise reducer (noiseReducer) to Temporal (TEMPORAL), you can use this setting to apply sharpening. The default behavior, Auto (AUTO), allows the transcoder to determine whether to apply filtering, depending on input type and quality. When you set Noise reducer to Temporal, your output bandwidth is reduced. When Post temporal sharpening is also enabled, that bandwidth reduction is smaller.
    public let postTemporalSharpening: NoiseFilterPostTemporalSharpening?
    /// The speed of the filter (higher number is faster). Low setting reduces bit rate at the cost of transcode time, high setting improves transcode time at the cost of bit rate.
    public let speed: Int
    /// Specify the strength of the noise reducing filter on this output. Higher values produce stronger filtering. We recommend the following value ranges, depending on the result that you want: * 0-2 for complexity reduction with minimal sharpness loss * 2-8 for complexity reduction with image preservation * 8-16 for a high level of complexity reduction
    public let strength: Int

    public init (
        aggressiveMode: Int = 0,
        postTemporalSharpening: NoiseFilterPostTemporalSharpening? = nil,
        speed: Int = 0,
        strength: Int = 0
    )
    {
        self.aggressiveMode = aggressiveMode
        self.postTemporalSharpening = postTemporalSharpening
        self.speed = speed
        self.strength = strength
    }
}

extension NotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotFoundException(message: \(String(describing: message)))"}
}

extension NotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource you requested doesn't exist.
public struct NotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Equatable {
    public let message: String?
}

extension NotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpusSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case channels = "channels"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension OpusSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OpusSettings(bitrate: \(String(describing: bitrate)), channels: \(String(describing: channels)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value OPUS.
public struct OpusSettings: Equatable {
    /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
    public let bitrate: Int
    /// Specify the number of channels in this output audio track. Choosing Mono on the console gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    public let channels: Int
    /// Optional. Sample rate in hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
    public let sampleRate: Int

    public init (
        bitrate: Int = 0,
        channels: Int = 0,
        sampleRate: Int = 0
    )
    {
        self.bitrate = bitrate
        self.channels = channels
        self.sampleRate = sampleRate
    }
}

/// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
public enum Order {
    case ascending
    case descending
    case sdkUnknown(String)
}

extension Order : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Order] {
        return [
            .ascending,
            .descending,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ascending: return "ASCENDING"
        case .descending: return "DESCENDING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Order(rawValue: rawValue) ?? Order.sdkUnknown(rawValue)
    }
}

extension Output: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptions = "audioDescriptions"
        case captionDescriptions = "captionDescriptions"
        case containerSettings = "containerSettings"
        case `extension` = "extension"
        case nameModifier = "nameModifier"
        case outputSettings = "outputSettings"
        case preset = "preset"
        case videoDescription = "videoDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptions = audioDescriptions {
            var audioDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptions)
            for __listofaudiodescription0 in audioDescriptions {
                try audioDescriptionsContainer.encode(__listofaudiodescription0)
            }
        }
        if let captionDescriptions = captionDescriptions {
            var captionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptions)
            for __listofcaptiondescription0 in captionDescriptions {
                try captionDescriptionsContainer.encode(__listofcaptiondescription0)
            }
        }
        if let containerSettings = containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let `extension` = `extension` {
            try encodeContainer.encode(`extension`, forKey: .`extension`)
        }
        if let nameModifier = nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
        if let outputSettings = outputSettings {
            try encodeContainer.encode(outputSettings, forKey: .outputSettings)
        }
        if let preset = preset {
            try encodeContainer.encode(preset, forKey: .preset)
        }
        if let videoDescription = videoDescription {
            try encodeContainer.encode(videoDescription, forKey: .videoDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionsContainer = try containerValues.decodeIfPresent([AudioDescription?].self, forKey: .audioDescriptions)
        var audioDescriptionsDecoded0:[AudioDescription]? = nil
        if let audioDescriptionsContainer = audioDescriptionsContainer {
            audioDescriptionsDecoded0 = [AudioDescription]()
            for structure0 in audioDescriptionsContainer {
                if let structure0 = structure0 {
                    audioDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        audioDescriptions = audioDescriptionsDecoded0
        let captionDescriptionsContainer = try containerValues.decodeIfPresent([CaptionDescription?].self, forKey: .captionDescriptions)
        var captionDescriptionsDecoded0:[CaptionDescription]? = nil
        if let captionDescriptionsContainer = captionDescriptionsContainer {
            captionDescriptionsDecoded0 = [CaptionDescription]()
            for structure0 in captionDescriptionsContainer {
                if let structure0 = structure0 {
                    captionDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        captionDescriptions = captionDescriptionsDecoded0
        let containerSettingsDecoded = try containerValues.decodeIfPresent(ContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let extensionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extension)
        `extension` = extensionDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
        let outputSettingsDecoded = try containerValues.decodeIfPresent(OutputSettings.self, forKey: .outputSettings)
        outputSettings = outputSettingsDecoded
        let presetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preset)
        preset = presetDecoded
        let videoDescriptionDecoded = try containerValues.decodeIfPresent(VideoDescription.self, forKey: .videoDescription)
        videoDescription = videoDescriptionDecoded
    }
}

extension Output: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Output(audioDescriptions: \(String(describing: audioDescriptions)), captionDescriptions: \(String(describing: captionDescriptions)), containerSettings: \(String(describing: containerSettings)), extension: \(String(describing: `extension`)), nameModifier: \(String(describing: nameModifier)), outputSettings: \(String(describing: outputSettings)), preset: \(String(describing: preset)), videoDescription: \(String(describing: videoDescription)))"}
}

/// Each output in your job is a collection of settings that describes how you want MediaConvert to encode a single output file or stream. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/create-outputs.html.
public struct Output: Equatable {
    /// Use Extension (Extension) to specify the file extension for outputs in File output groups. If you do not specify a value, the service will use default extensions by container type as follows * MPEG-2 transport stream, m2ts * Quicktime, mov * MXF container, mxf * MPEG-4 container, mp4 * WebM container, webm * No Container, the service will use codec extensions (e.g. AAC, H265, H265, AC3)
    public let `extension`: String?
    /// (AudioDescriptions) contains groups of audio encoding settings organized by audio codec. Include one instance of (AudioDescriptions) per output. (AudioDescriptions) can contain multiple groups of encoding settings.
    public let audioDescriptions: [AudioDescription]?
    /// (CaptionDescriptions) contains groups of captions settings. For each output that has captions, include one instance of (CaptionDescriptions). (CaptionDescriptions) can contain multiple groups of captions settings.
    public let captionDescriptions: [CaptionDescription]?
    /// Container specific settings.
    public let containerSettings: ContainerSettings?
    /// Use Name modifier (NameModifier) to have the service add a string to the end of each output filename. You specify the base filename as part of your destination URI. When you create multiple outputs in the same output group, Name modifier (NameModifier) is required. Name modifier also accepts format identifiers. For DASH ISO outputs, if you use the format identifiers $Number$ or $Time$ in one output, you must use them in the same way in all outputs of the output group.
    public let nameModifier: String?
    /// Specific settings for this type of output.
    public let outputSettings: OutputSettings?
    /// Use Preset (Preset) to specify a preset for your transcoding settings. Provide the system or custom preset name. You can specify either Preset (Preset) or Container settings (ContainerSettings), but not both.
    public let preset: String?
    /// VideoDescription contains a group of video encoding settings. The specific video settings depend on the video codec that you choose for the property codec. Include one instance of VideoDescription per output.
    public let videoDescription: VideoDescription?

    public init (
        `extension`: String? = nil,
        audioDescriptions: [AudioDescription]? = nil,
        captionDescriptions: [CaptionDescription]? = nil,
        containerSettings: ContainerSettings? = nil,
        nameModifier: String? = nil,
        outputSettings: OutputSettings? = nil,
        preset: String? = nil,
        videoDescription: VideoDescription? = nil
    )
    {
        self.`extension` = `extension`
        self.audioDescriptions = audioDescriptions
        self.captionDescriptions = captionDescriptions
        self.containerSettings = containerSettings
        self.nameModifier = nameModifier
        self.outputSettings = outputSettings
        self.preset = preset
        self.videoDescription = videoDescription
    }
}

extension OutputChannelMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputChannels = "inputChannels"
        case inputChannelsFineTune = "inputChannelsFineTune"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputChannels = inputChannels {
            var inputChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputChannels)
            for __listof__integerminnegative60max60 in inputChannels {
                try inputChannelsContainer.encode(__listof__integerminnegative60max60)
            }
        }
        if let inputChannelsFineTune = inputChannelsFineTune {
            var inputChannelsFineTuneContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputChannelsFineTune)
            for __listof__doubleminnegative60max60 in inputChannelsFineTune {
                try inputChannelsFineTuneContainer.encode(__listof__doubleminnegative60max60)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputChannelsContainer = try containerValues.decodeIfPresent([Int?].self, forKey: .inputChannels)
        var inputChannelsDecoded0:[Int]? = nil
        if let inputChannelsContainer = inputChannelsContainer {
            inputChannelsDecoded0 = [Int]()
            for integer0 in inputChannelsContainer {
                if let integer0 = integer0 {
                    inputChannelsDecoded0?.append(integer0)
                }
            }
        }
        inputChannels = inputChannelsDecoded0
        let inputChannelsFineTuneContainer = try containerValues.decodeIfPresent([Double?].self, forKey: .inputChannelsFineTune)
        var inputChannelsFineTuneDecoded0:[Double]? = nil
        if let inputChannelsFineTuneContainer = inputChannelsFineTuneContainer {
            inputChannelsFineTuneDecoded0 = [Double]()
            for double0 in inputChannelsFineTuneContainer {
                if let double0 = double0 {
                    inputChannelsFineTuneDecoded0?.append(double0)
                }
            }
        }
        inputChannelsFineTune = inputChannelsFineTuneDecoded0
    }
}

extension OutputChannelMapping: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputChannelMapping(inputChannels: \(String(describing: inputChannels)), inputChannelsFineTune: \(String(describing: inputChannelsFineTune)))"}
}

/// OutputChannel mapping settings.
public struct OutputChannelMapping: Equatable {
    /// Use this setting to specify your remix values when they are integers, such as -10, 0, or 4.
    public let inputChannels: [Int]?
    /// Use this setting to specify your remix values when they have a decimal component, such as -10.312, 0.08, or 4.9. MediaConvert rounds your remixing values to the nearest thousandth.
    public let inputChannelsFineTune: [Double]?

    public init (
        inputChannels: [Int]? = nil,
        inputChannelsFineTune: [Double]? = nil
    )
    {
        self.inputChannels = inputChannels
        self.inputChannelsFineTune = inputChannelsFineTune
    }
}

extension OutputDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case durationInMs = "durationInMs"
        case videoDetails = "videoDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if durationInMs != 0 {
            try encodeContainer.encode(durationInMs, forKey: .durationInMs)
        }
        if let videoDetails = videoDetails {
            try encodeContainer.encode(videoDetails, forKey: .videoDetails)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationInMsDecoded = try containerValues.decode(Int.self, forKey: .durationInMs)
        durationInMs = durationInMsDecoded
        let videoDetailsDecoded = try containerValues.decodeIfPresent(VideoDetail.self, forKey: .videoDetails)
        videoDetails = videoDetailsDecoded
    }
}

extension OutputDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputDetail(durationInMs: \(String(describing: durationInMs)), videoDetails: \(String(describing: videoDetails)))"}
}

/// Details regarding output
public struct OutputDetail: Equatable {
    /// Duration in milliseconds
    public let durationInMs: Int
    /// Contains details about the output's video stream
    public let videoDetails: VideoDetail?

    public init (
        durationInMs: Int = 0,
        videoDetails: VideoDetail? = nil
    )
    {
        self.durationInMs = durationInMs
        self.videoDetails = videoDetails
    }
}

extension OutputGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case automatedEncodingSettings = "automatedEncodingSettings"
        case customName = "customName"
        case name = "name"
        case outputGroupSettings = "outputGroupSettings"
        case outputs = "outputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedEncodingSettings = automatedEncodingSettings {
            try encodeContainer.encode(automatedEncodingSettings, forKey: .automatedEncodingSettings)
        }
        if let customName = customName {
            try encodeContainer.encode(customName, forKey: .customName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputGroupSettings = outputGroupSettings {
            try encodeContainer.encode(outputGroupSettings, forKey: .outputGroupSettings)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for __listofoutput0 in outputs {
                try outputsContainer.encode(__listofoutput0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automatedEncodingSettingsDecoded = try containerValues.decodeIfPresent(AutomatedEncodingSettings.self, forKey: .automatedEncodingSettings)
        automatedEncodingSettings = automatedEncodingSettingsDecoded
        let customNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customName)
        customName = customNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let outputGroupSettingsDecoded = try containerValues.decodeIfPresent(OutputGroupSettings.self, forKey: .outputGroupSettings)
        outputGroupSettings = outputGroupSettingsDecoded
        let outputsContainer = try containerValues.decodeIfPresent([Output?].self, forKey: .outputs)
        var outputsDecoded0:[Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
    }
}

extension OutputGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputGroup(automatedEncodingSettings: \(String(describing: automatedEncodingSettings)), customName: \(String(describing: customName)), name: \(String(describing: name)), outputGroupSettings: \(String(describing: outputGroupSettings)), outputs: \(String(describing: outputs)))"}
}

/// Group of outputs
public struct OutputGroup: Equatable {
    /// Use automated encoding to have MediaConvert choose your encoding settings for you, based on characteristics of your input video.
    public let automatedEncodingSettings: AutomatedEncodingSettings?
    /// Use Custom Group Name (CustomName) to specify a name for the output group. This value is displayed on the console and can make your job settings JSON more human-readable. It does not affect your outputs. Use up to twelve characters that are either letters, numbers, spaces, or underscores.
    public let customName: String?
    /// Name of the output group
    public let name: String?
    /// Output Group settings, including type
    public let outputGroupSettings: OutputGroupSettings?
    /// This object holds groups of encoding settings, one group of settings per output.
    public let outputs: [Output]?

    public init (
        automatedEncodingSettings: AutomatedEncodingSettings? = nil,
        customName: String? = nil,
        name: String? = nil,
        outputGroupSettings: OutputGroupSettings? = nil,
        outputs: [Output]? = nil
    )
    {
        self.automatedEncodingSettings = automatedEncodingSettings
        self.customName = customName
        self.name = name
        self.outputGroupSettings = outputGroupSettings
        self.outputs = outputs
    }
}

extension OutputGroupDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputDetails = "outputDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputDetails = outputDetails {
            var outputDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputDetails)
            for __listofoutputdetail0 in outputDetails {
                try outputDetailsContainer.encode(__listofoutputdetail0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDetailsContainer = try containerValues.decodeIfPresent([OutputDetail?].self, forKey: .outputDetails)
        var outputDetailsDecoded0:[OutputDetail]? = nil
        if let outputDetailsContainer = outputDetailsContainer {
            outputDetailsDecoded0 = [OutputDetail]()
            for structure0 in outputDetailsContainer {
                if let structure0 = structure0 {
                    outputDetailsDecoded0?.append(structure0)
                }
            }
        }
        outputDetails = outputDetailsDecoded0
    }
}

extension OutputGroupDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputGroupDetail(outputDetails: \(String(describing: outputDetails)))"}
}

/// Contains details about the output groups specified in the job settings.
public struct OutputGroupDetail: Equatable {
    /// Details about the output
    public let outputDetails: [OutputDetail]?

    public init (
        outputDetails: [OutputDetail]? = nil
    )
    {
        self.outputDetails = outputDetails
    }
}

extension OutputGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cmafGroupSettings = "cmafGroupSettings"
        case dashIsoGroupSettings = "dashIsoGroupSettings"
        case fileGroupSettings = "fileGroupSettings"
        case hlsGroupSettings = "hlsGroupSettings"
        case msSmoothGroupSettings = "msSmoothGroupSettings"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cmafGroupSettings = cmafGroupSettings {
            try encodeContainer.encode(cmafGroupSettings, forKey: .cmafGroupSettings)
        }
        if let dashIsoGroupSettings = dashIsoGroupSettings {
            try encodeContainer.encode(dashIsoGroupSettings, forKey: .dashIsoGroupSettings)
        }
        if let fileGroupSettings = fileGroupSettings {
            try encodeContainer.encode(fileGroupSettings, forKey: .fileGroupSettings)
        }
        if let hlsGroupSettings = hlsGroupSettings {
            try encodeContainer.encode(hlsGroupSettings, forKey: .hlsGroupSettings)
        }
        if let msSmoothGroupSettings = msSmoothGroupSettings {
            try encodeContainer.encode(msSmoothGroupSettings, forKey: .msSmoothGroupSettings)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cmafGroupSettingsDecoded = try containerValues.decodeIfPresent(CmafGroupSettings.self, forKey: .cmafGroupSettings)
        cmafGroupSettings = cmafGroupSettingsDecoded
        let dashIsoGroupSettingsDecoded = try containerValues.decodeIfPresent(DashIsoGroupSettings.self, forKey: .dashIsoGroupSettings)
        dashIsoGroupSettings = dashIsoGroupSettingsDecoded
        let fileGroupSettingsDecoded = try containerValues.decodeIfPresent(FileGroupSettings.self, forKey: .fileGroupSettings)
        fileGroupSettings = fileGroupSettingsDecoded
        let hlsGroupSettingsDecoded = try containerValues.decodeIfPresent(HlsGroupSettings.self, forKey: .hlsGroupSettings)
        hlsGroupSettings = hlsGroupSettingsDecoded
        let msSmoothGroupSettingsDecoded = try containerValues.decodeIfPresent(MsSmoothGroupSettings.self, forKey: .msSmoothGroupSettings)
        msSmoothGroupSettings = msSmoothGroupSettingsDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OutputGroupType.self, forKey: .type)
        type = typeDecoded
    }
}

extension OutputGroupSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputGroupSettings(cmafGroupSettings: \(String(describing: cmafGroupSettings)), dashIsoGroupSettings: \(String(describing: dashIsoGroupSettings)), fileGroupSettings: \(String(describing: fileGroupSettings)), hlsGroupSettings: \(String(describing: hlsGroupSettings)), msSmoothGroupSettings: \(String(describing: msSmoothGroupSettings)), type: \(String(describing: type)))"}
}

/// Output Group settings, including type
public struct OutputGroupSettings: Equatable {
    /// Settings related to your CMAF output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to CMAF_GROUP_SETTINGS.
    public let cmafGroupSettings: CmafGroupSettings?
    /// Settings related to your DASH output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to DASH_ISO_GROUP_SETTINGS.
    public let dashIsoGroupSettings: DashIsoGroupSettings?
    /// Settings related to your File output group. MediaConvert uses this group of settings to generate a single standalone file, rather than a streaming package. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to FILE_GROUP_SETTINGS.
    public let fileGroupSettings: FileGroupSettings?
    /// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to HLS_GROUP_SETTINGS.
    public let hlsGroupSettings: HlsGroupSettings?
    /// Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to MS_SMOOTH_GROUP_SETTINGS.
    public let msSmoothGroupSettings: MsSmoothGroupSettings?
    /// Type of output group (File group, Apple HLS, DASH ISO, Microsoft Smooth Streaming, CMAF)
    public let type: OutputGroupType?

    public init (
        cmafGroupSettings: CmafGroupSettings? = nil,
        dashIsoGroupSettings: DashIsoGroupSettings? = nil,
        fileGroupSettings: FileGroupSettings? = nil,
        hlsGroupSettings: HlsGroupSettings? = nil,
        msSmoothGroupSettings: MsSmoothGroupSettings? = nil,
        type: OutputGroupType? = nil
    )
    {
        self.cmafGroupSettings = cmafGroupSettings
        self.dashIsoGroupSettings = dashIsoGroupSettings
        self.fileGroupSettings = fileGroupSettings
        self.hlsGroupSettings = hlsGroupSettings
        self.msSmoothGroupSettings = msSmoothGroupSettings
        self.type = type
    }
}

/// Type of output group (File group, Apple HLS, DASH ISO, Microsoft Smooth Streaming, CMAF)
public enum OutputGroupType {
    case cmafGroupSettings
    case dashIsoGroupSettings
    case fileGroupSettings
    case hlsGroupSettings
    case msSmoothGroupSettings
    case sdkUnknown(String)
}

extension OutputGroupType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OutputGroupType] {
        return [
            .cmafGroupSettings,
            .dashIsoGroupSettings,
            .fileGroupSettings,
            .hlsGroupSettings,
            .msSmoothGroupSettings,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cmafGroupSettings: return "CMAF_GROUP_SETTINGS"
        case .dashIsoGroupSettings: return "DASH_ISO_GROUP_SETTINGS"
        case .fileGroupSettings: return "FILE_GROUP_SETTINGS"
        case .hlsGroupSettings: return "HLS_GROUP_SETTINGS"
        case .msSmoothGroupSettings: return "MS_SMOOTH_GROUP_SETTINGS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OutputGroupType(rawValue: rawValue) ?? OutputGroupType.sdkUnknown(rawValue)
    }
}

/// Selects method of inserting SDT information into output stream.  "Follow input SDT" copies SDT information from input stream to  output stream. "Follow input SDT if present" copies SDT information from  input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT  Manually" means user will enter the SDT information. "No SDT" means output  stream will not contain SDT information.
public enum OutputSdt {
    case sdtFollow
    case sdtFollowIfPresent
    case sdtManual
    case sdtNone
    case sdkUnknown(String)
}

extension OutputSdt : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OutputSdt] {
        return [
            .sdtFollow,
            .sdtFollowIfPresent,
            .sdtManual,
            .sdtNone,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .sdtFollow: return "SDT_FOLLOW"
        case .sdtFollowIfPresent: return "SDT_FOLLOW_IF_PRESENT"
        case .sdtManual: return "SDT_MANUAL"
        case .sdtNone: return "SDT_NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OutputSdt(rawValue: rawValue) ?? OutputSdt.sdkUnknown(rawValue)
    }
}

extension OutputSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hlsSettings = "hlsSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsSettings = hlsSettings {
            try encodeContainer.encode(hlsSettings, forKey: .hlsSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsSettingsDecoded = try containerValues.decodeIfPresent(HlsSettings.self, forKey: .hlsSettings)
        hlsSettings = hlsSettingsDecoded
    }
}

extension OutputSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputSettings(hlsSettings: \(String(describing: hlsSettings)))"}
}

/// Specific settings for this type of output.
public struct OutputSettings: Equatable {
    /// Settings for HLS output groups
    public let hlsSettings: HlsSettings?

    public init (
        hlsSettings: HlsSettings? = nil
    )
    {
        self.hlsSettings = hlsSettings
    }
}

extension PartnerWatermarking: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nexguardFileMarkerSettings = "nexguardFileMarkerSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nexguardFileMarkerSettings = nexguardFileMarkerSettings {
            try encodeContainer.encode(nexguardFileMarkerSettings, forKey: .nexguardFileMarkerSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nexguardFileMarkerSettingsDecoded = try containerValues.decodeIfPresent(NexGuardFileMarkerSettings.self, forKey: .nexguardFileMarkerSettings)
        nexguardFileMarkerSettings = nexguardFileMarkerSettingsDecoded
    }
}

extension PartnerWatermarking: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PartnerWatermarking(nexguardFileMarkerSettings: \(String(describing: nexguardFileMarkerSettings)))"}
}

/// If you work with a third party video watermarking partner, use the group of settings that correspond with your watermarking partner to include watermarks in your output.
public struct PartnerWatermarking: Equatable {
    /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
    public let nexguardFileMarkerSettings: NexGuardFileMarkerSettings?

    public init (
        nexguardFileMarkerSettings: NexGuardFileMarkerSettings? = nil
    )
    {
        self.nexguardFileMarkerSettings = nexguardFileMarkerSettings
    }
}

extension Preset: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case category = "category"
        case createdAt = "createdAt"
        case description = "description"
        case lastUpdated = "lastUpdated"
        case name = "name"
        case settings = "settings"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(PresetSettings.self, forKey: .settings)
        settings = settingsDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}

extension Preset: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Preset(arn: \(String(describing: arn)), category: \(String(describing: category)), createdAt: \(String(describing: createdAt)), description: \(String(describing: description)), lastUpdated: \(String(describing: lastUpdated)), name: \(String(describing: name)), settings: \(String(describing: settings)), type: \(String(describing: type)))"}
}

/// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
public struct Preset: Equatable {
    /// An identifier for this resource that is unique within all of AWS.
    public let arn: String?
    /// An optional category you create to organize your presets.
    public let category: String?
    /// The timestamp in epoch seconds for preset creation.
    public let createdAt: Date?
    /// An optional description you create for each preset.
    public let description: String?
    /// The timestamp in epoch seconds when the preset was last updated.
    public let lastUpdated: Date?
    /// A name you create for each preset. Each name must be unique within your account.
    public let name: String?
    /// Settings for preset
    public let settings: PresetSettings?
    /// A preset can be of two types: system or custom. System or built-in preset can't be modified or deleted by the user.
    public let type: `Type`?

    public init (
        arn: String? = nil,
        category: String? = nil,
        createdAt: Date? = nil,
        description: String? = nil,
        lastUpdated: Date? = nil,
        name: String? = nil,
        settings: PresetSettings? = nil,
        type: `Type`? = nil
    )
    {
        self.arn = arn
        self.category = category
        self.createdAt = createdAt
        self.description = description
        self.lastUpdated = lastUpdated
        self.name = name
        self.settings = settings
        self.type = type
    }
}

/// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
public enum PresetListBy {
    case creationDate
    case name
    case system
    case sdkUnknown(String)
}

extension PresetListBy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PresetListBy] {
        return [
            .creationDate,
            .name,
            .system,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .creationDate: return "CREATION_DATE"
        case .name: return "NAME"
        case .system: return "SYSTEM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PresetListBy(rawValue: rawValue) ?? PresetListBy.sdkUnknown(rawValue)
    }
}

extension PresetSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDescriptions = "audioDescriptions"
        case captionDescriptions = "captionDescriptions"
        case containerSettings = "containerSettings"
        case videoDescription = "videoDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptions = audioDescriptions {
            var audioDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptions)
            for __listofaudiodescription0 in audioDescriptions {
                try audioDescriptionsContainer.encode(__listofaudiodescription0)
            }
        }
        if let captionDescriptions = captionDescriptions {
            var captionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptions)
            for __listofcaptiondescriptionpreset0 in captionDescriptions {
                try captionDescriptionsContainer.encode(__listofcaptiondescriptionpreset0)
            }
        }
        if let containerSettings = containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let videoDescription = videoDescription {
            try encodeContainer.encode(videoDescription, forKey: .videoDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionsContainer = try containerValues.decodeIfPresent([AudioDescription?].self, forKey: .audioDescriptions)
        var audioDescriptionsDecoded0:[AudioDescription]? = nil
        if let audioDescriptionsContainer = audioDescriptionsContainer {
            audioDescriptionsDecoded0 = [AudioDescription]()
            for structure0 in audioDescriptionsContainer {
                if let structure0 = structure0 {
                    audioDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        audioDescriptions = audioDescriptionsDecoded0
        let captionDescriptionsContainer = try containerValues.decodeIfPresent([CaptionDescriptionPreset?].self, forKey: .captionDescriptions)
        var captionDescriptionsDecoded0:[CaptionDescriptionPreset]? = nil
        if let captionDescriptionsContainer = captionDescriptionsContainer {
            captionDescriptionsDecoded0 = [CaptionDescriptionPreset]()
            for structure0 in captionDescriptionsContainer {
                if let structure0 = structure0 {
                    captionDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        captionDescriptions = captionDescriptionsDecoded0
        let containerSettingsDecoded = try containerValues.decodeIfPresent(ContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let videoDescriptionDecoded = try containerValues.decodeIfPresent(VideoDescription.self, forKey: .videoDescription)
        videoDescription = videoDescriptionDecoded
    }
}

extension PresetSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PresetSettings(audioDescriptions: \(String(describing: audioDescriptions)), captionDescriptions: \(String(describing: captionDescriptions)), containerSettings: \(String(describing: containerSettings)), videoDescription: \(String(describing: videoDescription)))"}
}

/// Settings for preset
public struct PresetSettings: Equatable {
    /// (AudioDescriptions) contains groups of audio encoding settings organized by audio codec. Include one instance of (AudioDescriptions) per output. (AudioDescriptions) can contain multiple groups of encoding settings.
    public let audioDescriptions: [AudioDescription]?
    /// This object holds groups of settings related to captions for one output. For each output that has captions, include one instance of CaptionDescriptions.
    public let captionDescriptions: [CaptionDescriptionPreset]?
    /// Container specific settings.
    public let containerSettings: ContainerSettings?
    /// VideoDescription contains a group of video encoding settings. The specific video settings depend on the video codec that you choose for the property codec. Include one instance of VideoDescription per output.
    public let videoDescription: VideoDescription?

    public init (
        audioDescriptions: [AudioDescription]? = nil,
        captionDescriptions: [CaptionDescriptionPreset]? = nil,
        containerSettings: ContainerSettings? = nil,
        videoDescription: VideoDescription? = nil
    )
    {
        self.audioDescriptions = audioDescriptions
        self.captionDescriptions = captionDescriptions
        self.containerSettings = containerSettings
        self.videoDescription = videoDescription
    }
}

/// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
public enum PricingPlan {
    case onDemand
    case reserved
    case sdkUnknown(String)
}

extension PricingPlan : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PricingPlan] {
        return [
            .onDemand,
            .reserved,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .onDemand: return "ON_DEMAND"
        case .reserved: return "RESERVED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PricingPlan(rawValue: rawValue) ?? PricingPlan.sdkUnknown(rawValue)
    }
}

/// Use Profile (ProResCodecProfile) to specify the type of Apple ProRes codec to use for this output.
public enum ProresCodecProfile {
    case appleProres422
    case appleProres422Hq
    case appleProres422Lt
    case appleProres422Proxy
    case sdkUnknown(String)
}

extension ProresCodecProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresCodecProfile] {
        return [
            .appleProres422,
            .appleProres422Hq,
            .appleProres422Lt,
            .appleProres422Proxy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .appleProres422: return "APPLE_PRORES_422"
        case .appleProres422Hq: return "APPLE_PRORES_422_HQ"
        case .appleProres422Lt: return "APPLE_PRORES_422_LT"
        case .appleProres422Proxy: return "APPLE_PRORES_422_PROXY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresCodecProfile(rawValue: rawValue) ?? ProresCodecProfile.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum ProresFramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension ProresFramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresFramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresFramerateControl(rawValue: rawValue) ?? ProresFramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum ProresFramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension ProresFramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresFramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresFramerateConversionAlgorithm(rawValue: rawValue) ?? ProresFramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
public enum ProresInterlaceMode {
    case bottomField
    case followBottomField
    case followTopField
    case progressive
    case topField
    case sdkUnknown(String)
}

extension ProresInterlaceMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresInterlaceMode] {
        return [
            .bottomField,
            .followBottomField,
            .followTopField,
            .progressive,
            .topField,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bottomField: return "BOTTOM_FIELD"
        case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
        case .followTopField: return "FOLLOW_TOP_FIELD"
        case .progressive: return "PROGRESSIVE"
        case .topField: return "TOP_FIELD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresInterlaceMode(rawValue: rawValue) ?? ProresInterlaceMode.sdkUnknown(rawValue)
    }
}

/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
public enum ProresParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension ProresParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresParControl(rawValue: rawValue) ?? ProresParControl.sdkUnknown(rawValue)
    }
}

/// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
public enum ProresScanTypeConversionMode {
    case interlaced
    case interlacedOptimize
    case sdkUnknown(String)
}

extension ProresScanTypeConversionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresScanTypeConversionMode] {
        return [
            .interlaced,
            .interlacedOptimize,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresScanTypeConversionMode(rawValue: rawValue) ?? ProresScanTypeConversionMode.sdkUnknown(rawValue)
    }
}

extension ProresSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codecProfile = "codecProfile"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case interlaceMode = "interlaceMode"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case slowPal = "slowPal"
        case telecine = "telecine"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecProfileDecoded = try containerValues.decodeIfPresent(ProresCodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(ProresFramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(ProresFramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(ProresInterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(ProresParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(ProresScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(ProresSlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(ProresTelecine.self, forKey: .telecine)
        telecine = telecineDecoded
    }
}

extension ProresSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProresSettings(codecProfile: \(String(describing: codecProfile)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), interlaceMode: \(String(describing: interlaceMode)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), scanTypeConversionMode: \(String(describing: scanTypeConversionMode)), slowPal: \(String(describing: slowPal)), telecine: \(String(describing: telecine)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value PRORES.
public struct ProresSettings: Equatable {
    /// Use Profile (ProResCodecProfile) to specify the type of Apple ProRes codec to use for this output.
    public let codecProfile: ProresCodecProfile?
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: ProresFramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: ProresFramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public let interlaceMode: ProresInterlaceMode?
    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public let parControl: ProresParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
    public let scanTypeConversionMode: ProresScanTypeConversionMode?
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    public let slowPal: ProresSlowPal?
    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine (HARD) to create a smoother picture. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public let telecine: ProresTelecine?

    public init (
        codecProfile: ProresCodecProfile? = nil,
        framerateControl: ProresFramerateControl? = nil,
        framerateConversionAlgorithm: ProresFramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        interlaceMode: ProresInterlaceMode? = nil,
        parControl: ProresParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        scanTypeConversionMode: ProresScanTypeConversionMode? = nil,
        slowPal: ProresSlowPal? = nil,
        telecine: ProresTelecine? = nil
    )
    {
        self.codecProfile = codecProfile
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.interlaceMode = interlaceMode
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.scanTypeConversionMode = scanTypeConversionMode
        self.slowPal = slowPal
        self.telecine = telecine
    }
}

/// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
public enum ProresSlowPal {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension ProresSlowPal : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresSlowPal] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresSlowPal(rawValue: rawValue) ?? ProresSlowPal.sdkUnknown(rawValue)
    }
}

/// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine (HARD) to create a smoother picture. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
public enum ProresTelecine {
    case hard
    case `none`
    case sdkUnknown(String)
}

extension ProresTelecine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProresTelecine] {
        return [
            .hard,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hard: return "HARD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProresTelecine(rawValue: rawValue) ?? ProresTelecine.sdkUnknown(rawValue)
    }
}

extension Queue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case createdAt = "createdAt"
        case description = "description"
        case lastUpdated = "lastUpdated"
        case name = "name"
        case pricingPlan = "pricingPlan"
        case progressingJobsCount = "progressingJobsCount"
        case reservationPlan = "reservationPlan"
        case status = "status"
        case submittedJobsCount = "submittedJobsCount"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pricingPlan = pricingPlan {
            try encodeContainer.encode(pricingPlan.rawValue, forKey: .pricingPlan)
        }
        if progressingJobsCount != 0 {
            try encodeContainer.encode(progressingJobsCount, forKey: .progressingJobsCount)
        }
        if let reservationPlan = reservationPlan {
            try encodeContainer.encode(reservationPlan, forKey: .reservationPlan)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if submittedJobsCount != 0 {
            try encodeContainer.encode(submittedJobsCount, forKey: .submittedJobsCount)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pricingPlanDecoded = try containerValues.decodeIfPresent(PricingPlan.self, forKey: .pricingPlan)
        pricingPlan = pricingPlanDecoded
        let progressingJobsCountDecoded = try containerValues.decode(Int.self, forKey: .progressingJobsCount)
        progressingJobsCount = progressingJobsCountDecoded
        let reservationPlanDecoded = try containerValues.decodeIfPresent(ReservationPlan.self, forKey: .reservationPlan)
        reservationPlan = reservationPlanDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueueStatus.self, forKey: .status)
        status = statusDecoded
        let submittedJobsCountDecoded = try containerValues.decode(Int.self, forKey: .submittedJobsCount)
        submittedJobsCount = submittedJobsCountDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}

extension Queue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Queue(arn: \(String(describing: arn)), createdAt: \(String(describing: createdAt)), description: \(String(describing: description)), lastUpdated: \(String(describing: lastUpdated)), name: \(String(describing: name)), pricingPlan: \(String(describing: pricingPlan)), progressingJobsCount: \(String(describing: progressingJobsCount)), reservationPlan: \(String(describing: reservationPlan)), status: \(String(describing: status)), submittedJobsCount: \(String(describing: submittedJobsCount)), type: \(String(describing: type)))"}
}

/// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
public struct Queue: Equatable {
    /// An identifier for this resource that is unique within all of AWS.
    public let arn: String?
    /// The timestamp in epoch seconds for when you created the queue.
    public let createdAt: Date?
    /// An optional description that you create for each queue.
    public let description: String?
    /// The timestamp in epoch seconds for when you most recently updated the queue.
    public let lastUpdated: Date?
    /// A name that you create for each queue. Each name must be unique within your account.
    public let name: String?
    /// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
    public let pricingPlan: PricingPlan?
    /// The estimated number of jobs with a PROGRESSING status.
    public let progressingJobsCount: Int
    /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    public let reservationPlan: ReservationPlan?
    /// Queues can be ACTIVE or PAUSED. If you pause a queue, the service won't begin processing jobs in that queue. Jobs that are running when you pause the queue continue to run until they finish or result in an error.
    public let status: QueueStatus?
    /// The estimated number of jobs with a SUBMITTED status.
    public let submittedJobsCount: Int
    /// Specifies whether this on-demand queue is system or custom. System queues are built in. You can't modify or delete system queues. You can create and modify custom queues.
    public let type: `Type`?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        description: String? = nil,
        lastUpdated: Date? = nil,
        name: String? = nil,
        pricingPlan: PricingPlan? = nil,
        progressingJobsCount: Int = 0,
        reservationPlan: ReservationPlan? = nil,
        status: QueueStatus? = nil,
        submittedJobsCount: Int = 0,
        type: `Type`? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.lastUpdated = lastUpdated
        self.name = name
        self.pricingPlan = pricingPlan
        self.progressingJobsCount = progressingJobsCount
        self.reservationPlan = reservationPlan
        self.status = status
        self.submittedJobsCount = submittedJobsCount
        self.type = type
    }
}

/// Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
public enum QueueListBy {
    case creationDate
    case name
    case sdkUnknown(String)
}

extension QueueListBy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [QueueListBy] {
        return [
            .creationDate,
            .name,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .creationDate: return "CREATION_DATE"
        case .name: return "NAME"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = QueueListBy(rawValue: rawValue) ?? QueueListBy.sdkUnknown(rawValue)
    }
}

/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
public enum QueueStatus {
    case active
    case paused
    case sdkUnknown(String)
}

extension QueueStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [QueueStatus] {
        return [
            .active,
            .paused,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .paused: return "PAUSED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = QueueStatus(rawValue: rawValue) ?? QueueStatus.sdkUnknown(rawValue)
    }
}

extension QueueTransition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationQueue = "destinationQueue"
        case sourceQueue = "sourceQueue"
        case timestamp = "timestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationQueue = destinationQueue {
            try encodeContainer.encode(destinationQueue, forKey: .destinationQueue)
        }
        if let sourceQueue = sourceQueue {
            try encodeContainer.encode(sourceQueue, forKey: .sourceQueue)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationQueueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationQueue)
        destinationQueue = destinationQueueDecoded
        let sourceQueueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceQueue)
        sourceQueue = sourceQueueDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension QueueTransition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueueTransition(destinationQueue: \(String(describing: destinationQueue)), sourceQueue: \(String(describing: sourceQueue)), timestamp: \(String(describing: timestamp)))"}
}

/// Description of the source and destination queues between which the job has moved, along with the timestamp of the move
public struct QueueTransition: Equatable {
    /// The queue that the job was on after the transition.
    public let destinationQueue: String?
    /// The queue that the job was on before the transition.
    public let sourceQueue: String?
    /// The time, in Unix epoch format, that the job moved from the source queue to the destination queue.
    public let timestamp: Date?

    public init (
        destinationQueue: String? = nil,
        sourceQueue: String? = nil,
        timestamp: Date? = nil
    )
    {
        self.destinationQueue = destinationQueue
        self.sourceQueue = sourceQueue
        self.timestamp = timestamp
    }
}

extension Rectangle: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case height = "height"
        case width = "width"
        case x = "x"
        case y = "y"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
        if x != 0 {
            try encodeContainer.encode(x, forKey: .x)
        }
        if y != 0 {
            try encodeContainer.encode(y, forKey: .y)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
        let xDecoded = try containerValues.decode(Int.self, forKey: .x)
        x = xDecoded
        let yDecoded = try containerValues.decode(Int.self, forKey: .y)
        y = yDecoded
    }
}

extension Rectangle: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Rectangle(height: \(String(describing: height)), width: \(String(describing: width)), x: \(String(describing: x)), y: \(String(describing: y)))"}
}

/// Use Rectangle to identify a specific area of the video frame.
public struct Rectangle: Equatable {
    /// Height of rectangle in pixels. Specify only even numbers.
    public let height: Int
    /// Width of rectangle in pixels. Specify only even numbers.
    public let width: Int
    /// The distance, in pixels, between the rectangle and the left edge of the video frame. Specify only even numbers.
    public let x: Int
    /// The distance, in pixels, between the rectangle and the top edge of the video frame. Specify only even numbers.
    public let y: Int

    public init (
        height: Int = 0,
        width: Int = 0,
        x: Int = 0,
        y: Int = 0
    )
    {
        self.height = height
        self.width = width
        self.x = x
        self.y = y
    }
}

extension RemixSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelMapping = "channelMapping"
        case channelsIn = "channelsIn"
        case channelsOut = "channelsOut"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelMapping = channelMapping {
            try encodeContainer.encode(channelMapping, forKey: .channelMapping)
        }
        if channelsIn != 0 {
            try encodeContainer.encode(channelsIn, forKey: .channelsIn)
        }
        if channelsOut != 0 {
            try encodeContainer.encode(channelsOut, forKey: .channelsOut)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelMappingDecoded = try containerValues.decodeIfPresent(ChannelMapping.self, forKey: .channelMapping)
        channelMapping = channelMappingDecoded
        let channelsInDecoded = try containerValues.decode(Int.self, forKey: .channelsIn)
        channelsIn = channelsInDecoded
        let channelsOutDecoded = try containerValues.decode(Int.self, forKey: .channelsOut)
        channelsOut = channelsOutDecoded
    }
}

extension RemixSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemixSettings(channelMapping: \(String(describing: channelMapping)), channelsIn: \(String(describing: channelsIn)), channelsOut: \(String(describing: channelsOut)))"}
}

/// Use Manual audio remixing (RemixSettings) to adjust audio levels for each audio channel in each output of your job. With audio remixing, you can output more or fewer audio channels than your input audio source provides.
public struct RemixSettings: Equatable {
    /// Channel mapping (ChannelMapping) contains the group of fields that hold the remixing value for each channel, in dB. Specify remix values to indicate how much of the content from your input audio channel you want in your output audio channels. Each instance of the InputChannels or InputChannelsFineTune array specifies these values for one output channel. Use one instance of this array for each output channel. In the console, each array corresponds to a column in the graphical depiction of the mapping matrix. The rows of the graphical matrix correspond to input channels. Valid values are within the range from -60 (mute) through 6. A setting of 0 passes the input channel unchanged to the output channel (no attenuation or amplification). Use InputChannels or InputChannelsFineTune to specify your remix values. Don't use both.
    public let channelMapping: ChannelMapping?
    /// Specify the number of audio channels from your input that you want to use in your output. With remixing, you might combine or split the data in these channels, so the number of channels in your final output might be different. If you are doing both input channel mapping and output channel mapping, the number of output channels in your input mapping must be the same as the number of input channels in your output mapping.
    public let channelsIn: Int
    /// Specify the number of channels in this output after remixing. Valid values: 1, 2, 4, 6, 8... 64. (1 and even numbers to 64.) If you are doing both input channel mapping and output channel mapping, the number of output channels in your input mapping must be the same as the number of input channels in your output mapping.
    public let channelsOut: Int

    public init (
        channelMapping: ChannelMapping? = nil,
        channelsIn: Int = 0,
        channelsOut: Int = 0
    )
    {
        self.channelMapping = channelMapping
        self.channelsIn = channelsIn
        self.channelsOut = channelsOut
    }
}

/// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
public enum RenewalType {
    case autoRenew
    case expire
    case sdkUnknown(String)
}

extension RenewalType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RenewalType] {
        return [
            .autoRenew,
            .expire,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .autoRenew: return "AUTO_RENEW"
        case .expire: return "EXPIRE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RenewalType(rawValue: rawValue) ?? RenewalType.sdkUnknown(rawValue)
    }
}

extension ReservationPlan: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case commitment = "commitment"
        case expiresAt = "expiresAt"
        case purchasedAt = "purchasedAt"
        case renewalType = "renewalType"
        case reservedSlots = "reservedSlots"
        case status = "status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitment = commitment {
            try encodeContainer.encode(commitment.rawValue, forKey: .commitment)
        }
        if let expiresAt = expiresAt {
            try encodeContainer.encode(expiresAt.timeIntervalSince1970, forKey: .expiresAt)
        }
        if let purchasedAt = purchasedAt {
            try encodeContainer.encode(purchasedAt.timeIntervalSince1970, forKey: .purchasedAt)
        }
        if let renewalType = renewalType {
            try encodeContainer.encode(renewalType.rawValue, forKey: .renewalType)
        }
        if reservedSlots != 0 {
            try encodeContainer.encode(reservedSlots, forKey: .reservedSlots)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commitmentDecoded = try containerValues.decodeIfPresent(Commitment.self, forKey: .commitment)
        commitment = commitmentDecoded
        let expiresAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let purchasedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .purchasedAt)
        purchasedAt = purchasedAtDecoded
        let renewalTypeDecoded = try containerValues.decodeIfPresent(RenewalType.self, forKey: .renewalType)
        renewalType = renewalTypeDecoded
        let reservedSlotsDecoded = try containerValues.decode(Int.self, forKey: .reservedSlots)
        reservedSlots = reservedSlotsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ReservationPlanStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ReservationPlan: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservationPlan(commitment: \(String(describing: commitment)), expiresAt: \(String(describing: expiresAt)), purchasedAt: \(String(describing: purchasedAt)), renewalType: \(String(describing: renewalType)), reservedSlots: \(String(describing: reservedSlots)), status: \(String(describing: status)))"}
}

/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
public struct ReservationPlan: Equatable {
    /// The length of the term of your reserved queue pricing plan commitment.
    public let commitment: Commitment?
    /// The timestamp in epoch seconds for when the current pricing plan term for this reserved queue expires.
    public let expiresAt: Date?
    /// The timestamp in epoch seconds for when you set up the current pricing plan for this reserved queue.
    public let purchasedAt: Date?
    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
    public let renewalType: RenewalType?
    /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. When you increase this number, you extend your existing commitment with a new 12-month commitment for a larger number of RTS. The new commitment begins when you purchase the additional capacity. You can't decrease the number of RTS in your reserved queue.
    public let reservedSlots: Int
    /// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
    public let status: ReservationPlanStatus?

    public init (
        commitment: Commitment? = nil,
        expiresAt: Date? = nil,
        purchasedAt: Date? = nil,
        renewalType: RenewalType? = nil,
        reservedSlots: Int = 0,
        status: ReservationPlanStatus? = nil
    )
    {
        self.commitment = commitment
        self.expiresAt = expiresAt
        self.purchasedAt = purchasedAt
        self.renewalType = renewalType
        self.reservedSlots = reservedSlots
        self.status = status
    }
}

extension ReservationPlanSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case commitment = "commitment"
        case renewalType = "renewalType"
        case reservedSlots = "reservedSlots"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitment = commitment {
            try encodeContainer.encode(commitment.rawValue, forKey: .commitment)
        }
        if let renewalType = renewalType {
            try encodeContainer.encode(renewalType.rawValue, forKey: .renewalType)
        }
        if reservedSlots != 0 {
            try encodeContainer.encode(reservedSlots, forKey: .reservedSlots)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commitmentDecoded = try containerValues.decodeIfPresent(Commitment.self, forKey: .commitment)
        commitment = commitmentDecoded
        let renewalTypeDecoded = try containerValues.decodeIfPresent(RenewalType.self, forKey: .renewalType)
        renewalType = renewalTypeDecoded
        let reservedSlotsDecoded = try containerValues.decode(Int.self, forKey: .reservedSlots)
        reservedSlots = reservedSlotsDecoded
    }
}

extension ReservationPlanSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReservationPlanSettings(commitment: \(String(describing: commitment)), renewalType: \(String(describing: renewalType)), reservedSlots: \(String(describing: reservedSlots)))"}
}

/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
public struct ReservationPlanSettings: Equatable {
    /// The length of the term of your reserved queue pricing plan commitment.
    public let commitment: Commitment?
    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term. When your term is auto renewed, you extend your commitment by 12 months from the auto renew date. You can cancel this commitment.
    public let renewalType: RenewalType?
    /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. You can't decrease the number of RTS in your reserved queue. You can increase the number of RTS by extending your existing commitment with a new 12-month commitment for the larger number. The new commitment begins when you purchase the additional capacity. You can't cancel your commitment or revert to your original commitment after you increase the capacity.
    public let reservedSlots: Int

    public init (
        commitment: Commitment? = nil,
        renewalType: RenewalType? = nil,
        reservedSlots: Int = 0
    )
    {
        self.commitment = commitment
        self.renewalType = renewalType
        self.reservedSlots = reservedSlots
    }
}

/// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
public enum ReservationPlanStatus {
    case active
    case expired
    case sdkUnknown(String)
}

extension ReservationPlanStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservationPlanStatus] {
        return [
            .active,
            .expired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .expired: return "EXPIRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservationPlanStatus(rawValue: rawValue) ?? ReservationPlanStatus.sdkUnknown(rawValue)
    }
}

extension ResourceTags: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ResourceTags: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceTags(arn: \(String(describing: arn)), tags: \(String(describing: tags)))"}
}

/// The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
public struct ResourceTags: Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    public let arn: String?
    /// The tags for the resource.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

/// Use Respond to AFD (RespondToAfd) to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to (NONE). A preferred implementation of this workflow is to set RespondToAfd to (NONE) and set AfdSignaling to (AUTO). * Choose None to remove all input AFD values from this output.
public enum RespondToAfd {
    case `none`
    case passthrough
    case respond
    case sdkUnknown(String)
}

extension RespondToAfd : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RespondToAfd] {
        return [
            .none,
            .passthrough,
            .respond,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case .respond: return "RESPOND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RespondToAfd(rawValue: rawValue) ?? RespondToAfd.sdkUnknown(rawValue)
    }
}

extension S3DestinationAccessControl: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(S3ObjectCannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension S3DestinationAccessControl: CustomDebugStringConvertible {
    public var debugDescription: String {
        "S3DestinationAccessControl(cannedAcl: \(String(describing: cannedAcl)))"}
}

/// Optional. Have MediaConvert automatically apply Amazon S3 access control for the outputs in this output group. When you don't use this setting, S3 automatically applies the default access control list PRIVATE.
public struct S3DestinationAccessControl: Equatable {
    /// Choose an Amazon S3 canned ACL for MediaConvert to apply to this output.
    public let cannedAcl: S3ObjectCannedAcl?

    public init (
        cannedAcl: S3ObjectCannedAcl? = nil
    )
    {
        self.cannedAcl = cannedAcl
    }
}

extension S3DestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessControl = "accessControl"
        case encryption = "encryption"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControl = accessControl {
            try encodeContainer.encode(accessControl, forKey: .accessControl)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlDecoded = try containerValues.decodeIfPresent(S3DestinationAccessControl.self, forKey: .accessControl)
        accessControl = accessControlDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(S3EncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}

extension S3DestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "S3DestinationSettings(accessControl: \(String(describing: accessControl)), encryption: \(String(describing: encryption)))"}
}

/// Settings associated with S3 destination
public struct S3DestinationSettings: Equatable {
    /// Optional. Have MediaConvert automatically apply Amazon S3 access control for the outputs in this output group. When you don't use this setting, S3 automatically applies the default access control list PRIVATE.
    public let accessControl: S3DestinationAccessControl?
    /// Settings for how your job outputs are encrypted as they are uploaded to Amazon S3.
    public let encryption: S3EncryptionSettings?

    public init (
        accessControl: S3DestinationAccessControl? = nil,
        encryption: S3EncryptionSettings? = nil
    )
    {
        self.accessControl = accessControl
        self.encryption = encryption
    }
}

extension S3EncryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryptionType = "encryptionType"
        case kmsKeyArn = "kmsKeyArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionType = encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(S3ServerSideEncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension S3EncryptionSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "S3EncryptionSettings(encryptionType: \(String(describing: encryptionType)), kmsKeyArn: \(String(describing: kmsKeyArn)))"}
}

/// Settings for how your job outputs are encrypted as they are uploaded to Amazon S3.
public struct S3EncryptionSettings: Equatable {
    /// Specify how you want your data keys managed. AWS uses data keys to encrypt your content. AWS also encrypts the data keys themselves, using a customer master key (CMK), and then stores the encrypted data keys alongside your encrypted content. Use this setting to specify which AWS service manages the CMK. For simplest set up, choose Amazon S3 (SERVER_SIDE_ENCRYPTION_S3). If you want your master key to be managed by AWS Key Management Service (KMS), choose AWS KMS (SERVER_SIDE_ENCRYPTION_KMS). By default, when you choose AWS KMS, KMS uses the AWS managed customer master key (CMK) associated with Amazon S3 to encrypt your data keys. You can optionally choose to specify a different, customer managed CMK. Do so by specifying the Amazon Resource Name (ARN) of the key for the setting  KMS ARN (kmsKeyArn).
    public let encryptionType: S3ServerSideEncryptionType?
    /// Optionally, specify the customer master key (CMK) that you want to use to encrypt the data key that AWS uses to encrypt your output content. Enter the Amazon Resource Name (ARN) of the CMK. To use this setting, you must also set Server-side encryption (S3ServerSideEncryptionType) to AWS KMS (SERVER_SIDE_ENCRYPTION_KMS). If you set Server-side encryption to AWS KMS but don't specify a CMK here, AWS uses the AWS managed CMK associated with Amazon S3.
    public let kmsKeyArn: String?

    public init (
        encryptionType: S3ServerSideEncryptionType? = nil,
        kmsKeyArn: String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.kmsKeyArn = kmsKeyArn
    }
}

/// Choose an Amazon S3 canned ACL for MediaConvert to apply to this output.
public enum S3ObjectCannedAcl {
    case authenticatedRead
    case bucketOwnerFullControl
    case bucketOwnerRead
    case publicRead
    case sdkUnknown(String)
}

extension S3ObjectCannedAcl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [S3ObjectCannedAcl] {
        return [
            .authenticatedRead,
            .bucketOwnerFullControl,
            .bucketOwnerRead,
            .publicRead,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .authenticatedRead: return "AUTHENTICATED_READ"
        case .bucketOwnerFullControl: return "BUCKET_OWNER_FULL_CONTROL"
        case .bucketOwnerRead: return "BUCKET_OWNER_READ"
        case .publicRead: return "PUBLIC_READ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = S3ObjectCannedAcl(rawValue: rawValue) ?? S3ObjectCannedAcl.sdkUnknown(rawValue)
    }
}

/// Specify how you want your data keys managed. AWS uses data keys to encrypt your content. AWS also encrypts the data keys themselves, using a customer master key (CMK), and then stores the encrypted data keys alongside your encrypted content. Use this setting to specify which AWS service manages the CMK. For simplest set up, choose Amazon S3 (SERVER_SIDE_ENCRYPTION_S3). If you want your master key to be managed by AWS Key Management Service (KMS), choose AWS KMS (SERVER_SIDE_ENCRYPTION_KMS). By default, when you choose AWS KMS, KMS uses the AWS managed customer master key (CMK) associated with Amazon S3 to encrypt your data keys. You can optionally choose to specify a different, customer managed CMK. Do so by specifying the Amazon Resource Name (ARN) of the key for the setting  KMS ARN (kmsKeyArn).
public enum S3ServerSideEncryptionType {
    case serverSideEncryptionKms
    case serverSideEncryptionS3
    case sdkUnknown(String)
}

extension S3ServerSideEncryptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [S3ServerSideEncryptionType] {
        return [
            .serverSideEncryptionKms,
            .serverSideEncryptionS3,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .serverSideEncryptionKms: return "SERVER_SIDE_ENCRYPTION_KMS"
        case .serverSideEncryptionS3: return "SERVER_SIDE_ENCRYPTION_S3"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = S3ServerSideEncryptionType(rawValue: rawValue) ?? S3ServerSideEncryptionType.sdkUnknown(rawValue)
    }
}

/// Specify how the service handles outputs that have a different aspect ratio from the input aspect ratio. Choose Stretch to output (STRETCH_TO_OUTPUT) to have the service stretch your video image to fit. Keep the setting Default (DEFAULT) to have the service letterbox your video instead. This setting overrides any value that you specify for the setting Selection placement (position) in this output.
public enum ScalingBehavior {
    case `default`
    case stretchToOutput
    case sdkUnknown(String)
}

extension ScalingBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalingBehavior] {
        return [
            .default,
            .stretchToOutput,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .stretchToOutput: return "STRETCH_TO_OUTPUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalingBehavior(rawValue: rawValue) ?? ScalingBehavior.sdkUnknown(rawValue)
    }
}

/// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
public enum SccDestinationFramerate {
    case framerate2397
    case framerate24
    case framerate25
    case framerate2997Dropframe
    case framerate2997NonDropframe
    case sdkUnknown(String)
}

extension SccDestinationFramerate : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SccDestinationFramerate] {
        return [
            .framerate2397,
            .framerate24,
            .framerate25,
            .framerate2997Dropframe,
            .framerate2997NonDropframe,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .framerate2397: return "FRAMERATE_23_97"
        case .framerate24: return "FRAMERATE_24"
        case .framerate25: return "FRAMERATE_25"
        case .framerate2997Dropframe: return "FRAMERATE_29_97_DROPFRAME"
        case .framerate2997NonDropframe: return "FRAMERATE_29_97_NON_DROPFRAME"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SccDestinationFramerate(rawValue: rawValue) ?? SccDestinationFramerate.sdkUnknown(rawValue)
    }
}

extension SccDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case framerate = "framerate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let framerate = framerate {
            try encodeContainer.encode(framerate.rawValue, forKey: .framerate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let framerateDecoded = try containerValues.decodeIfPresent(SccDestinationFramerate.self, forKey: .framerate)
        framerate = framerateDecoded
    }
}

extension SccDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SccDestinationSettings(framerate: \(String(describing: framerate)))"}
}

/// Settings related to SCC captions. SCC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/scc-srt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to SCC.
public struct SccDestinationSettings: Equatable {
    /// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
    public let framerate: SccDestinationFramerate?

    public init (
        framerate: SccDestinationFramerate? = nil
    )
    {
        self.framerate = framerate
    }
}

/// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
public enum SimulateReservedQueue {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension SimulateReservedQueue : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SimulateReservedQueue] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SimulateReservedQueue(rawValue: rawValue) ?? SimulateReservedQueue.sdkUnknown(rawValue)
    }
}

extension SpekeKeyProvider: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateArn = "certificateArn"
        case resourceId = "resourceId"
        case systemIds = "systemIds"
        case url = "url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let systemIds = systemIds {
            var systemIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .systemIds)
            for __listof__stringpattern09afaf809afaf409afaf409afaf409afaf120 in systemIds {
                try systemIdsContainer.encode(__listof__stringpattern09afaf809afaf409afaf409afaf409afaf120)
            }
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let systemIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .systemIds)
        var systemIdsDecoded0:[String]? = nil
        if let systemIdsContainer = systemIdsContainer {
            systemIdsDecoded0 = [String]()
            for string0 in systemIdsContainer {
                if let string0 = string0 {
                    systemIdsDecoded0?.append(string0)
                }
            }
        }
        systemIds = systemIdsDecoded0
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}

extension SpekeKeyProvider: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SpekeKeyProvider(certificateArn: \(String(describing: certificateArn)), resourceId: \(String(describing: resourceId)), systemIds: \(String(describing: systemIds)), url: \(String(describing: url)))"}
}

/// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
public struct SpekeKeyProvider: Equatable {
    /// If you want your key provider to encrypt the content keys that it provides to MediaConvert, set up a certificate with a master key using AWS Certificate Manager. Specify the certificate's Amazon Resource Name (ARN) here.
    public let certificateArn: String?
    /// Specify the resource ID that your SPEKE-compliant key provider uses to identify this content.
    public let resourceId: String?
    /// Relates to SPEKE implementation. DRM system identifiers. DASH output groups support a max of two system ids. Other group types support one system id. See
    ///  https://dashif.org/identifiers/content_protection/ for more details.
    public let systemIds: [String]?
    /// Specify the URL to the key server that your SPEKE-compliant DRM key provider uses to provide keys for encrypting your content.
    public let url: String?

    public init (
        certificateArn: String? = nil,
        resourceId: String? = nil,
        systemIds: [String]? = nil,
        url: String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.resourceId = resourceId
        self.systemIds = systemIds
        self.url = url
    }
}

extension SpekeKeyProviderCmaf: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateArn = "certificateArn"
        case dashSignaledSystemIds = "dashSignaledSystemIds"
        case hlsSignaledSystemIds = "hlsSignaledSystemIds"
        case resourceId = "resourceId"
        case url = "url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let dashSignaledSystemIds = dashSignaledSystemIds {
            var dashSignaledSystemIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dashSignaledSystemIds)
            for __listof__stringmin36max36pattern09afaf809afaf409afaf409afaf409afaf120 in dashSignaledSystemIds {
                try dashSignaledSystemIdsContainer.encode(__listof__stringmin36max36pattern09afaf809afaf409afaf409afaf409afaf120)
            }
        }
        if let hlsSignaledSystemIds = hlsSignaledSystemIds {
            var hlsSignaledSystemIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hlsSignaledSystemIds)
            for __listof__stringmin36max36pattern09afaf809afaf409afaf409afaf409afaf120 in hlsSignaledSystemIds {
                try hlsSignaledSystemIdsContainer.encode(__listof__stringmin36max36pattern09afaf809afaf409afaf409afaf409afaf120)
            }
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let dashSignaledSystemIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .dashSignaledSystemIds)
        var dashSignaledSystemIdsDecoded0:[String]? = nil
        if let dashSignaledSystemIdsContainer = dashSignaledSystemIdsContainer {
            dashSignaledSystemIdsDecoded0 = [String]()
            for string0 in dashSignaledSystemIdsContainer {
                if let string0 = string0 {
                    dashSignaledSystemIdsDecoded0?.append(string0)
                }
            }
        }
        dashSignaledSystemIds = dashSignaledSystemIdsDecoded0
        let hlsSignaledSystemIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .hlsSignaledSystemIds)
        var hlsSignaledSystemIdsDecoded0:[String]? = nil
        if let hlsSignaledSystemIdsContainer = hlsSignaledSystemIdsContainer {
            hlsSignaledSystemIdsDecoded0 = [String]()
            for string0 in hlsSignaledSystemIdsContainer {
                if let string0 = string0 {
                    hlsSignaledSystemIdsDecoded0?.append(string0)
                }
            }
        }
        hlsSignaledSystemIds = hlsSignaledSystemIdsDecoded0
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}

extension SpekeKeyProviderCmaf: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SpekeKeyProviderCmaf(certificateArn: \(String(describing: certificateArn)), dashSignaledSystemIds: \(String(describing: dashSignaledSystemIds)), hlsSignaledSystemIds: \(String(describing: hlsSignaledSystemIds)), resourceId: \(String(describing: resourceId)), url: \(String(describing: url)))"}
}

/// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
public struct SpekeKeyProviderCmaf: Equatable {
    /// If you want your key provider to encrypt the content keys that it provides to MediaConvert, set up a certificate with a master key using AWS Certificate Manager. Specify the certificate's Amazon Resource Name (ARN) here.
    public let certificateArn: String?
    /// Specify the DRM system IDs that you want signaled in the DASH manifest that MediaConvert creates as part of this CMAF package. The DASH manifest can currently signal up to three system IDs. For more information, see https://dashif.org/identifiers/content_protection/.
    public let dashSignaledSystemIds: [String]?
    /// Specify the DRM system ID that you want signaled in the HLS manifest that MediaConvert creates as part of this CMAF package. The HLS manifest can currently signal only one system ID. For more information, see https://dashif.org/identifiers/content_protection/.
    public let hlsSignaledSystemIds: [String]?
    /// Specify the resource ID that your SPEKE-compliant key provider uses to identify this content.
    public let resourceId: String?
    /// Specify the URL to the key server that your SPEKE-compliant DRM key provider uses to provide keys for encrypting your content.
    public let url: String?

    public init (
        certificateArn: String? = nil,
        dashSignaledSystemIds: [String]? = nil,
        hlsSignaledSystemIds: [String]? = nil,
        resourceId: String? = nil,
        url: String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.dashSignaledSystemIds = dashSignaledSystemIds
        self.hlsSignaledSystemIds = hlsSignaledSystemIds
        self.resourceId = resourceId
        self.url = url
    }
}

extension StaticKeyProvider: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyFormat = "keyFormat"
        case keyFormatVersions = "keyFormatVersions"
        case staticKeyValue = "staticKeyValue"
        case url = "url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyFormat = keyFormat {
            try encodeContainer.encode(keyFormat, forKey: .keyFormat)
        }
        if let keyFormatVersions = keyFormatVersions {
            try encodeContainer.encode(keyFormatVersions, forKey: .keyFormatVersions)
        }
        if let staticKeyValue = staticKeyValue {
            try encodeContainer.encode(staticKeyValue, forKey: .staticKeyValue)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyFormatDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFormat)
        keyFormat = keyFormatDecoded
        let keyFormatVersionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFormatVersions)
        keyFormatVersions = keyFormatVersionsDecoded
        let staticKeyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .staticKeyValue)
        staticKeyValue = staticKeyValueDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}

extension StaticKeyProvider: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StaticKeyProvider(keyFormat: \(String(describing: keyFormat)), keyFormatVersions: \(String(describing: keyFormatVersions)), staticKeyValue: \(String(describing: staticKeyValue)), url: \(String(describing: url)))"}
}

/// Use these settings to set up encryption with a static key provider.
public struct StaticKeyProvider: Equatable {
    /// Relates to DRM implementation. Sets the value of the KEYFORMAT attribute. Must be 'identity' or a reverse DNS string. May be omitted to indicate an implicit value of 'identity'.
    public let keyFormat: String?
    /// Relates to DRM implementation. Either a single positive integer version value or a slash delimited list of version values (1/2/3).
    public let keyFormatVersions: String?
    /// Relates to DRM implementation. Use a 32-character hexidecimal string to specify Key Value (StaticKeyValue).
    public let staticKeyValue: String?
    /// Relates to DRM implementation. The location of the license server used for protecting content.
    public let url: String?

    public init (
        keyFormat: String? = nil,
        keyFormatVersions: String? = nil,
        staticKeyValue: String? = nil,
        url: String? = nil
    )
    {
        self.keyFormat = keyFormat
        self.keyFormatVersions = keyFormatVersions
        self.staticKeyValue = staticKeyValue
        self.url = url
    }
}

/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
public enum StatusUpdateInterval {
    case seconds10
    case seconds12
    case seconds120
    case seconds15
    case seconds180
    case seconds20
    case seconds240
    case seconds30
    case seconds300
    case seconds360
    case seconds420
    case seconds480
    case seconds540
    case seconds60
    case seconds600
    case sdkUnknown(String)
}

extension StatusUpdateInterval : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StatusUpdateInterval] {
        return [
            .seconds10,
            .seconds12,
            .seconds120,
            .seconds15,
            .seconds180,
            .seconds20,
            .seconds240,
            .seconds30,
            .seconds300,
            .seconds360,
            .seconds420,
            .seconds480,
            .seconds540,
            .seconds60,
            .seconds600,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .seconds10: return "SECONDS_10"
        case .seconds12: return "SECONDS_12"
        case .seconds120: return "SECONDS_120"
        case .seconds15: return "SECONDS_15"
        case .seconds180: return "SECONDS_180"
        case .seconds20: return "SECONDS_20"
        case .seconds240: return "SECONDS_240"
        case .seconds30: return "SECONDS_30"
        case .seconds300: return "SECONDS_300"
        case .seconds360: return "SECONDS_360"
        case .seconds420: return "SECONDS_420"
        case .seconds480: return "SECONDS_480"
        case .seconds540: return "SECONDS_540"
        case .seconds60: return "SECONDS_60"
        case .seconds600: return "SECONDS_600"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StatusUpdateInterval(rawValue: rawValue) ?? StatusUpdateInterval.sdkUnknown(rawValue)
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(arn: \(String(describing: arn)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to tag. To get the ARN, send a GET request with the resource name.
    public let arn: String?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let arn: String?
    public let tags: [String:String]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TeletextDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pageNumber = "pageNumber"
        case pageTypes = "pageTypes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageNumber = pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
        if let pageTypes = pageTypes {
            var pageTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pageTypes)
            for __listofteletextpagetype0 in pageTypes {
                try pageTypesContainer.encode(__listofteletextpagetype0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
        let pageTypesContainer = try containerValues.decodeIfPresent([TeletextPageType?].self, forKey: .pageTypes)
        var pageTypesDecoded0:[TeletextPageType]? = nil
        if let pageTypesContainer = pageTypesContainer {
            pageTypesDecoded0 = [TeletextPageType]()
            for string0 in pageTypesContainer {
                if let string0 = string0 {
                    pageTypesDecoded0?.append(string0)
                }
            }
        }
        pageTypes = pageTypesDecoded0
    }
}

extension TeletextDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TeletextDestinationSettings(pageNumber: \(String(describing: pageNumber)), pageTypes: \(String(describing: pageTypes)))"}
}

/// Settings related to teletext captions. Set up teletext captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/teletext-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to TELETEXT.
public struct TeletextDestinationSettings: Equatable {
    /// Set pageNumber to the Teletext page number for the destination captions for this output. This value must be a three-digit hexadecimal string; strings ending in -FF are invalid. If you are passing through the entire set of Teletext data, do not use this field.
    public let pageNumber: String?
    /// Specify the page types for this Teletext page. If you don't specify a value here, the service sets the page type to the default value Subtitle (PAGE_TYPE_SUBTITLE). If you pass through the entire set of Teletext data, don't use this field. When you pass through a set of Teletext pages, your output has the same page types as your input.
    public let pageTypes: [TeletextPageType]?

    public init (
        pageNumber: String? = nil,
        pageTypes: [TeletextPageType]? = nil
    )
    {
        self.pageNumber = pageNumber
        self.pageTypes = pageTypes
    }
}

/// A page type as defined in the standard ETSI EN 300 468, Table 94
public enum TeletextPageType {
    case pageTypeAddlInfo
    case pageTypeHearingImpairedSubtitle
    case pageTypeInitial
    case pageTypeProgramSchedule
    case pageTypeSubtitle
    case sdkUnknown(String)
}

extension TeletextPageType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TeletextPageType] {
        return [
            .pageTypeAddlInfo,
            .pageTypeHearingImpairedSubtitle,
            .pageTypeInitial,
            .pageTypeProgramSchedule,
            .pageTypeSubtitle,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pageTypeAddlInfo: return "PAGE_TYPE_ADDL_INFO"
        case .pageTypeHearingImpairedSubtitle: return "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"
        case .pageTypeInitial: return "PAGE_TYPE_INITIAL"
        case .pageTypeProgramSchedule: return "PAGE_TYPE_PROGRAM_SCHEDULE"
        case .pageTypeSubtitle: return "PAGE_TYPE_SUBTITLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TeletextPageType(rawValue: rawValue) ?? TeletextPageType.sdkUnknown(rawValue)
    }
}

extension TeletextSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pageNumber = "pageNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageNumber = pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
    }
}

extension TeletextSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TeletextSourceSettings(pageNumber: \(String(describing: pageNumber)))"}
}

/// Settings specific to Teletext caption sources, including Page number.
public struct TeletextSourceSettings: Equatable {
    /// Use Page Number (PageNumber) to specify the three-digit hexadecimal page number that will be used for Teletext captions. Do not use this setting if you are passing through teletext from the input source to output.
    public let pageNumber: String?

    public init (
        pageNumber: String? = nil
    )
    {
        self.pageNumber = pageNumber
    }
}

extension TimecodeBurnin: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fontSize = "fontSize"
        case position = "position"
        case prefix = "prefix"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fontSize != 0 {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let position = position {
            try encodeContainer.encode(position.rawValue, forKey: .position)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fontSizeDecoded = try containerValues.decode(Int.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let positionDecoded = try containerValues.decodeIfPresent(TimecodeBurninPosition.self, forKey: .position)
        position = positionDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension TimecodeBurnin: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimecodeBurnin(fontSize: \(String(describing: fontSize)), position: \(String(describing: position)), prefix: \(String(describing: prefix)))"}
}

/// Settings for burning the output timecode and specified prefix into the output.
public struct TimecodeBurnin: Equatable {
    /// Use Font Size (FontSize) to set the font size of any burned-in timecode. Valid values are 10, 16, 32, 48.
    public let fontSize: Int
    /// Use Position (Position) under under Timecode burn-in (TimecodeBurnIn) to specify the location the burned-in timecode on output video.
    public let position: TimecodeBurninPosition?
    /// Use Prefix (Prefix) to place ASCII characters before any burned-in timecode. For example, a prefix of "EZ-" will result in the timecode "EZ-00:00:00:00". Provide either the characters themselves or the ASCII code equivalents. The supported range of characters is 0x20 through 0x7e. This includes letters, numbers, and all special characters represented on a standard English keyboard.
    public let prefix: String?

    public init (
        fontSize: Int = 0,
        position: TimecodeBurninPosition? = nil,
        prefix: String? = nil
    )
    {
        self.fontSize = fontSize
        self.position = position
        self.prefix = prefix
    }
}

/// Use Position (Position) under under Timecode burn-in (TimecodeBurnIn) to specify the location the burned-in timecode on output video.
public enum TimecodeBurninPosition {
    case bottomCenter
    case bottomLeft
    case bottomRight
    case middleCenter
    case middleLeft
    case middleRight
    case topCenter
    case topLeft
    case topRight
    case sdkUnknown(String)
}

extension TimecodeBurninPosition : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TimecodeBurninPosition] {
        return [
            .bottomCenter,
            .bottomLeft,
            .bottomRight,
            .middleCenter,
            .middleLeft,
            .middleRight,
            .topCenter,
            .topLeft,
            .topRight,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bottomCenter: return "BOTTOM_CENTER"
        case .bottomLeft: return "BOTTOM_LEFT"
        case .bottomRight: return "BOTTOM_RIGHT"
        case .middleCenter: return "MIDDLE_CENTER"
        case .middleLeft: return "MIDDLE_LEFT"
        case .middleRight: return "MIDDLE_RIGHT"
        case .topCenter: return "TOP_CENTER"
        case .topLeft: return "TOP_LEFT"
        case .topRight: return "TOP_RIGHT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TimecodeBurninPosition(rawValue: rawValue) ?? TimecodeBurninPosition.sdkUnknown(rawValue)
    }
}

extension TimecodeConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case anchor = "anchor"
        case source = "source"
        case start = "start"
        case timestampOffset = "timestampOffset"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anchor = anchor {
            try encodeContainer.encode(anchor, forKey: .anchor)
        }
        if let source = source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let timestampOffset = timestampOffset {
            try encodeContainer.encode(timestampOffset, forKey: .timestampOffset)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anchorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .anchor)
        anchor = anchorDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(TimecodeSource.self, forKey: .source)
        source = sourceDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        start = startDecoded
        let timestampOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestampOffset)
        timestampOffset = timestampOffsetDecoded
    }
}

extension TimecodeConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimecodeConfig(anchor: \(String(describing: anchor)), source: \(String(describing: source)), start: \(String(describing: start)), timestampOffset: \(String(describing: timestampOffset)))"}
}

/// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
public struct TimecodeConfig: Equatable {
    /// If you use an editing platform that relies on an anchor timecode, use Anchor Timecode (Anchor) to specify a timecode that will match the input video frame to the output video frame. Use 24-hour format with frame number, (HH:MM:SS:FF) or (HH:MM:SS;FF). This setting ignores frame rate conversion. System behavior for Anchor Timecode varies depending on your setting for Source (TimecodeSource). * If Source (TimecodeSource) is set to Specified Start (SPECIFIEDSTART), the first input frame is the specified value in Start Timecode (Start). Anchor Timecode (Anchor) and Start Timecode (Start) are used calculate output timecode. * If Source (TimecodeSource) is set to Start at 0 (ZEROBASED)  the  first frame is 00:00:00:00. * If Source (TimecodeSource) is set to Embedded (EMBEDDED), the  first frame is the timecode value on the first input frame of the input.
    public let anchor: String?
    /// Use Source (TimecodeSource) to set how timecodes are handled within this job. To make sure that your video, audio, captions, and markers are synchronized and that time-based features, such as image inserter, work correctly, choose the Timecode source option that matches your assets. All timecodes are in a 24-hour format with frame number (HH:MM:SS:FF). * Embedded (EMBEDDED) - Use the timecode that is in the input video. If no embedded timecode is in the source, the service will use Start at 0 (ZEROBASED) instead. * Start at 0 (ZEROBASED) - Set the timecode of the initial frame to 00:00:00:00. * Specified Start (SPECIFIEDSTART) - Set the timecode of the initial frame to a value other than zero. You use Start timecode (Start) to provide this value.
    public let source: TimecodeSource?
    /// Only use when you set Source (TimecodeSource) to Specified start (SPECIFIEDSTART). Use Start timecode (Start) to specify the timecode for the initial frame. Use 24-hour format with frame number, (HH:MM:SS:FF) or (HH:MM:SS;FF).
    public let start: String?
    /// Only applies to outputs that support program-date-time stamp. Use Timestamp offset (TimestampOffset) to overwrite the timecode date without affecting the time and frame number. Provide the new date as a string in the format "yyyy-mm-dd".  To use Time stamp offset, you must also enable Insert program-date-time (InsertProgramDateTime) in the output settings. For example, if the date part of your timecodes is 2002-1-25 and you want to change it to one year later, set Timestamp offset (TimestampOffset) to 2003-1-25.
    public let timestampOffset: String?

    public init (
        anchor: String? = nil,
        source: TimecodeSource? = nil,
        start: String? = nil,
        timestampOffset: String? = nil
    )
    {
        self.anchor = anchor
        self.source = source
        self.start = start
        self.timestampOffset = timestampOffset
    }
}

/// Use Source (TimecodeSource) to set how timecodes are handled within this job. To make sure that your video, audio, captions, and markers are synchronized and that time-based features, such as image inserter, work correctly, choose the Timecode source option that matches your assets. All timecodes are in a 24-hour format with frame number (HH:MM:SS:FF). * Embedded (EMBEDDED) - Use the timecode that is in the input video. If no embedded timecode is in the source, the service will use Start at 0 (ZEROBASED) instead. * Start at 0 (ZEROBASED) - Set the timecode of the initial frame to 00:00:00:00. * Specified Start (SPECIFIEDSTART) - Set the timecode of the initial frame to a value other than zero. You use Start timecode (Start) to provide this value.
public enum TimecodeSource {
    case embedded
    case specifiedstart
    case zerobased
    case sdkUnknown(String)
}

extension TimecodeSource : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TimecodeSource] {
        return [
            .embedded,
            .specifiedstart,
            .zerobased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .embedded: return "EMBEDDED"
        case .specifiedstart: return "SPECIFIEDSTART"
        case .zerobased: return "ZEROBASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TimecodeSource(rawValue: rawValue) ?? TimecodeSource.sdkUnknown(rawValue)
    }
}

/// Applies only to HLS outputs. Use this setting to specify whether the service inserts the ID3 timed metadata from the input in this output.
public enum TimedMetadata {
    case `none`
    case passthrough
    case sdkUnknown(String)
}

extension TimedMetadata : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TimedMetadata] {
        return [
            .none,
            .passthrough,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .passthrough: return "PASSTHROUGH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TimedMetadata(rawValue: rawValue) ?? TimedMetadata.sdkUnknown(rawValue)
    }
}

extension TimedMetadataInsertion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id3Insertions = "id3Insertions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id3Insertions = id3Insertions {
            var id3InsertionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .id3Insertions)
            for __listofid3insertion0 in id3Insertions {
                try id3InsertionsContainer.encode(__listofid3insertion0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let id3InsertionsContainer = try containerValues.decodeIfPresent([Id3Insertion?].self, forKey: .id3Insertions)
        var id3InsertionsDecoded0:[Id3Insertion]? = nil
        if let id3InsertionsContainer = id3InsertionsContainer {
            id3InsertionsDecoded0 = [Id3Insertion]()
            for structure0 in id3InsertionsContainer {
                if let structure0 = structure0 {
                    id3InsertionsDecoded0?.append(structure0)
                }
            }
        }
        id3Insertions = id3InsertionsDecoded0
    }
}

extension TimedMetadataInsertion: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimedMetadataInsertion(id3Insertions: \(String(describing: id3Insertions)))"}
}

/// Enable Timed metadata insertion (TimedMetadataInsertion) to include ID3 tags in any HLS outputs. To include timed metadata, you must enable it here, enable it in each output container, and specify tags and timecodes in ID3 insertion (Id3Insertion) objects.
public struct TimedMetadataInsertion: Equatable {
    /// Id3Insertions contains the array of Id3Insertion instances.
    public let id3Insertions: [Id3Insertion]?

    public init (
        id3Insertions: [Id3Insertion]? = nil
    )
    {
        self.id3Insertions = id3Insertions
    }
}

extension Timing: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case finishTime = "finishTime"
        case startTime = "startTime"
        case submitTime = "submitTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finishTime = finishTime {
            try encodeContainer.encode(finishTime.timeIntervalSince1970, forKey: .finishTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let submitTime = submitTime {
            try encodeContainer.encode(submitTime.timeIntervalSince1970, forKey: .submitTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finishTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .finishTime)
        finishTime = finishTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let submitTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submitTime)
        submitTime = submitTimeDecoded
    }
}

extension Timing: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Timing(finishTime: \(String(describing: finishTime)), startTime: \(String(describing: startTime)), submitTime: \(String(describing: submitTime)))"}
}

/// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
public struct Timing: Equatable {
    /// The time, in Unix epoch format, that the transcoding job finished
    public let finishTime: Date?
    /// The time, in Unix epoch format, that transcoding for the job began.
    public let startTime: Date?
    /// The time, in Unix epoch format, that you submitted the job.
    public let submitTime: Date?

    public init (
        finishTime: Date? = nil,
        startTime: Date? = nil,
        submitTime: Date? = nil
    )
    {
        self.finishTime = finishTime
        self.startTime = startTime
        self.submitTime = submitTime
    }
}

extension TooManyRequestsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TooManyRequestsException(message: \(String(describing: message)))"}
}

extension TooManyRequestsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Too many requests have been sent in too short of a time. The service limits the rate at which it will accept requests.
public struct TooManyRequestsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Equatable {
    public let message: String?
}

extension TooManyRequestsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TrackSourceSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case trackNumber = "trackNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if trackNumber != 0 {
            try encodeContainer.encode(trackNumber, forKey: .trackNumber)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trackNumberDecoded = try containerValues.decode(Int.self, forKey: .trackNumber)
        trackNumber = trackNumberDecoded
    }
}

extension TrackSourceSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TrackSourceSettings(trackNumber: \(String(describing: trackNumber)))"}
}

/// Settings specific to caption sources that are specified by track number. Currently, this is only IMSC captions in an IMF package. If your caption source is IMSC 1.1 in a separate xml file, use FileSourceSettings instead of TrackSourceSettings.
public struct TrackSourceSettings: Equatable {
    /// Use this setting to select a single captions track from a source. Track numbers correspond to the order in the captions source file. For IMF sources, track numbering is based on the order that the captions appear in the CPL. For example, use 1 to select the captions asset that is listed first in the CPL. To include more than one captions track in your job outputs, create multiple input captions selectors. Specify one track per selector.
    public let trackNumber: Int

    public init (
        trackNumber: Int = 0
    )
    {
        self.trackNumber = trackNumber
    }
}

extension TtmlDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case stylePassthrough = "stylePassthrough"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stylePassthrough = stylePassthrough {
            try encodeContainer.encode(stylePassthrough.rawValue, forKey: .stylePassthrough)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stylePassthroughDecoded = try containerValues.decodeIfPresent(TtmlStylePassthrough.self, forKey: .stylePassthrough)
        stylePassthrough = stylePassthroughDecoded
    }
}

extension TtmlDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TtmlDestinationSettings(stylePassthrough: \(String(describing: stylePassthrough)))"}
}

/// Settings related to TTML captions. TTML is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to TTML.
public struct TtmlDestinationSettings: Equatable {
    /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
    public let stylePassthrough: TtmlStylePassthrough?

    public init (
        stylePassthrough: TtmlStylePassthrough? = nil
    )
    {
        self.stylePassthrough = stylePassthrough
    }
}

/// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
public enum TtmlStylePassthrough {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension TtmlStylePassthrough : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TtmlStylePassthrough] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TtmlStylePassthrough(rawValue: rawValue) ?? TtmlStylePassthrough.sdkUnknown(rawValue)
    }
}

public enum `Type` {
    case custom
    case system
    case sdkUnknown(String)
}

extension `Type` : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [`Type`] {
        return [
            .custom,
            .system,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .custom: return "CUSTOM"
        case .system: return "SYSTEM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = `Type`(rawValue: rawValue) ?? `Type`.sdkUnknown(rawValue)
    }
}

public struct UntagResourceInputBodyMiddleware: Middleware {
    public let id: String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(arn: \(String(describing: arn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tagKeys = "tagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for __listof__string0 in tagKeys {
                try tagKeysContainer.encode(__listof__string0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove tags from. To get the ARN, send a GET request with the resource name.
    public let arn: String?
    /// The keys of the tags that you want to remove from the resource.
    public let tagKeys: [String]?

    public init (
        arn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.arn = arn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
    public let tagKeys: [String]?
}

extension UntagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tagKeys = "tagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateJobTemplateInputBodyMiddleware: Middleware {
    public let id: String = "UpdateJobTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateJobTemplateInput>
    public typealias MOutput = OperationOutput<UpdateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateJobTemplateOutputError>
}

extension UpdateJobTemplateInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateJobTemplateInput(accelerationSettings: \(String(describing: accelerationSettings)), category: \(String(describing: category)), description: \(String(describing: description)), hopDestinations: \(String(describing: hopDestinations)), name: \(String(describing: name)), priority: \(String(describing: priority)), queue: \(String(describing: queue)), settings: \(String(describing: settings)), statusUpdateInterval: \(String(describing: statusUpdateInterval)))"}
}

extension UpdateJobTemplateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let statusUpdateInterval = statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
    }
}

public struct UpdateJobTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateJobTemplateInput>
    public typealias MOutput = OperationOutput<UpdateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateJobTemplateOutputError>
}

public struct UpdateJobTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateJobTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateJobTemplateInput>
    public typealias MOutput = OperationOutput<UpdateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateJobTemplateOutputError>
}

public struct UpdateJobTemplateInput: Equatable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    public let accelerationSettings: AccelerationSettings?
    /// The new category for the job template, if you are changing it.
    public let category: String?
    /// The new description for the job template, if you are changing it.
    public let description: String?
    /// Optional list of hop destinations.
    public let hopDestinations: [HopDestination]?
    /// The name of the job template you are modifying
    public let name: String?
    /// Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    public let priority: Int
    /// The new queue for the job template, if you are changing it.
    public let queue: String?
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    public let settings: JobTemplateSettings?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public let statusUpdateInterval: StatusUpdateInterval?

    public init (
        accelerationSettings: AccelerationSettings? = nil,
        category: String? = nil,
        description: String? = nil,
        hopDestinations: [HopDestination]? = nil,
        name: String? = nil,
        priority: Int = 0,
        queue: String? = nil,
        settings: JobTemplateSettings? = nil,
        statusUpdateInterval: StatusUpdateInterval? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.category = category
        self.description = description
        self.hopDestinations = hopDestinations
        self.name = name
        self.priority = priority
        self.queue = queue
        self.settings = settings
        self.statusUpdateInterval = statusUpdateInterval
    }
}

struct UpdateJobTemplateInputBody: Equatable {
    public let accelerationSettings: AccelerationSettings?
    public let category: String?
    public let description: String?
    public let hopDestinations: [HopDestination]?
    public let priority: Int
    public let queue: String?
    public let settings: JobTemplateSettings?
    public let statusUpdateInterval: StatusUpdateInterval?
}

extension UpdateJobTemplateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(JobTemplateSettings.self, forKey: .settings)
        settings = settingsDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
    }
}

extension UpdateJobTemplateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJobTemplateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateJobTemplateOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJobTemplateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateJobTemplateOutputResponse(jobTemplate: \(String(describing: jobTemplate)))"}
}

extension UpdateJobTemplateOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateJobTemplateOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.jobTemplate = output.jobTemplate
        } else {
            self.jobTemplate = nil
        }
    }
}

public struct UpdateJobTemplateOutputResponse: Equatable {
    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public let jobTemplate: JobTemplate?

    public init (
        jobTemplate: JobTemplate? = nil
    )
    {
        self.jobTemplate = jobTemplate
    }
}

struct UpdateJobTemplateOutputResponseBody: Equatable {
    public let jobTemplate: JobTemplate?
}

extension UpdateJobTemplateOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobTemplate = "jobTemplate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplateDecoded = try containerValues.decodeIfPresent(JobTemplate.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
    }
}

public struct UpdatePresetInputBodyMiddleware: Middleware {
    public let id: String = "UpdatePresetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePresetInput>
    public typealias MOutput = OperationOutput<UpdatePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePresetOutputError>
}

extension UpdatePresetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdatePresetInput(category: \(String(describing: category)), description: \(String(describing: description)), name: \(String(describing: name)), settings: \(String(describing: settings)))"}
}

extension UpdatePresetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case category = "category"
        case description = "description"
        case settings = "settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
    }
}

public struct UpdatePresetInputHeadersMiddleware: Middleware {
    public let id: String = "UpdatePresetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePresetInput>
    public typealias MOutput = OperationOutput<UpdatePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePresetOutputError>
}

public struct UpdatePresetInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdatePresetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePresetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePresetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePresetInput>
    public typealias MOutput = OperationOutput<UpdatePresetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePresetOutputError>
}

public struct UpdatePresetInput: Equatable {
    /// The new category for the preset, if you are changing it.
    public let category: String?
    /// The new description for the preset, if you are changing it.
    public let description: String?
    /// The name of the preset you are modifying.
    public let name: String?
    /// Settings for preset
    public let settings: PresetSettings?

    public init (
        category: String? = nil,
        description: String? = nil,
        name: String? = nil,
        settings: PresetSettings? = nil
    )
    {
        self.category = category
        self.description = description
        self.name = name
        self.settings = settings
    }
}

struct UpdatePresetInputBody: Equatable {
    public let category: String?
    public let description: String?
    public let settings: PresetSettings?
}

extension UpdatePresetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case category = "category"
        case description = "description"
        case settings = "settings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(PresetSettings.self, forKey: .settings)
        settings = settingsDecoded
    }
}

extension UpdatePresetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePresetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdatePresetOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePresetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdatePresetOutputResponse(preset: \(String(describing: preset)))"}
}

extension UpdatePresetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdatePresetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.preset = output.preset
        } else {
            self.preset = nil
        }
    }
}

public struct UpdatePresetOutputResponse: Equatable {
    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public let preset: Preset?

    public init (
        preset: Preset? = nil
    )
    {
        self.preset = preset
    }
}

struct UpdatePresetOutputResponseBody: Equatable {
    public let preset: Preset?
}

extension UpdatePresetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case preset = "preset"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let presetDecoded = try containerValues.decodeIfPresent(Preset.self, forKey: .preset)
        preset = presetDecoded
    }
}

public struct UpdateQueueInputBodyMiddleware: Middleware {
    public let id: String = "UpdateQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateQueueInput>
    public typealias MOutput = OperationOutput<UpdateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateQueueOutputError>
}

extension UpdateQueueInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateQueueInput(description: \(String(describing: description)), name: \(String(describing: name)), reservationPlanSettings: \(String(describing: reservationPlanSettings)), status: \(String(describing: status)))"}
}

extension UpdateQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case reservationPlanSettings = "reservationPlanSettings"
        case status = "status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let reservationPlanSettings = reservationPlanSettings {
            try encodeContainer.encode(reservationPlanSettings, forKey: .reservationPlanSettings)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct UpdateQueueInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateQueueInput>
    public typealias MOutput = OperationOutput<UpdateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateQueueOutputError>
}

public struct UpdateQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateQueueInput>
    public typealias MOutput = OperationOutput<UpdateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateQueueOutputError>
}

public struct UpdateQueueInput: Equatable {
    /// The new description for the queue, if you are changing it.
    public let description: String?
    /// The name of the queue that you are modifying.
    public let name: String?
    /// The new details of your pricing plan for your reserved queue. When you set up a new pricing plan to replace an expired one, you enter into another 12-month commitment. When you add capacity to your queue by increasing the number of RTS, you extend the term of your commitment to 12 months from when you add capacity. After you make these commitments, you can't cancel them.
    public let reservationPlanSettings: ReservationPlanSettings?
    /// Pause or activate a queue by changing its status between ACTIVE and PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause the queue continue to run until they finish or result in an error.
    public let status: QueueStatus?

    public init (
        description: String? = nil,
        name: String? = nil,
        reservationPlanSettings: ReservationPlanSettings? = nil,
        status: QueueStatus? = nil
    )
    {
        self.description = description
        self.name = name
        self.reservationPlanSettings = reservationPlanSettings
        self.status = status
    }
}

struct UpdateQueueInputBody: Equatable {
    public let description: String?
    public let reservationPlanSettings: ReservationPlanSettings?
    public let status: QueueStatus?
}

extension UpdateQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case reservationPlanSettings = "reservationPlanSettings"
        case status = "status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let reservationPlanSettingsDecoded = try containerValues.decodeIfPresent(ReservationPlanSettings.self, forKey: .reservationPlanSettings)
        reservationPlanSettings = reservationPlanSettingsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueueStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension UpdateQueueOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQueueOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQueueOutputError: Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQueueOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateQueueOutputResponse(queue: \(String(describing: queue)))"}
}

extension UpdateQueueOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateQueueOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queue = output.queue
        } else {
            self.queue = nil
        }
    }
}

public struct UpdateQueueOutputResponse: Equatable {
    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public let queue: Queue?

    public init (
        queue: Queue? = nil
    )
    {
        self.queue = queue
    }
}

struct UpdateQueueOutputResponseBody: Equatable {
    public let queue: Queue?
}

extension UpdateQueueOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queue = "queue"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueDecoded = try containerValues.decodeIfPresent(Queue.self, forKey: .queue)
        queue = queueDecoded
    }
}

/// Specify the VC3 class to choose the quality characteristics for this output. VC3 class, together with the settings Framerate (framerateNumerator and framerateDenominator) and Resolution (height and width), determine your output bitrate. For example, say that your video resolution is 1920x1080 and your framerate is 29.97. Then Class 145 (CLASS_145) gives you an output with a bitrate of approximately 145 Mbps and Class 220 (CLASS_220) gives you and output with a bitrate of approximately 220 Mbps. VC3 class also specifies the color bit depth of your output.
public enum Vc3Class {
    case class1458bit
    case class22010bit
    case class2208bit
    case sdkUnknown(String)
}

extension Vc3Class : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3Class] {
        return [
            .class1458bit,
            .class22010bit,
            .class2208bit,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .class1458bit: return "CLASS_145_8BIT"
        case .class22010bit: return "CLASS_220_10BIT"
        case .class2208bit: return "CLASS_220_8BIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3Class(rawValue: rawValue) ?? Vc3Class.sdkUnknown(rawValue)
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum Vc3FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Vc3FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3FramerateControl(rawValue: rawValue) ?? Vc3FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum Vc3FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension Vc3FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3FramerateConversionAlgorithm(rawValue: rawValue) ?? Vc3FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// Optional. Choose the scan line type for this output. If you don't specify a value, MediaConvert will create a progressive output.
public enum Vc3InterlaceMode {
    case interlaced
    case progressive
    case sdkUnknown(String)
}

extension Vc3InterlaceMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3InterlaceMode] {
        return [
            .interlaced,
            .progressive,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .progressive: return "PROGRESSIVE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3InterlaceMode(rawValue: rawValue) ?? Vc3InterlaceMode.sdkUnknown(rawValue)
    }
}

/// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
public enum Vc3ScanTypeConversionMode {
    case interlaced
    case interlacedOptimize
    case sdkUnknown(String)
}

extension Vc3ScanTypeConversionMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3ScanTypeConversionMode] {
        return [
            .interlaced,
            .interlacedOptimize,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .interlaced: return "INTERLACED"
        case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3ScanTypeConversionMode(rawValue: rawValue) ?? Vc3ScanTypeConversionMode.sdkUnknown(rawValue)
    }
}

extension Vc3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case interlaceMode = "interlaceMode"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case slowPal = "slowPal"
        case telecine = "telecine"
        case vc3Class = "vc3Class"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
        if let vc3Class = vc3Class {
            try encodeContainer.encode(vc3Class.rawValue, forKey: .vc3Class)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let framerateControlDecoded = try containerValues.decodeIfPresent(Vc3FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Vc3FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(Vc3InterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(Vc3ScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(Vc3SlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(Vc3Telecine.self, forKey: .telecine)
        telecine = telecineDecoded
        let vc3ClassDecoded = try containerValues.decodeIfPresent(Vc3Class.self, forKey: .vc3Class)
        vc3Class = vc3ClassDecoded
    }
}

extension Vc3Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Vc3Settings(framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), interlaceMode: \(String(describing: interlaceMode)), scanTypeConversionMode: \(String(describing: scanTypeConversionMode)), slowPal: \(String(describing: slowPal)), telecine: \(String(describing: telecine)), vc3Class: \(String(describing: vc3Class)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VC3
public struct Vc3Settings: Equatable {
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: Vc3FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: Vc3FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// Optional. Choose the scan line type for this output. If you don't specify a value, MediaConvert will create a progressive output.
    public let interlaceMode: Vc3InterlaceMode?
    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing (INTERLACED_OPTIMIZE) to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing (INTERLACED), for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine (telecine) to None (NONE) or Soft (SOFT). You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode (interlaceMode) to a value other than Progressive (PROGRESSIVE).
    public let scanTypeConversionMode: Vc3ScanTypeConversionMode?
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    public let slowPal: Vc3SlowPal?
    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine (HARD) to create a smoother picture. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public let telecine: Vc3Telecine?
    /// Specify the VC3 class to choose the quality characteristics for this output. VC3 class, together with the settings Framerate (framerateNumerator and framerateDenominator) and Resolution (height and width), determine your output bitrate. For example, say that your video resolution is 1920x1080 and your framerate is 29.97. Then Class 145 (CLASS_145) gives you an output with a bitrate of approximately 145 Mbps and Class 220 (CLASS_220) gives you and output with a bitrate of approximately 220 Mbps. VC3 class also specifies the color bit depth of your output.
    public let vc3Class: Vc3Class?

    public init (
        framerateControl: Vc3FramerateControl? = nil,
        framerateConversionAlgorithm: Vc3FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        interlaceMode: Vc3InterlaceMode? = nil,
        scanTypeConversionMode: Vc3ScanTypeConversionMode? = nil,
        slowPal: Vc3SlowPal? = nil,
        telecine: Vc3Telecine? = nil,
        vc3Class: Vc3Class? = nil
    )
    {
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.interlaceMode = interlaceMode
        self.scanTypeConversionMode = scanTypeConversionMode
        self.slowPal = slowPal
        self.telecine = telecine
        self.vc3Class = vc3Class
    }
}

/// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Framerate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
public enum Vc3SlowPal {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension Vc3SlowPal : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3SlowPal] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3SlowPal(rawValue: rawValue) ?? Vc3SlowPal.sdkUnknown(rawValue)
    }
}

/// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine (HARD) to create a smoother picture. When you keep the default value, None (NONE), MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
public enum Vc3Telecine {
    case hard
    case `none`
    case sdkUnknown(String)
}

extension Vc3Telecine : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vc3Telecine] {
        return [
            .hard,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hard: return "HARD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vc3Telecine(rawValue: rawValue) ?? Vc3Telecine.sdkUnknown(rawValue)
    }
}

/// Type of video codec
public enum VideoCodec {
    case av1
    case avcIntra
    case frameCapture
    case h264
    case h265
    case mpeg2
    case prores
    case vc3
    case vp8
    case vp9
    case sdkUnknown(String)
}

extension VideoCodec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VideoCodec] {
        return [
            .av1,
            .avcIntra,
            .frameCapture,
            .h264,
            .h265,
            .mpeg2,
            .prores,
            .vc3,
            .vp8,
            .vp9,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .av1: return "AV1"
        case .avcIntra: return "AVC_INTRA"
        case .frameCapture: return "FRAME_CAPTURE"
        case .h264: return "H_264"
        case .h265: return "H_265"
        case .mpeg2: return "MPEG2"
        case .prores: return "PRORES"
        case .vc3: return "VC3"
        case .vp8: return "VP8"
        case .vp9: return "VP9"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VideoCodec(rawValue: rawValue) ?? VideoCodec.sdkUnknown(rawValue)
    }
}

extension VideoCodecSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case av1Settings = "av1Settings"
        case avcIntraSettings = "avcIntraSettings"
        case codec = "codec"
        case frameCaptureSettings = "frameCaptureSettings"
        case h264Settings = "h264Settings"
        case h265Settings = "h265Settings"
        case mpeg2Settings = "mpeg2Settings"
        case proresSettings = "proresSettings"
        case vc3Settings = "vc3Settings"
        case vp8Settings = "vp8Settings"
        case vp9Settings = "vp9Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let av1Settings = av1Settings {
            try encodeContainer.encode(av1Settings, forKey: .av1Settings)
        }
        if let avcIntraSettings = avcIntraSettings {
            try encodeContainer.encode(avcIntraSettings, forKey: .avcIntraSettings)
        }
        if let codec = codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let frameCaptureSettings = frameCaptureSettings {
            try encodeContainer.encode(frameCaptureSettings, forKey: .frameCaptureSettings)
        }
        if let h264Settings = h264Settings {
            try encodeContainer.encode(h264Settings, forKey: .h264Settings)
        }
        if let h265Settings = h265Settings {
            try encodeContainer.encode(h265Settings, forKey: .h265Settings)
        }
        if let mpeg2Settings = mpeg2Settings {
            try encodeContainer.encode(mpeg2Settings, forKey: .mpeg2Settings)
        }
        if let proresSettings = proresSettings {
            try encodeContainer.encode(proresSettings, forKey: .proresSettings)
        }
        if let vc3Settings = vc3Settings {
            try encodeContainer.encode(vc3Settings, forKey: .vc3Settings)
        }
        if let vp8Settings = vp8Settings {
            try encodeContainer.encode(vp8Settings, forKey: .vp8Settings)
        }
        if let vp9Settings = vp9Settings {
            try encodeContainer.encode(vp9Settings, forKey: .vp9Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let av1SettingsDecoded = try containerValues.decodeIfPresent(Av1Settings.self, forKey: .av1Settings)
        av1Settings = av1SettingsDecoded
        let avcIntraSettingsDecoded = try containerValues.decodeIfPresent(AvcIntraSettings.self, forKey: .avcIntraSettings)
        avcIntraSettings = avcIntraSettingsDecoded
        let codecDecoded = try containerValues.decodeIfPresent(VideoCodec.self, forKey: .codec)
        codec = codecDecoded
        let frameCaptureSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureSettings.self, forKey: .frameCaptureSettings)
        frameCaptureSettings = frameCaptureSettingsDecoded
        let h264SettingsDecoded = try containerValues.decodeIfPresent(H264Settings.self, forKey: .h264Settings)
        h264Settings = h264SettingsDecoded
        let h265SettingsDecoded = try containerValues.decodeIfPresent(H265Settings.self, forKey: .h265Settings)
        h265Settings = h265SettingsDecoded
        let mpeg2SettingsDecoded = try containerValues.decodeIfPresent(Mpeg2Settings.self, forKey: .mpeg2Settings)
        mpeg2Settings = mpeg2SettingsDecoded
        let proresSettingsDecoded = try containerValues.decodeIfPresent(ProresSettings.self, forKey: .proresSettings)
        proresSettings = proresSettingsDecoded
        let vc3SettingsDecoded = try containerValues.decodeIfPresent(Vc3Settings.self, forKey: .vc3Settings)
        vc3Settings = vc3SettingsDecoded
        let vp8SettingsDecoded = try containerValues.decodeIfPresent(Vp8Settings.self, forKey: .vp8Settings)
        vp8Settings = vp8SettingsDecoded
        let vp9SettingsDecoded = try containerValues.decodeIfPresent(Vp9Settings.self, forKey: .vp9Settings)
        vp9Settings = vp9SettingsDecoded
    }
}

extension VideoCodecSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoCodecSettings(av1Settings: \(String(describing: av1Settings)), avcIntraSettings: \(String(describing: avcIntraSettings)), codec: \(String(describing: codec)), frameCaptureSettings: \(String(describing: frameCaptureSettings)), h264Settings: \(String(describing: h264Settings)), h265Settings: \(String(describing: h265Settings)), mpeg2Settings: \(String(describing: mpeg2Settings)), proresSettings: \(String(describing: proresSettings)), vc3Settings: \(String(describing: vc3Settings)), vp8Settings: \(String(describing: vp8Settings)), vp9Settings: \(String(describing: vp9Settings)))"}
}

/// Video codec settings, (CodecSettings) under (VideoDescription), contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec (Codec). For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AV1, Av1Settings * AVC_INTRA, AvcIntraSettings * FRAME_CAPTURE, FrameCaptureSettings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * VC3, Vc3Settings * VP8, Vp8Settings * VP9, Vp9Settings
public struct VideoCodecSettings: Equatable {
    /// Required when you set Codec, under VideoDescription>CodecSettings to the value AV1.
    public let av1Settings: Av1Settings?
    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    public let avcIntraSettings: AvcIntraSettings?
    /// Specifies the video codec. This must be equal to one of the enum values defined by the object  VideoCodec.
    public let codec: VideoCodec?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value FRAME_CAPTURE.
    public let frameCaptureSettings: FrameCaptureSettings?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value H_264.
    public let h264Settings: H264Settings?
    /// Settings for H265 codec
    public let h265Settings: H265Settings?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value MPEG2.
    public let mpeg2Settings: Mpeg2Settings?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value PRORES.
    public let proresSettings: ProresSettings?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VC3
    public let vc3Settings: Vc3Settings?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP8.
    public let vp8Settings: Vp8Settings?
    /// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP9.
    public let vp9Settings: Vp9Settings?

    public init (
        av1Settings: Av1Settings? = nil,
        avcIntraSettings: AvcIntraSettings? = nil,
        codec: VideoCodec? = nil,
        frameCaptureSettings: FrameCaptureSettings? = nil,
        h264Settings: H264Settings? = nil,
        h265Settings: H265Settings? = nil,
        mpeg2Settings: Mpeg2Settings? = nil,
        proresSettings: ProresSettings? = nil,
        vc3Settings: Vc3Settings? = nil,
        vp8Settings: Vp8Settings? = nil,
        vp9Settings: Vp9Settings? = nil
    )
    {
        self.av1Settings = av1Settings
        self.avcIntraSettings = avcIntraSettings
        self.codec = codec
        self.frameCaptureSettings = frameCaptureSettings
        self.h264Settings = h264Settings
        self.h265Settings = h265Settings
        self.mpeg2Settings = mpeg2Settings
        self.proresSettings = proresSettings
        self.vc3Settings = vc3Settings
        self.vp8Settings = vp8Settings
        self.vp9Settings = vp9Settings
    }
}

extension VideoDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case afdSignaling = "afdSignaling"
        case antiAlias = "antiAlias"
        case codecSettings = "codecSettings"
        case colorMetadata = "colorMetadata"
        case crop = "crop"
        case dropFrameTimecode = "dropFrameTimecode"
        case fixedAfd = "fixedAfd"
        case height = "height"
        case position = "position"
        case respondToAfd = "respondToAfd"
        case scalingBehavior = "scalingBehavior"
        case sharpness = "sharpness"
        case timecodeInsertion = "timecodeInsertion"
        case videoPreprocessors = "videoPreprocessors"
        case width = "width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let antiAlias = antiAlias {
            try encodeContainer.encode(antiAlias.rawValue, forKey: .antiAlias)
        }
        if let codecSettings = codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if let colorMetadata = colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let crop = crop {
            try encodeContainer.encode(crop, forKey: .crop)
        }
        if let dropFrameTimecode = dropFrameTimecode {
            try encodeContainer.encode(dropFrameTimecode.rawValue, forKey: .dropFrameTimecode)
        }
        if fixedAfd != 0 {
            try encodeContainer.encode(fixedAfd, forKey: .fixedAfd)
        }
        if height != 0 {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let position = position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if let respondToAfd = respondToAfd {
            try encodeContainer.encode(respondToAfd.rawValue, forKey: .respondToAfd)
        }
        if let scalingBehavior = scalingBehavior {
            try encodeContainer.encode(scalingBehavior.rawValue, forKey: .scalingBehavior)
        }
        if sharpness != 0 {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
        if let timecodeInsertion = timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
        if let videoPreprocessors = videoPreprocessors {
            try encodeContainer.encode(videoPreprocessors, forKey: .videoPreprocessors)
        }
        if width != 0 {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let afdSignalingDecoded = try containerValues.decodeIfPresent(AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let antiAliasDecoded = try containerValues.decodeIfPresent(AntiAlias.self, forKey: .antiAlias)
        antiAlias = antiAliasDecoded
        let codecSettingsDecoded = try containerValues.decodeIfPresent(VideoCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let cropDecoded = try containerValues.decodeIfPresent(Rectangle.self, forKey: .crop)
        crop = cropDecoded
        let dropFrameTimecodeDecoded = try containerValues.decodeIfPresent(DropFrameTimecode.self, forKey: .dropFrameTimecode)
        dropFrameTimecode = dropFrameTimecodeDecoded
        let fixedAfdDecoded = try containerValues.decode(Int.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let heightDecoded = try containerValues.decode(Int.self, forKey: .height)
        height = heightDecoded
        let positionDecoded = try containerValues.decodeIfPresent(Rectangle.self, forKey: .position)
        position = positionDecoded
        let respondToAfdDecoded = try containerValues.decodeIfPresent(RespondToAfd.self, forKey: .respondToAfd)
        respondToAfd = respondToAfdDecoded
        let scalingBehaviorDecoded = try containerValues.decodeIfPresent(ScalingBehavior.self, forKey: .scalingBehavior)
        scalingBehavior = scalingBehaviorDecoded
        let sharpnessDecoded = try containerValues.decode(Int.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(VideoTimecodeInsertion.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
        let videoPreprocessorsDecoded = try containerValues.decodeIfPresent(VideoPreprocessor.self, forKey: .videoPreprocessors)
        videoPreprocessors = videoPreprocessorsDecoded
        let widthDecoded = try containerValues.decode(Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension VideoDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoDescription(afdSignaling: \(String(describing: afdSignaling)), antiAlias: \(String(describing: antiAlias)), codecSettings: \(String(describing: codecSettings)), colorMetadata: \(String(describing: colorMetadata)), crop: \(String(describing: crop)), dropFrameTimecode: \(String(describing: dropFrameTimecode)), fixedAfd: \(String(describing: fixedAfd)), height: \(String(describing: height)), position: \(String(describing: position)), respondToAfd: \(String(describing: respondToAfd)), scalingBehavior: \(String(describing: scalingBehavior)), sharpness: \(String(describing: sharpness)), timecodeInsertion: \(String(describing: timecodeInsertion)), videoPreprocessors: \(String(describing: videoPreprocessors)), width: \(String(describing: width)))"}
}

/// Settings related to video encoding of your output. The specific video settings depend on the video codec that you choose. When you work directly in your JSON job specification, include one instance of Video description (VideoDescription) per output.
public struct VideoDescription: Equatable {
    /// This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling (AfdSignaling) to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
    public let afdSignaling: AfdSignaling?
    /// The anti-alias filter is automatically applied to all outputs. The service no longer accepts the value DISABLED for AntiAlias. If you specify that in your job, the service will ignore the setting.
    public let antiAlias: AntiAlias?
    /// Video codec settings, (CodecSettings) under (VideoDescription), contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec (Codec). For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AV1, Av1Settings * AVC_INTRA, AvcIntraSettings * FRAME_CAPTURE, FrameCaptureSettings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * VC3, Vc3Settings * VP8, Vp8Settings * VP9, Vp9Settings
    public let codecSettings: VideoCodecSettings?
    /// Choose Insert (INSERT) for this setting to include color metadata in this output. Choose Ignore (IGNORE) to exclude color metadata from this output. If you don't specify a value, the service sets this to Insert by default.
    public let colorMetadata: ColorMetadata?
    /// Use Cropping selection (crop) to specify the video area that the service will include in the output video frame.
    public let crop: Rectangle?
    /// Applies only to 29.97 fps outputs. When this feature is enabled, the service will use drop-frame timecode on outputs. If it is not possible to use drop-frame timecode, the system will fall back to non-drop-frame. This setting is enabled by default when Timecode insertion (TimecodeInsertion) is enabled.
    public let dropFrameTimecode: DropFrameTimecode?
    /// Applies only if you set AFD Signaling(AfdSignaling) to Fixed (FIXED). Use Fixed (FixedAfd) to specify a four-bit AFD value which the service will write on all  frames of this video output.
    public let fixedAfd: Int
    /// Use the Height (Height) setting to define the video resolution height for this output. Specify in pixels. If you don't provide a value here, the service will use the input height.
    public let height: Int
    /// Use Selection placement (position) to define the video area in your output frame. The area outside of the rectangle that you specify here is black.
    public let position: Rectangle?
    /// Use Respond to AFD (RespondToAfd) to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to (NONE). A preferred implementation of this workflow is to set RespondToAfd to (NONE) and set AfdSignaling to (AUTO). * Choose None to remove all input AFD values from this output.
    public let respondToAfd: RespondToAfd?
    /// Specify how the service handles outputs that have a different aspect ratio from the input aspect ratio. Choose Stretch to output (STRETCH_TO_OUTPUT) to have the service stretch your video image to fit. Keep the setting Default (DEFAULT) to have the service letterbox your video instead. This setting overrides any value that you specify for the setting Selection placement (position) in this output.
    public let scalingBehavior: ScalingBehavior?
    /// Use Sharpness (Sharpness) setting to specify the strength of anti-aliasing. This setting changes the width of the anti-alias filter kernel used for scaling. Sharpness only applies if your output resolution is different from your input resolution. 0 is the softest setting, 100 the sharpest, and 50 recommended for most content.
    public let sharpness: Int
    /// Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion (VideoTimecodeInsertion) to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration (TimecodeConfig). In the console, these settings are located under Job > Job settings > Timecode configuration. Note - Timecode source under input settings (InputTimecodeSource) does not affect the timecodes that are inserted in the output. Source under Job settings > Timecode configuration (TimecodeSource) does.
    public let timecodeInsertion: VideoTimecodeInsertion?
    /// Find additional transcoding features under Preprocessors (VideoPreprocessors). Enable the features at each output individually. These features are disabled by default.
    public let videoPreprocessors: VideoPreprocessor?
    /// Use Width (Width) to define the video resolution width, in pixels, for this output. If you don't provide a value here, the service will use the input width.
    public let width: Int

    public init (
        afdSignaling: AfdSignaling? = nil,
        antiAlias: AntiAlias? = nil,
        codecSettings: VideoCodecSettings? = nil,
        colorMetadata: ColorMetadata? = nil,
        crop: Rectangle? = nil,
        dropFrameTimecode: DropFrameTimecode? = nil,
        fixedAfd: Int = 0,
        height: Int = 0,
        position: Rectangle? = nil,
        respondToAfd: RespondToAfd? = nil,
        scalingBehavior: ScalingBehavior? = nil,
        sharpness: Int = 0,
        timecodeInsertion: VideoTimecodeInsertion? = nil,
        videoPreprocessors: VideoPreprocessor? = nil,
        width: Int = 0
    )
    {
        self.afdSignaling = afdSignaling
        self.antiAlias = antiAlias
        self.codecSettings = codecSettings
        self.colorMetadata = colorMetadata
        self.crop = crop
        self.dropFrameTimecode = dropFrameTimecode
        self.fixedAfd = fixedAfd
        self.height = height
        self.position = position
        self.respondToAfd = respondToAfd
        self.scalingBehavior = scalingBehavior
        self.sharpness = sharpness
        self.timecodeInsertion = timecodeInsertion
        self.videoPreprocessors = videoPreprocessors
        self.width = width
    }
}

extension VideoDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case heightInPx = "heightInPx"
        case widthInPx = "widthInPx"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if heightInPx != 0 {
            try encodeContainer.encode(heightInPx, forKey: .heightInPx)
        }
        if widthInPx != 0 {
            try encodeContainer.encode(widthInPx, forKey: .widthInPx)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let heightInPxDecoded = try containerValues.decode(Int.self, forKey: .heightInPx)
        heightInPx = heightInPxDecoded
        let widthInPxDecoded = try containerValues.decode(Int.self, forKey: .widthInPx)
        widthInPx = widthInPxDecoded
    }
}

extension VideoDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoDetail(heightInPx: \(String(describing: heightInPx)), widthInPx: \(String(describing: widthInPx)))"}
}

/// Contains details about the output's video stream
public struct VideoDetail: Equatable {
    /// Height in pixels for the output
    public let heightInPx: Int
    /// Width in pixels for the output
    public let widthInPx: Int

    public init (
        heightInPx: Int = 0,
        widthInPx: Int = 0
    )
    {
        self.heightInPx = heightInPx
        self.widthInPx = widthInPx
    }
}

extension VideoPreprocessor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case colorCorrector = "colorCorrector"
        case deinterlacer = "deinterlacer"
        case dolbyVision = "dolbyVision"
        case imageInserter = "imageInserter"
        case noiseReducer = "noiseReducer"
        case partnerWatermarking = "partnerWatermarking"
        case timecodeBurnin = "timecodeBurnin"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorCorrector = colorCorrector {
            try encodeContainer.encode(colorCorrector, forKey: .colorCorrector)
        }
        if let deinterlacer = deinterlacer {
            try encodeContainer.encode(deinterlacer, forKey: .deinterlacer)
        }
        if let dolbyVision = dolbyVision {
            try encodeContainer.encode(dolbyVision, forKey: .dolbyVision)
        }
        if let imageInserter = imageInserter {
            try encodeContainer.encode(imageInserter, forKey: .imageInserter)
        }
        if let noiseReducer = noiseReducer {
            try encodeContainer.encode(noiseReducer, forKey: .noiseReducer)
        }
        if let partnerWatermarking = partnerWatermarking {
            try encodeContainer.encode(partnerWatermarking, forKey: .partnerWatermarking)
        }
        if let timecodeBurnin = timecodeBurnin {
            try encodeContainer.encode(timecodeBurnin, forKey: .timecodeBurnin)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorCorrectorDecoded = try containerValues.decodeIfPresent(ColorCorrector.self, forKey: .colorCorrector)
        colorCorrector = colorCorrectorDecoded
        let deinterlacerDecoded = try containerValues.decodeIfPresent(Deinterlacer.self, forKey: .deinterlacer)
        deinterlacer = deinterlacerDecoded
        let dolbyVisionDecoded = try containerValues.decodeIfPresent(DolbyVision.self, forKey: .dolbyVision)
        dolbyVision = dolbyVisionDecoded
        let imageInserterDecoded = try containerValues.decodeIfPresent(ImageInserter.self, forKey: .imageInserter)
        imageInserter = imageInserterDecoded
        let noiseReducerDecoded = try containerValues.decodeIfPresent(NoiseReducer.self, forKey: .noiseReducer)
        noiseReducer = noiseReducerDecoded
        let partnerWatermarkingDecoded = try containerValues.decodeIfPresent(PartnerWatermarking.self, forKey: .partnerWatermarking)
        partnerWatermarking = partnerWatermarkingDecoded
        let timecodeBurninDecoded = try containerValues.decodeIfPresent(TimecodeBurnin.self, forKey: .timecodeBurnin)
        timecodeBurnin = timecodeBurninDecoded
    }
}

extension VideoPreprocessor: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoPreprocessor(colorCorrector: \(String(describing: colorCorrector)), deinterlacer: \(String(describing: deinterlacer)), dolbyVision: \(String(describing: dolbyVision)), imageInserter: \(String(describing: imageInserter)), noiseReducer: \(String(describing: noiseReducer)), partnerWatermarking: \(String(describing: partnerWatermarking)), timecodeBurnin: \(String(describing: timecodeBurnin)))"}
}

/// Find additional transcoding features under Preprocessors (VideoPreprocessors). Enable the features at each output individually. These features are disabled by default.
public struct VideoPreprocessor: Equatable {
    /// Use these settings to convert the color space or to modify properties such as hue and contrast for this output. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/converting-the-color-space.html.
    public let colorCorrector: ColorCorrector?
    /// Use the deinterlacer to produce smoother motion and a clearer picture. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-scan-type.html.
    public let deinterlacer: Deinterlacer?
    /// Enable Dolby Vision feature to produce Dolby Vision compatible video output.
    public let dolbyVision: DolbyVision?
    /// Enable the Image inserter (ImageInserter) feature to include a graphic overlay on your video. Enable or disable this feature for each output individually. This setting is disabled by default.
    public let imageInserter: ImageInserter?
    /// Enable the Noise reducer (NoiseReducer) feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default.
    public let noiseReducer: NoiseReducer?
    /// If you work with a third party video watermarking partner, use the group of settings that correspond with your watermarking partner to include watermarks in your output.
    public let partnerWatermarking: PartnerWatermarking?
    /// Settings for burning the output timecode and specified prefix into the output.
    public let timecodeBurnin: TimecodeBurnin?

    public init (
        colorCorrector: ColorCorrector? = nil,
        deinterlacer: Deinterlacer? = nil,
        dolbyVision: DolbyVision? = nil,
        imageInserter: ImageInserter? = nil,
        noiseReducer: NoiseReducer? = nil,
        partnerWatermarking: PartnerWatermarking? = nil,
        timecodeBurnin: TimecodeBurnin? = nil
    )
    {
        self.colorCorrector = colorCorrector
        self.deinterlacer = deinterlacer
        self.dolbyVision = dolbyVision
        self.imageInserter = imageInserter
        self.noiseReducer = noiseReducer
        self.partnerWatermarking = partnerWatermarking
        self.timecodeBurnin = timecodeBurnin
    }
}

extension VideoSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alphaBehavior = "alphaBehavior"
        case colorSpace = "colorSpace"
        case colorSpaceUsage = "colorSpaceUsage"
        case hdr10Metadata = "hdr10Metadata"
        case pid = "pid"
        case programNumber = "programNumber"
        case rotate = "rotate"
        case sampleRange = "sampleRange"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alphaBehavior = alphaBehavior {
            try encodeContainer.encode(alphaBehavior.rawValue, forKey: .alphaBehavior)
        }
        if let colorSpace = colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let colorSpaceUsage = colorSpaceUsage {
            try encodeContainer.encode(colorSpaceUsage.rawValue, forKey: .colorSpaceUsage)
        }
        if let hdr10Metadata = hdr10Metadata {
            try encodeContainer.encode(hdr10Metadata, forKey: .hdr10Metadata)
        }
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let rotate = rotate {
            try encodeContainer.encode(rotate.rawValue, forKey: .rotate)
        }
        if let sampleRange = sampleRange {
            try encodeContainer.encode(sampleRange.rawValue, forKey: .sampleRange)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alphaBehaviorDecoded = try containerValues.decodeIfPresent(AlphaBehavior.self, forKey: .alphaBehavior)
        alphaBehavior = alphaBehaviorDecoded
        let colorSpaceDecoded = try containerValues.decodeIfPresent(ColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let colorSpaceUsageDecoded = try containerValues.decodeIfPresent(ColorSpaceUsage.self, forKey: .colorSpaceUsage)
        colorSpaceUsage = colorSpaceUsageDecoded
        let hdr10MetadataDecoded = try containerValues.decodeIfPresent(Hdr10Metadata.self, forKey: .hdr10Metadata)
        hdr10Metadata = hdr10MetadataDecoded
        let pidDecoded = try containerValues.decode(Int.self, forKey: .pid)
        pid = pidDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let rotateDecoded = try containerValues.decodeIfPresent(InputRotate.self, forKey: .rotate)
        rotate = rotateDecoded
        let sampleRangeDecoded = try containerValues.decodeIfPresent(InputSampleRange.self, forKey: .sampleRange)
        sampleRange = sampleRangeDecoded
    }
}

extension VideoSelector: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VideoSelector(alphaBehavior: \(String(describing: alphaBehavior)), colorSpace: \(String(describing: colorSpace)), colorSpaceUsage: \(String(describing: colorSpaceUsage)), hdr10Metadata: \(String(describing: hdr10Metadata)), pid: \(String(describing: pid)), programNumber: \(String(describing: programNumber)), rotate: \(String(describing: rotate)), sampleRange: \(String(describing: sampleRange)))"}
}

/// Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
public struct VideoSelector: Equatable {
    /// Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
    public let alphaBehavior: AlphaBehavior?
    /// If your input video has accurate color space metadata, or if you don't know about color space, leave this set to the default value Follow (FOLLOW). The service will automatically detect your input color space. If your input video has metadata indicating the wrong color space, specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate, choose Force HDR 10 (FORCE_HDR10) here and specify correct values in the input HDR 10 metadata (Hdr10Metadata) settings. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
    public let colorSpace: ColorSpace?
    /// There are two sources for color metadata, the input file and the job input settings Color space (ColorSpace) and HDR master display information settings(Hdr10Metadata). The Color space usage setting determines which takes precedence. Choose Force (FORCE) to use color metadata from the input job settings. If you don't specify values for those settings, the service defaults to using metadata from your input. FALLBACK - Choose Fallback (FALLBACK) to use color metadata from the source when it is present. If there's no color metadata in your input file, the service defaults to using values you specify in the input settings.
    public let colorSpaceUsage: ColorSpaceUsage?
    /// Use these settings to provide HDR 10 metadata that is missing or inaccurate in your input video. Appropriate values vary depending on the input video and must be provided by a color grader. The color grader generates these values during the HDR 10 mastering process. The valid range for each of these settings is 0 to 50,000. Each increment represents 0.00002 in CIE1931 color coordinate. Related settings - When you specify these values, you must also set Color space (ColorSpace) to HDR 10 (HDR10). To specify whether the the values you specify here take precedence over the values in the metadata of your input file, set Color space usage (ColorSpaceUsage). To specify whether color metadata is included in an output, set Color metadata (ColorMetadata). For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
    public let hdr10Metadata: Hdr10Metadata?
    /// Use PID (Pid) to select specific video data from an input file. Specify this value as an integer; the system automatically converts it to the hexidecimal value. For example, 257 selects PID 0x101. A PID, or packet identifier, is an identifier for a set of data in an MPEG-2 transport stream container.
    public let pid: Int
    /// Selects a specific program from within a multi-program transport stream. Note that Quad 4K is not currently supported.
    public let programNumber: Int
    /// Use Rotate (InputRotate) to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
    public let rotate: InputRotate?
    /// Use this setting when your input video codec is AVC-Intra. Ignore this setting for all other inputs. If the sample range metadata in your input video is accurate, or if you don't know about sample range, keep the default value, Follow (FOLLOW), for this setting. When you do, the service automatically detects your input sample range. If your input video has metadata indicating the wrong sample range, specify the accurate sample range here. When you do, MediaConvert ignores any sample range information in the input metadata. Regardless of whether MediaConvert uses the input sample range or the sample range that you specify, MediaConvert uses the sample range for transcoding and also writes it to the output metadata.
    public let sampleRange: InputSampleRange?

    public init (
        alphaBehavior: AlphaBehavior? = nil,
        colorSpace: ColorSpace? = nil,
        colorSpaceUsage: ColorSpaceUsage? = nil,
        hdr10Metadata: Hdr10Metadata? = nil,
        pid: Int = 0,
        programNumber: Int = 0,
        rotate: InputRotate? = nil,
        sampleRange: InputSampleRange? = nil
    )
    {
        self.alphaBehavior = alphaBehavior
        self.colorSpace = colorSpace
        self.colorSpaceUsage = colorSpaceUsage
        self.hdr10Metadata = hdr10Metadata
        self.pid = pid
        self.programNumber = programNumber
        self.rotate = rotate
        self.sampleRange = sampleRange
    }
}

/// Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion (VideoTimecodeInsertion) to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration (TimecodeConfig). In the console, these settings are located under Job > Job settings > Timecode configuration. Note - Timecode source under input settings (InputTimecodeSource) does not affect the timecodes that are inserted in the output. Source under Job settings > Timecode configuration (TimecodeSource) does.
public enum VideoTimecodeInsertion {
    case disabled
    case picTimingSei
    case sdkUnknown(String)
}

extension VideoTimecodeInsertion : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VideoTimecodeInsertion] {
        return [
            .disabled,
            .picTimingSei,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .picTimingSei: return "PIC_TIMING_SEI"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VideoTimecodeInsertion(rawValue: rawValue) ?? VideoTimecodeInsertion.sdkUnknown(rawValue)
    }
}

extension VorbisSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channels = "channels"
        case sampleRate = "sampleRate"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if vbrQuality != 0 {
            try encodeContainer.encode(vbrQuality, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let vbrQualityDecoded = try containerValues.decode(Int.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}

extension VorbisSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VorbisSettings(channels: \(String(describing: channels)), sampleRate: \(String(describing: sampleRate)), vbrQuality: \(String(describing: vbrQuality)))"}
}

/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value Vorbis.
public struct VorbisSettings: Equatable {
    /// Optional. Specify the number of channels in this output audio track. Choosing Mono on the console gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2. The default value is 2.
    public let channels: Int
    /// Optional. Specify the audio sample rate in Hz. Valid values are 22050, 32000, 44100, and 48000. The default value is 48000.
    public let sampleRate: Int
    /// Optional. Specify the variable audio quality of this Vorbis output from -1 (lowest quality, ~45 kbit/s) to 10 (highest quality, ~500 kbit/s). The default value is 4 (~128 kbit/s). Values 5 and 6 are approximately 160 and 192 kbit/s, respectively.
    public let vbrQuality: Int

    public init (
        channels: Int = 0,
        sampleRate: Int = 0,
        vbrQuality: Int = 0
    )
    {
        self.channels = channels
        self.sampleRate = sampleRate
        self.vbrQuality = vbrQuality
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum Vp8FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Vp8FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp8FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp8FramerateControl(rawValue: rawValue) ?? Vp8FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum Vp8FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension Vp8FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp8FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp8FramerateConversionAlgorithm(rawValue: rawValue) ?? Vp8FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
public enum Vp8ParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Vp8ParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp8ParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp8ParControl(rawValue: rawValue) ?? Vp8ParControl.sdkUnknown(rawValue)
    }
}

/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
public enum Vp8QualityTuningLevel {
    case multiPass
    case multiPassHq
    case sdkUnknown(String)
}

extension Vp8QualityTuningLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp8QualityTuningLevel] {
        return [
            .multiPass,
            .multiPassHq,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiPass: return "MULTI_PASS"
        case .multiPassHq: return "MULTI_PASS_HQ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp8QualityTuningLevel(rawValue: rawValue) ?? Vp8QualityTuningLevel.sdkUnknown(rawValue)
    }
}

/// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
public enum Vp8RateControlMode {
    case vbr
    case sdkUnknown(String)
}

extension Vp8RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp8RateControlMode] {
        return [
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp8RateControlMode(rawValue: rawValue) ?? Vp8RateControlMode.sdkUnknown(rawValue)
    }
}

extension Vp8Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopSize = "gopSize"
        case hrdBufferSize = "hrdBufferSize"
        case maxBitrate = "maxBitrate"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case rateControlMode = "rateControlMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(Vp8FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Vp8FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(Vp8ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(Vp8QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Vp8RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
    }
}

extension Vp8Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Vp8Settings(bitrate: \(String(describing: bitrate)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopSize: \(String(describing: gopSize)), hrdBufferSize: \(String(describing: hrdBufferSize)), maxBitrate: \(String(describing: maxBitrate)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), qualityTuningLevel: \(String(describing: qualityTuningLevel)), rateControlMode: \(String(describing: rateControlMode)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP8.
public struct Vp8Settings: Equatable {
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    public let bitrate: Int
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: Vp8FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: Vp8FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    public let gopSize: Double
    /// Optional. Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    public let hrdBufferSize: Int
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    public let maxBitrate: Int
    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public let parControl: Vp8ParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    public let qualityTuningLevel: Vp8QualityTuningLevel?
    /// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
    public let rateControlMode: Vp8RateControlMode?

    public init (
        bitrate: Int = 0,
        framerateControl: Vp8FramerateControl? = nil,
        framerateConversionAlgorithm: Vp8FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopSize: Double = 0.0,
        hrdBufferSize: Int = 0,
        maxBitrate: Int = 0,
        parControl: Vp8ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        qualityTuningLevel: Vp8QualityTuningLevel? = nil,
        rateControlMode: Vp8RateControlMode? = nil
    )
    {
        self.bitrate = bitrate
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopSize = gopSize
        self.hrdBufferSize = hrdBufferSize
        self.maxBitrate = maxBitrate
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.qualityTuningLevel = qualityTuningLevel
        self.rateControlMode = rateControlMode
    }
}

/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
public enum Vp9FramerateControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Vp9FramerateControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp9FramerateControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp9FramerateControl(rawValue: rawValue) ?? Vp9FramerateControl.sdkUnknown(rawValue)
    }
}

/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum Vp9FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension Vp9FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp9FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp9FramerateConversionAlgorithm(rawValue: rawValue) ?? Vp9FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}

/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
public enum Vp9ParControl {
    case initializeFromSource
    case specified
    case sdkUnknown(String)
}

extension Vp9ParControl : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp9ParControl] {
        return [
            .initializeFromSource,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp9ParControl(rawValue: rawValue) ?? Vp9ParControl.sdkUnknown(rawValue)
    }
}

/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
public enum Vp9QualityTuningLevel {
    case multiPass
    case multiPassHq
    case sdkUnknown(String)
}

extension Vp9QualityTuningLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp9QualityTuningLevel] {
        return [
            .multiPass,
            .multiPassHq,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .multiPass: return "MULTI_PASS"
        case .multiPassHq: return "MULTI_PASS_HQ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp9QualityTuningLevel(rawValue: rawValue) ?? Vp9QualityTuningLevel.sdkUnknown(rawValue)
    }
}

/// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
public enum Vp9RateControlMode {
    case vbr
    case sdkUnknown(String)
}

extension Vp9RateControlMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Vp9RateControlMode] {
        return [
            .vbr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .vbr: return "VBR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Vp9RateControlMode(rawValue: rawValue) ?? Vp9RateControlMode.sdkUnknown(rawValue)
    }
}

extension Vp9Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopSize = "gopSize"
        case hrdBufferSize = "hrdBufferSize"
        case maxBitrate = "maxBitrate"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case rateControlMode = "rateControlMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(Vp9FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Vp9FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(Vp9ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(Vp9QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Vp9RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
    }
}

extension Vp9Settings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Vp9Settings(bitrate: \(String(describing: bitrate)), framerateControl: \(String(describing: framerateControl)), framerateConversionAlgorithm: \(String(describing: framerateConversionAlgorithm)), framerateDenominator: \(String(describing: framerateDenominator)), framerateNumerator: \(String(describing: framerateNumerator)), gopSize: \(String(describing: gopSize)), hrdBufferSize: \(String(describing: hrdBufferSize)), maxBitrate: \(String(describing: maxBitrate)), parControl: \(String(describing: parControl)), parDenominator: \(String(describing: parDenominator)), parNumerator: \(String(describing: parNumerator)), qualityTuningLevel: \(String(describing: qualityTuningLevel)), rateControlMode: \(String(describing: rateControlMode)))"}
}

/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP9.
public struct Vp9Settings: Equatable {
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    public let bitrate: Int
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    public let framerateControl: Vp9FramerateControl?
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    public let framerateConversionAlgorithm: Vp9FramerateConversionAlgorithm?
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateDenominator: Int
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example,  24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    public let framerateNumerator: Int
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    public let gopSize: Double
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    public let hrdBufferSize: Int
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    public let maxBitrate: Int
    /// Optional. Specify how the service determines the pixel aspect ratio for this output. The default behavior is to use the same pixel aspect ratio as your input video.
    public let parControl: Vp9ParControl?
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    public let parDenominator: Int
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    public let parNumerator: Int
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    public let qualityTuningLevel: Vp9QualityTuningLevel?
    /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
    public let rateControlMode: Vp9RateControlMode?

    public init (
        bitrate: Int = 0,
        framerateControl: Vp9FramerateControl? = nil,
        framerateConversionAlgorithm: Vp9FramerateConversionAlgorithm? = nil,
        framerateDenominator: Int = 0,
        framerateNumerator: Int = 0,
        gopSize: Double = 0.0,
        hrdBufferSize: Int = 0,
        maxBitrate: Int = 0,
        parControl: Vp9ParControl? = nil,
        parDenominator: Int = 0,
        parNumerator: Int = 0,
        qualityTuningLevel: Vp9QualityTuningLevel? = nil,
        rateControlMode: Vp9RateControlMode? = nil
    )
    {
        self.bitrate = bitrate
        self.framerateControl = framerateControl
        self.framerateConversionAlgorithm = framerateConversionAlgorithm
        self.framerateDenominator = framerateDenominator
        self.framerateNumerator = framerateNumerator
        self.gopSize = gopSize
        self.hrdBufferSize = hrdBufferSize
        self.maxBitrate = maxBitrate
        self.parControl = parControl
        self.parDenominator = parDenominator
        self.parNumerator = parNumerator
        self.qualityTuningLevel = qualityTuningLevel
        self.rateControlMode = rateControlMode
    }
}

/// Optional. Ignore this setting unless Nagra support directs you to specify a value. When you don't specify a value here, the Nagra NexGuard library uses its default value.
public enum WatermarkingStrength {
    case `default`
    case lighter
    case lightest
    case stronger
    case strongest
    case sdkUnknown(String)
}

extension WatermarkingStrength : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WatermarkingStrength] {
        return [
            .default,
            .lighter,
            .lightest,
            .stronger,
            .strongest,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .default: return "DEFAULT"
        case .lighter: return "LIGHTER"
        case .lightest: return "LIGHTEST"
        case .stronger: return "STRONGER"
        case .strongest: return "STRONGEST"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WatermarkingStrength(rawValue: rawValue) ?? WatermarkingStrength.sdkUnknown(rawValue)
    }
}

/// The service defaults to using RIFF for WAV outputs. If your output audio is likely to exceed 4 GB in file size, or if you otherwise need the extended support of the RF64 format, set your output WAV file format to RF64.
public enum WavFormat {
    case rf64
    case riff
    case sdkUnknown(String)
}

extension WavFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WavFormat] {
        return [
            .rf64,
            .riff,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rf64: return "RF64"
        case .riff: return "RIFF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WavFormat(rawValue: rawValue) ?? WavFormat.sdkUnknown(rawValue)
    }
}

extension WavSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitDepth = "bitDepth"
        case channels = "channels"
        case format = "format"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitDepth != 0 {
            try encodeContainer.encode(bitDepth, forKey: .bitDepth)
        }
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitDepthDecoded = try containerValues.decode(Int.self, forKey: .bitDepth)
        bitDepth = bitDepthDecoded
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let formatDecoded = try containerValues.decodeIfPresent(WavFormat.self, forKey: .format)
        format = formatDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension WavSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WavSettings(bitDepth: \(String(describing: bitDepth)), channels: \(String(describing: channels)), format: \(String(describing: format)), sampleRate: \(String(describing: sampleRate)))"}
}

/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value WAV.
public struct WavSettings: Equatable {
    /// Specify Bit depth (BitDepth), in bits per sample, to choose the encoding quality for this audio track.
    public let bitDepth: Int
    /// Specify the number of channels in this output audio track. Valid values are 1 and even numbers up to 64. For example, 1, 2, 4, 6, and so on, up to 64.
    public let channels: Int
    /// The service defaults to using RIFF for WAV outputs. If your output audio is likely to exceed 4 GB in file size, or if you otherwise need the extended support of the RF64 format, set your output WAV file format to RF64.
    public let format: WavFormat?
    /// Sample rate in Hz.
    public let sampleRate: Int

    public init (
        bitDepth: Int = 0,
        channels: Int = 0,
        format: WavFormat? = nil,
        sampleRate: Int = 0
    )
    {
        self.bitDepth = bitDepth
        self.channels = channels
        self.format = format
        self.sampleRate = sampleRate
    }
}

extension WebvttDestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case stylePassthrough = "stylePassthrough"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stylePassthrough = stylePassthrough {
            try encodeContainer.encode(stylePassthrough.rawValue, forKey: .stylePassthrough)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stylePassthroughDecoded = try containerValues.decodeIfPresent(WebvttStylePassthrough.self, forKey: .stylePassthrough)
        stylePassthrough = stylePassthroughDecoded
    }
}

extension WebvttDestinationSettings: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WebvttDestinationSettings(stylePassthrough: \(String(describing: stylePassthrough)))"}
}

/// WEBVTT Destination Settings
public struct WebvttDestinationSettings: Equatable {
    /// Choose Enabled (ENABLED) to have MediaConvert use the font style, color, and position information from the captions source in the input. Keep the default value, Disabled (DISABLED), for simplified output captions.
    public let stylePassthrough: WebvttStylePassthrough?

    public init (
        stylePassthrough: WebvttStylePassthrough? = nil
    )
    {
        self.stylePassthrough = stylePassthrough
    }
}

/// Choose Enabled (ENABLED) to have MediaConvert use the font style, color, and position information from the captions source in the input. Keep the default value, Disabled (DISABLED), for simplified output captions.
public enum WebvttStylePassthrough {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension WebvttStylePassthrough : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WebvttStylePassthrough] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WebvttStylePassthrough(rawValue: rawValue) ?? WebvttStylePassthrough.sdkUnknown(rawValue)
    }
}
