// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Eac3AtmosSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialogueIntelligence = "dialogueIntelligence"
        case dynamicRangeCompressionLine = "dynamicRangeCompressionLine"
        case dynamicRangeCompressionRf = "dynamicRangeCompressionRf"
        case loRoCenterMixLevel = "loRoCenterMixLevel"
        case loRoSurroundMixLevel = "loRoSurroundMixLevel"
        case ltRtCenterMixLevel = "ltRtCenterMixLevel"
        case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
        case meteringMode = "meteringMode"
        case sampleRate = "sampleRate"
        case speechThreshold = "speechThreshold"
        case stereoDownmix = "stereoDownmix"
        case surroundExMode = "surroundExMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialogueIntelligence = dialogueIntelligence {
            try encodeContainer.encode(dialogueIntelligence.rawValue, forKey: .dialogueIntelligence)
        }
        if let dynamicRangeCompressionLine = dynamicRangeCompressionLine {
            try encodeContainer.encode(dynamicRangeCompressionLine.rawValue, forKey: .dynamicRangeCompressionLine)
        }
        if let dynamicRangeCompressionRf = dynamicRangeCompressionRf {
            try encodeContainer.encode(dynamicRangeCompressionRf.rawValue, forKey: .dynamicRangeCompressionRf)
        }
        if loRoCenterMixLevel != 0.0 {
            try encodeContainer.encode(loRoCenterMixLevel, forKey: .loRoCenterMixLevel)
        }
        if loRoSurroundMixLevel != 0.0 {
            try encodeContainer.encode(loRoSurroundMixLevel, forKey: .loRoSurroundMixLevel)
        }
        if ltRtCenterMixLevel != 0.0 {
            try encodeContainer.encode(ltRtCenterMixLevel, forKey: .ltRtCenterMixLevel)
        }
        if ltRtSurroundMixLevel != 0.0 {
            try encodeContainer.encode(ltRtSurroundMixLevel, forKey: .ltRtSurroundMixLevel)
        }
        if let meteringMode = meteringMode {
            try encodeContainer.encode(meteringMode.rawValue, forKey: .meteringMode)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if speechThreshold != 0 {
            try encodeContainer.encode(speechThreshold, forKey: .speechThreshold)
        }
        if let stereoDownmix = stereoDownmix {
            try encodeContainer.encode(stereoDownmix.rawValue, forKey: .stereoDownmix)
        }
        if let surroundExMode = surroundExMode {
            try encodeContainer.encode(surroundExMode.rawValue, forKey: .surroundExMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosBitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialogueIntelligenceDecoded = try containerValues.decodeIfPresent(Eac3AtmosDialogueIntelligence.self, forKey: .dialogueIntelligence)
        dialogueIntelligence = dialogueIntelligenceDecoded
        let dynamicRangeCompressionLineDecoded = try containerValues.decodeIfPresent(Eac3AtmosDynamicRangeCompressionLine.self, forKey: .dynamicRangeCompressionLine)
        dynamicRangeCompressionLine = dynamicRangeCompressionLineDecoded
        let dynamicRangeCompressionRfDecoded = try containerValues.decodeIfPresent(Eac3AtmosDynamicRangeCompressionRf.self, forKey: .dynamicRangeCompressionRf)
        dynamicRangeCompressionRf = dynamicRangeCompressionRfDecoded
        let loRoCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoCenterMixLevel)
        loRoCenterMixLevel = loRoCenterMixLevelDecoded
        let loRoSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .loRoSurroundMixLevel)
        loRoSurroundMixLevel = loRoSurroundMixLevelDecoded
        let ltRtCenterMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtCenterMixLevel)
        ltRtCenterMixLevel = ltRtCenterMixLevelDecoded
        let ltRtSurroundMixLevelDecoded = try containerValues.decode(Double.self, forKey: .ltRtSurroundMixLevel)
        ltRtSurroundMixLevel = ltRtSurroundMixLevelDecoded
        let meteringModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosMeteringMode.self, forKey: .meteringMode)
        meteringMode = meteringModeDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let speechThresholdDecoded = try containerValues.decode(Int.self, forKey: .speechThreshold)
        speechThreshold = speechThresholdDecoded
        let stereoDownmixDecoded = try containerValues.decodeIfPresent(Eac3AtmosStereoDownmix.self, forKey: .stereoDownmix)
        stereoDownmix = stereoDownmixDecoded
        let surroundExModeDecoded = try containerValues.decodeIfPresent(Eac3AtmosSurroundExMode.self, forKey: .surroundExMode)
        surroundExMode = surroundExModeDecoded
    }
}
