// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Specify how MediaConvert handles the display definition segment (DDS). Keep the default, None (NONE), to exclude the DDS from this set of captions. Choose No display window (NO_DISPLAY_WINDOW) to have MediaConvert include the DDS but not include display window data. In this case, MediaConvert writes that information to the page composition segment (PCS) instead. Choose Specify (SPECIFIED) to have MediaConvert set up the display window based on the values that you specify in related job settings. For video resolutions that are 576 pixels or smaller in height, MediaConvert doesn't include the DDS, regardless of the value you choose for DDS handling (ddsHandling). In this case, it doesn't write the display window data to the PCS either. Related settings: Use the settings DDS x-coordinate (ddsXCoordinate) and DDS y-coordinate (ddsYCoordinate) to specify the offset between the top left corner of the display window and the top left corner of the video frame. All burn-in and DVB-Sub font settings must match.
public enum DvbddsHandling {
    case `none`
    case noDisplayWindow
    case specified
    case sdkUnknown(String)
}

extension DvbddsHandling : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DvbddsHandling] {
        return [
            .none,
            .noDisplayWindow,
            .specified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .noDisplayWindow: return "NO_DISPLAY_WINDOW"
        case .specified: return "SPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DvbddsHandling(rawValue: rawValue) ?? DvbddsHandling.sdkUnknown(rawValue)
    }
}
