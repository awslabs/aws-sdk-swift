// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// You can add a tag for this mono-channel audio track to mimic its placement in a multi-channel layout.  For example, if this track is the left surround channel, choose Left surround (LS).
public enum AudioChannelTag {
    case c
    case cs
    case l
    case lc
    case lfe
    case ls
    case lsd
    case r
    case rc
    case rs
    case rsd
    case tcs
    case vhc
    case vhl
    case vhr
    case sdkUnknown(String)
}

extension AudioChannelTag : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioChannelTag] {
        return [
            .c,
            .cs,
            .l,
            .lc,
            .lfe,
            .ls,
            .lsd,
            .r,
            .rc,
            .rs,
            .rsd,
            .tcs,
            .vhc,
            .vhl,
            .vhr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .c: return "C"
        case .cs: return "CS"
        case .l: return "L"
        case .lc: return "LC"
        case .lfe: return "LFE"
        case .ls: return "LS"
        case .lsd: return "LSD"
        case .r: return "R"
        case .rc: return "RC"
        case .rs: return "RS"
        case .rsd: return "RSD"
        case .tcs: return "TCS"
        case .vhc: return "VHC"
        case .vhl: return "VHL"
        case .vhr: return "VHR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioChannelTag(rawValue: rawValue) ?? AudioChannelTag.sdkUnknown(rawValue)
    }
}
