// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VideoPreprocessor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case colorCorrector = "colorCorrector"
        case deinterlacer = "deinterlacer"
        case dolbyVision = "dolbyVision"
        case imageInserter = "imageInserter"
        case noiseReducer = "noiseReducer"
        case partnerWatermarking = "partnerWatermarking"
        case timecodeBurnin = "timecodeBurnin"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorCorrector = colorCorrector {
            try encodeContainer.encode(colorCorrector, forKey: .colorCorrector)
        }
        if let deinterlacer = deinterlacer {
            try encodeContainer.encode(deinterlacer, forKey: .deinterlacer)
        }
        if let dolbyVision = dolbyVision {
            try encodeContainer.encode(dolbyVision, forKey: .dolbyVision)
        }
        if let imageInserter = imageInserter {
            try encodeContainer.encode(imageInserter, forKey: .imageInserter)
        }
        if let noiseReducer = noiseReducer {
            try encodeContainer.encode(noiseReducer, forKey: .noiseReducer)
        }
        if let partnerWatermarking = partnerWatermarking {
            try encodeContainer.encode(partnerWatermarking, forKey: .partnerWatermarking)
        }
        if let timecodeBurnin = timecodeBurnin {
            try encodeContainer.encode(timecodeBurnin, forKey: .timecodeBurnin)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorCorrectorDecoded = try containerValues.decodeIfPresent(ColorCorrector.self, forKey: .colorCorrector)
        colorCorrector = colorCorrectorDecoded
        let deinterlacerDecoded = try containerValues.decodeIfPresent(Deinterlacer.self, forKey: .deinterlacer)
        deinterlacer = deinterlacerDecoded
        let dolbyVisionDecoded = try containerValues.decodeIfPresent(DolbyVision.self, forKey: .dolbyVision)
        dolbyVision = dolbyVisionDecoded
        let imageInserterDecoded = try containerValues.decodeIfPresent(ImageInserter.self, forKey: .imageInserter)
        imageInserter = imageInserterDecoded
        let noiseReducerDecoded = try containerValues.decodeIfPresent(NoiseReducer.self, forKey: .noiseReducer)
        noiseReducer = noiseReducerDecoded
        let partnerWatermarkingDecoded = try containerValues.decodeIfPresent(PartnerWatermarking.self, forKey: .partnerWatermarking)
        partnerWatermarking = partnerWatermarkingDecoded
        let timecodeBurninDecoded = try containerValues.decodeIfPresent(TimecodeBurnin.self, forKey: .timecodeBurnin)
        timecodeBurnin = timecodeBurninDecoded
    }
}
