// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NielsenConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case breakoutCode = "breakoutCode"
        case distributorId = "distributorId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if breakoutCode != 0 {
            try encodeContainer.encode(breakoutCode, forKey: .breakoutCode)
        }
        if let distributorId = distributorId {
            try encodeContainer.encode(distributorId, forKey: .distributorId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let breakoutCodeDecoded = try containerValues.decode(Int.self, forKey: .breakoutCode)
        breakoutCode = breakoutCodeDecoded
        let distributorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributorId)
        distributorId = distributorIdDecoded
    }
}
