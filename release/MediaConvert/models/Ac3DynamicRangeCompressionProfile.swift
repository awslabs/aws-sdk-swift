// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// When you want to add Dolby dynamic range compression (DRC) signaling to your output stream, we recommend that you use the mode-specific settings instead of Dynamic range compression profile (DynamicRangeCompressionProfile). The mode-specific settings are Dynamic range compression profile, line mode (dynamicRangeCompressionLine) and Dynamic range compression profile, RF mode (dynamicRangeCompressionRf). Note that when you specify values for all three settings, MediaConvert ignores the value of this setting in favor of the mode-specific settings. If you do use this setting instead of the mode-specific settings, choose None (NONE) to leave out DRC signaling. Keep the default Film standard (FILM_STANDARD) to set the profile to Dolby's film standard profile for all operating modes.
public enum Ac3DynamicRangeCompressionProfile {
    case filmStandard
    case `none`
    case sdkUnknown(String)
}

extension Ac3DynamicRangeCompressionProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Ac3DynamicRangeCompressionProfile] {
        return [
            .filmStandard,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .filmStandard: return "FILM_STANDARD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Ac3DynamicRangeCompressionProfile(rawValue: rawValue) ?? Ac3DynamicRangeCompressionProfile.sdkUnknown(rawValue)
    }
}
