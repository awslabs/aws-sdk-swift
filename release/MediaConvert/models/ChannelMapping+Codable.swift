// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChannelMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case outputChannels = "outputChannels"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputChannels = outputChannels {
            var outputChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputChannels)
            for __listofoutputchannelmapping0 in outputChannels {
                try outputChannelsContainer.encode(__listofoutputchannelmapping0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputChannelsContainer = try containerValues.decodeIfPresent([OutputChannelMapping].self, forKey: .outputChannels)
        var outputChannelsDecoded0:[OutputChannelMapping]? = nil
        if let outputChannelsContainer = outputChannelsContainer {
            outputChannelsDecoded0 = [OutputChannelMapping]()
            for structure0 in outputChannelsContainer {
                outputChannelsDecoded0?.append(structure0)
            }
        }
        outputChannels = outputChannelsDecoded0
    }
}
