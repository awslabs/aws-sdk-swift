// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StaticKeyProvider: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyFormat = "keyFormat"
        case keyFormatVersions = "keyFormatVersions"
        case staticKeyValue = "staticKeyValue"
        case url = "url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyFormat = keyFormat {
            try encodeContainer.encode(keyFormat, forKey: .keyFormat)
        }
        if let keyFormatVersions = keyFormatVersions {
            try encodeContainer.encode(keyFormatVersions, forKey: .keyFormatVersions)
        }
        if let staticKeyValue = staticKeyValue {
            try encodeContainer.encode(staticKeyValue, forKey: .staticKeyValue)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyFormatDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFormat)
        keyFormat = keyFormatDecoded
        let keyFormatVersionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFormatVersions)
        keyFormatVersions = keyFormatVersionsDecoded
        let staticKeyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .staticKeyValue)
        staticKeyValue = staticKeyValueDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}
