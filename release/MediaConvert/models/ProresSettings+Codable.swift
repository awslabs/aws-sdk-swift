// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProresSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codecProfile = "codecProfile"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case interlaceMode = "interlaceMode"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case slowPal = "slowPal"
        case telecine = "telecine"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecProfileDecoded = try containerValues.decodeIfPresent(ProresCodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(ProresFramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(ProresFramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(ProresInterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(ProresParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(ProresScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(ProresSlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(ProresTelecine.self, forKey: .telecine)
        telecine = telecineDecoded
    }
}
