// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Use Deinterlacer (DeinterlaceMode) to choose how the service will do deinterlacing. Default is Deinterlace. - Deinterlace converts interlaced to progressive. - Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p. - Adaptive auto-detects and converts to progressive.
public enum DeinterlacerMode {
    case adaptive
    case deinterlace
    case inverseTelecine
    case sdkUnknown(String)
}

extension DeinterlacerMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeinterlacerMode] {
        return [
            .adaptive,
            .deinterlace,
            .inverseTelecine,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adaptive: return "ADAPTIVE"
        case .deinterlace: return "DEINTERLACE"
        case .inverseTelecine: return "INVERSE_TELECINE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeinterlacerMode(rawValue: rawValue) ?? DeinterlacerMode.sdkUnknown(rawValue)
    }
}
