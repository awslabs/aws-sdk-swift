// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Vp8Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopSize = "gopSize"
        case hrdBufferSize = "hrdBufferSize"
        case maxBitrate = "maxBitrate"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case rateControlMode = "rateControlMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(Vp8FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(Vp8FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(Vp8ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(Vp8QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Vp8RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
    }
}
