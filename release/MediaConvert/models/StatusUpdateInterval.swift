// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
public enum StatusUpdateInterval {
    case seconds10
    case seconds12
    case seconds120
    case seconds15
    case seconds180
    case seconds20
    case seconds240
    case seconds30
    case seconds300
    case seconds360
    case seconds420
    case seconds480
    case seconds540
    case seconds60
    case seconds600
    case sdkUnknown(String)
}

extension StatusUpdateInterval : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StatusUpdateInterval] {
        return [
            .seconds10,
            .seconds12,
            .seconds120,
            .seconds15,
            .seconds180,
            .seconds20,
            .seconds240,
            .seconds30,
            .seconds300,
            .seconds360,
            .seconds420,
            .seconds480,
            .seconds540,
            .seconds60,
            .seconds600,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .seconds10: return "SECONDS_10"
        case .seconds12: return "SECONDS_12"
        case .seconds120: return "SECONDS_120"
        case .seconds15: return "SECONDS_15"
        case .seconds180: return "SECONDS_180"
        case .seconds20: return "SECONDS_20"
        case .seconds240: return "SECONDS_240"
        case .seconds30: return "SECONDS_30"
        case .seconds300: return "SECONDS_300"
        case .seconds360: return "SECONDS_360"
        case .seconds420: return "SECONDS_420"
        case .seconds480: return "SECONDS_480"
        case .seconds540: return "SECONDS_540"
        case .seconds60: return "SECONDS_60"
        case .seconds600: return "SECONDS_600"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StatusUpdateInterval(rawValue: rawValue) ?? StatusUpdateInterval.sdkUnknown(rawValue)
    }
}
