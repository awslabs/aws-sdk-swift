// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension H264Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case bitrate = "bitrate"
        case codecLevel = "codecLevel"
        case codecProfile = "codecProfile"
        case dynamicSubGop = "dynamicSubGop"
        case entropyEncoding = "entropyEncoding"
        case fieldEncoding = "fieldEncoding"
        case flickerAdaptiveQuantization = "flickerAdaptiveQuantization"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopBReference = "gopBReference"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case hrdBufferInitialFillPercentage = "hrdBufferInitialFillPercentage"
        case hrdBufferSize = "hrdBufferSize"
        case interlaceMode = "interlaceMode"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case numberReferenceFrames = "numberReferenceFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case qualityTuningLevel = "qualityTuningLevel"
        case qvbrSettings = "qvbrSettings"
        case rateControlMode = "rateControlMode"
        case repeatPps = "repeatPps"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case slowPal = "slowPal"
        case softness = "softness"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
        case syntax = "syntax"
        case telecine = "telecine"
        case temporalAdaptiveQuantization = "temporalAdaptiveQuantization"
        case unregisteredSeiTimecode = "unregisteredSeiTimecode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codecLevel = codecLevel {
            try encodeContainer.encode(codecLevel.rawValue, forKey: .codecLevel)
        }
        if let codecProfile = codecProfile {
            try encodeContainer.encode(codecProfile.rawValue, forKey: .codecProfile)
        }
        if let dynamicSubGop = dynamicSubGop {
            try encodeContainer.encode(dynamicSubGop.rawValue, forKey: .dynamicSubGop)
        }
        if let entropyEncoding = entropyEncoding {
            try encodeContainer.encode(entropyEncoding.rawValue, forKey: .entropyEncoding)
        }
        if let fieldEncoding = fieldEncoding {
            try encodeContainer.encode(fieldEncoding.rawValue, forKey: .fieldEncoding)
        }
        if let flickerAdaptiveQuantization = flickerAdaptiveQuantization {
            try encodeContainer.encode(flickerAdaptiveQuantization.rawValue, forKey: .flickerAdaptiveQuantization)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if framerateDenominator != 0 {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if framerateNumerator != 0 {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopBReference = gopBReference {
            try encodeContainer.encode(gopBReference.rawValue, forKey: .gopBReference)
        }
        if gopClosedCadence != 0 {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if gopSize != 0.0 {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if hrdBufferInitialFillPercentage != 0 {
            try encodeContainer.encode(hrdBufferInitialFillPercentage, forKey: .hrdBufferInitialFillPercentage)
        }
        if hrdBufferSize != 0 {
            try encodeContainer.encode(hrdBufferSize, forKey: .hrdBufferSize)
        }
        if let interlaceMode = interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if minIInterval != 0 {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if numberBFramesBetweenReferenceFrames != 0 {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if numberReferenceFrames != 0 {
            try encodeContainer.encode(numberReferenceFrames, forKey: .numberReferenceFrames)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if parDenominator != 0 {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if parNumerator != 0 {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let qualityTuningLevel = qualityTuningLevel {
            try encodeContainer.encode(qualityTuningLevel.rawValue, forKey: .qualityTuningLevel)
        }
        if let qvbrSettings = qvbrSettings {
            try encodeContainer.encode(qvbrSettings, forKey: .qvbrSettings)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let repeatPps = repeatPps {
            try encodeContainer.encode(repeatPps.rawValue, forKey: .repeatPps)
        }
        if let scanTypeConversionMode = scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if slices != 0 {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let slowPal = slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if softness != 0 {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAdaptiveQuantization = spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
        if let syntax = syntax {
            try encodeContainer.encode(syntax.rawValue, forKey: .syntax)
        }
        if let telecine = telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
        if let temporalAdaptiveQuantization = temporalAdaptiveQuantization {
            try encodeContainer.encode(temporalAdaptiveQuantization.rawValue, forKey: .temporalAdaptiveQuantization)
        }
        if let unregisteredSeiTimecode = unregisteredSeiTimecode {
            try encodeContainer.encode(unregisteredSeiTimecode.rawValue, forKey: .unregisteredSeiTimecode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codecLevelDecoded = try containerValues.decodeIfPresent(H264CodecLevel.self, forKey: .codecLevel)
        codecLevel = codecLevelDecoded
        let codecProfileDecoded = try containerValues.decodeIfPresent(H264CodecProfile.self, forKey: .codecProfile)
        codecProfile = codecProfileDecoded
        let dynamicSubGopDecoded = try containerValues.decodeIfPresent(H264DynamicSubGop.self, forKey: .dynamicSubGop)
        dynamicSubGop = dynamicSubGopDecoded
        let entropyEncodingDecoded = try containerValues.decodeIfPresent(H264EntropyEncoding.self, forKey: .entropyEncoding)
        entropyEncoding = entropyEncodingDecoded
        let fieldEncodingDecoded = try containerValues.decodeIfPresent(H264FieldEncoding.self, forKey: .fieldEncoding)
        fieldEncoding = fieldEncodingDecoded
        let flickerAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264FlickerAdaptiveQuantization.self, forKey: .flickerAdaptiveQuantization)
        flickerAdaptiveQuantization = flickerAdaptiveQuantizationDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(H264FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(H264FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decode(Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decode(Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopBReferenceDecoded = try containerValues.decodeIfPresent(H264GopBReference.self, forKey: .gopBReference)
        gopBReference = gopBReferenceDecoded
        let gopClosedCadenceDecoded = try containerValues.decode(Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decode(Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(H264GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let hrdBufferInitialFillPercentageDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferInitialFillPercentage)
        hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentageDecoded
        let hrdBufferSizeDecoded = try containerValues.decode(Int.self, forKey: .hrdBufferSize)
        hrdBufferSize = hrdBufferSizeDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(H264InterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let maxBitrateDecoded = try containerValues.decode(Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decode(Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let numberReferenceFramesDecoded = try containerValues.decode(Int.self, forKey: .numberReferenceFrames)
        numberReferenceFrames = numberReferenceFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(H264ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decode(Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decode(Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let qualityTuningLevelDecoded = try containerValues.decodeIfPresent(H264QualityTuningLevel.self, forKey: .qualityTuningLevel)
        qualityTuningLevel = qualityTuningLevelDecoded
        let qvbrSettingsDecoded = try containerValues.decodeIfPresent(H264QvbrSettings.self, forKey: .qvbrSettings)
        qvbrSettings = qvbrSettingsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(H264RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let repeatPpsDecoded = try containerValues.decodeIfPresent(H264RepeatPps.self, forKey: .repeatPps)
        repeatPps = repeatPpsDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(H264ScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(H264SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decode(Int.self, forKey: .slices)
        slices = slicesDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(H264SlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let softnessDecoded = try containerValues.decode(Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
        let syntaxDecoded = try containerValues.decodeIfPresent(H264Syntax.self, forKey: .syntax)
        syntax = syntaxDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(H264Telecine.self, forKey: .telecine)
        telecine = telecineDecoded
        let temporalAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(H264TemporalAdaptiveQuantization.self, forKey: .temporalAdaptiveQuantization)
        temporalAdaptiveQuantization = temporalAdaptiveQuantizationDecoded
        let unregisteredSeiTimecodeDecoded = try containerValues.decodeIfPresent(H264UnregisteredSeiTimecode.self, forKey: .unregisteredSeiTimecode)
        unregisteredSeiTimecode = unregisteredSeiTimecodeDecoded
    }
}
