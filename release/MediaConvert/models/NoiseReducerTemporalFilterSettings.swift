// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Noise reducer filter settings for temporal filter.
public struct NoiseReducerTemporalFilterSettings: Equatable {
    /// Use Aggressive mode for content that has complex motion. Higher values produce stronger temporal filtering. This filters highly complex scenes more aggressively and creates better VQ for low bitrate outputs.
    public let aggressiveMode: Int
    /// Optional. When you set Noise reducer (noiseReducer) to Temporal (TEMPORAL), you can use this setting to apply sharpening. The default behavior, Auto (AUTO), allows the transcoder to determine whether to apply filtering, depending on input type and quality. When you set Noise reducer to Temporal, your output bandwidth is reduced. When Post temporal sharpening is also enabled, that bandwidth reduction is smaller.
    public let postTemporalSharpening: NoiseFilterPostTemporalSharpening?
    /// The speed of the filter (higher number is faster). Low setting reduces bit rate at the cost of transcode time, high setting improves transcode time at the cost of bit rate.
    public let speed: Int
    /// Specify the strength of the noise reducing filter on this output. Higher values produce stronger filtering. We recommend the following value ranges, depending on the result that you want: * 0-2 for complexity reduction with minimal sharpness loss * 2-8 for complexity reduction with image preservation * 8-16 for a high level of complexity reduction
    public let strength: Int

    public init (
        aggressiveMode: Int = 0,
        postTemporalSharpening: NoiseFilterPostTemporalSharpening? = nil,
        speed: Int = 0,
        strength: Int = 0
    )
    {
        self.aggressiveMode = aggressiveMode
        self.postTemporalSharpening = postTemporalSharpening
        self.speed = speed
        self.strength = strength
    }
}
