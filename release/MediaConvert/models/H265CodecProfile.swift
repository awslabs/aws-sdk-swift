// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
public enum H265CodecProfile {
    case main10High
    case main10Main
    case main42210bitHigh
    case main42210bitMain
    case main4228bitHigh
    case main4228bitMain
    case mainHigh
    case mainMain
    case sdkUnknown(String)
}

extension H265CodecProfile : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265CodecProfile] {
        return [
            .main10High,
            .main10Main,
            .main42210bitHigh,
            .main42210bitMain,
            .main4228bitHigh,
            .main4228bitMain,
            .mainHigh,
            .mainMain,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .main10High: return "MAIN10_HIGH"
        case .main10Main: return "MAIN10_MAIN"
        case .main42210bitHigh: return "MAIN_422_10BIT_HIGH"
        case .main42210bitMain: return "MAIN_422_10BIT_MAIN"
        case .main4228bitHigh: return "MAIN_422_8BIT_HIGH"
        case .main4228bitMain: return "MAIN_422_8BIT_MAIN"
        case .mainHigh: return "MAIN_HIGH"
        case .mainMain: return "MAIN_MAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265CodecProfile(rawValue: rawValue) ?? H265CodecProfile.sdkUnknown(rawValue)
    }
}
