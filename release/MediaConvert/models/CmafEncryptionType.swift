// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample (SAMPLE-AES) or AES_CTR (AES-CTR).
public enum CmafEncryptionType {
    case aesCtr
    case sampleAes
    case sdkUnknown(String)
}

extension CmafEncryptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafEncryptionType] {
        return [
            .aesCtr,
            .sampleAes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aesCtr: return "AES_CTR"
        case .sampleAes: return "SAMPLE_AES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafEncryptionType(rawValue: rawValue) ?? CmafEncryptionType.sdkUnknown(rawValue)
    }
}
