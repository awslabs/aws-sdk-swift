// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
public enum CmfcAudioTrackType {
    case alternateAudioAutoSelect
    case alternateAudioAutoSelectDefault
    case alternateAudioNotAutoSelect
    case sdkUnknown(String)
}

extension CmfcAudioTrackType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmfcAudioTrackType] {
        return [
            .alternateAudioAutoSelect,
            .alternateAudioAutoSelectDefault,
            .alternateAudioNotAutoSelect,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
        case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
        case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmfcAudioTrackType(rawValue: rawValue) ?? CmfcAudioTrackType.sdkUnknown(rawValue)
    }
}
