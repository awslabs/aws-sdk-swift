// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension M3u8Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioDuration = "audioDuration"
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case maxPcrInterval = "maxPcrInterval"
        case nielsenId3 = "nielsenId3"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case privateMetadataPid = "privateMetadataPid"
        case programNumber = "programNumber"
        case scte35Pid = "scte35Pid"
        case scte35Source = "scte35Source"
        case timedMetadata = "timedMetadata"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDuration = audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if audioFramesPerPes != 0 {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = audioPids {
            var audioPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioPids)
            for __listof__integermin32max81820 in audioPids {
                try audioPidsContainer.encode(__listof__integermin32max81820)
            }
        }
        if maxPcrInterval != 0 {
            try encodeContainer.encode(maxPcrInterval, forKey: .maxPcrInterval)
        }
        if let nielsenId3 = nielsenId3 {
            try encodeContainer.encode(nielsenId3.rawValue, forKey: .nielsenId3)
        }
        if patInterval != 0 {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if pcrPid != 0 {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if pmtInterval != 0 {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if pmtPid != 0 {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if privateMetadataPid != 0 {
            try encodeContainer.encode(privateMetadataPid, forKey: .privateMetadataPid)
        }
        if programNumber != 0 {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if scte35Pid != 0 {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let scte35Source = scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
        if let timedMetadata = timedMetadata {
            try encodeContainer.encode(timedMetadata.rawValue, forKey: .timedMetadata)
        }
        if timedMetadataPid != 0 {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if transportStreamId != 0 {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if videoPid != 0 {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationDecoded = try containerValues.decodeIfPresent(M3u8AudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioFramesPerPesDecoded = try containerValues.decode(Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsContainer = try containerValues.decodeIfPresent([Int].self, forKey: .audioPids)
        var audioPidsDecoded0:[Int]? = nil
        if let audioPidsContainer = audioPidsContainer {
            audioPidsDecoded0 = [Int]()
            for integer0 in audioPidsContainer {
                audioPidsDecoded0?.append(integer0)
            }
        }
        audioPids = audioPidsDecoded0
        let maxPcrIntervalDecoded = try containerValues.decode(Int.self, forKey: .maxPcrInterval)
        maxPcrInterval = maxPcrIntervalDecoded
        let nielsenId3Decoded = try containerValues.decodeIfPresent(M3u8NielsenId3.self, forKey: .nielsenId3)
        nielsenId3 = nielsenId3Decoded
        let patIntervalDecoded = try containerValues.decode(Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(M3u8PcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPidDecoded = try containerValues.decode(Int.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decode(Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decode(Int.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let privateMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .privateMetadataPid)
        privateMetadataPid = privateMetadataPidDecoded
        let programNumberDecoded = try containerValues.decode(Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let scte35PidDecoded = try containerValues.decode(Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(M3u8Scte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
        let timedMetadataDecoded = try containerValues.decodeIfPresent(TimedMetadata.self, forKey: .timedMetadata)
        timedMetadata = timedMetadataDecoded
        let timedMetadataPidDecoded = try containerValues.decode(Int.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decode(Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decode(Int.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}
