// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateQueueInputBody: Equatable {
    public let description: String?
    public let name: String?
    public let pricingPlan: PricingPlan?
    public let reservationPlanSettings: ReservationPlanSettings?
    public let status: QueueStatus?
    public let tags: [String:String]?
}

extension CreateQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case name = "name"
        case pricingPlan = "pricingPlan"
        case reservationPlanSettings = "reservationPlanSettings"
        case status = "status"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pricingPlanDecoded = try containerValues.decodeIfPresent(PricingPlan.self, forKey: .pricingPlan)
        pricingPlan = pricingPlanDecoded
        let reservationPlanSettingsDecoded = try containerValues.decodeIfPresent(ReservationPlanSettings.self, forKey: .reservationPlanSettings)
        reservationPlanSettings = reservationPlanSettingsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueueStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
