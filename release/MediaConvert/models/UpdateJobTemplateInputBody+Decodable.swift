// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateJobTemplateInputBody: Equatable {
    public let accelerationSettings: AccelerationSettings?
    public let category: String?
    public let description: String?
    public let hopDestinations: [HopDestination]?
    public let priority: Int
    public let queue: String?
    public let settings: JobTemplateSettings?
    public let statusUpdateInterval: StatusUpdateInterval?
}

extension UpdateJobTemplateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([HopDestination].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [HopDestination]()
            for structure0 in hopDestinationsContainer {
                hopDestinationsDecoded0?.append(structure0)
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queue)
        queue = queueDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(JobTemplateSettings.self, forKey: .settings)
        settings = settingsDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
    }
}
