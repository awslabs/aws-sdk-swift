// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to HLS_GROUP_SETTINGS.
public struct HlsGroupSettings: Equatable {
    /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
    public let adMarkers: [HlsAdMarkers]?
    /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
    public let additionalManifests: [HlsAdditionalManifest]?
    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
    public let audioOnlyHeader: HlsAudioOnlyHeader?
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    public let baseUrl: String?
    /// Language to be used on Caption outputs
    public let captionLanguageMappings: [HlsCaptionLanguageMapping]?
    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    public let captionLanguageSetting: HlsCaptionLanguageSetting?
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    public let clientCache: HlsClientCache?
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    public let codecSpecification: HlsCodecSpecification?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// Indicates whether segments should be placed in subdirectories.
    public let directoryStructure: HlsDirectoryStructure?
    /// DRM settings.
    public let encryption: HlsEncryptionSettings?
    /// When set to GZIP, compresses HLS playlist.
    public let manifestCompression: HlsManifestCompression?
    /// Indicates whether the output manifest should use floating point values for segment duration.
    public let manifestDurationFormat: HlsManifestDurationFormat?
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    public let minFinalSegmentLength: Double
    /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    public let minSegmentLength: Int
    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    public let outputSelection: HlsOutputSelection?
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    public let programDateTime: HlsProgramDateTime?
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    public let programDateTimePeriod: Int
    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    public let segmentControl: HlsSegmentControl?
    /// Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
    public let segmentLength: Int
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
    public let segmentsPerSubdirectory: Int
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    public let streamInfResolution: HlsStreamInfResolution?
    /// Indicates ID3 frame that has the timecode.
    public let timedMetadataId3Frame: HlsTimedMetadataId3Frame?
    /// Timed Metadata interval in seconds.
    public let timedMetadataId3Period: Int
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    public let timestampDeltaMilliseconds: Int

    public init (
        adMarkers: [HlsAdMarkers]? = nil,
        additionalManifests: [HlsAdditionalManifest]? = nil,
        audioOnlyHeader: HlsAudioOnlyHeader? = nil,
        baseUrl: String? = nil,
        captionLanguageMappings: [HlsCaptionLanguageMapping]? = nil,
        captionLanguageSetting: HlsCaptionLanguageSetting? = nil,
        clientCache: HlsClientCache? = nil,
        codecSpecification: HlsCodecSpecification? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        directoryStructure: HlsDirectoryStructure? = nil,
        encryption: HlsEncryptionSettings? = nil,
        manifestCompression: HlsManifestCompression? = nil,
        manifestDurationFormat: HlsManifestDurationFormat? = nil,
        minFinalSegmentLength: Double = 0.0,
        minSegmentLength: Int = 0,
        outputSelection: HlsOutputSelection? = nil,
        programDateTime: HlsProgramDateTime? = nil,
        programDateTimePeriod: Int = 0,
        segmentControl: HlsSegmentControl? = nil,
        segmentLength: Int = 0,
        segmentsPerSubdirectory: Int = 0,
        streamInfResolution: HlsStreamInfResolution? = nil,
        timedMetadataId3Frame: HlsTimedMetadataId3Frame? = nil,
        timedMetadataId3Period: Int = 0,
        timestampDeltaMilliseconds: Int = 0
    )
    {
        self.adMarkers = adMarkers
        self.additionalManifests = additionalManifests
        self.audioOnlyHeader = audioOnlyHeader
        self.baseUrl = baseUrl
        self.captionLanguageMappings = captionLanguageMappings
        self.captionLanguageSetting = captionLanguageSetting
        self.clientCache = clientCache
        self.codecSpecification = codecSpecification
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.directoryStructure = directoryStructure
        self.encryption = encryption
        self.manifestCompression = manifestCompression
        self.manifestDurationFormat = manifestDurationFormat
        self.minFinalSegmentLength = minFinalSegmentLength
        self.minSegmentLength = minSegmentLength
        self.outputSelection = outputSelection
        self.programDateTime = programDateTime
        self.programDateTimePeriod = programDateTimePeriod
        self.segmentControl = segmentControl
        self.segmentLength = segmentLength
        self.segmentsPerSubdirectory = segmentsPerSubdirectory
        self.streamInfResolution = streamInfResolution
        self.timedMetadataId3Frame = timedMetadataId3Frame
        self.timedMetadataId3Period = timedMetadataId3Period
        self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
    }
}
