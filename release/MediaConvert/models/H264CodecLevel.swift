// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto (AUTO).
public enum H264CodecLevel {
    case auto
    case level1
    case level11
    case level12
    case level13
    case level2
    case level21
    case level22
    case level3
    case level31
    case level32
    case level4
    case level41
    case level42
    case level5
    case level51
    case level52
    case sdkUnknown(String)
}

extension H264CodecLevel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H264CodecLevel] {
        return [
            .auto,
            .level1,
            .level11,
            .level12,
            .level13,
            .level2,
            .level21,
            .level22,
            .level3,
            .level31,
            .level32,
            .level4,
            .level41,
            .level42,
            .level5,
            .level51,
            .level52,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auto: return "AUTO"
        case .level1: return "LEVEL_1"
        case .level11: return "LEVEL_1_1"
        case .level12: return "LEVEL_1_2"
        case .level13: return "LEVEL_1_3"
        case .level2: return "LEVEL_2"
        case .level21: return "LEVEL_2_1"
        case .level22: return "LEVEL_2_2"
        case .level3: return "LEVEL_3"
        case .level31: return "LEVEL_3_1"
        case .level32: return "LEVEL_3_2"
        case .level4: return "LEVEL_4"
        case .level41: return "LEVEL_4_1"
        case .level42: return "LEVEL_4_2"
        case .level5: return "LEVEL_5"
        case .level51: return "LEVEL_5_1"
        case .level52: return "LEVEL_5_2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H264CodecLevel(rawValue: rawValue) ?? H264CodecLevel.sdkUnknown(rawValue)
    }
}
