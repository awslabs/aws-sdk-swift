// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off (OFF).
public enum H265FlickerAdaptiveQuantization {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension H265FlickerAdaptiveQuantization : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [H265FlickerAdaptiveQuantization] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = H265FlickerAdaptiveQuantization(rawValue: rawValue) ?? H265FlickerAdaptiveQuantization.sdkUnknown(rawValue)
    }
}
