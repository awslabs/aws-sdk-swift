// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Mp3Settings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bitrate = "bitrate"
        case channels = "channels"
        case rateControlMode = "rateControlMode"
        case sampleRate = "sampleRate"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bitrate != 0 {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if channels != 0 {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if sampleRate != 0 {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if vbrQuality != 0 {
            try encodeContainer.encode(vbrQuality, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decode(Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let channelsDecoded = try containerValues.decode(Int.self, forKey: .channels)
        channels = channelsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(Mp3RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let sampleRateDecoded = try containerValues.decode(Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let vbrQualityDecoded = try containerValues.decode(Int.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}
