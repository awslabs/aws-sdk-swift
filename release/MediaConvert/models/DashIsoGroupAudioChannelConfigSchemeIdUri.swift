// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration (MPEG_CHANNEL_CONFIGURATION), to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration (DOLBY_CHANNEL_CONFIGURATION) to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
public enum DashIsoGroupAudioChannelConfigSchemeIdUri {
    case dolbyChannelConfiguration
    case mpegChannelConfiguration
    case sdkUnknown(String)
}

extension DashIsoGroupAudioChannelConfigSchemeIdUri : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DashIsoGroupAudioChannelConfigSchemeIdUri] {
        return [
            .dolbyChannelConfiguration,
            .mpegChannelConfiguration,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dolbyChannelConfiguration: return "DOLBY_CHANNEL_CONFIGURATION"
        case .mpegChannelConfiguration: return "MPEG_CHANNEL_CONFIGURATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DashIsoGroupAudioChannelConfigSchemeIdUri(rawValue: rawValue) ?? DashIsoGroupAudioChannelConfigSchemeIdUri.sdkUnknown(rawValue)
    }
}
