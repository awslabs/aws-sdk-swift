// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimecodeBurnin: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fontSize = "fontSize"
        case position = "position"
        case prefix = "prefix"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fontSize != 0 {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let position = position {
            try encodeContainer.encode(position.rawValue, forKey: .position)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fontSizeDecoded = try containerValues.decode(Int.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let positionDecoded = try containerValues.decodeIfPresent(TimecodeBurninPosition.self, forKey: .position)
        position = positionDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}
