// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3DestinationSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessControl = "accessControl"
        case encryption = "encryption"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControl = accessControl {
            try encodeContainer.encode(accessControl, forKey: .accessControl)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlDecoded = try containerValues.decodeIfPresent(S3DestinationAccessControl.self, forKey: .accessControl)
        accessControl = accessControlDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(S3EncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}
