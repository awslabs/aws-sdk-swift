// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Deinterlacer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithm = "algorithm"
        case control = "control"
        case mode = "mode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let control = control {
            try encodeContainer.encode(control.rawValue, forKey: .control)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(DeinterlaceAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let controlDecoded = try containerValues.decodeIfPresent(DeinterlacerControl.self, forKey: .control)
        control = controlDecoded
        let modeDecoded = try containerValues.decodeIfPresent(DeinterlacerMode.self, forKey: .mode)
        mode = modeDecoded
    }
}
