// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DolbyVision: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case l6Metadata = "l6Metadata"
        case l6Mode = "l6Mode"
        case profile = "profile"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let l6Metadata = l6Metadata {
            try encodeContainer.encode(l6Metadata, forKey: .l6Metadata)
        }
        if let l6Mode = l6Mode {
            try encodeContainer.encode(l6Mode.rawValue, forKey: .l6Mode)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let l6MetadataDecoded = try containerValues.decodeIfPresent(DolbyVisionLevel6Metadata.self, forKey: .l6Metadata)
        l6Metadata = l6MetadataDecoded
        let l6ModeDecoded = try containerValues.decodeIfPresent(DolbyVisionLevel6Mode.self, forKey: .l6Mode)
        l6Mode = l6ModeDecoded
        let profileDecoded = try containerValues.decodeIfPresent(DolbyVisionProfile.self, forKey: .profile)
        profile = profileDecoded
    }
}
