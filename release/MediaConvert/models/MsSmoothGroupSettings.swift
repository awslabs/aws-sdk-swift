// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to MS_SMOOTH_GROUP_SETTINGS.
public struct MsSmoothGroupSettings: Equatable {
    /// By default, the service creates one .ism Microsoft Smooth Streaming manifest for each Microsoft Smooth Streaming output group in your job. This default manifest references every output in the output group. To create additional manifests that reference a subset of the outputs in the output group, specify a list of them here.
    public let additionalManifests: [MsSmoothAdditionalManifest]?
    /// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
    public let audioDeduplication: MsSmoothAudioDeduplication?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// If you are using DRM, set DRM System (MsSmoothEncryptionSettings) to specify the value SpekeKeyProvider.
    public let encryption: MsSmoothEncryptionSettings?
    /// Use Fragment length (FragmentLength) to specify the mp4 fragment sizes in seconds. Fragment length must be compatible with GOP size and frame rate.
    public let fragmentLength: Int
    /// Use Manifest encoding (MsSmoothManifestEncoding) to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
    public let manifestEncoding: MsSmoothManifestEncoding?

    public init (
        additionalManifests: [MsSmoothAdditionalManifest]? = nil,
        audioDeduplication: MsSmoothAudioDeduplication? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        encryption: MsSmoothEncryptionSettings? = nil,
        fragmentLength: Int = 0,
        manifestEncoding: MsSmoothManifestEncoding? = nil
    )
    {
        self.additionalManifests = additionalManifests
        self.audioDeduplication = audioDeduplication
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.encryption = encryption
        self.fragmentLength = fragmentLength
        self.manifestEncoding = manifestEncoding
    }
}
