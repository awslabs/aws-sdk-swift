// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
public enum Av1FramerateConversionAlgorithm {
    case duplicateDrop
    case frameformer
    case interpolate
    case sdkUnknown(String)
}

extension Av1FramerateConversionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Av1FramerateConversionAlgorithm] {
        return [
            .duplicateDrop,
            .frameformer,
            .interpolate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateDrop: return "DUPLICATE_DROP"
        case .frameformer: return "FRAMEFORMER"
        case .interpolate: return "INTERPOLATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Av1FramerateConversionAlgorithm(rawValue: rawValue) ?? Av1FramerateConversionAlgorithm.sdkUnknown(rawValue)
    }
}
