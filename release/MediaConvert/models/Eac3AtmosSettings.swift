// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3_ATMOS.
public struct Eac3AtmosSettings: Equatable {
    /// Specify the average bitrate in bits per second.
    /// Valid values: 384k, 448k, 640k, 768k
    public let bitrate: Int
    /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public let bitstreamMode: Eac3AtmosBitstreamMode?
    /// The coding mode for Dolby Digital Plus JOC (Atmos) is always 9.1.6 (CODING_MODE_9_1_6).
    public let codingMode: Eac3AtmosCodingMode?
    /// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
    public let dialogueIntelligence: Eac3AtmosDialogueIntelligence?
    /// Specify the absolute peak level for a signal with dynamic range compression.
    public let dynamicRangeCompressionLine: Eac3AtmosDynamicRangeCompressionLine?
    /// Specify how the service limits the audio dynamic range when compressing the audio.
    public let dynamicRangeCompressionRf: Eac3AtmosDynamicRangeCompressionRf?
    /// Specify a value for the following Dolby Atmos setting: Left only/Right only center mix
    /// (Lo/Ro center). MediaConvert uses this value for downmixing. How the service uses this
    /// value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix).
    /// Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0.
    public let loRoCenterMixLevel: Double
    /// Specify a value for the following Dolby Atmos setting: Left only/Right only (Lo/Ro surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel.
    public let loRoSurroundMixLevel: Double
    /// Specify a value for the following Dolby Atmos setting: Left total/Right total center mix (Lt/Rt center). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0.
    public let ltRtCenterMixLevel: Double
    /// Specify a value for the following Dolby Atmos setting: Left total/Right total surround mix (Lt/Rt surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel.
    public let ltRtSurroundMixLevel: Double
    /// Choose how the service meters the loudness of your audio.
    public let meteringMode: Eac3AtmosMeteringMode?
    /// This value is always 48000. It represents the sample rate in Hz.
    public let sampleRate: Int
    /// Specify the percentage of audio content that must be speech before the encoder uses the measured speech loudness as the overall program loudness.
    public let speechThreshold: Int
    /// Choose how the service does stereo downmixing.
    public let stereoDownmix: Eac3AtmosStereoDownmix?
    /// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
    public let surroundExMode: Eac3AtmosSurroundExMode?

    public init (
        bitrate: Int = 0,
        bitstreamMode: Eac3AtmosBitstreamMode? = nil,
        codingMode: Eac3AtmosCodingMode? = nil,
        dialogueIntelligence: Eac3AtmosDialogueIntelligence? = nil,
        dynamicRangeCompressionLine: Eac3AtmosDynamicRangeCompressionLine? = nil,
        dynamicRangeCompressionRf: Eac3AtmosDynamicRangeCompressionRf? = nil,
        loRoCenterMixLevel: Double = 0.0,
        loRoSurroundMixLevel: Double = 0.0,
        ltRtCenterMixLevel: Double = 0.0,
        ltRtSurroundMixLevel: Double = 0.0,
        meteringMode: Eac3AtmosMeteringMode? = nil,
        sampleRate: Int = 0,
        speechThreshold: Int = 0,
        stereoDownmix: Eac3AtmosStereoDownmix? = nil,
        surroundExMode: Eac3AtmosSurroundExMode? = nil
    )
    {
        self.bitrate = bitrate
        self.bitstreamMode = bitstreamMode
        self.codingMode = codingMode
        self.dialogueIntelligence = dialogueIntelligence
        self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
        self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
        self.loRoCenterMixLevel = loRoCenterMixLevel
        self.loRoSurroundMixLevel = loRoSurroundMixLevel
        self.ltRtCenterMixLevel = ltRtCenterMixLevel
        self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
        self.meteringMode = meteringMode
        self.sampleRate = sampleRate
        self.speechThreshold = speechThreshold
        self.stereoDownmix = stereoDownmix
        self.surroundExMode = surroundExMode
    }
}
