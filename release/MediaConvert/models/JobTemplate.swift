// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
public struct JobTemplate: Equatable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    public let accelerationSettings: AccelerationSettings?
    /// An identifier for this resource that is unique within all of AWS.
    public let arn: String?
    /// An optional category you create to organize your job templates.
    public let category: String?
    /// The timestamp in epoch seconds for Job template creation.
    public let createdAt: Date?
    /// An optional description you create for each job template.
    public let description: String?
    /// Optional list of hop destinations.
    public let hopDestinations: [HopDestination]?
    /// The timestamp in epoch seconds when the Job template was last updated.
    public let lastUpdated: Date?
    /// A name you create for each job template. Each name must be unique within your account.
    public let name: String?
    /// Relative priority on the job.
    public let priority: Int
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    public let queue: String?
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    public let settings: JobTemplateSettings?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public let statusUpdateInterval: StatusUpdateInterval?
    /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
    public let type: `Type`?

    public init (
        accelerationSettings: AccelerationSettings? = nil,
        arn: String? = nil,
        category: String? = nil,
        createdAt: Date? = nil,
        description: String? = nil,
        hopDestinations: [HopDestination]? = nil,
        lastUpdated: Date? = nil,
        name: String? = nil,
        priority: Int = 0,
        queue: String? = nil,
        settings: JobTemplateSettings? = nil,
        statusUpdateInterval: StatusUpdateInterval? = nil,
        type: `Type`? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.arn = arn
        self.category = category
        self.createdAt = createdAt
        self.description = description
        self.hopDestinations = hopDestinations
        self.lastUpdated = lastUpdated
        self.name = name
        self.priority = priority
        self.queue = queue
        self.settings = settings
        self.statusUpdateInterval = statusUpdateInterval
        self.type = type
    }
}
