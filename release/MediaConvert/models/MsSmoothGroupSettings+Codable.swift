// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MsSmoothGroupSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalManifests = "additionalManifests"
        case audioDeduplication = "audioDeduplication"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case encryption = "encryption"
        case fragmentLength = "fragmentLength"
        case manifestEncoding = "manifestEncoding"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofmssmoothadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofmssmoothadditionalmanifest0)
            }
        }
        if let audioDeduplication = audioDeduplication {
            try encodeContainer.encode(audioDeduplication.rawValue, forKey: .audioDeduplication)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if fragmentLength != 0 {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let manifestEncoding = manifestEncoding {
            try encodeContainer.encode(manifestEncoding.rawValue, forKey: .manifestEncoding)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalManifestsContainer = try containerValues.decodeIfPresent([MsSmoothAdditionalManifest].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[MsSmoothAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [MsSmoothAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                additionalManifestsDecoded0?.append(structure0)
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let audioDeduplicationDecoded = try containerValues.decodeIfPresent(MsSmoothAudioDeduplication.self, forKey: .audioDeduplication)
        audioDeduplication = audioDeduplicationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MsSmoothEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let fragmentLengthDecoded = try containerValues.decode(Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let manifestEncodingDecoded = try containerValues.decodeIfPresent(MsSmoothManifestEncoding.self, forKey: .manifestEncoding)
        manifestEncoding = manifestEncodingDecoded
    }
}
