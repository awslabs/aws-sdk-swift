// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
public enum AudioCodec {
    case aac
    case ac3
    case aiff
    case eac3
    case eac3Atmos
    case mp2
    case mp3
    case opus
    case passthrough
    case vorbis
    case wav
    case sdkUnknown(String)
}

extension AudioCodec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AudioCodec] {
        return [
            .aac,
            .ac3,
            .aiff,
            .eac3,
            .eac3Atmos,
            .mp2,
            .mp3,
            .opus,
            .passthrough,
            .vorbis,
            .wav,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aac: return "AAC"
        case .ac3: return "AC3"
        case .aiff: return "AIFF"
        case .eac3: return "EAC3"
        case .eac3Atmos: return "EAC3_ATMOS"
        case .mp2: return "MP2"
        case .mp3: return "MP3"
        case .opus: return "OPUS"
        case .passthrough: return "PASSTHROUGH"
        case .vorbis: return "VORBIS"
        case .wav: return "WAV"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AudioCodec(rawValue: rawValue) ?? AudioCodec.sdkUnknown(rawValue)
    }
}
