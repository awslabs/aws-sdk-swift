// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VideoCodecSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case av1Settings = "av1Settings"
        case avcIntraSettings = "avcIntraSettings"
        case codec = "codec"
        case frameCaptureSettings = "frameCaptureSettings"
        case h264Settings = "h264Settings"
        case h265Settings = "h265Settings"
        case mpeg2Settings = "mpeg2Settings"
        case proresSettings = "proresSettings"
        case vc3Settings = "vc3Settings"
        case vp8Settings = "vp8Settings"
        case vp9Settings = "vp9Settings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let av1Settings = av1Settings {
            try encodeContainer.encode(av1Settings, forKey: .av1Settings)
        }
        if let avcIntraSettings = avcIntraSettings {
            try encodeContainer.encode(avcIntraSettings, forKey: .avcIntraSettings)
        }
        if let codec = codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let frameCaptureSettings = frameCaptureSettings {
            try encodeContainer.encode(frameCaptureSettings, forKey: .frameCaptureSettings)
        }
        if let h264Settings = h264Settings {
            try encodeContainer.encode(h264Settings, forKey: .h264Settings)
        }
        if let h265Settings = h265Settings {
            try encodeContainer.encode(h265Settings, forKey: .h265Settings)
        }
        if let mpeg2Settings = mpeg2Settings {
            try encodeContainer.encode(mpeg2Settings, forKey: .mpeg2Settings)
        }
        if let proresSettings = proresSettings {
            try encodeContainer.encode(proresSettings, forKey: .proresSettings)
        }
        if let vc3Settings = vc3Settings {
            try encodeContainer.encode(vc3Settings, forKey: .vc3Settings)
        }
        if let vp8Settings = vp8Settings {
            try encodeContainer.encode(vp8Settings, forKey: .vp8Settings)
        }
        if let vp9Settings = vp9Settings {
            try encodeContainer.encode(vp9Settings, forKey: .vp9Settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let av1SettingsDecoded = try containerValues.decodeIfPresent(Av1Settings.self, forKey: .av1Settings)
        av1Settings = av1SettingsDecoded
        let avcIntraSettingsDecoded = try containerValues.decodeIfPresent(AvcIntraSettings.self, forKey: .avcIntraSettings)
        avcIntraSettings = avcIntraSettingsDecoded
        let codecDecoded = try containerValues.decodeIfPresent(VideoCodec.self, forKey: .codec)
        codec = codecDecoded
        let frameCaptureSettingsDecoded = try containerValues.decodeIfPresent(FrameCaptureSettings.self, forKey: .frameCaptureSettings)
        frameCaptureSettings = frameCaptureSettingsDecoded
        let h264SettingsDecoded = try containerValues.decodeIfPresent(H264Settings.self, forKey: .h264Settings)
        h264Settings = h264SettingsDecoded
        let h265SettingsDecoded = try containerValues.decodeIfPresent(H265Settings.self, forKey: .h265Settings)
        h265Settings = h265SettingsDecoded
        let mpeg2SettingsDecoded = try containerValues.decodeIfPresent(Mpeg2Settings.self, forKey: .mpeg2Settings)
        mpeg2Settings = mpeg2SettingsDecoded
        let proresSettingsDecoded = try containerValues.decodeIfPresent(ProresSettings.self, forKey: .proresSettings)
        proresSettings = proresSettingsDecoded
        let vc3SettingsDecoded = try containerValues.decodeIfPresent(Vc3Settings.self, forKey: .vc3Settings)
        vc3Settings = vc3SettingsDecoded
        let vp8SettingsDecoded = try containerValues.decodeIfPresent(Vp8Settings.self, forKey: .vp8Settings)
        vp8Settings = vp8SettingsDecoded
        let vp9SettingsDecoded = try containerValues.decodeIfPresent(Vp9Settings.self, forKey: .vp9Settings)
        vp9Settings = vp9SettingsDecoded
    }
}
