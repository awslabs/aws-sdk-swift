// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Note that your choice of video output container constrains your choice of output captions format. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/captions-support-tables.html. If you are using SCTE-20 and you want to create an output that complies with the SCTE-43 spec, choose SCTE-20 plus embedded (SCTE20_PLUS_EMBEDDED). To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20 (EMBEDDED_PLUS_SCTE20).
public enum CaptionDestinationType {
    case burnIn
    case dvbSub
    case embedded
    case embeddedPlusScte20
    case imsc
    case scc
    case scte20PlusEmbedded
    case smi
    case srt
    case teletext
    case ttml
    case webvtt
    case sdkUnknown(String)
}

extension CaptionDestinationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CaptionDestinationType] {
        return [
            .burnIn,
            .dvbSub,
            .embedded,
            .embeddedPlusScte20,
            .imsc,
            .scc,
            .scte20PlusEmbedded,
            .smi,
            .srt,
            .teletext,
            .ttml,
            .webvtt,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .burnIn: return "BURN_IN"
        case .dvbSub: return "DVB_SUB"
        case .embedded: return "EMBEDDED"
        case .embeddedPlusScte20: return "EMBEDDED_PLUS_SCTE20"
        case .imsc: return "IMSC"
        case .scc: return "SCC"
        case .scte20PlusEmbedded: return "SCTE20_PLUS_EMBEDDED"
        case .smi: return "SMI"
        case .srt: return "SRT"
        case .teletext: return "TELETEXT"
        case .ttml: return "TTML"
        case .webvtt: return "WEBVTT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CaptionDestinationType(rawValue: rawValue) ?? CaptionDestinationType.sdkUnknown(rawValue)
    }
}
