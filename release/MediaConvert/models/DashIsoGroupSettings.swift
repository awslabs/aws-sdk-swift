// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Settings related to your DASH output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to DASH_ISO_GROUP_SETTINGS.
public struct DashIsoGroupSettings: Equatable {
    /// By default, the service creates one .mpd DASH manifest for each DASH ISO output group in your job. This default manifest references every output in the output group. To create additional DASH manifests that reference a subset of the outputs in the output group, specify a list of them here.
    public let additionalManifests: [DashAdditionalManifest]?
    /// Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration (MPEG_CHANNEL_CONFIGURATION), to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration (DOLBY_CHANNEL_CONFIGURATION) to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
    public let audioChannelConfigSchemeIdUri: DashIsoGroupAudioChannelConfigSchemeIdUri?
    /// A partial URI prefix that will be put in the manifest (.mpd) file at the top level BaseURL element. Can be used if streams are delivered from a different URL than the manifest file.
    public let baseUrl: String?
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    public let destination: String?
    /// Settings associated with the destination. Will vary based on the type of destination
    public let destinationSettings: DestinationSettings?
    /// DRM settings.
    public let encryption: DashIsoEncryptionSettings?
    /// Length of fragments to generate (in seconds). Fragment length must be compatible with GOP size and Framerate. Note that fragments will end on the next keyframe after this number of seconds, so actual fragment length may be longer. When Emit Single File is checked, the fragmentation is internal to a single output file and it does not cause the creation of many output files as in other output types.
    public let fragmentLength: Int
    /// Supports HbbTV specification as indicated
    public let hbbtvCompliance: DashIsoHbbtvCompliance?
    /// Minimum time of initially buffered media that is needed to ensure smooth playout.
    public let minBufferTime: Int
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    public let minFinalSegmentLength: Double
    /// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
    public let mpdProfile: DashIsoMpdProfile?
    /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
    public let ptsOffsetHandlingForBFrames: DashIsoPtsOffsetHandlingForBFrames?
    /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
    public let segmentControl: DashIsoSegmentControl?
    /// Length of mpd segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer. When Emit Single File is checked, the segmentation is internal to a single output file and it does not cause the creation of many output files as in other output types.
    public let segmentLength: Int
    /// If you get an HTTP error in the 400 range when you play back your DASH output, enable this setting and run your transcoding job again. When you enable this setting, the service writes precise segment durations in the DASH manifest. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When you don't enable this setting, the service writes approximate segment durations in your DASH manifest.
    public let writeSegmentTimelineInRepresentation: DashIsoWriteSegmentTimelineInRepresentation?

    public init (
        additionalManifests: [DashAdditionalManifest]? = nil,
        audioChannelConfigSchemeIdUri: DashIsoGroupAudioChannelConfigSchemeIdUri? = nil,
        baseUrl: String? = nil,
        destination: String? = nil,
        destinationSettings: DestinationSettings? = nil,
        encryption: DashIsoEncryptionSettings? = nil,
        fragmentLength: Int = 0,
        hbbtvCompliance: DashIsoHbbtvCompliance? = nil,
        minBufferTime: Int = 0,
        minFinalSegmentLength: Double = 0.0,
        mpdProfile: DashIsoMpdProfile? = nil,
        ptsOffsetHandlingForBFrames: DashIsoPtsOffsetHandlingForBFrames? = nil,
        segmentControl: DashIsoSegmentControl? = nil,
        segmentLength: Int = 0,
        writeSegmentTimelineInRepresentation: DashIsoWriteSegmentTimelineInRepresentation? = nil
    )
    {
        self.additionalManifests = additionalManifests
        self.audioChannelConfigSchemeIdUri = audioChannelConfigSchemeIdUri
        self.baseUrl = baseUrl
        self.destination = destination
        self.destinationSettings = destinationSettings
        self.encryption = encryption
        self.fragmentLength = fragmentLength
        self.hbbtvCompliance = hbbtvCompliance
        self.minBufferTime = minBufferTime
        self.minFinalSegmentLength = minFinalSegmentLength
        self.mpdProfile = mpdProfile
        self.ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames
        self.segmentControl = segmentControl
        self.segmentLength = segmentLength
        self.writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation
    }
}
