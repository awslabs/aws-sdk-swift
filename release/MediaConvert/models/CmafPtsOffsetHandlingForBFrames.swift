// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
public enum CmafPtsOffsetHandlingForBFrames {
    case matchInitialPts
    case zeroBased
    case sdkUnknown(String)
}

extension CmafPtsOffsetHandlingForBFrames : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CmafPtsOffsetHandlingForBFrames] {
        return [
            .matchInitialPts,
            .zeroBased,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .matchInitialPts: return "MATCH_INITIAL_PTS"
        case .zeroBased: return "ZERO_BASED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CmafPtsOffsetHandlingForBFrames(rawValue: rawValue) ?? CmafPtsOffsetHandlingForBFrames.sdkUnknown(rawValue)
    }
}
