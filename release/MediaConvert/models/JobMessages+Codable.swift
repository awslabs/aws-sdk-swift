// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobMessages: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case info = "info"
        case warning = "warning"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let info = info {
            var infoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .info)
            for __listof__string0 in info {
                try infoContainer.encode(__listof__string0)
            }
        }
        if let warning = warning {
            var warningContainer = encodeContainer.nestedUnkeyedContainer(forKey: .warning)
            for __listof__string0 in warning {
                try warningContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let infoContainer = try containerValues.decodeIfPresent([String].self, forKey: .info)
        var infoDecoded0:[String]? = nil
        if let infoContainer = infoContainer {
            infoDecoded0 = [String]()
            for string0 in infoContainer {
                infoDecoded0?.append(string0)
            }
        }
        info = infoDecoded0
        let warningContainer = try containerValues.decodeIfPresent([String].self, forKey: .warning)
        var warningDecoded0:[String]? = nil
        if let warningContainer = warningContainer {
            warningDecoded0 = [String]()
            for string0 in warningContainer {
                warningDecoded0?.append(string0)
            }
        }
        warning = warningDecoded0
    }
}
