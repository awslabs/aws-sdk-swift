// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputDecryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decryptionMode = "decryptionMode"
        case encryptedDecryptionKey = "encryptedDecryptionKey"
        case initializationVector = "initializationVector"
        case kmsKeyRegion = "kmsKeyRegion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decryptionMode = decryptionMode {
            try encodeContainer.encode(decryptionMode.rawValue, forKey: .decryptionMode)
        }
        if let encryptedDecryptionKey = encryptedDecryptionKey {
            try encodeContainer.encode(encryptedDecryptionKey, forKey: .encryptedDecryptionKey)
        }
        if let initializationVector = initializationVector {
            try encodeContainer.encode(initializationVector, forKey: .initializationVector)
        }
        if let kmsKeyRegion = kmsKeyRegion {
            try encodeContainer.encode(kmsKeyRegion, forKey: .kmsKeyRegion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decryptionModeDecoded = try containerValues.decodeIfPresent(DecryptionMode.self, forKey: .decryptionMode)
        decryptionMode = decryptionModeDecoded
        let encryptedDecryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptedDecryptionKey)
        encryptedDecryptionKey = encryptedDecryptionKeyDecoded
        let initializationVectorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .initializationVector)
        initializationVector = initializationVectorDecoded
        let kmsKeyRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyRegion)
        kmsKeyRegion = kmsKeyRegionDecoded
    }
}
