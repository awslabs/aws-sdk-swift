// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HlsSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioGroupId = "audioGroupId"
        case audioOnlyContainer = "audioOnlyContainer"
        case audioRenditionSets = "audioRenditionSets"
        case audioTrackType = "audioTrackType"
        case descriptiveVideoServiceFlag = "descriptiveVideoServiceFlag"
        case iFrameOnlyManifest = "iFrameOnlyManifest"
        case segmentModifier = "segmentModifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioGroupId = audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioOnlyContainer = audioOnlyContainer {
            try encodeContainer.encode(audioOnlyContainer.rawValue, forKey: .audioOnlyContainer)
        }
        if let audioRenditionSets = audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let audioTrackType = audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let descriptiveVideoServiceFlag = descriptiveVideoServiceFlag {
            try encodeContainer.encode(descriptiveVideoServiceFlag.rawValue, forKey: .descriptiveVideoServiceFlag)
        }
        if let iFrameOnlyManifest = iFrameOnlyManifest {
            try encodeContainer.encode(iFrameOnlyManifest.rawValue, forKey: .iFrameOnlyManifest)
        }
        if let segmentModifier = segmentModifier {
            try encodeContainer.encode(segmentModifier, forKey: .segmentModifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioOnlyContainerDecoded = try containerValues.decodeIfPresent(HlsAudioOnlyContainer.self, forKey: .audioOnlyContainer)
        audioOnlyContainer = audioOnlyContainerDecoded
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(HlsAudioTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let descriptiveVideoServiceFlagDecoded = try containerValues.decodeIfPresent(HlsDescriptiveVideoServiceFlag.self, forKey: .descriptiveVideoServiceFlag)
        descriptiveVideoServiceFlag = descriptiveVideoServiceFlagDecoded
        let iFrameOnlyManifestDecoded = try containerValues.decodeIfPresent(HlsIFrameOnlyManifest.self, forKey: .iFrameOnlyManifest)
        iFrameOnlyManifest = iFrameOnlyManifestDecoded
        let segmentModifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .segmentModifier)
        segmentModifier = segmentModifierDecoded
    }
}
