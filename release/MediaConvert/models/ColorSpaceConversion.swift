// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses Elemental tone mapping technology to approximate the outcome of manually regrading from HDR to SDR.
public enum ColorSpaceConversion {
    case force601
    case force709
    case forceHdr10
    case forceHlg2020
    case `none`
    case sdkUnknown(String)
}

extension ColorSpaceConversion : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ColorSpaceConversion] {
        return [
            .force601,
            .force709,
            .forceHdr10,
            .forceHlg2020,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .force601: return "FORCE_601"
        case .force709: return "FORCE_709"
        case .forceHdr10: return "FORCE_HDR10"
        case .forceHlg2020: return "FORCE_HLG_2020"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ColorSpaceConversion(rawValue: rawValue) ?? ColorSpaceConversion.sdkUnknown(rawValue)
    }
}
