// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
public struct M3u8Settings: Equatable {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public let audioDuration: M3u8AudioDuration?
    /// The number of audio frames to insert for each PES packet.
    public let audioFramesPerPes: Int
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    public let audioPids: [Int]?
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    public let maxPcrInterval: Int
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public let nielsenId3: M3u8NielsenId3?
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let patInterval: Int
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    public let pcrControl: M3u8PcrControl?
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    public let pcrPid: Int
    /// The number of milliseconds between instances of this table in the output transport stream.
    public let pmtInterval: Int
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    public let pmtPid: Int
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    public let privateMetadataPid: Int
    /// The value of the program number field in the Program Map Table.
    public let programNumber: Int
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    public let scte35Pid: Int
    /// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE) if you don't want manifest conditioning. Choose Passthrough (PASSTHROUGH) and choose Ad markers (adMarkers) if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml).
    public let scte35Source: M3u8Scte35Source?
    /// Applies only to HLS outputs. Use this setting to specify whether the service inserts the ID3 timed metadata from the input in this output.
    public let timedMetadata: TimedMetadata?
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream.
    public let timedMetadataPid: Int
    /// The value of the transport stream ID field in the Program Map Table.
    public let transportStreamId: Int
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    public let videoPid: Int

    public init (
        audioDuration: M3u8AudioDuration? = nil,
        audioFramesPerPes: Int = 0,
        audioPids: [Int]? = nil,
        maxPcrInterval: Int = 0,
        nielsenId3: M3u8NielsenId3? = nil,
        patInterval: Int = 0,
        pcrControl: M3u8PcrControl? = nil,
        pcrPid: Int = 0,
        pmtInterval: Int = 0,
        pmtPid: Int = 0,
        privateMetadataPid: Int = 0,
        programNumber: Int = 0,
        scte35Pid: Int = 0,
        scte35Source: M3u8Scte35Source? = nil,
        timedMetadata: TimedMetadata? = nil,
        timedMetadataPid: Int = 0,
        transportStreamId: Int = 0,
        videoPid: Int = 0
    )
    {
        self.audioDuration = audioDuration
        self.audioFramesPerPes = audioFramesPerPes
        self.audioPids = audioPids
        self.maxPcrInterval = maxPcrInterval
        self.nielsenId3 = nielsenId3
        self.patInterval = patInterval
        self.pcrControl = pcrControl
        self.pcrPid = pcrPid
        self.pmtInterval = pmtInterval
        self.pmtPid = pmtPid
        self.privateMetadataPid = privateMetadataPid
        self.programNumber = programNumber
        self.scte35Pid = scte35Pid
        self.scte35Source = scte35Source
        self.timedMetadata = timedMetadata
        self.timedMetadataPid = timedMetadataPid
        self.transportStreamId = transportStreamId
        self.videoPid = videoPid
    }
}
