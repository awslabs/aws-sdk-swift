// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetPersonalizedRankingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case campaignArn
        case context
        case filterArn
        case filterValues
        case inputList
        case userId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignArn = campaignArn {
            try encodeContainer.encode(campaignArn, forKey: .campaignArn)
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .context)
            for (dictKey0, context0) in context {
                try contextContainer.encode(context0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let filterArn = filterArn {
            try encodeContainer.encode(filterArn, forKey: .filterArn)
        }
        if let filterValues = filterValues {
            var filterValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .filterValues)
            for (dictKey0, filtervalues0) in filterValues {
                try filterValuesContainer.encode(filtervalues0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let inputList = inputList {
            var inputListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputList)
            for inputlist0 in inputList {
                try inputListContainer.encode(inputlist0)
            }
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }
}
