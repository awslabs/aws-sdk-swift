// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetRecommendationsInputBody: Equatable {
    public let campaignArn: String?
    public let itemId: String?
    public let userId: String?
    public let numResults: Int
    public let context: [String:String]?
    public let filterArn: String?
    public let filterValues: [String:String]?
}

extension GetRecommendationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case campaignArn
        case context
        case filterArn
        case filterValues
        case itemId
        case numResults
        case userId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .campaignArn)
        campaignArn = campaignArnDecoded
        let itemIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .itemId)
        itemId = itemIdDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let numResultsDecoded = try containerValues.decode(Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let contextContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .context)
        var contextDecoded0: [String:String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [String:String]()
            for (key0, attributevalue0) in contextContainer {
                contextDecoded0?[key0] = attributevalue0
            }
        }
        context = contextDecoded0
        let filterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterArn)
        filterArn = filterArnDecoded
        let filterValuesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .filterValues)
        var filterValuesDecoded0: [String:String]? = nil
        if let filterValuesContainer = filterValuesContainer {
            filterValuesDecoded0 = [String:String]()
            for (key0, filterattributevalue0) in filterValuesContainer {
                filterValuesDecoded0?[key0] = filterattributevalue0
            }
        }
        filterValues = filterValuesDecoded0
    }
}
