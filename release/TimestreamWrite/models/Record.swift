// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Record represents a time series data point being written into
///        Timestream. Each record contains an array of dimensions. Dimensions
///        represent the meta data attributes of a time series data point such as
///        the instance name or availability zone of an EC2 instance. A record also
///        contains the measure name which is the name of the measure being collected
///        for example the CPU utilization of an EC2 instance. A record also contains
///        the measure value and the value type which is the data type of the measure value.
///        In addition, the record contains the timestamp when the measure was collected that
///        the timestamp unit which represents the granularity of the timestamp.
///        </p>
public struct Record: Equatable {
    /// <p>Contains the list of dimensions for time series data points.</p>
    public let dimensions: [Dimension]?
    /// <p>Measure represents the data attribute of the time series. For example, the CPU utilization of an EC2 instance or the RPM of a wind turbine are measures. </p>
    public let measureName: String?
    /// <p>
    /// Contains the measure value for the time series data point.
    /// </p>
    public let measureValue: String?
    /// <p>
    /// Contains the data type of the measure value for the time series data point.
    /// </p>
    public let measureValueType: MeasureValueType?
    /// <p>
    /// Contains the time at which the measure value for the data point was collected.
    /// The time value plus the unit provides the time elapsed since the epoch.
    /// For example, if the time value is <code>12345</code> and the unit is <code>ms</code>,
    ///    then <code>12345 ms</code> have elapsed since the epoch.
    /// </p>
    public let time: String?
    /// <p>
    /// The granularity of the timestamp unit. It indicates if the time value is in seconds, milliseconds, nanoseconds or other supported values.
    /// </p>
    public let timeUnit: TimeUnit?
    /// <p>64-bit attribute used for record updates.
    ///          Write requests for duplicate data with a higher version number will update the existing measure value and version.
    ///          In cases where the measure value is the same, <code>Version</code> will still be updated . Default value is to 1.</p>
    public let version: Int

    public init (
        dimensions: [Dimension]? = nil,
        measureName: String? = nil,
        measureValue: String? = nil,
        measureValueType: MeasureValueType? = nil,
        time: String? = nil,
        timeUnit: TimeUnit? = nil,
        version: Int = 0
    )
    {
        self.dimensions = dimensions
        self.measureName = measureName
        self.measureValue = measureValue
        self.measureValueType = measureValueType
        self.time = time
        self.timeUnit = timeUnit
        self.version = version
    }
}
