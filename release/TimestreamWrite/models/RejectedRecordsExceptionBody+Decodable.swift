// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RejectedRecordsExceptionBody: Equatable {
    public let message: String?
    public let rejectedRecords: [RejectedRecord]?
}

extension RejectedRecordsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case rejectedRecords = "RejectedRecords"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let rejectedRecordsContainer = try containerValues.decodeIfPresent([RejectedRecord].self, forKey: .rejectedRecords)
        var rejectedRecordsDecoded0:[RejectedRecord]? = nil
        if let rejectedRecordsContainer = rejectedRecordsContainer {
            rejectedRecordsDecoded0 = [RejectedRecord]()
            for structure0 in rejectedRecordsContainer {
                rejectedRecordsDecoded0?.append(structure0)
            }
        }
        rejectedRecords = rejectedRecordsDecoded0
    }
}
