// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>
/// Records that were not successfully inserted into Timestream due to data validation issues
/// that must be resolved prior to reinserting time series data into the system.
/// </p>
public struct RejectedRecord: Equatable {
    /// <p>The existing version of the record.
    ///          This value is populated in scenarios where an identical record exists with a higher version than the version in the write request.</p>
    public let existingVersion: Int
    /// <p>
    ///          The reason why a record was not successfully inserted into Timestream. Possible causes of failure include:
    ///       </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                  Records with duplicate data where there are multiple records with the same dimensions,
    ///          timestamps, and measure names but different measure values.
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                  Records with timestamps that lie outside the retention duration of the memory store
    ///                </p>
    ///                <note>
    ///                   <p>When the retention window is updated, you will receive a <code>RejectedRecords</code> exception
    ///                   if you immediately try to ingest data within the new window.
    ///                   To avoid a <code>RejectedRecords</code> exception,
    ///                   wait until the duration of the new window to ingest new data.
    ///                   For further information,
    ///                   see
    ///                   <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/best-practices.html#configuration">
    ///                      Best Practices for Configuring Timestream</a>
    ///                   and
    ///                   <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/storage.html">the explanation of how storage works in Timestream</a>.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                  Records with dimensions or measures that exceed the Timestream defined limits.
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Access Management</a> in the Timestream Developer Guide.
    ///          </p>
    public let reason: String?
    /// <p>
    /// The index of the record in the input request for WriteRecords. Indexes begin with 0.
    /// </p>
    public let recordIndex: Int

    public init (
        existingVersion: Int = 0,
        reason: String? = nil,
        recordIndex: Int = 0
    )
    {
        self.existingVersion = existingVersion
        self.reason = reason
        self.recordIndex = recordIndex
    }
}
