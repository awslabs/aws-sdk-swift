// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SavingsPlanOffering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currency
        case description
        case durationSeconds
        case offeringId
        case operation
        case paymentOption
        case planType
        case productTypes
        case properties
        case serviceCode
        case usageType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currency = currency {
            try encodeContainer.encode(currency.rawValue, forKey: .currency)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if durationSeconds != 0 {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let offeringId = offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let operation = operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let paymentOption = paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let planType = planType {
            try encodeContainer.encode(planType.rawValue, forKey: .planType)
        }
        if let productTypes = productTypes {
            var productTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productTypes)
            for savingsplanproducttypelist0 in productTypes {
                try productTypesContainer.encode(savingsplanproducttypelist0.rawValue)
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for savingsplanofferingpropertylist0 in properties {
                try propertiesContainer.encode(savingsplanofferingpropertylist0)
            }
        }
        if let serviceCode = serviceCode {
            try encodeContainer.encode(serviceCode, forKey: .serviceCode)
        }
        if let usageType = usageType {
            try encodeContainer.encode(usageType, forKey: .usageType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let productTypesContainer = try containerValues.decodeIfPresent([SavingsPlanProductType].self, forKey: .productTypes)
        var productTypesDecoded0:[SavingsPlanProductType]? = nil
        if let productTypesContainer = productTypesContainer {
            productTypesDecoded0 = [SavingsPlanProductType]()
            for string0 in productTypesContainer {
                productTypesDecoded0?.append(string0)
            }
        }
        productTypes = productTypesDecoded0
        let planTypeDecoded = try containerValues.decodeIfPresent(SavingsPlanType.self, forKey: .planType)
        planType = planTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(SavingsPlanPaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let durationSecondsDecoded = try containerValues.decode(Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let currencyDecoded = try containerValues.decodeIfPresent(CurrencyCode.self, forKey: .currency)
        currency = currencyDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let usageTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usageType)
        usageType = usageTypeDecoded
        let operationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operation)
        operation = operationDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([SavingsPlanOfferingProperty].self, forKey: .properties)
        var propertiesDecoded0:[SavingsPlanOfferingProperty]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [SavingsPlanOfferingProperty]()
            for structure0 in propertiesContainer {
                propertiesDecoded0?.append(structure0)
            }
        }
        properties = propertiesDecoded0
    }
}
