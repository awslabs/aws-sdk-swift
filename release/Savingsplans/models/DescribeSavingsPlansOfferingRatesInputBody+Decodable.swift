// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSavingsPlansOfferingRatesInputBody: Equatable {
    public let savingsPlanOfferingIds: [String]?
    public let savingsPlanPaymentOptions: [SavingsPlanPaymentOption]?
    public let savingsPlanTypes: [SavingsPlanType]?
    public let products: [SavingsPlanProductType]?
    public let serviceCodes: [SavingsPlanRateServiceCode]?
    public let usageTypes: [String]?
    public let operations: [String]?
    public let filters: [SavingsPlanOfferingRateFilterElement]?
    public let nextToken: String?
    public let maxResults: Int
}

extension DescribeSavingsPlansOfferingRatesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters
        case maxResults
        case nextToken
        case operations
        case products
        case savingsPlanOfferingIds
        case savingsPlanPaymentOptions
        case savingsPlanTypes
        case serviceCodes
        case usageTypes
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsPlanOfferingIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .savingsPlanOfferingIds)
        var savingsPlanOfferingIdsDecoded0:[String]? = nil
        if let savingsPlanOfferingIdsContainer = savingsPlanOfferingIdsContainer {
            savingsPlanOfferingIdsDecoded0 = [String]()
            for string0 in savingsPlanOfferingIdsContainer {
                savingsPlanOfferingIdsDecoded0?.append(string0)
            }
        }
        savingsPlanOfferingIds = savingsPlanOfferingIdsDecoded0
        let savingsPlanPaymentOptionsContainer = try containerValues.decodeIfPresent([SavingsPlanPaymentOption].self, forKey: .savingsPlanPaymentOptions)
        var savingsPlanPaymentOptionsDecoded0:[SavingsPlanPaymentOption]? = nil
        if let savingsPlanPaymentOptionsContainer = savingsPlanPaymentOptionsContainer {
            savingsPlanPaymentOptionsDecoded0 = [SavingsPlanPaymentOption]()
            for string0 in savingsPlanPaymentOptionsContainer {
                savingsPlanPaymentOptionsDecoded0?.append(string0)
            }
        }
        savingsPlanPaymentOptions = savingsPlanPaymentOptionsDecoded0
        let savingsPlanTypesContainer = try containerValues.decodeIfPresent([SavingsPlanType].self, forKey: .savingsPlanTypes)
        var savingsPlanTypesDecoded0:[SavingsPlanType]? = nil
        if let savingsPlanTypesContainer = savingsPlanTypesContainer {
            savingsPlanTypesDecoded0 = [SavingsPlanType]()
            for string0 in savingsPlanTypesContainer {
                savingsPlanTypesDecoded0?.append(string0)
            }
        }
        savingsPlanTypes = savingsPlanTypesDecoded0
        let productsContainer = try containerValues.decodeIfPresent([SavingsPlanProductType].self, forKey: .products)
        var productsDecoded0:[SavingsPlanProductType]? = nil
        if let productsContainer = productsContainer {
            productsDecoded0 = [SavingsPlanProductType]()
            for string0 in productsContainer {
                productsDecoded0?.append(string0)
            }
        }
        products = productsDecoded0
        let serviceCodesContainer = try containerValues.decodeIfPresent([SavingsPlanRateServiceCode].self, forKey: .serviceCodes)
        var serviceCodesDecoded0:[SavingsPlanRateServiceCode]? = nil
        if let serviceCodesContainer = serviceCodesContainer {
            serviceCodesDecoded0 = [SavingsPlanRateServiceCode]()
            for string0 in serviceCodesContainer {
                serviceCodesDecoded0?.append(string0)
            }
        }
        serviceCodes = serviceCodesDecoded0
        let usageTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .usageTypes)
        var usageTypesDecoded0:[String]? = nil
        if let usageTypesContainer = usageTypesContainer {
            usageTypesDecoded0 = [String]()
            for string0 in usageTypesContainer {
                usageTypesDecoded0?.append(string0)
            }
        }
        usageTypes = usageTypesDecoded0
        let operationsContainer = try containerValues.decodeIfPresent([String].self, forKey: .operations)
        var operationsDecoded0:[String]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [String]()
            for string0 in operationsContainer {
                operationsDecoded0?.append(string0)
            }
        }
        operations = operationsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SavingsPlanOfferingRateFilterElement].self, forKey: .filters)
        var filtersDecoded0:[SavingsPlanOfferingRateFilterElement]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SavingsPlanOfferingRateFilterElement]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
