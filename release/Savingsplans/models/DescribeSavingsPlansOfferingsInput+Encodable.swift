// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeSavingsPlansOfferingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currencies
        case descriptions
        case durations
        case filters
        case maxResults
        case nextToken
        case offeringIds
        case operations
        case paymentOptions
        case planTypes
        case productType
        case serviceCodes
        case usageTypes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencies = currencies {
            var currenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .currencies)
            for currencylist0 in currencies {
                try currenciesContainer.encode(currencylist0.rawValue)
            }
        }
        if let descriptions = descriptions {
            var descriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .descriptions)
            for savingsplandescriptionslist0 in descriptions {
                try descriptionsContainer.encode(savingsplandescriptionslist0)
            }
        }
        if let durations = durations {
            var durationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .durations)
            for durationslist0 in durations {
                try durationsContainer.encode(durationslist0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for savingsplanofferingfilterslist0 in filters {
                try filtersContainer.encode(savingsplanofferingfilterslist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let offeringIds = offeringIds {
            var offeringIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .offeringIds)
            for uuids0 in offeringIds {
                try offeringIdsContainer.encode(uuids0)
            }
        }
        if let operations = operations {
            var operationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operations)
            for savingsplanoperationlist0 in operations {
                try operationsContainer.encode(savingsplanoperationlist0)
            }
        }
        if let paymentOptions = paymentOptions {
            var paymentOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .paymentOptions)
            for savingsplanpaymentoptionlist0 in paymentOptions {
                try paymentOptionsContainer.encode(savingsplanpaymentoptionlist0.rawValue)
            }
        }
        if let planTypes = planTypes {
            var planTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .planTypes)
            for savingsplantypelist0 in planTypes {
                try planTypesContainer.encode(savingsplantypelist0.rawValue)
            }
        }
        if let productType = productType {
            try encodeContainer.encode(productType.rawValue, forKey: .productType)
        }
        if let serviceCodes = serviceCodes {
            var serviceCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceCodes)
            for savingsplanservicecodelist0 in serviceCodes {
                try serviceCodesContainer.encode(savingsplanservicecodelist0)
            }
        }
        if let usageTypes = usageTypes {
            var usageTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .usageTypes)
            for savingsplanusagetypelist0 in usageTypes {
                try usageTypesContainer.encode(savingsplanusagetypelist0)
            }
        }
    }
}
