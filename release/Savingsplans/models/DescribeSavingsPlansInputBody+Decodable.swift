// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSavingsPlansInputBody: Equatable {
    public let savingsPlanArns: [String]?
    public let savingsPlanIds: [String]?
    public let nextToken: String?
    public let maxResults: Int?
    public let states: [SavingsPlanState]?
    public let filters: [SavingsPlanFilter]?
}

extension DescribeSavingsPlansInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters
        case maxResults
        case nextToken
        case savingsPlanArns
        case savingsPlanIds
        case states
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsPlanArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .savingsPlanArns)
        var savingsPlanArnsDecoded0:[String]? = nil
        if let savingsPlanArnsContainer = savingsPlanArnsContainer {
            savingsPlanArnsDecoded0 = [String]()
            for string0 in savingsPlanArnsContainer {
                savingsPlanArnsDecoded0?.append(string0)
            }
        }
        savingsPlanArns = savingsPlanArnsDecoded0
        let savingsPlanIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .savingsPlanIds)
        var savingsPlanIdsDecoded0:[String]? = nil
        if let savingsPlanIdsContainer = savingsPlanIdsContainer {
            savingsPlanIdsDecoded0 = [String]()
            for string0 in savingsPlanIdsContainer {
                savingsPlanIdsDecoded0?.append(string0)
            }
        }
        savingsPlanIds = savingsPlanIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statesContainer = try containerValues.decodeIfPresent([SavingsPlanState].self, forKey: .states)
        var statesDecoded0:[SavingsPlanState]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [SavingsPlanState]()
            for string0 in statesContainer {
                statesDecoded0?.append(string0)
            }
        }
        states = statesDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SavingsPlanFilter].self, forKey: .filters)
        var filtersDecoded0:[SavingsPlanFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SavingsPlanFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
    }
}
