// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSavingsPlanInputBody: Equatable {
    public let savingsPlanOfferingId: String?
    public let commitment: String?
    public let upfrontPaymentAmount: String?
    public let purchaseTime: Date?
    public let clientToken: String?
    public let tags: [String:String]?
}

extension CreateSavingsPlanInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case commitment
        case purchaseTime
        case savingsPlanOfferingId
        case tags
        case upfrontPaymentAmount
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsPlanOfferingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .savingsPlanOfferingId)
        savingsPlanOfferingId = savingsPlanOfferingIdDecoded
        let commitmentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commitment)
        commitment = commitmentDecoded
        let upfrontPaymentAmountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .upfrontPaymentAmount)
        upfrontPaymentAmount = upfrontPaymentAmountDecoded
        let purchaseTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .purchaseTime)
        purchaseTime = purchaseTimeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
