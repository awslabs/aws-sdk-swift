// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeSavingsPlansInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filters
        case maxResults
        case nextToken
        case savingsPlanArns
        case savingsPlanIds
        case states
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for savingsplanfilterlist0 in filters {
                try filtersContainer.encode(savingsplanfilterlist0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let savingsPlanArns = savingsPlanArns {
            var savingsPlanArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .savingsPlanArns)
            for savingsplanarnlist0 in savingsPlanArns {
                try savingsPlanArnsContainer.encode(savingsplanarnlist0)
            }
        }
        if let savingsPlanIds = savingsPlanIds {
            var savingsPlanIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .savingsPlanIds)
            for savingsplanidlist0 in savingsPlanIds {
                try savingsPlanIdsContainer.encode(savingsplanidlist0)
            }
        }
        if let states = states {
            var statesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .states)
            for savingsplanstatelist0 in states {
                try statesContainer.encode(savingsplanstatelist0.rawValue)
            }
        }
    }
}
