// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSavingsPlansOfferingsInputBody: Equatable {
    public let offeringIds: [String]?
    public let paymentOptions: [SavingsPlanPaymentOption]?
    public let productType: SavingsPlanProductType?
    public let planTypes: [SavingsPlanType]?
    public let durations: [Int]?
    public let currencies: [CurrencyCode]?
    public let descriptions: [String]?
    public let serviceCodes: [String]?
    public let usageTypes: [String]?
    public let operations: [String]?
    public let filters: [SavingsPlanOfferingFilterElement]?
    public let nextToken: String?
    public let maxResults: Int
}

extension DescribeSavingsPlansOfferingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case currencies
        case descriptions
        case durations
        case filters
        case maxResults
        case nextToken
        case offeringIds
        case operations
        case paymentOptions
        case planTypes
        case productType
        case serviceCodes
        case usageTypes
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let offeringIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .offeringIds)
        var offeringIdsDecoded0:[String]? = nil
        if let offeringIdsContainer = offeringIdsContainer {
            offeringIdsDecoded0 = [String]()
            for string0 in offeringIdsContainer {
                offeringIdsDecoded0?.append(string0)
            }
        }
        offeringIds = offeringIdsDecoded0
        let paymentOptionsContainer = try containerValues.decodeIfPresent([SavingsPlanPaymentOption].self, forKey: .paymentOptions)
        var paymentOptionsDecoded0:[SavingsPlanPaymentOption]? = nil
        if let paymentOptionsContainer = paymentOptionsContainer {
            paymentOptionsDecoded0 = [SavingsPlanPaymentOption]()
            for string0 in paymentOptionsContainer {
                paymentOptionsDecoded0?.append(string0)
            }
        }
        paymentOptions = paymentOptionsDecoded0
        let productTypeDecoded = try containerValues.decodeIfPresent(SavingsPlanProductType.self, forKey: .productType)
        productType = productTypeDecoded
        let planTypesContainer = try containerValues.decodeIfPresent([SavingsPlanType].self, forKey: .planTypes)
        var planTypesDecoded0:[SavingsPlanType]? = nil
        if let planTypesContainer = planTypesContainer {
            planTypesDecoded0 = [SavingsPlanType]()
            for string0 in planTypesContainer {
                planTypesDecoded0?.append(string0)
            }
        }
        planTypes = planTypesDecoded0
        let durationsContainer = try containerValues.decodeIfPresent([Int].self, forKey: .durations)
        var durationsDecoded0:[Int]? = nil
        if let durationsContainer = durationsContainer {
            durationsDecoded0 = [Int]()
            for long0 in durationsContainer {
                durationsDecoded0?.append(long0)
            }
        }
        durations = durationsDecoded0
        let currenciesContainer = try containerValues.decodeIfPresent([CurrencyCode].self, forKey: .currencies)
        var currenciesDecoded0:[CurrencyCode]? = nil
        if let currenciesContainer = currenciesContainer {
            currenciesDecoded0 = [CurrencyCode]()
            for string0 in currenciesContainer {
                currenciesDecoded0?.append(string0)
            }
        }
        currencies = currenciesDecoded0
        let descriptionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .descriptions)
        var descriptionsDecoded0:[String]? = nil
        if let descriptionsContainer = descriptionsContainer {
            descriptionsDecoded0 = [String]()
            for string0 in descriptionsContainer {
                descriptionsDecoded0?.append(string0)
            }
        }
        descriptions = descriptionsDecoded0
        let serviceCodesContainer = try containerValues.decodeIfPresent([String].self, forKey: .serviceCodes)
        var serviceCodesDecoded0:[String]? = nil
        if let serviceCodesContainer = serviceCodesContainer {
            serviceCodesDecoded0 = [String]()
            for string0 in serviceCodesContainer {
                serviceCodesDecoded0?.append(string0)
            }
        }
        serviceCodes = serviceCodesDecoded0
        let usageTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .usageTypes)
        var usageTypesDecoded0:[String]? = nil
        if let usageTypesContainer = usageTypesContainer {
            usageTypesDecoded0 = [String]()
            for string0 in usageTypesContainer {
                usageTypesDecoded0?.append(string0)
            }
        }
        usageTypes = usageTypesDecoded0
        let operationsContainer = try containerValues.decodeIfPresent([String].self, forKey: .operations)
        var operationsDecoded0:[String]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [String]()
            for string0 in operationsContainer {
                operationsDecoded0?.append(string0)
            }
        }
        operations = operationsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SavingsPlanOfferingFilterElement].self, forKey: .filters)
        var filtersDecoded0:[SavingsPlanOfferingFilterElement]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SavingsPlanOfferingFilterElement]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
