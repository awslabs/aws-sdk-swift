// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateSavingsPlanInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case commitment
        case purchaseTime
        case savingsPlanOfferingId
        case tags
        case upfrontPaymentAmount
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let commitment = commitment {
            try encodeContainer.encode(commitment, forKey: .commitment)
        }
        if let purchaseTime = purchaseTime {
            try encodeContainer.encode(purchaseTime.timeIntervalSince1970, forKey: .purchaseTime)
        }
        if let savingsPlanOfferingId = savingsPlanOfferingId {
            try encodeContainer.encode(savingsPlanOfferingId, forKey: .savingsPlanOfferingId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let upfrontPaymentAmount = upfrontPaymentAmount {
            try encodeContainer.encode(upfrontPaymentAmount, forKey: .upfrontPaymentAmount)
        }
    }
}
