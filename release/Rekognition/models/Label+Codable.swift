// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Label: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case confidence = "Confidence"
        case instances = "Instances"
        case name = "Name"
        case parents = "Parents"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for instances0 in instances {
                try instancesContainer.encode(instances0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parents = parents {
            var parentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parents)
            for parents0 in parents {
                try parentsContainer.encode(parents0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let instancesContainer = try containerValues.decodeIfPresent([Instance].self, forKey: .instances)
        var instancesDecoded0:[Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [Instance]()
            for structure0 in instancesContainer {
                instancesDecoded0?.append(structure0)
            }
        }
        instances = instancesDecoded0
        let parentsContainer = try containerValues.decodeIfPresent([Parent].self, forKey: .parents)
        var parentsDecoded0:[Parent]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [Parent]()
            for structure0 in parentsContainer {
                parentsDecoded0?.append(structure0)
            }
        }
        parents = parentsDecoded0
    }
}
