// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProtectiveEquipmentSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case personsIndeterminate = "PersonsIndeterminate"
        case personsWithRequiredEquipment = "PersonsWithRequiredEquipment"
        case personsWithoutRequiredEquipment = "PersonsWithoutRequiredEquipment"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let personsIndeterminate = personsIndeterminate {
            var personsIndeterminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personsIndeterminate)
            for protectiveequipmentpersonids0 in personsIndeterminate {
                try personsIndeterminateContainer.encode(protectiveequipmentpersonids0)
            }
        }
        if let personsWithRequiredEquipment = personsWithRequiredEquipment {
            var personsWithRequiredEquipmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personsWithRequiredEquipment)
            for protectiveequipmentpersonids0 in personsWithRequiredEquipment {
                try personsWithRequiredEquipmentContainer.encode(protectiveequipmentpersonids0)
            }
        }
        if let personsWithoutRequiredEquipment = personsWithoutRequiredEquipment {
            var personsWithoutRequiredEquipmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personsWithoutRequiredEquipment)
            for protectiveequipmentpersonids0 in personsWithoutRequiredEquipment {
                try personsWithoutRequiredEquipmentContainer.encode(protectiveequipmentpersonids0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let personsWithRequiredEquipmentContainer = try containerValues.decodeIfPresent([Int].self, forKey: .personsWithRequiredEquipment)
        var personsWithRequiredEquipmentDecoded0:[Int]? = nil
        if let personsWithRequiredEquipmentContainer = personsWithRequiredEquipmentContainer {
            personsWithRequiredEquipmentDecoded0 = [Int]()
            for integer0 in personsWithRequiredEquipmentContainer {
                personsWithRequiredEquipmentDecoded0?.append(integer0)
            }
        }
        personsWithRequiredEquipment = personsWithRequiredEquipmentDecoded0
        let personsWithoutRequiredEquipmentContainer = try containerValues.decodeIfPresent([Int].self, forKey: .personsWithoutRequiredEquipment)
        var personsWithoutRequiredEquipmentDecoded0:[Int]? = nil
        if let personsWithoutRequiredEquipmentContainer = personsWithoutRequiredEquipmentContainer {
            personsWithoutRequiredEquipmentDecoded0 = [Int]()
            for integer0 in personsWithoutRequiredEquipmentContainer {
                personsWithoutRequiredEquipmentDecoded0?.append(integer0)
            }
        }
        personsWithoutRequiredEquipment = personsWithoutRequiredEquipmentDecoded0
        let personsIndeterminateContainer = try containerValues.decodeIfPresent([Int].self, forKey: .personsIndeterminate)
        var personsIndeterminateDecoded0:[Int]? = nil
        if let personsIndeterminateContainer = personsIndeterminateContainer {
            personsIndeterminateDecoded0 = [Int]()
            for integer0 in personsIndeterminateContainer {
                personsIndeterminateDecoded0?.append(integer0)
            }
        }
        personsIndeterminate = personsIndeterminateDecoded0
    }
}
