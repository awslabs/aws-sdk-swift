// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RecognizeCelebritiesOutputBody: Equatable {
    public let celebrityFaces: [Celebrity]?
    public let unrecognizedFaces: [ComparedFace]?
    public let orientationCorrection: OrientationCorrection?
}

extension RecognizeCelebritiesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case celebrityFaces = "CelebrityFaces"
        case orientationCorrection = "OrientationCorrection"
        case unrecognizedFaces = "UnrecognizedFaces"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let celebrityFacesContainer = try containerValues.decodeIfPresent([Celebrity].self, forKey: .celebrityFaces)
        var celebrityFacesDecoded0:[Celebrity]? = nil
        if let celebrityFacesContainer = celebrityFacesContainer {
            celebrityFacesDecoded0 = [Celebrity]()
            for structure0 in celebrityFacesContainer {
                celebrityFacesDecoded0?.append(structure0)
            }
        }
        celebrityFaces = celebrityFacesDecoded0
        let unrecognizedFacesContainer = try containerValues.decodeIfPresent([ComparedFace].self, forKey: .unrecognizedFaces)
        var unrecognizedFacesDecoded0:[ComparedFace]? = nil
        if let unrecognizedFacesContainer = unrecognizedFacesContainer {
            unrecognizedFacesDecoded0 = [ComparedFace]()
            for structure0 in unrecognizedFacesContainer {
                unrecognizedFacesDecoded0?.append(structure0)
            }
        }
        unrecognizedFaces = unrecognizedFacesDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
    }
}
