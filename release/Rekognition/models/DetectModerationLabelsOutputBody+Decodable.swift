// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectModerationLabelsOutputBody: Equatable {
    public let moderationLabels: [ModerationLabel]?
    public let moderationModelVersion: String?
    public let humanLoopActivationOutput: HumanLoopActivationOutput?
}

extension DetectModerationLabelsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case humanLoopActivationOutput = "HumanLoopActivationOutput"
        case moderationLabels = "ModerationLabels"
        case moderationModelVersion = "ModerationModelVersion"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let moderationLabelsContainer = try containerValues.decodeIfPresent([ModerationLabel].self, forKey: .moderationLabels)
        var moderationLabelsDecoded0:[ModerationLabel]? = nil
        if let moderationLabelsContainer = moderationLabelsContainer {
            moderationLabelsDecoded0 = [ModerationLabel]()
            for structure0 in moderationLabelsContainer {
                moderationLabelsDecoded0?.append(structure0)
            }
        }
        moderationLabels = moderationLabelsDecoded0
        let moderationModelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .moderationModelVersion)
        moderationModelVersion = moderationModelVersionDecoded
        let humanLoopActivationOutputDecoded = try containerValues.decodeIfPresent(HumanLoopActivationOutput.self, forKey: .humanLoopActivationOutput)
        humanLoopActivationOutput = humanLoopActivationOutputDecoded
    }
}
