// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BoundingBox: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case height = "Height"
        case `left` = "Left"
        case top = "Top"
        case width = "Width"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let height = height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let `left` = `left` {
            try encodeContainer.encode(`left`, forKey: .`left`)
        }
        if let top = top {
            try encodeContainer.encode(top, forKey: .top)
        }
        if let width = width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let widthDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .width)
        width = widthDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .height)
        height = heightDecoded
        let leftDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .left)
        `left` = leftDecoded
        let topDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .top)
        top = topDecoded
    }
}
