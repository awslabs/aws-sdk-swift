// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum OrientationCorrection {
    case rotate0
    case rotate180
    case rotate270
    case rotate90
    case sdkUnknown(String)
}

extension OrientationCorrection : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OrientationCorrection] {
        return [
            .rotate0,
            .rotate180,
            .rotate270,
            .rotate90,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .rotate0: return "ROTATE_0"
        case .rotate180: return "ROTATE_180"
        case .rotate270: return "ROTATE_270"
        case .rotate90: return "ROTATE_90"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OrientationCorrection(rawValue: rawValue) ?? OrientationCorrection.sdkUnknown(rawValue)
    }
}
