// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectTextFilters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionsOfInterest = "RegionsOfInterest"
        case wordFilter = "WordFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionsOfInterest = regionsOfInterest {
            var regionsOfInterestContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterest)
            for regionsofinterest0 in regionsOfInterest {
                try regionsOfInterestContainer.encode(regionsofinterest0)
            }
        }
        if let wordFilter = wordFilter {
            try encodeContainer.encode(wordFilter, forKey: .wordFilter)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wordFilterDecoded = try containerValues.decodeIfPresent(DetectionFilter.self, forKey: .wordFilter)
        wordFilter = wordFilterDecoded
        let regionsOfInterestContainer = try containerValues.decodeIfPresent([RegionOfInterest].self, forKey: .regionsOfInterest)
        var regionsOfInterestDecoded0:[RegionOfInterest]? = nil
        if let regionsOfInterestContainer = regionsOfInterestContainer {
            regionsOfInterestDecoded0 = [RegionOfInterest]()
            for structure0 in regionsOfInterestContainer {
                regionsOfInterestDecoded0?.append(structure0)
            }
        }
        regionsOfInterest = regionsOfInterestDecoded0
    }
}
