// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectionFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case minBoundingBoxHeight = "MinBoundingBoxHeight"
        case minBoundingBoxWidth = "MinBoundingBoxWidth"
        case minConfidence = "MinConfidence"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minBoundingBoxHeight = minBoundingBoxHeight {
            try encodeContainer.encode(minBoundingBoxHeight, forKey: .minBoundingBoxHeight)
        }
        if let minBoundingBoxWidth = minBoundingBoxWidth {
            try encodeContainer.encode(minBoundingBoxWidth, forKey: .minBoundingBoxWidth)
        }
        if let minConfidence = minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let minBoundingBoxHeightDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .minBoundingBoxHeight)
        minBoundingBoxHeight = minBoundingBoxHeightDecoded
        let minBoundingBoxWidthDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .minBoundingBoxWidth)
        minBoundingBoxWidth = minBoundingBoxWidthDecoded
    }
}
