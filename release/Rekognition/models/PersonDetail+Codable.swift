// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PersonDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case boundingBox = "BoundingBox"
        case face = "Face"
        case index = "Index"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let face = face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decode(Int.self, forKey: .index)
        index = indexDecoded
        let boundingBoxDecoded = try containerValues.decodeIfPresent(BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let faceDecoded = try containerValues.decodeIfPresent(FaceDetail.self, forKey: .face)
        face = faceDecoded
    }
}
