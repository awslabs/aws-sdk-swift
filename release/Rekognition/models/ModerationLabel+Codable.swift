// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModerationLabel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case confidence = "Confidence"
        case name = "Name"
        case parentName = "ParentName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parentName = parentName {
            try encodeContainer.encode(parentName, forKey: .parentName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let parentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentName)
        parentName = parentNameDecoded
    }
}
