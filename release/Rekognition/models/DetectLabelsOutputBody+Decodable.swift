// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectLabelsOutputBody: Equatable {
    public let labels: [Label]?
    public let orientationCorrection: OrientationCorrection?
    public let labelModelVersion: String?
}

extension DetectLabelsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case labelModelVersion = "LabelModelVersion"
        case labels = "Labels"
        case orientationCorrection = "OrientationCorrection"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsContainer = try containerValues.decodeIfPresent([Label].self, forKey: .labels)
        var labelsDecoded0:[Label]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Label]()
            for structure0 in labelsContainer {
                labelsDecoded0?.append(structure0)
            }
        }
        labels = labelsDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
        let labelModelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .labelModelVersion)
        labelModelVersion = labelModelVersionDecoded
    }
}
