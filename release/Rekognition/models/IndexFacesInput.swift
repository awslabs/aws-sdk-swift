// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct IndexFacesInput: Equatable {
    /// <p>The ID of an existing collection to which you want to add the faces that are detected
    ///       in the input images.</p>
    public let collectionId: String?
    /// <p>An array of facial attributes that you want to be returned. This can be the default
    ///       list of attributes or all attributes. If you don't specify a value for <code>Attributes</code>
    ///       or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial
    ///       attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,
    ///         <code>Quality</code>, and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all
    ///       facial attributes are returned, but the operation takes longer to complete.</p>
    ///          <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND
    ///       operator to determine which attributes to return (in this case, all attributes). </p>
    public let detectionAttributes: [Attribute]?
    /// <p>The ID you want to assign to all the faces detected in the image.</p>
    public let externalImageId: String?
    /// <p>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
    ///       Amazon Rekognition operations, passing base64-encoded image bytes isn't supported. </p>
    ///          <p>If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes
    ///       passed using the <code>Bytes</code> field.
    ///       For more information, see Images in the Amazon Rekognition developer guide.</p>
    public let image: Image?
    /// <p>The maximum number of faces to index. The value of <code>MaxFaces</code> must be greater
    ///       than or equal to 1. <code>IndexFaces</code> returns no more than 100 detected faces in an
    ///       image, even if you specify a larger value for <code>MaxFaces</code>.</p>
    ///          <p>If <code>IndexFaces</code> detects more faces than the value of <code>MaxFaces</code>, the
    ///       faces with the lowest quality are filtered out first. If there are still more faces than the
    ///       value of <code>MaxFaces</code>, the faces with the smallest bounding boxes are filtered out
    ///       (up to the number that's needed to satisfy the value of <code>MaxFaces</code>). Information
    ///       about the unindexed faces is available in the <code>UnindexedFaces</code> array. </p>
    ///          <p>The faces that are returned by <code>IndexFaces</code> are sorted by the largest face
    ///       bounding box size to the smallest size, in descending order.</p>
    ///          <p>
    ///             <code>MaxFaces</code> can be used with a collection associated with any version of
    ///       the face model.</p>
    public let maxFaces: Int?
    /// <p>A filter that specifies a quality bar for how much filtering is done to identify faces.
    ///     Filtered faces aren't indexed. If you specify <code>AUTO</code>, Amazon Rekognition chooses the quality bar.
    ///       If you specify <code>LOW</code>,
    ///       <code>MEDIUM</code>, or <code>HIGH</code>, filtering removes all faces that
    ///       donâ€™t meet the chosen quality bar.  The default value is <code>AUTO</code>.
    ///
    ///       The quality bar is based on a variety of common use cases. Low-quality
    ///       detections can occur for a number of reasons. Some examples are an object that's misidentified
    ///       as a face, a face that's too blurry, or a face with a
    ///       pose that's too extreme to use. If you specify <code>NONE</code>, no
    ///       filtering is performed.
    ///     </p>
    ///          <p>To use quality filtering, the collection you are using must be associated with version 3 of the face model or higher.</p>
    public let qualityFilter: QualityFilter?

    public init (
        collectionId: String? = nil,
        detectionAttributes: [Attribute]? = nil,
        externalImageId: String? = nil,
        image: Image? = nil,
        maxFaces: Int? = nil,
        qualityFilter: QualityFilter? = nil
    )
    {
        self.collectionId = collectionId
        self.detectionAttributes = detectionAttributes
        self.externalImageId = externalImageId
        self.image = image
        self.maxFaces = maxFaces
        self.qualityFilter = qualityFilter
    }
}
