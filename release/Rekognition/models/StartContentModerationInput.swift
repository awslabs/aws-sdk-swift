// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct StartContentModerationInput: Equatable {
    /// <p>Idempotent token used to identify the start request. If you use the same token with multiple
    ///       <code>StartContentModeration</code> requests, the same <code>JobId</code> is returned. Use
    ///       <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>
    public let clientRequestToken: String?
    /// <p>An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic.
    ///       For example, you can use <code>JobTag</code> to group related jobs and identify them in the completion notification.</p>
    public let jobTag: String?
    /// <p>Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence
    ///       represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence.
    ///       100 is the highest confidence.  Amazon Rekognition doesn't return any moderated content labels with a confidence level
    ///       lower than this specified value. If you don't specify <code>MinConfidence</code>, <code>GetContentModeration</code>
    ///        returns labels with confidence values greater than or equal to 50 percent.</p>
    public let minConfidence: Float?
    /// <p>The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the
    ///       unsafe content analysis to.</p>
    public let notificationChannel: NotificationChannel?
    /// <p>The video in which you want to detect unsafe content. The video must be stored
    ///       in an Amazon S3 bucket.</p>
    public let video: Video?

    public init (
        clientRequestToken: String? = nil,
        jobTag: String? = nil,
        minConfidence: Float? = nil,
        notificationChannel: NotificationChannel? = nil,
        video: Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.minConfidence = minConfidence
        self.notificationChannel = notificationChannel
        self.video = video
    }
}
