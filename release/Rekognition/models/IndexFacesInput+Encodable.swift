// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IndexFacesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case collectionId = "CollectionId"
        case detectionAttributes = "DetectionAttributes"
        case externalImageId = "ExternalImageId"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let detectionAttributes = detectionAttributes {
            var detectionAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectionAttributes)
            for attributes0 in detectionAttributes {
                try detectionAttributesContainer.encode(attributes0.rawValue)
            }
        }
        if let externalImageId = externalImageId {
            try encodeContainer.encode(externalImageId, forKey: .externalImageId)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxFaces = maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
        if let qualityFilter = qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
    }
}
