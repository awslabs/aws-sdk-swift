// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStreamProcessorsOutputBody: Equatable {
    public let nextToken: String?
    public let streamProcessors: [StreamProcessor]?
}

extension ListStreamProcessorsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case streamProcessors = "StreamProcessors"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let streamProcessorsContainer = try containerValues.decodeIfPresent([StreamProcessor].self, forKey: .streamProcessors)
        var streamProcessorsDecoded0:[StreamProcessor]? = nil
        if let streamProcessorsContainer = streamProcessorsContainer {
            streamProcessorsDecoded0 = [StreamProcessor]()
            for structure0 in streamProcessorsContainer {
                streamProcessorsDecoded0?.append(structure0)
            }
        }
        streamProcessors = streamProcessorsDecoded0
    }
}
