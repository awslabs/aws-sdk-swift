// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectProtectiveEquipmentOutputBody: Equatable {
    public let protectiveEquipmentModelVersion: String?
    public let persons: [ProtectiveEquipmentPerson]?
    public let summary: ProtectiveEquipmentSummary?
}

extension DetectProtectiveEquipmentOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case persons = "Persons"
        case protectiveEquipmentModelVersion = "ProtectiveEquipmentModelVersion"
        case summary = "Summary"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectiveEquipmentModelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protectiveEquipmentModelVersion)
        protectiveEquipmentModelVersion = protectiveEquipmentModelVersionDecoded
        let personsContainer = try containerValues.decodeIfPresent([ProtectiveEquipmentPerson].self, forKey: .persons)
        var personsDecoded0:[ProtectiveEquipmentPerson]? = nil
        if let personsContainer = personsContainer {
            personsDecoded0 = [ProtectiveEquipmentPerson]()
            for structure0 in personsContainer {
                personsDecoded0?.append(structure0)
            }
        }
        persons = personsDecoded0
        let summaryDecoded = try containerValues.decodeIfPresent(ProtectiveEquipmentSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}
