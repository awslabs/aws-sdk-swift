// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LandmarkType {
    case chinbottom
    case eyeleft
    case eyeright
    case lefteyebrowleft
    case lefteyebrowright
    case lefteyebrowup
    case lefteyedown
    case lefteyeleft
    case lefteyeright
    case lefteyeup
    case leftpupil
    case midjawlineleft
    case midjawlineright
    case mouthdown
    case mouthleft
    case mouthright
    case mouthup
    case nose
    case noseleft
    case noseright
    case righteyebrowleft
    case righteyebrowright
    case righteyebrowup
    case righteyedown
    case righteyeleft
    case righteyeright
    case righteyeup
    case rightpupil
    case upperjawlineleft
    case upperjawlineright
    case sdkUnknown(String)
}

extension LandmarkType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LandmarkType] {
        return [
            .chinbottom,
            .eyeleft,
            .eyeright,
            .lefteyebrowleft,
            .lefteyebrowright,
            .lefteyebrowup,
            .lefteyedown,
            .lefteyeleft,
            .lefteyeright,
            .lefteyeup,
            .leftpupil,
            .midjawlineleft,
            .midjawlineright,
            .mouthdown,
            .mouthleft,
            .mouthright,
            .mouthup,
            .nose,
            .noseleft,
            .noseright,
            .righteyebrowleft,
            .righteyebrowright,
            .righteyebrowup,
            .righteyedown,
            .righteyeleft,
            .righteyeright,
            .righteyeup,
            .rightpupil,
            .upperjawlineleft,
            .upperjawlineright,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .chinbottom: return "chinBottom"
        case .eyeleft: return "eyeLeft"
        case .eyeright: return "eyeRight"
        case .lefteyebrowleft: return "leftEyeBrowLeft"
        case .lefteyebrowright: return "leftEyeBrowRight"
        case .lefteyebrowup: return "leftEyeBrowUp"
        case .lefteyedown: return "leftEyeDown"
        case .lefteyeleft: return "leftEyeLeft"
        case .lefteyeright: return "leftEyeRight"
        case .lefteyeup: return "leftEyeUp"
        case .leftpupil: return "leftPupil"
        case .midjawlineleft: return "midJawlineLeft"
        case .midjawlineright: return "midJawlineRight"
        case .mouthdown: return "mouthDown"
        case .mouthleft: return "mouthLeft"
        case .mouthright: return "mouthRight"
        case .mouthup: return "mouthUp"
        case .nose: return "nose"
        case .noseleft: return "noseLeft"
        case .noseright: return "noseRight"
        case .righteyebrowleft: return "rightEyeBrowLeft"
        case .righteyebrowright: return "rightEyeBrowRight"
        case .righteyebrowup: return "rightEyeBrowUp"
        case .righteyedown: return "rightEyeDown"
        case .righteyeleft: return "rightEyeLeft"
        case .righteyeright: return "rightEyeRight"
        case .righteyeup: return "rightEyeUp"
        case .rightpupil: return "rightPupil"
        case .upperjawlineleft: return "upperJawlineLeft"
        case .upperjawlineright: return "upperJawlineRight"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LandmarkType(rawValue: rawValue) ?? LandmarkType.sdkUnknown(rawValue)
    }
}
