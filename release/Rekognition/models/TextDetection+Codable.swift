// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextDetection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case confidence = "Confidence"
        case detectedText = "DetectedText"
        case geometry = "Geometry"
        case id = "Id"
        case parentId = "ParentId"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let detectedText = detectedText {
            try encodeContainer.encode(detectedText, forKey: .detectedText)
        }
        if let geometry = geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectedTextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detectedText)
        detectedText = detectedTextDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TextTypes.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .id)
        id = idDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .parentId)
        parentId = parentIdDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
    }
}
