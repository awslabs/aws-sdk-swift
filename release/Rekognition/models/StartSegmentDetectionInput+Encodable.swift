// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartSegmentDetectionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case filters = "Filters"
        case jobTag = "JobTag"
        case notificationChannel = "NotificationChannel"
        case segmentTypes = "SegmentTypes"
        case video = "Video"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let jobTag = jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let notificationChannel = notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let segmentTypes = segmentTypes {
            var segmentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .segmentTypes)
            for segmenttypes0 in segmentTypes {
                try segmentTypesContainer.encode(segmenttypes0.rawValue)
            }
        }
        if let video = video {
            try encodeContainer.encode(video, forKey: .video)
        }
    }
}
