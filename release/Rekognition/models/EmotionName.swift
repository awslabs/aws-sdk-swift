// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EmotionName {
    case angry
    case calm
    case confused
    case disgusted
    case fear
    case happy
    case sad
    case surprised
    case unknown
    case sdkUnknown(String)
}

extension EmotionName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EmotionName] {
        return [
            .angry,
            .calm,
            .confused,
            .disgusted,
            .fear,
            .happy,
            .sad,
            .surprised,
            .unknown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .angry: return "ANGRY"
        case .calm: return "CALM"
        case .confused: return "CONFUSED"
        case .disgusted: return "DISGUSTED"
        case .fear: return "FEAR"
        case .happy: return "HAPPY"
        case .sad: return "SAD"
        case .surprised: return "SURPRISED"
        case .unknown: return "UNKNOWN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EmotionName(rawValue: rawValue) ?? EmotionName.sdkUnknown(rawValue)
    }
}
