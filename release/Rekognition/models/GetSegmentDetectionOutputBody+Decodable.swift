// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSegmentDetectionOutputBody: Equatable {
    public let jobStatus: VideoJobStatus?
    public let statusMessage: String?
    public let videoMetadata: [VideoMetadata]?
    public let audioMetadata: [AudioMetadata]?
    public let nextToken: String?
    public let segments: [SegmentDetection]?
    public let selectedSegmentTypes: [SegmentTypeInfo]?
}

extension GetSegmentDetectionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case audioMetadata = "AudioMetadata"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case segments = "Segments"
        case selectedSegmentTypes = "SelectedSegmentTypes"
        case statusMessage = "StatusMessage"
        case videoMetadata = "VideoMetadata"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobStatusDecoded = try containerValues.decodeIfPresent(VideoJobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let videoMetadataContainer = try containerValues.decodeIfPresent([VideoMetadata].self, forKey: .videoMetadata)
        var videoMetadataDecoded0:[VideoMetadata]? = nil
        if let videoMetadataContainer = videoMetadataContainer {
            videoMetadataDecoded0 = [VideoMetadata]()
            for structure0 in videoMetadataContainer {
                videoMetadataDecoded0?.append(structure0)
            }
        }
        videoMetadata = videoMetadataDecoded0
        let audioMetadataContainer = try containerValues.decodeIfPresent([AudioMetadata].self, forKey: .audioMetadata)
        var audioMetadataDecoded0:[AudioMetadata]? = nil
        if let audioMetadataContainer = audioMetadataContainer {
            audioMetadataDecoded0 = [AudioMetadata]()
            for structure0 in audioMetadataContainer {
                audioMetadataDecoded0?.append(structure0)
            }
        }
        audioMetadata = audioMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let segmentsContainer = try containerValues.decodeIfPresent([SegmentDetection].self, forKey: .segments)
        var segmentsDecoded0:[SegmentDetection]? = nil
        if let segmentsContainer = segmentsContainer {
            segmentsDecoded0 = [SegmentDetection]()
            for structure0 in segmentsContainer {
                segmentsDecoded0?.append(structure0)
            }
        }
        segments = segmentsDecoded0
        let selectedSegmentTypesContainer = try containerValues.decodeIfPresent([SegmentTypeInfo].self, forKey: .selectedSegmentTypes)
        var selectedSegmentTypesDecoded0:[SegmentTypeInfo]? = nil
        if let selectedSegmentTypesContainer = selectedSegmentTypesContainer {
            selectedSegmentTypesDecoded0 = [SegmentTypeInfo]()
            for structure0 in selectedSegmentTypesContainer {
                selectedSegmentTypesDecoded0?.append(structure0)
            }
        }
        selectedSegmentTypes = selectedSegmentTypesDecoded0
    }
}
