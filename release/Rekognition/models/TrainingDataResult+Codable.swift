// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrainingDataResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case input = "Input"
        case output = "Output"
        case validation = "Validation"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let output = output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let validation = validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(TrainingData.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(TrainingData.self, forKey: .output)
        output = outputDecoded
        let validationDecoded = try containerValues.decodeIfPresent(ValidationData.self, forKey: .validation)
        validation = validationDecoded
    }
}
