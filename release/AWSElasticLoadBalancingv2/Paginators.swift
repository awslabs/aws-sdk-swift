// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeListenersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeListenersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeListenersOutputResponse`
extension ElasticLoadBalancingV2Client {
    public func describeListenersPaginated(input: DescribeListenersInput) -> ClientRuntime.PaginatorSequence<DescribeListenersInput, DescribeListenersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeListenersInput, DescribeListenersOutputResponse>(input: input, inputKey: \DescribeListenersInput.marker, outputKey: \DescribeListenersOutputResponse.nextMarker, paginationFunction: self.describeListeners(input:))
    }
}

extension DescribeListenersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeListenersInput {
        return DescribeListenersInput(
            listenerArns: self.listenerArns,
            loadBalancerArn: self.loadBalancerArn,
            marker: token,
            pageSize: self.pageSize
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeListenersPaginated`
/// to access the nested member `[ElasticLoadBalancingV2ClientTypes.Listener]`
/// - Returns: `[ElasticLoadBalancingV2ClientTypes.Listener]`
extension PaginatorSequence where Input == DescribeListenersInput, Output == DescribeListenersOutputResponse {
    public func listeners() async throws -> [ElasticLoadBalancingV2ClientTypes.Listener] {
        return try await self.asyncCompactMap { item in item.listeners }
    }
}

/// Paginate over `[DescribeLoadBalancersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeLoadBalancersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeLoadBalancersOutputResponse`
extension ElasticLoadBalancingV2Client {
    public func describeLoadBalancersPaginated(input: DescribeLoadBalancersInput) -> ClientRuntime.PaginatorSequence<DescribeLoadBalancersInput, DescribeLoadBalancersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLoadBalancersInput, DescribeLoadBalancersOutputResponse>(input: input, inputKey: \DescribeLoadBalancersInput.marker, outputKey: \DescribeLoadBalancersOutputResponse.nextMarker, paginationFunction: self.describeLoadBalancers(input:))
    }
}

extension DescribeLoadBalancersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLoadBalancersInput {
        return DescribeLoadBalancersInput(
            loadBalancerArns: self.loadBalancerArns,
            marker: token,
            names: self.names,
            pageSize: self.pageSize
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeLoadBalancersPaginated`
/// to access the nested member `[ElasticLoadBalancingV2ClientTypes.LoadBalancer]`
/// - Returns: `[ElasticLoadBalancingV2ClientTypes.LoadBalancer]`
extension PaginatorSequence where Input == DescribeLoadBalancersInput, Output == DescribeLoadBalancersOutputResponse {
    public func loadBalancers() async throws -> [ElasticLoadBalancingV2ClientTypes.LoadBalancer] {
        return try await self.asyncCompactMap { item in item.loadBalancers }
    }
}

/// Paginate over `[DescribeTargetGroupsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeTargetGroupsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeTargetGroupsOutputResponse`
extension ElasticLoadBalancingV2Client {
    public func describeTargetGroupsPaginated(input: DescribeTargetGroupsInput) -> ClientRuntime.PaginatorSequence<DescribeTargetGroupsInput, DescribeTargetGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTargetGroupsInput, DescribeTargetGroupsOutputResponse>(input: input, inputKey: \DescribeTargetGroupsInput.marker, outputKey: \DescribeTargetGroupsOutputResponse.nextMarker, paginationFunction: self.describeTargetGroups(input:))
    }
}

extension DescribeTargetGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTargetGroupsInput {
        return DescribeTargetGroupsInput(
            loadBalancerArn: self.loadBalancerArn,
            marker: token,
            names: self.names,
            pageSize: self.pageSize,
            targetGroupArns: self.targetGroupArns
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeTargetGroupsPaginated`
/// to access the nested member `[ElasticLoadBalancingV2ClientTypes.TargetGroup]`
/// - Returns: `[ElasticLoadBalancingV2ClientTypes.TargetGroup]`
extension PaginatorSequence where Input == DescribeTargetGroupsInput, Output == DescribeTargetGroupsOutputResponse {
    public func targetGroups() async throws -> [ElasticLoadBalancingV2ClientTypes.TargetGroup] {
        return try await self.asyncCompactMap { item in item.targetGroups }
    }
}
