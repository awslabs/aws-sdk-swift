// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A single selector statement in an advanced event selector.</p>
public struct AdvancedFieldSelector: Equatable {
    /// <p>
    ///          An operator that includes events that match the last few characters of the event record field specified as the value of <code>Field</code>.
    ///       </p>
    public let endsWith: [String]?
    /// <p>
    ///          An operator that includes events that match the exact value of the event record field specified as the value of <code>Field</code>. This is the only valid operator
    ///          that you can use with the <code>readOnly</code>, <code>eventCategory</code>, and <code>resources.type</code> fields.
    ///       </p>
    public let equals: [String]?
    /// <p>
    ///          A field in an event record on which to filter events to be logged. Supported fields include <code>readOnly</code>, <code>eventCategory</code>,
    ///          <code>eventSource</code> (for management events), <code>eventName</code>, <code>resources.type</code>, and <code>resources.ARN</code>.
    ///       </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>readOnly</code>
    ///                   </b> - Optional. Can be set to <code>Equals</code> a value of <code>true</code>
    ///             or <code>false</code>. A value of <code>false</code> logs both <code>read</code> and
    ///             <code>write</code> events.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>eventSource</code>
    ///                   </b> - For filtering management events only.
    ///             This can be set only to <code>NotEquals</code>
    ///                   <code>kms.amazonaws.com</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>eventName</code>
    ///                   </b> - Can use any operator. You can use it to ﬁlter in
    ///             or ﬁlter out any data event logged to CloudTrail, such as <code>PutBucket</code>. You can have multiple values
    ///             for this ﬁeld, separated by commas.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>eventCategory</code>
    ///                   </b> - This is required. It must be set to <code>Equals</code>, and
    ///             the value must be <code>Management</code> or <code>Data</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>resources.type</code>
    ///                   </b> - This ﬁeld is required.
    ///                   <code>resources.type</code> can only use the <code>Equals</code> operator, and the
    ///                value can be one of the following: <code>AWS::S3::Object</code>,
    ///                   <code>AWS::Lambda::Function</code>, <code>AWS::DynamoDB::Table</code>,
    ///                   <code>AWS::S3Outposts::Object</code>, <code>AWS::ManagedBlockchain::Node</code>,
    ///                or <code>AWS::S3ObjectLambda::AccessPoint</code>. You can have only one
    ///                   <code>resources.type</code> ﬁeld per selector. To log data events on more than one
    ///                resource type, add another selector.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>resources.ARN</code>
    ///                   </b> - You can use any operator with
    ///                resources.ARN, but if you use <code>Equals</code> or <code>NotEquals</code>, the
    ///                value must exactly match the ARN of a valid resource of the type you've speciﬁed in
    ///                the template as the value of resources.type. For example, if resources.type equals
    ///                   <code>AWS::S3::Object</code>, the ARN must be in one of the following formats. To
    ///                log all data events for all objects in a specific S3 bucket, use the
    ///                   <code>StartsWith</code> operator, and include only the bucket ARN as the matching
    ///                value.</p>
    ///                <p>The trailing slash is intentional; do not exclude it.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:s3:::bucket_name/</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:s3:::bucket_name/object_or_file_name/</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>When resources.type equals <code>AWS::Lambda::Function</code>, and the operator is set
    ///             to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following format:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:lambda:region:account_ID:function:function_name</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>When resources.type equals <code>AWS::DynamoDB::Table</code>, and the operator is
    ///                set to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the
    ///                following format:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:dynamodb:region:account_ID:table:table_name</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>When <code>resources.type</code> equals <code>AWS::S3Outposts::Object</code>, and the operator
    ///                is set to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following format:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:s3-outposts:region:>account_ID:object_path</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>When <code>resources.type</code> equals <code>AWS::ManagedBlockchain::Node</code>,
    ///                and the operator is set to <code>Equals</code> or <code>NotEquals</code>, the ARN
    ///                must be in the following format:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:managedblockchain:region:account_ID:nodes/node_ID</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>When <code>resources.type</code> equals
    ///                   <code>AWS::S3ObjectLambda::AccessPoint</code>, and the operator is set to
    ///                   <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following
    ///                format:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>arn:partition:s3-object-lambda:region:account_ID:accesspoint/access_point_name</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let field: String?
    /// <p>
    ///          An operator that excludes events that match the last few characters of the event record field specified as the value of <code>Field</code>.
    ///       </p>
    public let notEndsWith: [String]?
    /// <p>
    ///          An operator that excludes events that match the exact value of the event record field specified as the value of <code>Field</code>.
    ///       </p>
    public let notEquals: [String]?
    /// <p>
    ///          An operator that excludes events that match the first few characters of the event record field specified as the value of <code>Field</code>.
    ///       </p>
    public let notStartsWith: [String]?
    /// <p>
    ///          An operator that includes events that match the first few characters of the event record field specified as the value of <code>Field</code>.
    ///       </p>
    public let startsWith: [String]?

    public init (
        endsWith: [String]? = nil,
        equals: [String]? = nil,
        field: String? = nil,
        notEndsWith: [String]? = nil,
        notEquals: [String]? = nil,
        notStartsWith: [String]? = nil,
        startsWith: [String]? = nil
    )
    {
        self.endsWith = endsWith
        self.equals = equals
        self.field = field
        self.notEndsWith = notEndsWith
        self.notEquals = notEquals
        self.notStartsWith = notStartsWith
        self.startsWith = startsWith
    }
}
