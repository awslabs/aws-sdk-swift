// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataResources = "DataResources"
        case excludeManagementEventSources = "ExcludeManagementEventSources"
        case includeManagementEvents = "IncludeManagementEvents"
        case readWriteType = "ReadWriteType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataResources = dataResources {
            var dataResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataResources)
            for dataresources0 in dataResources {
                try dataResourcesContainer.encode(dataresources0)
            }
        }
        if let excludeManagementEventSources = excludeManagementEventSources {
            var excludeManagementEventSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeManagementEventSources)
            for excludemanagementeventsources0 in excludeManagementEventSources {
                try excludeManagementEventSourcesContainer.encode(excludemanagementeventsources0)
            }
        }
        if let includeManagementEvents = includeManagementEvents {
            try encodeContainer.encode(includeManagementEvents, forKey: .includeManagementEvents)
        }
        if let readWriteType = readWriteType {
            try encodeContainer.encode(readWriteType.rawValue, forKey: .readWriteType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readWriteTypeDecoded = try containerValues.decodeIfPresent(ReadWriteType.self, forKey: .readWriteType)
        readWriteType = readWriteTypeDecoded
        let includeManagementEventsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .includeManagementEvents)
        includeManagementEvents = includeManagementEventsDecoded
        let dataResourcesContainer = try containerValues.decodeIfPresent([DataResource].self, forKey: .dataResources)
        var dataResourcesDecoded0:[DataResource]? = nil
        if let dataResourcesContainer = dataResourcesContainer {
            dataResourcesDecoded0 = [DataResource]()
            for structure0 in dataResourcesContainer {
                dataResourcesDecoded0?.append(structure0)
            }
        }
        dataResources = dataResourcesDecoded0
        let excludeManagementEventSourcesContainer = try containerValues.decodeIfPresent([String].self, forKey: .excludeManagementEventSources)
        var excludeManagementEventSourcesDecoded0:[String]? = nil
        if let excludeManagementEventSourcesContainer = excludeManagementEventSourcesContainer {
            excludeManagementEventSourcesDecoded0 = [String]()
            for string0 in excludeManagementEventSourcesContainer {
                excludeManagementEventSourcesDecoded0?.append(string0)
            }
        }
        excludeManagementEventSources = excludeManagementEventSourcesDecoded0
    }
}
