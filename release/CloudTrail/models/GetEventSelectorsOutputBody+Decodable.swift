// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEventSelectorsOutputBody: Equatable {
    public let trailARN: String?
    public let eventSelectors: [EventSelector]?
    public let advancedEventSelectors: [AdvancedEventSelector]?
}

extension GetEventSelectorsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case advancedEventSelectors = "AdvancedEventSelectors"
        case eventSelectors = "EventSelectors"
        case trailARN = "TrailARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trailARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trailARN)
        trailARN = trailARNDecoded
        let eventSelectorsContainer = try containerValues.decodeIfPresent([EventSelector].self, forKey: .eventSelectors)
        var eventSelectorsDecoded0:[EventSelector]? = nil
        if let eventSelectorsContainer = eventSelectorsContainer {
            eventSelectorsDecoded0 = [EventSelector]()
            for structure0 in eventSelectorsContainer {
                eventSelectorsDecoded0?.append(structure0)
            }
        }
        eventSelectors = eventSelectorsDecoded0
        let advancedEventSelectorsContainer = try containerValues.decodeIfPresent([AdvancedEventSelector].self, forKey: .advancedEventSelectors)
        var advancedEventSelectorsDecoded0:[AdvancedEventSelector]? = nil
        if let advancedEventSelectorsContainer = advancedEventSelectorsContainer {
            advancedEventSelectorsDecoded0 = [AdvancedEventSelector]()
            for structure0 in advancedEventSelectorsContainer {
                advancedEventSelectorsDecoded0?.append(structure0)
            }
        }
        advancedEventSelectors = advancedEventSelectorsDecoded0
    }
}
