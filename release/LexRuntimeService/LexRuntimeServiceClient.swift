// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class LexRuntimeServiceClient {
    let client: SdkHttpClient
    let config: LexRuntimeServiceClientConfiguration
    let serviceName = "Lex Runtime Service"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: LexRuntimeServiceClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class LexRuntimeServiceClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> LexRuntimeServiceClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try LexRuntimeServiceClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension LexRuntimeServiceClient: LexRuntimeServiceClientProtocol {
    /// <p>Removes session information for a specified bot, alias, and user ID.
    ///     </p>
    public func deleteSession(input: DeleteSessionInput, completion: @escaping (SdkResult<DeleteSessionOutputResponse, DeleteSessionOutputError>) -> Void)
    {
        guard let botName = input.botName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botName unexpectedly nil"))))
            return
        }
        guard let botAlias = input.botAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botAlias unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/bot/\(botName)/alias/\(botAlias)/user/\(userId)/session"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "runtime.lex.\(config.region).amazonaws.com")
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteSessionInput, DeleteSessionOutputResponse, DeleteSessionOutputError>(id: "deleteSession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteSessionInput, DeleteSessionOutputResponse, DeleteSessionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns session information for a specified bot, alias, and user
    ///       ID.</p>
    public func getSession(input: GetSessionInput, completion: @escaping (SdkResult<GetSessionOutputResponse, GetSessionOutputError>) -> Void)
    {
        guard let botName = input.botName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botName unexpectedly nil"))))
            return
        }
        guard let botAlias = input.botAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botAlias unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/bot/\(botName)/alias/\(botAlias)/user/\(userId)/session"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "runtime.lex.\(config.region).amazonaws.com")
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSessionInput, GetSessionOutputResponse, GetSessionOutputError>(id: "getSession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSessionInput, GetSessionOutputResponse, GetSessionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p> Sends user input (text or speech) to Amazon Lex. Clients use this API to
    ///       send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the
    ///       user input using the machine learning model that it built for the bot. </p>
    ///          <p>The <code>PostContent</code> operation supports audio input at 8kHz
    ///       and 16kHz. You can use 8kHz audio to achieve higher speech recognition
    ///       accuracy in telephone audio applications. </p>
    ///          <p> In response, Amazon Lex returns the next message to convey to the user.
    ///       Consider the following example messages: </p>
    ///          <ul>
    ///             <li>
    ///                <p> For a user input "I would like a pizza," Amazon Lex might return a
    ///           response with a message eliciting slot data (for example,
    ///             <code>PizzaSize</code>): "What size pizza would you like?". </p>
    ///             </li>
    ///             <li>
    ///                <p> After the user provides all of the pizza order information, Amazon Lex
    ///           might return a response with a message to get user confirmation:
    ///           "Order the pizza?". </p>
    ///             </li>
    ///             <li>
    ///                <p> After the user replies "Yes" to the confirmation prompt, Amazon Lex
    ///           might return a conclusion statement: "Thank you, your cheese pizza has
    ///           been ordered.". </p>
    ///             </li>
    ///          </ul>
    ///          <p> Not all Amazon Lex messages require a response from the user. For example,
    ///       conclusion statements do not require a response. Some messages require
    ///       only a yes or no response. In addition to the <code>message</code>, Amazon Lex
    ///       provides additional context about the message in the response that you can
    ///       use to enhance client behavior, such as displaying the appropriate client
    ///       user interface. Consider the following examples: </p>
    ///          <ul>
    ///             <li>
    ///                <p> If the message is to elicit slot data, Amazon Lex returns the
    ///           following context information: </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>x-amz-lex-dialog-state</code> header set to
    ///                 <code>ElicitSlot</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>x-amz-lex-intent-name</code> header set to the intent name
    ///               in the current context </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>x-amz-lex-slot-to-elicit</code> header set to the slot name
    ///               for which the <code>message</code> is eliciting information
    ///             </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>x-amz-lex-slots</code> header set to a map of slots
    ///               configured for the intent with their current values </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p> If the message is a confirmation prompt, the
    ///             <code>x-amz-lex-dialog-state</code> header is set to
    ///             <code>Confirmation</code> and the
    ///             <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p>
    ///             </li>
    ///             <li>
    ///                <p> If the message is a clarification prompt configured for the
    ///           intent, indicating that the user intent is not understood, the
    ///             <code>x-amz-dialog-state</code> header is set to
    ///             <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code>
    ///           header is omitted. </p>
    ///             </li>
    ///          </ul>
    ///          <p> In addition, Amazon Lex also returns your application-specific
    ///         <code>sessionAttributes</code>. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
    ///         Conversation Context</a>. </p>
    public func postContent(input: PostContentInput, streamSource: StreamSource, completion: @escaping (SdkResult<PostContentOutputResponse, PostContentOutputError>) -> Void)
    {
        guard let botName = input.botName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botName unexpectedly nil"))))
            return
        }
        guard let botAlias = input.botAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botAlias unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/bot/\(botName)/alias/\(botAlias)/user/\(userId)/content"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "postContent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "runtime.lex.\(config.region).amazonaws.com")
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PostContentInput, PostContentOutputResponse, PostContentOutputError>(id: "postContent")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PostContentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PostContentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PostContentInput, PostContentOutputResponse, PostContentOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PostContentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: true)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sends user input to Amazon Lex. Client applications can use this API to
    ///       send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input
    ///       using the machine learning model it built for the bot. </p>
    ///          <p> In response, Amazon Lex returns the next <code>message</code> to convey to
    ///       the user an optional <code>responseCard</code> to display. Consider the
    ///       following example messages: </p>
    ///          <ul>
    ///             <li>
    ///                <p> For a user input "I would like a pizza", Amazon Lex might return a
    ///           response with a message eliciting slot data (for example, PizzaSize):
    ///           "What size pizza would you like?" </p>
    ///             </li>
    ///             <li>
    ///                <p> After the user provides all of the pizza order information,
    ///           Amazon Lex might return a response with a message to obtain user
    ///           confirmation "Proceed with the pizza order?". </p>
    ///             </li>
    ///             <li>
    ///                <p> After the user replies to a confirmation prompt with a "yes",
    ///           Amazon Lex might return a conclusion statement: "Thank you, your cheese
    ///           pizza has been ordered.". </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p> Not all Amazon Lex messages require a user response. For example, a
    ///       conclusion statement does not require a response. Some messages require
    ///       only a "yes" or "no" user response. In addition to the
    ///         <code>message</code>, Amazon Lex provides additional context about the
    ///       message in the response that you might use to enhance client behavior, for
    ///       example, to display the appropriate client user interface. These are the
    ///         <code>slotToElicit</code>, <code>dialogState</code>,
    ///         <code>intentName</code>, and <code>slots</code> fields in the response.
    ///       Consider the following examples: </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>If the message is to elicit slot data, Amazon Lex returns the
    ///           following context information:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>dialogState</code> set to ElicitSlot </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>intentName</code> set to the intent name in the current
    ///               context </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>slotToElicit</code> set to the slot name for which the
    ///                 <code>message</code> is eliciting information </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>slots</code> set to a map of slots, configured for the
    ///               intent, with currently known values </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p> If the message is a confirmation prompt, the
    ///             <code>dialogState</code> is set to ConfirmIntent and
    ///             <code>SlotToElicit</code> is set to null. </p>
    ///             </li>
    ///             <li>
    ///                <p>If the message is a clarification prompt (configured for the
    ///           intent) that indicates that user intent is not understood, the
    ///             <code>dialogState</code> is set to ElicitIntent and
    ///             <code>slotToElicit</code> is set to null. </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p> In addition, Amazon Lex also returns your application-specific
    ///         <code>sessionAttributes</code>. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
    ///         Conversation Context</a>. </p>
    public func postText(input: PostTextInput, completion: @escaping (SdkResult<PostTextOutputResponse, PostTextOutputError>) -> Void)
    {
        guard let botName = input.botName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botName unexpectedly nil"))))
            return
        }
        guard let botAlias = input.botAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botAlias unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/bot/\(botName)/alias/\(botAlias)/user/\(userId)/text"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "postText")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "runtime.lex.\(config.region).amazonaws.com")
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PostTextInput, PostTextOutputResponse, PostTextOutputError>(id: "postText")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PostTextInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PostTextInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PostTextInput, PostTextOutputResponse, PostTextOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PostTextInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new session or modifies an existing session with an Amazon Lex
    ///       bot. Use this operation to enable your application to set the state of the
    ///       bot.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
    ///         Sessions</a>.</p>
    public func putSession(input: PutSessionInput, streamSink: StreamSink, completion: @escaping (SdkResult<PutSessionOutputResponse, PutSessionOutputError>) -> Void)
    {
        guard let botName = input.botName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botName unexpectedly nil"))))
            return
        }
        guard let botAlias = input.botAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botAlias unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/bot/\(botName)/alias/\(botAlias)/user/\(userId)/session"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "runtime.lex.\(config.region).amazonaws.com")
                      .withSigningName(value: "lex")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutSessionInput, PutSessionOutputResponse, PutSessionOutputError>(id: "putSession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutSessionInput, PutSessionOutputResponse, PutSessionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutSessionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
