// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResponseCard: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentType
        case genericAttachments
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentType = contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
        if let genericAttachments = genericAttachments {
            var genericAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .genericAttachments)
            for genericattachmentlist0 in genericAttachments {
                try genericAttachmentsContainer.encode(genericattachmentlist0)
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(ContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let genericAttachmentsContainer = try containerValues.decodeIfPresent([GenericAttachment].self, forKey: .genericAttachments)
        var genericAttachmentsDecoded0:[GenericAttachment]? = nil
        if let genericAttachmentsContainer = genericAttachmentsContainer {
            genericAttachmentsDecoded0 = [GenericAttachment]()
            for structure0 in genericAttachmentsContainer {
                genericAttachmentsDecoded0?.append(structure0)
            }
        }
        genericAttachments = genericAttachmentsDecoded0
    }
}
