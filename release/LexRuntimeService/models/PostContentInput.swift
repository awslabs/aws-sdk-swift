// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PostContentInput: Equatable {
    /// <p> You pass this value as the <code>Accept</code> HTTP header. </p>
    ///          <p> The message Amazon Lex returns in the response can be either text or
    ///       speech based on the <code>Accept</code> HTTP header value in the request. </p>
    ///          <ul>
    ///             <li>
    ///                <p> If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
    ///           returns text in the response. </p>
    ///             </li>
    ///             <li>
    ///                <p> If the value begins with <code>audio/</code>, Amazon Lex returns
    ///           speech in the response. Amazon Lex uses Amazon Polly to generate the speech
    ///           (using the configuration you specified in the <code>Accept</code>
    ///           header). For example, if you specify <code>audio/mpeg</code> as the
    ///           value, Amazon Lex returns speech in the MPEG format.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value is <code>audio/pcm</code>, the speech returned is
    ///             <code>audio/pcm</code> in 16-bit, little endian format.
    ///           </p>
    ///             </li>
    ///             <li>
    ///                <p>The following are the accepted values:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/mpeg</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/ogg</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/pcm</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>text/plain; charset=utf-8</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/* (defaults to mpeg)</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let accept: String?
    /// <p>A list of contexts active for the request. A context can be activated
    ///       when a previous intent is fulfilled, or by including the context in the
    ///       request,</p>
    ///          <p>If you don't specify a list of contexts, Amazon Lex will use the current
    ///       list of contexts for the session. If you specify an empty list, all
    ///       contexts for the session are cleared.</p>
    public let activeContexts: String?
    /// <p>Alias of the Amazon Lex bot.</p>
    public let botAlias: String?
    /// <p>Name of the Amazon Lex bot.</p>
    public let botName: String?
    /// <p> You pass this value as the <code>Content-Type</code> HTTP header. </p>
    ///          <p> Indicates the audio format or text. The header value must start with
    ///       one of the following prefixes: </p>
    ///          <ul>
    ///             <li>
    ///                <p>PCM format, audio data must be in little-endian byte order.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/l16; rate=16000; channels=1</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/x-l16; sample-rate=16000; channel-count=1</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;
    ///               channel-count=1; is-big-endian=false </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Opus format</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/x-cbr-opus-with-preamble; preamble-size=0;
    ///               bit-rate=256000; frame-size-milliseconds=4</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Text format</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>text/plain; charset=utf-8</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let contentType: String?
    /// <p> User input in PCM or Opus audio format or text format as described in
    ///       the <code>Content-Type</code> HTTP header. </p>
    ///          <p>You can stream audio data to Amazon Lex or you can create a local buffer
    ///       that captures all of the audio data before sending. In general, you get
    ///       better performance if you stream audio data rather than buffering the data
    ///       locally.</p>
    public let inputStream: Data?
    /// <p>You pass this value as the <code>x-amz-lex-request-attributes</code>
    ///       HTTP header.</p>
    ///          <p>Request-specific information passed between Amazon Lex and a client
    ///       application. The value must be a JSON serialized and base64 encoded map
    ///       with string keys and values. The total size of the
    ///         <code>requestAttributes</code> and <code>sessionAttributes</code>
    ///       headers is limited to 12 KB.</p>
    ///          <p>The namespace <code>x-amz-lex:</code> is reserved for special
    ///       attributes. Don't create any request attributes with the prefix
    ///         <code>x-amz-lex:</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting Request Attributes</a>.</p>
    public let requestAttributes: String?
    /// <p>You pass this value as the <code>x-amz-lex-session-attributes</code>
    ///       HTTP header.</p>
    ///          <p>Application-specific information passed between Amazon Lex and a client
    ///       application. The value must be a JSON serialized and base64 encoded map
    ///       with string keys and values. The total size of the
    ///         <code>sessionAttributes</code> and <code>requestAttributes</code>
    ///       headers is limited to 12 KB.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting Session Attributes</a>.</p>
    public let sessionAttributes: String?
    /// <p>The ID of the client application user. Amazon Lex uses this to identify a
    ///       user's conversation with your bot. At runtime, each request must contain
    ///       the <code>userID</code> field.</p>
    ///          <p>To decide the user ID to use for your application, consider the
    ///       following factors.</p>
    ///          <ul>
    ///             <li>
    ///                <p>The <code>userID</code> field must not contain any personally
    ///           identifiable information of the user, for example, name, personal
    ///           identification numbers, or other end user personal information.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you want a user to start a conversation on one device and
    ///           continue on another device, use a user-specific identifier.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you want the same user to be able to have two independent
    ///           conversations on two different devices, choose a device-specific
    ///           identifier.</p>
    ///             </li>
    ///             <li>
    ///                <p>A user can't have two independent conversations with two different
    ///           versions of the same bot. For example, a user can't have a
    ///           conversation with the PROD and BETA versions of the same bot. If you
    ///           anticipate that a user will need to have conversation with two
    ///           different versions, for example, while testing, include the bot alias
    ///           in the user ID to separate the two conversations.</p>
    ///             </li>
    ///          </ul>
    public let userId: String?

    public init (
        accept: String? = nil,
        activeContexts: String? = nil,
        botAlias: String? = nil,
        botName: String? = nil,
        contentType: String? = nil,
        inputStream: Data? = nil,
        requestAttributes: String? = nil,
        sessionAttributes: String? = nil,
        userId: String? = nil
    )
    {
        self.accept = accept
        self.activeContexts = activeContexts
        self.botAlias = botAlias
        self.botName = botName
        self.contentType = contentType
        self.inputStream = inputStream
        self.requestAttributes = requestAttributes
        self.sessionAttributes = sessionAttributes
        self.userId = userId
    }
}
