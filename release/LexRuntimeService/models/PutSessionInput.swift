// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutSessionInput: Equatable {
    /// <p>The message that Amazon Lex returns in the response can be either text or
    ///       speech based depending on the value of this field.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
    ///           returns text in the response.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value begins with <code>audio/</code>, Amazon Lex returns speech
    ///           in the response. Amazon Lex uses Amazon Polly to generate the speech in the
    ///           configuration that you specify. For example, if you specify
    ///             <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the
    ///           MPEG format.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value is <code>audio/pcm</code>, the speech is returned as
    ///             <code>audio/pcm</code> in 16-bit, little endian format.</p>
    ///             </li>
    ///             <li>
    ///                <p>The following are the accepted values:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>audio/mpeg</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>audio/ogg</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>audio/pcm</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>audio/*</code> (defaults to mpeg)</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>text/plain; charset=utf-8</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let accept: String?
    /// <p>A list of contexts active for the request. A context can be activated
    ///       when a previous intent is fulfilled, or by including the context in the
    ///       request,</p>
    ///          <p>If you don't specify a list of contexts, Amazon Lex will use the current
    ///       list of contexts for the session. If you specify an empty list, all
    ///       contexts for the session are cleared.</p>
    public let activeContexts: [ActiveContext]?
    /// <p>The alias in use for the bot that contains the session data.</p>
    public let botAlias: String?
    /// <p>The name of the bot that contains the session data.</p>
    public let botName: String?
    /// <p>Sets the next action that the bot should take to fulfill the
    ///       conversation.</p>
    public let dialogAction: DialogAction?
    /// <p>A summary of the recent intents for the bot. You can use the intent
    ///       summary view to set a checkpoint label on an intent and modify attributes
    ///       of intents. You can also use it to remove or add intent summary objects to
    ///       the list.</p>
    ///          <p>An intent that you modify or add to the list must make sense for the
    ///       bot. For example, the intent name must be valid for the bot. You must
    ///       provide valid values for:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>intentName</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>slot names</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>slotToElict</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>If you send the <code>recentIntentSummaryView</code> parameter in a
    ///         <code>PutSession</code> request, the contents of the new summary view
    ///       replaces the old summary view. For example, if a <code>GetSession</code>
    ///       request returns three intents in the summary view and you call
    ///         <code>PutSession</code> with one intent in the summary view, the next
    ///       call to <code>GetSession</code> will only return one intent.</p>
    public let recentIntentSummaryView: [IntentSummary]?
    /// <p>Map of key/value pairs representing the session-specific context
    ///       information. It contains application information passed between Amazon Lex and
    ///       a client application.</p>
    public let sessionAttributes: [String:String]?
    /// <p>The ID of the client application user. Amazon Lex uses this to identify a
    ///       user's conversation with your bot. </p>
    public let userId: String?

    public init (
        accept: String? = nil,
        activeContexts: [ActiveContext]? = nil,
        botAlias: String? = nil,
        botName: String? = nil,
        dialogAction: DialogAction? = nil,
        recentIntentSummaryView: [IntentSummary]? = nil,
        sessionAttributes: [String:String]? = nil,
        userId: String? = nil
    )
    {
        self.accept = accept
        self.activeContexts = activeContexts
        self.botAlias = botAlias
        self.botName = botName
        self.dialogAction = dialogAction
        self.recentIntentSummaryView = recentIntentSummaryView
        self.sessionAttributes = sessionAttributes
        self.userId = userId
    }
}
