// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PostTextInputBody: Equatable {
    public let sessionAttributes: [String:String]?
    public let requestAttributes: [String:String]?
    public let inputText: String?
    public let activeContexts: [ActiveContext]?
}

extension PostTextInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activeContexts
        case inputText
        case requestAttributes
        case sessionAttributes
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sessionAttributes)
        var sessionAttributesDecoded0: [String:String]? = nil
        if let sessionAttributesContainer = sessionAttributesContainer {
            sessionAttributesDecoded0 = [String:String]()
            for (key0, string0) in sessionAttributesContainer {
                sessionAttributesDecoded0?[key0] = string0
            }
        }
        sessionAttributes = sessionAttributesDecoded0
        let requestAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestAttributes)
        var requestAttributesDecoded0: [String:String]? = nil
        if let requestAttributesContainer = requestAttributesContainer {
            requestAttributesDecoded0 = [String:String]()
            for (key0, string0) in requestAttributesContainer {
                requestAttributesDecoded0?[key0] = string0
            }
        }
        requestAttributes = requestAttributesDecoded0
        let inputTextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputText)
        inputText = inputTextDecoded
        let activeContextsContainer = try containerValues.decodeIfPresent([ActiveContext].self, forKey: .activeContexts)
        var activeContextsDecoded0:[ActiveContext]? = nil
        if let activeContextsContainer = activeContextsContainer {
            activeContextsDecoded0 = [ActiveContext]()
            for structure0 in activeContextsContainer {
                activeContextsDecoded0?.append(structure0)
            }
        }
        activeContexts = activeContextsDecoded0
    }
}
