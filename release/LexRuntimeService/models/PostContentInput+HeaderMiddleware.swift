// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PostContentInputHeadersMiddleware: Middleware {
    public let id: String = "PostContentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostContentInput>,
                  next: H) -> Swift.Result<OperationOutput<PostContentOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accept = input.operationInput.accept {
            input.builder.withHeader(name: "Accept", value: String(accept))
        }
        if let activeContexts = input.operationInput.activeContexts {
            do {
                let base64EncodedValue = try activeContexts.base64EncodedString()
                input.builder.withHeader(name: "x-amz-lex-active-contexts", value: String(base64EncodedValue))
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: String(contentType))
        }
        if let requestAttributes = input.operationInput.requestAttributes {
            do {
                let base64EncodedValue = try requestAttributes.base64EncodedString()
                input.builder.withHeader(name: "x-amz-lex-request-attributes", value: String(base64EncodedValue))
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        if let sessionAttributes = input.operationInput.sessionAttributes {
            do {
                let base64EncodedValue = try sessionAttributes.base64EncodedString()
                input.builder.withHeader(name: "x-amz-lex-session-attributes", value: String(base64EncodedValue))
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostContentInput>
    public typealias MOutput = OperationOutput<PostContentOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<PostContentOutputError>
}
