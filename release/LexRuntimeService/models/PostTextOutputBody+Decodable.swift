// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PostTextOutputBody: Equatable {
    public let intentName: String?
    public let nluIntentConfidence: IntentConfidence?
    public let alternativeIntents: [PredictedIntent]?
    public let slots: [String:String]?
    public let sessionAttributes: [String:String]?
    public let message: String?
    public let sentimentResponse: SentimentResponse?
    public let messageFormat: MessageFormatType?
    public let dialogState: DialogState?
    public let slotToElicit: String?
    public let responseCard: ResponseCard?
    public let sessionId: String?
    public let botVersion: String?
    public let activeContexts: [ActiveContext]?
}

extension PostTextOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activeContexts
        case alternativeIntents
        case botVersion
        case dialogState
        case intentName
        case message
        case messageFormat
        case nluIntentConfidence
        case responseCard
        case sentimentResponse
        case sessionAttributes
        case sessionId
        case slotToElicit
        case slots
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let nluIntentConfidenceDecoded = try containerValues.decodeIfPresent(IntentConfidence.self, forKey: .nluIntentConfidence)
        nluIntentConfidence = nluIntentConfidenceDecoded
        let alternativeIntentsContainer = try containerValues.decodeIfPresent([PredictedIntent].self, forKey: .alternativeIntents)
        var alternativeIntentsDecoded0:[PredictedIntent]? = nil
        if let alternativeIntentsContainer = alternativeIntentsContainer {
            alternativeIntentsDecoded0 = [PredictedIntent]()
            for structure0 in alternativeIntentsContainer {
                alternativeIntentsDecoded0?.append(structure0)
            }
        }
        alternativeIntents = alternativeIntentsDecoded0
        let slotsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .slots)
        var slotsDecoded0: [String:String]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [String:String]()
            for (key0, string0) in slotsContainer {
                slotsDecoded0?[key0] = string0
            }
        }
        slots = slotsDecoded0
        let sessionAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sessionAttributes)
        var sessionAttributesDecoded0: [String:String]? = nil
        if let sessionAttributesContainer = sessionAttributesContainer {
            sessionAttributesDecoded0 = [String:String]()
            for (key0, string0) in sessionAttributesContainer {
                sessionAttributesDecoded0?[key0] = string0
            }
        }
        sessionAttributes = sessionAttributesDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let sentimentResponseDecoded = try containerValues.decodeIfPresent(SentimentResponse.self, forKey: .sentimentResponse)
        sentimentResponse = sentimentResponseDecoded
        let messageFormatDecoded = try containerValues.decodeIfPresent(MessageFormatType.self, forKey: .messageFormat)
        messageFormat = messageFormatDecoded
        let dialogStateDecoded = try containerValues.decodeIfPresent(DialogState.self, forKey: .dialogState)
        dialogState = dialogStateDecoded
        let slotToElicitDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotToElicit)
        slotToElicit = slotToElicitDecoded
        let responseCardDecoded = try containerValues.decodeIfPresent(ResponseCard.self, forKey: .responseCard)
        responseCard = responseCardDecoded
        let sessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let activeContextsContainer = try containerValues.decodeIfPresent([ActiveContext].self, forKey: .activeContexts)
        var activeContextsDecoded0:[ActiveContext]? = nil
        if let activeContextsContainer = activeContextsContainer {
            activeContextsDecoded0 = [ActiveContext]()
            for structure0 in activeContextsContainer {
                activeContextsDecoded0?.append(structure0)
            }
        }
        activeContexts = activeContextsDecoded0
    }
}
