// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides information about the state of an intent. You can use this
///       information to get the current state of an intent so that you can process
///       the intent, or so that you can return the intent to its previous
///       state.</p>
public struct IntentSummary: Equatable {
    /// <p>A user-defined label that identifies a particular intent. You can use
    ///       this label to return to a previous intent. </p>
    ///          <p>Use the <code>checkpointLabelFilter</code> parameter of the
    ///         <code>GetSessionRequest</code> operation to filter the intents returned
    ///       by the operation to those with only the specified label.</p>
    public let checkpointLabel: String?
    /// <p>The status of the intent after the user responds to the confirmation
    ///       prompt. If the user confirms the intent, Amazon Lex sets this field to
    ///         <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets this
    ///       value to <code>Denied</code>. The possible values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Confirmed</code> - The user has responded "Yes" to the
    ///           confirmation prompt, confirming that the intent is complete and that
    ///           it is ready to be fulfilled.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Denied</code> - The user has responded "No" to the
    ///           confirmation prompt.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>None</code> - The user has never been prompted for
    ///           confirmation; or, the user was prompted but did not confirm or deny
    ///           the prompt.</p>
    ///             </li>
    ///          </ul>
    public let confirmationStatus: ConfirmationStatus?
    /// <p>The next action that the bot should take in its interaction with the
    ///       user. The possible values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ConfirmIntent</code> - The next action is asking the user if
    ///           the intent is complete and ready to be fulfilled. This is a yes/no
    ///           question such as "Place the order?"</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Close</code> - Indicates that the there will not be a
    ///           response from the user. For example, the statement "Your order has
    ///           been placed" does not require a response.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ElicitIntent</code> - The next action is to determine the
    ///           intent that the user wants to fulfill.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ElicitSlot</code> - The next action is to elicit a slot
    ///           value from the user.</p>
    ///             </li>
    ///          </ul>
    public let dialogActionType: DialogActionType?
    /// <p>The fulfillment state of the intent. The possible values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Failed</code> - The Lambda function associated with the
    ///           intent failed to fulfill the intent.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Fulfilled</code> - The intent has fulfilled by the Lambda
    ///           function associated with the intent. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ReadyForFulfillment</code> - All of the information
    ///           necessary for the intent is present and the intent ready to be
    ///           fulfilled by the client application.</p>
    ///             </li>
    ///          </ul>
    public let fulfillmentState: FulfillmentState?
    /// <p>The name of the intent.</p>
    public let intentName: String?
    /// <p>The next slot to elicit from the user. If there is not slot to elicit,
    ///       the field is blank.</p>
    public let slotToElicit: String?
    /// <p>Map of the slots that have been gathered and their values. </p>
    public let slots: [String:String]?

    public init (
        checkpointLabel: String? = nil,
        confirmationStatus: ConfirmationStatus? = nil,
        dialogActionType: DialogActionType? = nil,
        fulfillmentState: FulfillmentState? = nil,
        intentName: String? = nil,
        slotToElicit: String? = nil,
        slots: [String:String]? = nil
    )
    {
        self.checkpointLabel = checkpointLabel
        self.confirmationStatus = confirmationStatus
        self.dialogActionType = dialogActionType
        self.fulfillmentState = fulfillmentState
        self.intentName = intentName
        self.slotToElicit = slotToElicit
        self.slots = slots
    }
}
