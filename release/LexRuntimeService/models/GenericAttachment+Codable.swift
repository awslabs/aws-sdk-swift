// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GenericAttachment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachmentLinkUrl
        case buttons
        case imageUrl
        case subTitle
        case title
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentLinkUrl = attachmentLinkUrl {
            try encodeContainer.encode(attachmentLinkUrl, forKey: .attachmentLinkUrl)
        }
        if let buttons = buttons {
            var buttonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .buttons)
            for listofbuttons0 in buttons {
                try buttonsContainer.encode(listofbuttons0)
            }
        }
        if let imageUrl = imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let subTitle = subTitle {
            try encodeContainer.encode(subTitle, forKey: .subTitle)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let subTitleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subTitle)
        subTitle = subTitleDecoded
        let attachmentLinkUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachmentLinkUrl)
        attachmentLinkUrl = attachmentLinkUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let buttonsContainer = try containerValues.decodeIfPresent([Button].self, forKey: .buttons)
        var buttonsDecoded0:[Button]? = nil
        if let buttonsContainer = buttonsContainer {
            buttonsDecoded0 = [Button]()
            for structure0 in buttonsContainer {
                buttonsDecoded0?.append(structure0)
            }
        }
        buttons = buttonsDecoded0
    }
}
