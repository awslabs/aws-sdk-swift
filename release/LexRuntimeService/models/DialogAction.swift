// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the next action that the bot should take in its interaction
///       with the user and provides information about the context in which the
///       action takes place. Use the <code>DialogAction</code> data type to set the
///       interaction to a specific state, or to return the interaction to a
///       previous state.</p>
public struct DialogAction: Equatable {
    /// <p>The fulfillment state of the intent. The possible values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Failed</code> - The Lambda function associated with the
    ///           intent failed to fulfill the intent.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Fulfilled</code> - The intent has fulfilled by the Lambda
    ///           function associated with the intent. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ReadyForFulfillment</code> - All of the information
    ///           necessary for the intent is present and the intent ready to be
    ///           fulfilled by the client application.</p>
    ///             </li>
    ///          </ul>
    public let fulfillmentState: FulfillmentState?
    /// <p>The name of the intent.</p>
    public let intentName: String?
    /// <p>The message that should be shown to the user. If you don't specify a
    ///       message, Amazon Lex will use the message configured for the intent.</p>
    public let message: String?
    /// <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PlainText</code> - The message contains plain UTF-8
    ///           text.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CustomPayload</code> - The message is a custom format for
    ///           the client.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SSML</code> - The message contains text formatted for voice
    ///           output.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Composite</code> - The message contains an escaped JSON
    ///           object containing one or more messages. For more information, see
    ///             <a href="https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html">Message Groups</a>. </p>
    ///             </li>
    ///          </ul>
    public let messageFormat: MessageFormatType?
    /// <p>The name of the slot that should be elicited from the user.</p>
    public let slotToElicit: String?
    /// <p>Map of the slots that have been gathered and their values. </p>
    public let slots: [String:String]?
    /// <p>The next action that the bot should take in its interaction with the
    ///       user. The possible values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ConfirmIntent</code> - The next action is asking the user if
    ///           the intent is complete and ready to be fulfilled. This is a yes/no
    ///           question such as "Place the order?"</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Close</code> - Indicates that the there will not be a
    ///           response from the user. For example, the statement "Your order has
    ///           been placed" does not require a response.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Delegate</code> - The next action is determined by
    ///           Amazon Lex.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ElicitIntent</code> - The next action is to determine the
    ///           intent that the user wants to fulfill.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ElicitSlot</code> - The next action is to elicit a slot
    ///           value from the user.</p>
    ///             </li>
    ///          </ul>
    public let type: DialogActionType?

    public init (
        fulfillmentState: FulfillmentState? = nil,
        intentName: String? = nil,
        message: String? = nil,
        messageFormat: MessageFormatType? = nil,
        slotToElicit: String? = nil,
        slots: [String:String]? = nil,
        type: DialogActionType? = nil
    )
    {
        self.fulfillmentState = fulfillmentState
        self.intentName = intentName
        self.message = message
        self.messageFormat = messageFormat
        self.slotToElicit = slotToElicit
        self.slots = slots
        self.type = type
    }
}
