// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PredictedIntent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case intentName
        case nluIntentConfidence
        case slots
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intentName = intentName {
            try encodeContainer.encode(intentName, forKey: .intentName)
        }
        if let nluIntentConfidence = nluIntentConfidence {
            try encodeContainer.encode(nluIntentConfidence, forKey: .nluIntentConfidence)
        }
        if let slots = slots {
            var slotsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .slots)
            for (dictKey0, stringmap0) in slots {
                try slotsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let nluIntentConfidenceDecoded = try containerValues.decodeIfPresent(IntentConfidence.self, forKey: .nluIntentConfidence)
        nluIntentConfidence = nluIntentConfidenceDecoded
        let slotsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .slots)
        var slotsDecoded0: [String:String]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [String:String]()
            for (key0, string0) in slotsContainer {
                slotsDecoded0?[key0] = string0
            }
        }
        slots = slotsDecoded0
    }
}
