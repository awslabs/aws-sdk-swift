// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventIntegrationsOutputBody: Equatable {
    public let eventIntegrations: [EventIntegration]?
    public let nextToken: String?
}

extension ListEventIntegrationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventIntegrations = "EventIntegrations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIntegrationsContainer = try containerValues.decodeIfPresent([EventIntegration].self, forKey: .eventIntegrations)
        var eventIntegrationsDecoded0:[EventIntegration]? = nil
        if let eventIntegrationsContainer = eventIntegrationsContainer {
            eventIntegrationsDecoded0 = [EventIntegration]()
            for structure0 in eventIntegrationsContainer {
                eventIntegrationsDecoded0?.append(structure0)
            }
        }
        eventIntegrations = eventIntegrationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
