// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventIntegrationAssociationsOutputBody: Equatable {
    public let eventIntegrationAssociations: [EventIntegrationAssociation]?
    public let nextToken: String?
}

extension ListEventIntegrationAssociationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventIntegrationAssociations = "EventIntegrationAssociations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIntegrationAssociationsContainer = try containerValues.decodeIfPresent([EventIntegrationAssociation].self, forKey: .eventIntegrationAssociations)
        var eventIntegrationAssociationsDecoded0:[EventIntegrationAssociation]? = nil
        if let eventIntegrationAssociationsContainer = eventIntegrationAssociationsContainer {
            eventIntegrationAssociationsDecoded0 = [EventIntegrationAssociation]()
            for structure0 in eventIntegrationAssociationsContainer {
                eventIntegrationAssociationsDecoded0?.append(structure0)
            }
        }
        eventIntegrationAssociations = eventIntegrationAssociationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
