// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProjectInputBody: Equatable {
    public let datasetName: String?
    public let name: String?
    public let recipeName: String?
    public let sample: Sample?
    public let roleArn: String?
    public let tags: [String:String]?
}

extension CreateProjectInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case datasetName = "DatasetName"
        case name = "Name"
        case recipeName = "RecipeName"
        case roleArn = "RoleArn"
        case sample = "Sample"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let recipeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recipeName)
        recipeName = recipeNameDecoded
        let sampleDecoded = try containerValues.decodeIfPresent(Sample.self, forKey: .sample)
        sample = sampleDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
