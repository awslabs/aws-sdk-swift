// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConditionExpression: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case condition = "Condition"
        case targetColumn = "TargetColumn"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let targetColumn = targetColumn {
            try encodeContainer.encode(targetColumn, forKey: .targetColumn)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .condition)
        condition = conditionDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let targetColumnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetColumn)
        targetColumn = targetColumnDecoded
    }
}
