// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRecipeInputBody: Equatable {
    public let description: String?
    public let name: String?
    public let steps: [RecipeStep]?
    public let tags: [String:String]?
}

extension CreateRecipeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case name = "Name"
        case steps = "Steps"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let stepsContainer = try containerValues.decodeIfPresent([RecipeStep].self, forKey: .steps)
        var stepsDecoded0:[RecipeStep]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [RecipeStep]()
            for structure0 in stepsContainer {
                stepsDecoded0?.append(structure0)
            }
        }
        steps = stepsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
