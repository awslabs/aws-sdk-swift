// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProfileJobInputBody: Equatable {
    public let datasetName: String?
    public let encryptionKeyArn: String?
    public let encryptionMode: EncryptionMode?
    public let name: String?
    public let logSubscription: LogSubscription?
    public let maxCapacity: Int
    public let maxRetries: Int
    public let outputLocation: S3Location?
    public let roleArn: String?
    public let tags: [String:String]?
    public let timeout: Int
    public let jobSample: JobSample?
}

extension CreateProfileJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case datasetName = "DatasetName"
        case encryptionKeyArn = "EncryptionKeyArn"
        case encryptionMode = "EncryptionMode"
        case jobSample = "JobSample"
        case logSubscription = "LogSubscription"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case outputLocation = "OutputLocation"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case timeout = "Timeout"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(EncryptionMode.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let maxCapacityDecoded = try containerValues.decode(Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let maxRetriesDecoded = try containerValues.decode(Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let timeoutDecoded = try containerValues.decode(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let jobSampleDecoded = try containerValues.decodeIfPresent(JobSample.self, forKey: .jobSample)
        jobSample = jobSampleDecoded
    }
}
