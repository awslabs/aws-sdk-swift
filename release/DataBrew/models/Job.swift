// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents all of the attributes of a DataBrew job.</p>
public struct Job: Equatable {
    /// <p>The ID of the AWS account that owns the job.</p>
    public let accountId: String?
    /// <p>The date and time that the job was created.</p>
    public let createDate: Date?
    /// <p>The Amazon Resource Name (ARN) of the user who created the job.</p>
    public let createdBy: String?
    /// <p>A dataset that the job is to process.</p>
    public let datasetName: String?
    /// <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the job
    ///             output. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/encryption-security-configuration.html">Encrypting data
    ///                 written by DataBrew jobs</a>
    ///          </p>
    public let encryptionKeyArn: String?
    /// <p>The encryption mode for the job, which can be one of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>SSE-KMS</code> - Server-side encryption with keys managed by AWS KMS.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon
    ///                     S3.</p>
    ///             </li>
    ///          </ul>
    public let encryptionMode: EncryptionMode?
    /// <p>A sample configuration for profile jobs only, which determines the number of rows on which the
    ///             profile job is run. If a <code>JobSample</code> value isn't provided, the default value
    ///             is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the
    ///             size parameter.</p>
    public let jobSample: JobSample?
    /// <p>The Amazon Resource Name (ARN) of the user who last modified the job.</p>
    public let lastModifiedBy: String?
    /// <p>The modification date and time of the job.</p>
    public let lastModifiedDate: Date?
    /// <p>The current status of Amazon CloudWatch logging for the job.</p>
    public let logSubscription: LogSubscription?
    /// <p>The maximum number of nodes that can be consumed when the job processes data.</p>
    public let maxCapacity: Int
    /// <p>The maximum number of times to retry the job after a job run fails.</p>
    public let maxRetries: Int
    /// <p>The unique name of the job.</p>
    public let name: String?
    /// <p>One or more artifacts that represent output from running the job.</p>
    public let outputs: [Output]?
    /// <p>The name of the project that the job is associated with.</p>
    public let projectName: String?
    /// <p>A set of steps that the job runs.</p>
    public let recipeReference: RecipeReference?
    /// <p>The unique Amazon Resource Name (ARN) for the job.</p>
    public let resourceArn: String?
    /// <p>The Amazon Resource Name (ARN) of the role to be assumed for this job.</p>
    public let roleArn: String?
    /// <p>Metadata tags that have been applied to the job.</p>
    public let tags: [String:String]?
    /// <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
    ///             period ends with a status of <code>TIMEOUT</code>.</p>
    public let timeout: Int
    /// <p>The job type of the job, which must be one of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>PROFILE</code> - A job to analyze a dataset, to determine its size, data
    ///                     types, data distribution, and more.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>RECIPE</code> - A job to apply one or more transformations to a
    ///                     dataset.</p>
    ///             </li>
    ///          </ul>
    public let type: JobType?

    public init (
        accountId: String? = nil,
        createDate: Date? = nil,
        createdBy: String? = nil,
        datasetName: String? = nil,
        encryptionKeyArn: String? = nil,
        encryptionMode: EncryptionMode? = nil,
        jobSample: JobSample? = nil,
        lastModifiedBy: String? = nil,
        lastModifiedDate: Date? = nil,
        logSubscription: LogSubscription? = nil,
        maxCapacity: Int = 0,
        maxRetries: Int = 0,
        name: String? = nil,
        outputs: [Output]? = nil,
        projectName: String? = nil,
        recipeReference: RecipeReference? = nil,
        resourceArn: String? = nil,
        roleArn: String? = nil,
        tags: [String:String]? = nil,
        timeout: Int = 0,
        type: JobType? = nil
    )
    {
        self.accountId = accountId
        self.createDate = createDate
        self.createdBy = createdBy
        self.datasetName = datasetName
        self.encryptionKeyArn = encryptionKeyArn
        self.encryptionMode = encryptionMode
        self.jobSample = jobSample
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedDate = lastModifiedDate
        self.logSubscription = logSubscription
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.outputs = outputs
        self.projectName = projectName
        self.recipeReference = recipeReference
        self.resourceArn = resourceArn
        self.roleArn = roleArn
        self.tags = tags
        self.timeout = timeout
        self.type = type
    }
}
