// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeJobOutputBody: Equatable {
    public let createDate: Date?
    public let createdBy: String?
    public let datasetName: String?
    public let encryptionKeyArn: String?
    public let encryptionMode: EncryptionMode?
    public let name: String?
    public let type: JobType?
    public let lastModifiedBy: String?
    public let lastModifiedDate: Date?
    public let logSubscription: LogSubscription?
    public let maxCapacity: Int
    public let maxRetries: Int
    public let outputs: [Output]?
    public let projectName: String?
    public let recipeReference: RecipeReference?
    public let resourceArn: String?
    public let roleArn: String?
    public let tags: [String:String]?
    public let timeout: Int
    public let jobSample: JobSample?
}

extension DescribeJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createDate = "CreateDate"
        case createdBy = "CreatedBy"
        case datasetName = "DatasetName"
        case encryptionKeyArn = "EncryptionKeyArn"
        case encryptionMode = "EncryptionMode"
        case jobSample = "JobSample"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case logSubscription = "LogSubscription"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case outputs = "Outputs"
        case projectName = "ProjectName"
        case recipeReference = "RecipeReference"
        case resourceArn = "ResourceArn"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case timeout = "Timeout"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createDate)
        createDate = createDateDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(EncryptionMode.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(JobType.self, forKey: .type)
        type = typeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let maxCapacityDecoded = try containerValues.decode(Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let maxRetriesDecoded = try containerValues.decode(Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let outputsContainer = try containerValues.decodeIfPresent([Output].self, forKey: .outputs)
        var outputsDecoded0:[Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [Output]()
            for structure0 in outputsContainer {
                outputsDecoded0?.append(structure0)
            }
        }
        outputs = outputsDecoded0
        let projectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let recipeReferenceDecoded = try containerValues.decodeIfPresent(RecipeReference.self, forKey: .recipeReference)
        recipeReference = recipeReferenceDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let timeoutDecoded = try containerValues.decode(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let jobSampleDecoded = try containerValues.decodeIfPresent(JobSample.self, forKey: .jobSample)
        jobSample = jobSampleDecoded
    }
}
