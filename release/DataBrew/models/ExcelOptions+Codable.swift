// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExcelOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case headerRow = "HeaderRow"
        case sheetIndexes = "SheetIndexes"
        case sheetNames = "SheetNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headerRow = headerRow {
            try encodeContainer.encode(headerRow, forKey: .headerRow)
        }
        if let sheetIndexes = sheetIndexes {
            var sheetIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sheetIndexes)
            for sheetindexlist0 in sheetIndexes {
                try sheetIndexesContainer.encode(sheetindexlist0)
            }
        }
        if let sheetNames = sheetNames {
            var sheetNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sheetNames)
            for sheetnamelist0 in sheetNames {
                try sheetNamesContainer.encode(sheetnamelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sheetNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .sheetNames)
        var sheetNamesDecoded0:[String]? = nil
        if let sheetNamesContainer = sheetNamesContainer {
            sheetNamesDecoded0 = [String]()
            for string0 in sheetNamesContainer {
                sheetNamesDecoded0?.append(string0)
            }
        }
        sheetNames = sheetNamesDecoded0
        let sheetIndexesContainer = try containerValues.decodeIfPresent([Int].self, forKey: .sheetIndexes)
        var sheetIndexesDecoded0:[Int]? = nil
        if let sheetIndexesContainer = sheetIndexesContainer {
            sheetIndexesDecoded0 = [Int]()
            for integer0 in sheetIndexesContainer {
                sheetIndexesDecoded0?.append(integer0)
            }
        }
        sheetIndexes = sheetIndexesDecoded0
        let headerRowDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .headerRow)
        headerRow = headerRowDecoded
    }
}
