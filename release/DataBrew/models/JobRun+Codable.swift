// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobRun: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attempt = "Attempt"
        case completedOn = "CompletedOn"
        case datasetName = "DatasetName"
        case errorMessage = "ErrorMessage"
        case executionTime = "ExecutionTime"
        case jobName = "JobName"
        case jobSample = "JobSample"
        case logGroupName = "LogGroupName"
        case logSubscription = "LogSubscription"
        case outputs = "Outputs"
        case recipeReference = "RecipeReference"
        case runId = "RunId"
        case startedBy = "StartedBy"
        case startedOn = "StartedOn"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attempt != 0 {
            try encodeContainer.encode(attempt, forKey: .attempt)
        }
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if executionTime != 0 {
            try encodeContainer.encode(executionTime, forKey: .executionTime)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobSample = jobSample {
            try encodeContainer.encode(jobSample, forKey: .jobSample)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logSubscription = logSubscription {
            try encodeContainer.encode(logSubscription.rawValue, forKey: .logSubscription)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for outputlist0 in outputs {
                try outputsContainer.encode(outputlist0)
            }
        }
        if let recipeReference = recipeReference {
            try encodeContainer.encode(recipeReference, forKey: .recipeReference)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let startedBy = startedBy {
            try encodeContainer.encode(startedBy, forKey: .startedBy)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptDecoded = try containerValues.decode(Int.self, forKey: .attempt)
        attempt = attemptDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let executionTimeDecoded = try containerValues.decode(Int.self, forKey: .executionTime)
        executionTime = executionTimeDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(JobRunState.self, forKey: .state)
        state = stateDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let outputsContainer = try containerValues.decodeIfPresent([Output].self, forKey: .outputs)
        var outputsDecoded0:[Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [Output]()
            for structure0 in outputsContainer {
                outputsDecoded0?.append(structure0)
            }
        }
        outputs = outputsDecoded0
        let recipeReferenceDecoded = try containerValues.decodeIfPresent(RecipeReference.self, forKey: .recipeReference)
        recipeReference = recipeReferenceDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let jobSampleDecoded = try containerValues.decodeIfPresent(JobSample.self, forKey: .jobSample)
        jobSample = jobSampleDecoded
    }
}
