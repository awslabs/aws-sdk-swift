// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SampleType {
    case firstN
    case lastN
    case random
    case sdkUnknown(String)
}

extension SampleType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SampleType] {
        return [
            .firstN,
            .lastN,
            .random,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .firstN: return "FIRST_N"
        case .lastN: return "LAST_N"
        case .random: return "RANDOM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SampleType(rawValue: rawValue) ?? SampleType.sdkUnknown(rawValue)
    }
}
