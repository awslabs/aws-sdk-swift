// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RecipeStep: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case conditionExpressions = "ConditionExpressions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let conditionExpressions = conditionExpressions {
            var conditionExpressionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditionExpressions)
            for conditionexpressionlist0 in conditionExpressions {
                try conditionExpressionsContainer.encode(conditionexpressionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(RecipeAction.self, forKey: .action)
        action = actionDecoded
        let conditionExpressionsContainer = try containerValues.decodeIfPresent([ConditionExpression].self, forKey: .conditionExpressions)
        var conditionExpressionsDecoded0:[ConditionExpression]? = nil
        if let conditionExpressionsContainer = conditionExpressionsContainer {
            conditionExpressionsDecoded0 = [ConditionExpression]()
            for structure0 in conditionExpressionsContainer {
                conditionExpressionsDecoded0?.append(structure0)
            }
        }
        conditionExpressions = conditionExpressionsDecoded0
    }
}
