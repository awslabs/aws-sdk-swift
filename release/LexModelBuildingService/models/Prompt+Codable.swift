// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Prompt: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxAttempts
        case messages
        case responseCard
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxAttempts = maxAttempts {
            try encodeContainer.encode(maxAttempts, forKey: .maxAttempts)
        }
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for messagelist0 in messages {
                try messagesContainer.encode(messagelist0)
            }
        }
        if let responseCard = responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messagesContainer = try containerValues.decodeIfPresent([Message].self, forKey: .messages)
        var messagesDecoded0:[Message]? = nil
        if let messagesContainer = messagesContainer {
            messagesDecoded0 = [Message]()
            for structure0 in messagesContainer {
                messagesDecoded0?.append(structure0)
            }
        }
        messages = messagesDecoded0
        let maxAttemptsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxAttempts)
        maxAttempts = maxAttemptsDecoded
        let responseCardDecoded = try containerValues.decodeIfPresent(String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
    }
}
