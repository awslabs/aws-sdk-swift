// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FulfillmentActivity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codeHook
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeHook = codeHook {
            try encodeContainer.encode(codeHook, forKey: .codeHook)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FulfillmentActivityType.self, forKey: .type)
        type = typeDecoded
        let codeHookDecoded = try containerValues.decodeIfPresent(CodeHook.self, forKey: .codeHook)
        codeHook = codeHookDecoded
    }
}
