// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BotChannelAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case botAlias
        case botConfiguration
        case botName
        case createdDate
        case description
        case failureReason
        case name
        case status
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botAlias = botAlias {
            try encodeContainer.encode(botAlias, forKey: .botAlias)
        }
        if let botConfiguration = botConfiguration {
            var botConfigurationContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .botConfiguration)
            for (dictKey0, channelconfigurationmap0) in botConfiguration {
                try botConfigurationContainer.encode(channelconfigurationmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let botName = botName {
            try encodeContainer.encode(botName, forKey: .botName)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let botAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botAlias)
        botAlias = botAliasDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botName)
        botName = botNameDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ChannelType.self, forKey: .type)
        type = typeDecoded
        let botConfigurationContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .botConfiguration)
        var botConfigurationDecoded0: [String:String]? = nil
        if let botConfigurationContainer = botConfigurationContainer {
            botConfigurationDecoded0 = [String:String]()
            for (key0, string0) in botConfigurationContainer {
                botConfigurationDecoded0?[key0] = string0
            }
        }
        botConfiguration = botConfigurationDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ChannelStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
