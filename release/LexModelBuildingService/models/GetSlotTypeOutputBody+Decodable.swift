// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSlotTypeOutputBody: Equatable {
    public let name: String?
    public let description: String?
    public let enumerationValues: [EnumerationValue]?
    public let lastUpdatedDate: Date?
    public let createdDate: Date?
    public let version: String?
    public let checksum: String?
    public let valueSelectionStrategy: SlotValueSelectionStrategy?
    public let parentSlotTypeSignature: String?
    public let slotTypeConfigurations: [SlotTypeConfiguration]?
}

extension GetSlotTypeOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case checksum
        case createdDate
        case description
        case enumerationValues
        case lastUpdatedDate
        case name
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let enumerationValuesContainer = try containerValues.decodeIfPresent([EnumerationValue].self, forKey: .enumerationValues)
        var enumerationValuesDecoded0:[EnumerationValue]? = nil
        if let enumerationValuesContainer = enumerationValuesContainer {
            enumerationValuesDecoded0 = [EnumerationValue]()
            for structure0 in enumerationValuesContainer {
                enumerationValuesDecoded0?.append(structure0)
            }
        }
        enumerationValues = enumerationValuesDecoded0
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(String.self, forKey: .checksum)
        checksum = checksumDecoded
        let valueSelectionStrategyDecoded = try containerValues.decodeIfPresent(SlotValueSelectionStrategy.self, forKey: .valueSelectionStrategy)
        valueSelectionStrategy = valueSelectionStrategyDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let slotTypeConfigurationsContainer = try containerValues.decodeIfPresent([SlotTypeConfiguration].self, forKey: .slotTypeConfigurations)
        var slotTypeConfigurationsDecoded0:[SlotTypeConfiguration]? = nil
        if let slotTypeConfigurationsContainer = slotTypeConfigurationsContainer {
            slotTypeConfigurationsDecoded0 = [SlotTypeConfiguration]()
            for structure0 in slotTypeConfigurationsContainer {
                slotTypeConfigurationsDecoded0?.append(structure0)
            }
        }
        slotTypeConfigurations = slotTypeConfigurationsDecoded0
    }
}
