// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutIntentOutput: Equatable {
    /// <p>Checksum of the <code>$LATEST</code>version of the intent created
    ///       or updated.</p>
    public let checksum: String?
    /// <p>After the Lambda function specified in
    ///         the<code>fulfillmentActivity</code>intent fulfills the intent, Amazon Lex
    ///       conveys this statement to the user.</p>
    public let conclusionStatement: Statement?
    /// <p>If defined in the intent, Amazon Lex prompts the user to confirm the
    ///       intent before fulfilling it.</p>
    public let confirmationPrompt: Prompt?
    /// <p>
    ///             <code>True</code> if a new version of the intent was created. If
    ///       the <code>createVersion</code> field was not specified in the request, the
    ///         <code>createVersion</code> field is set to false in the
    ///       response.</p>
    public let createVersion: Bool?
    /// <p>The date that the intent was created.</p>
    public let createdDate: Date?
    /// <p>A description of the intent.</p>
    public let description: String?
    /// <p>If defined in the intent, Amazon Lex invokes this Lambda function for
    ///       each user input.</p>
    public let dialogCodeHook: CodeHook?
    /// <p>If defined in the intent, Amazon Lex uses this prompt to solicit
    ///       additional user activity after the intent is fulfilled.</p>
    public let followUpPrompt: FollowUpPrompt?
    /// <p>If defined in the intent, Amazon Lex invokes this Lambda function to
    ///       fulfill the intent after the user provides all of the information required
    ///       by the intent.</p>
    public let fulfillmentActivity: FulfillmentActivity?
    /// <p>An array of <code>InputContext</code> objects that lists the contexts
    ///       that must be active for Amazon Lex to choose the intent in a conversation with
    ///       the user.</p>
    public let inputContexts: [InputContext]?
    /// <p>Configuration information, if any, required to connect to an Amazon
    ///       Kendra index and use the <code>AMAZON.KendraSearchIntent</code>
    ///       intent.</p>
    public let kendraConfiguration: KendraConfiguration?
    /// <p>The date that the intent was updated. When you create a resource,
    ///       the creation date and last update dates are the same.</p>
    public let lastUpdatedDate: Date?
    /// <p>The name of the intent.</p>
    public let name: String?
    /// <p>An array of <code>OutputContext</code> objects that lists the contexts
    ///       that the intent activates when the intent is fulfilled.</p>
    public let outputContexts: [OutputContext]?
    /// <p>A unique identifier for the built-in intent that this intent is
    ///       based on.</p>
    public let parentIntentSignature: String?
    /// <p>If the user answers "no" to the question defined in
    ///         <code>confirmationPrompt</code> Amazon Lex responds with this statement to
    ///       acknowledge that the intent was canceled. </p>
    public let rejectionStatement: Statement?
    /// <p> An array of sample utterances that are configured for the intent.
    ///     </p>
    public let sampleUtterances: [String]?
    /// <p>An array of intent slots that are configured for the
    ///       intent.</p>
    public let slots: [Slot]?
    /// <p>The version of the intent. For a new intent, the version is always
    ///         <code>$LATEST</code>.</p>
    public let version: String?

    public init (
        checksum: String? = nil,
        conclusionStatement: Statement? = nil,
        confirmationPrompt: Prompt? = nil,
        createVersion: Bool? = nil,
        createdDate: Date? = nil,
        description: String? = nil,
        dialogCodeHook: CodeHook? = nil,
        followUpPrompt: FollowUpPrompt? = nil,
        fulfillmentActivity: FulfillmentActivity? = nil,
        inputContexts: [InputContext]? = nil,
        kendraConfiguration: KendraConfiguration? = nil,
        lastUpdatedDate: Date? = nil,
        name: String? = nil,
        outputContexts: [OutputContext]? = nil,
        parentIntentSignature: String? = nil,
        rejectionStatement: Statement? = nil,
        sampleUtterances: [String]? = nil,
        slots: [Slot]? = nil,
        version: String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}
