// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutIntentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createVersion
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let conclusionStatement = conclusionStatement {
            try encodeContainer.encode(conclusionStatement, forKey: .conclusionStatement)
        }
        if let confirmationPrompt = confirmationPrompt {
            try encodeContainer.encode(confirmationPrompt, forKey: .confirmationPrompt)
        }
        if let createVersion = createVersion {
            try encodeContainer.encode(createVersion, forKey: .createVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let dialogCodeHook = dialogCodeHook {
            try encodeContainer.encode(dialogCodeHook, forKey: .dialogCodeHook)
        }
        if let followUpPrompt = followUpPrompt {
            try encodeContainer.encode(followUpPrompt, forKey: .followUpPrompt)
        }
        if let fulfillmentActivity = fulfillmentActivity {
            try encodeContainer.encode(fulfillmentActivity, forKey: .fulfillmentActivity)
        }
        if let inputContexts = inputContexts {
            var inputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputContexts)
            for inputcontextlist0 in inputContexts {
                try inputContextsContainer.encode(inputcontextlist0)
            }
        }
        if let kendraConfiguration = kendraConfiguration {
            try encodeContainer.encode(kendraConfiguration, forKey: .kendraConfiguration)
        }
        if let outputContexts = outputContexts {
            var outputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputContexts)
            for outputcontextlist0 in outputContexts {
                try outputContextsContainer.encode(outputcontextlist0)
            }
        }
        if let parentIntentSignature = parentIntentSignature {
            try encodeContainer.encode(parentIntentSignature, forKey: .parentIntentSignature)
        }
        if let rejectionStatement = rejectionStatement {
            try encodeContainer.encode(rejectionStatement, forKey: .rejectionStatement)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for intentutterancelist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(intentutterancelist0)
            }
        }
        if let slots = slots {
            var slotsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .slots)
            for slotlist0 in slots {
                try slotsContainer.encode(slotlist0)
            }
        }
    }
}
