// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBotChannelAssociationOutputBody: Equatable {
    public let name: String?
    public let description: String?
    public let botAlias: String?
    public let botName: String?
    public let createdDate: Date?
    public let type: ChannelType?
    public let botConfiguration: [String:String]?
    public let status: ChannelStatus?
    public let failureReason: String?
}

extension GetBotChannelAssociationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case botAlias
        case botConfiguration
        case botName
        case createdDate
        case description
        case failureReason
        case name
        case status
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let botAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botAlias)
        botAlias = botAliasDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botName)
        botName = botNameDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ChannelType.self, forKey: .type)
        type = typeDecoded
        let botConfigurationContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .botConfiguration)
        var botConfigurationDecoded0: [String:String]? = nil
        if let botConfigurationContainer = botConfigurationContainer {
            botConfigurationDecoded0 = [String:String]()
            for (key0, string0) in botConfigurationContainer {
                botConfigurationDecoded0?[key0] = string0
            }
        }
        botConfiguration = botConfigurationDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ChannelStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
