// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutIntentInput: Equatable {
    /// <p>Identifies a specific revision of the <code>$LATEST</code>
    ///       version.</p>
    ///          <p>When you create a new intent, leave the <code>checksum</code> field
    ///       blank. If you specify a checksum you get a
    ///         <code>BadRequestException</code> exception.</p>
    ///          <p>When you want to update a intent, set the <code>checksum</code>
    ///       field to the checksum of the most recent revision of the
    ///         <code>$LATEST</code> version. If you don't specify the <code>
    ///         checksum</code> field, or if the checksum does not match the
    ///         <code>$LATEST</code> version, you get a
    ///         <code>PreconditionFailedException</code> exception.</p>
    public let checksum: String?
    /// <p> The statement that you want Amazon Lex to convey to the user after the
    ///       intent is successfully fulfilled by the Lambda function. </p>
    ///          <p>This element is relevant only if you provide a Lambda function in
    ///       the <code>fulfillmentActivity</code>. If you return the intent to the
    ///       client application, you can't specify this element.</p>
    ///          <note>
    ///             <p>The <code>followUpPrompt</code> and
    ///           <code>conclusionStatement</code> are mutually exclusive. You can
    ///         specify only one.</p>
    ///          </note>
    public let conclusionStatement: Statement?
    /// <p>Prompts the user to confirm the intent. This question should have a
    ///       yes or no answer.</p>
    ///          <p>Amazon Lex uses this prompt to ensure that the user acknowledges that
    ///       the intent is ready for fulfillment. For example, with the
    ///         <code>OrderPizza</code> intent, you might want to confirm that the order
    ///       is correct before placing it. For other intents, such as intents that
    ///       simply respond to user questions, you might not need to ask the user for
    ///       confirmation before providing the information. </p>
    ///          <note>
    ///             <p>You you must provide both the <code>rejectionStatement</code> and
    ///         the <code>confirmationPrompt</code>, or neither.</p>
    ///          </note>
    public let confirmationPrompt: Prompt?
    /// <p>When set to <code>true</code> a new numbered version of the intent
    ///       is created. This is the same as calling the
    ///         <code>CreateIntentVersion</code> operation. If you do not specify
    ///         <code>createVersion</code>, the default is <code>false</code>.</p>
    public let createVersion: Bool?
    /// <p>A description of the intent.</p>
    public let description: String?
    /// <p> Specifies a Lambda function to invoke for each user input. You can
    ///       invoke this Lambda function to personalize user interaction. </p>
    ///          <p>For example, suppose your bot determines that the user is John.
    ///       Your Lambda function might retrieve John's information from a backend
    ///       database and prepopulate some of the values. For example, if you find that
    ///       John is gluten intolerant, you might set the corresponding intent slot,
    ///         <code>GlutenIntolerant</code>, to true. You might find John's phone
    ///       number and set the corresponding session attribute. </p>
    public let dialogCodeHook: CodeHook?
    /// <p>Amazon Lex uses this prompt to solicit additional activity after
    ///       fulfilling an intent. For example, after the <code>OrderPizza</code>
    ///       intent is fulfilled, you might prompt the user to order a drink.</p>
    ///          <p>The action that Amazon Lex takes depends on the user's response, as
    ///       follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If the user says "Yes" it responds with the clarification
    ///           prompt that is configured for the bot.</p>
    ///             </li>
    ///             <li>
    ///                <p>if the user says "Yes" and continues with an utterance that
    ///           triggers an intent it starts a conversation for the intent.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the user says "No" it responds with the rejection statement
    ///           configured for the the follow-up prompt.</p>
    ///             </li>
    ///             <li>
    ///                <p>If it doesn't recognize the utterance it repeats the follow-up
    ///           prompt again.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>The <code>followUpPrompt</code> field and the
    ///         <code>conclusionStatement</code> field are mutually exclusive. You can
    ///       specify only one. </p>
    public let followUpPrompt: FollowUpPrompt?
    /// <p>Required. Describes how the intent is fulfilled. For example, after
    ///       a user provides all of the information for a pizza order,
    ///         <code>fulfillmentActivity</code> defines how the bot places an order
    ///       with a local pizza store. </p>
    ///          <p> You might configure Amazon Lex to return all of the intent information
    ///       to the client application, or direct it to invoke a Lambda function that
    ///       can process the intent (for example, place an order with a pizzeria).
    ///     </p>
    public let fulfillmentActivity: FulfillmentActivity?
    /// <p>An array of <code>InputContext</code> objects that lists the contexts
    ///       that must be active for Amazon Lex to choose the intent in a conversation with
    ///       the user.</p>
    public let inputContexts: [InputContext]?
    /// <p>Configuration information required to use the
    ///         <code>AMAZON.KendraSearchIntent</code> intent to connect to an Amazon
    ///       Kendra index. For more information, see <a href="http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html">
    ///         AMAZON.KendraSearchIntent</a>.</p>
    public let kendraConfiguration: KendraConfiguration?
    /// <p>The name of the intent. The name is <i>not</i> case
    ///       sensitive. </p>
    ///          <p>The name can't match a built-in intent name, or a built-in intent
    ///       name with "AMAZON." removed. For example, because there is a built-in
    ///       intent called <code>AMAZON.HelpIntent</code>, you can't create a custom
    ///       intent called <code>HelpIntent</code>.</p>
    ///          <p>For a list of built-in intents, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills
    ///         Kit</i>.</p>
    public let name: String?
    /// <p>An array of <code>OutputContext</code> objects that lists the contexts
    ///       that the intent activates when the intent is fulfilled.</p>
    public let outputContexts: [OutputContext]?
    /// <p>A unique identifier for the built-in intent to base this intent on.
    ///       To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills
    ///         Kit</i>.</p>
    public let parentIntentSignature: String?
    /// <p>When the user answers "no" to the question defined in
    ///         <code>confirmationPrompt</code>, Amazon Lex responds with this statement to
    ///       acknowledge that the intent was canceled. </p>
    ///          <note>
    ///             <p>You must provide both the <code>rejectionStatement</code> and the
    ///           <code>confirmationPrompt</code>, or neither.</p>
    ///          </note>
    public let rejectionStatement: Statement?
    /// <p>An array of utterances (strings) that a user might say to signal
    ///       the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity}
    ///       {PizzaSize} pizzas". </p>
    ///
    ///          <p>In each utterance, a slot name is enclosed in curly braces.
    ///     </p>
    public let sampleUtterances: [String]?
    /// <p>An array of intent slots. At runtime, Amazon Lex elicits required slot
    ///       values from the user using prompts defined in the slots. For more
    ///       information, see <a>how-it-works</a>. </p>
    public let slots: [Slot]?

    public init (
        checksum: String? = nil,
        conclusionStatement: Statement? = nil,
        confirmationPrompt: Prompt? = nil,
        createVersion: Bool? = nil,
        description: String? = nil,
        dialogCodeHook: CodeHook? = nil,
        followUpPrompt: FollowUpPrompt? = nil,
        fulfillmentActivity: FulfillmentActivity? = nil,
        inputContexts: [InputContext]? = nil,
        kendraConfiguration: KendraConfiguration? = nil,
        name: String? = nil,
        outputContexts: [OutputContext]? = nil,
        parentIntentSignature: String? = nil,
        rejectionStatement: Statement? = nil,
        sampleUtterances: [String]? = nil,
        slots: [Slot]? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createVersion = createVersion
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
    }
}
