// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnumerationValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case synonyms
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let synonyms = synonyms {
            var synonymsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .synonyms)
            for synonymlist0 in synonyms {
                try synonymsContainer.encode(synonymlist0)
            }
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let synonymsContainer = try containerValues.decodeIfPresent([String].self, forKey: .synonyms)
        var synonymsDecoded0:[String]? = nil
        if let synonymsContainer = synonymsContainer {
            synonymsDecoded0 = [String]()
            for string0 in synonymsContainer {
                synonymsDecoded0?.append(string0)
            }
        }
        synonyms = synonymsDecoded0
    }
}
