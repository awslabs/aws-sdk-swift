// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BuiltinSlotTypeMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case signature
        case supportedLocales
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signature = signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let supportedLocales = supportedLocales {
            var supportedLocalesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedLocales)
            for localelist0 in supportedLocales {
                try supportedLocalesContainer.encode(localelist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signature)
        signature = signatureDecoded
        let supportedLocalesContainer = try containerValues.decodeIfPresent([Locale].self, forKey: .supportedLocales)
        var supportedLocalesDecoded0:[Locale]? = nil
        if let supportedLocalesContainer = supportedLocalesContainer {
            supportedLocalesDecoded0 = [Locale]()
            for string0 in supportedLocalesContainer {
                supportedLocalesDecoded0?.append(string0)
            }
        }
        supportedLocales = supportedLocalesDecoded0
    }
}
