// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UtteranceData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case count
        case distinctUsers
        case firstUtteredDate
        case lastUtteredDate
        case utteranceString
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let distinctUsers = distinctUsers {
            try encodeContainer.encode(distinctUsers, forKey: .distinctUsers)
        }
        if let firstUtteredDate = firstUtteredDate {
            try encodeContainer.encode(firstUtteredDate.timeIntervalSince1970, forKey: .firstUtteredDate)
        }
        if let lastUtteredDate = lastUtteredDate {
            try encodeContainer.encode(lastUtteredDate.timeIntervalSince1970, forKey: .lastUtteredDate)
        }
        if let utteranceString = utteranceString {
            try encodeContainer.encode(utteranceString, forKey: .utteranceString)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let utteranceStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .utteranceString)
        utteranceString = utteranceStringDecoded
        let countDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .count)
        count = countDecoded
        let distinctUsersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .distinctUsers)
        distinctUsers = distinctUsersDecoded
        let firstUtteredDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .firstUtteredDate)
        firstUtteredDate = firstUtteredDateDecoded
        let lastUtteredDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUtteredDate)
        lastUtteredDate = lastUtteredDateDecoded
    }
}
