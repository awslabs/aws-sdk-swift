// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConversationLogsResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case iamRoleArn
        case logSettings
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let logSettings = logSettings {
            var logSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logSettings)
            for logsettingsresponselist0 in logSettings {
                try logSettingsContainer.encode(logsettingsresponselist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logSettingsContainer = try containerValues.decodeIfPresent([LogSettingsResponse].self, forKey: .logSettings)
        var logSettingsDecoded0:[LogSettingsResponse]? = nil
        if let logSettingsContainer = logSettingsContainer {
            logSettingsDecoded0 = [LogSettingsResponse]()
            for structure0 in logSettingsContainer {
                logSettingsDecoded0?.append(structure0)
            }
        }
        logSettings = logSettingsDecoded0
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
    }
}
