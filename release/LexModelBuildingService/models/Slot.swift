// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Identifies the version of a specific slot.</p>
public struct Slot: Equatable {
    /// <p>A list of default values for the slot. Default values are used when
    ///       Amazon Lex hasn't determined a value for a slot. You can specify default values
    ///       from context variables, session attributes, and defined values.</p>
    public let defaultValueSpec: SlotDefaultValueSpec?
    /// <p>A description of the slot.</p>
    public let description: String?
    /// <p>The name of the slot.</p>
    public let name: String?
    /// <p>Determines whether a slot is obfuscated in conversation logs and
    ///       stored utterances. When you obfuscate a slot, the value is replaced by the
    ///       slot name in curly braces ({}). For example, if the slot name is
    ///       "full_name", obfuscated values are replaced with "{full_name}". For more
    ///       information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html"> Slot Obfuscation </a>.
    ///     </p>
    public let obfuscationSetting: ObfuscationSetting?
    /// <p> Directs Amazon Lex the order in which to elicit this slot value from
    ///       the user. For example, if the intent has two slots with priorities 1 and
    ///       2, AWS Amazon Lex first elicits a value for the slot with priority 1.</p>
    ///          <p>If multiple slots share the same priority, the order in which Amazon Lex
    ///       elicits values is arbitrary.</p>
    public let priority: Int?
    /// <p> A set of possible responses for the slot type used by text-based
    ///       clients. A user chooses an option from the response card, instead of using
    ///       text to reply. </p>
    public let responseCard: String?
    /// <p> If you know a specific pattern with which users might respond to
    ///       an Amazon Lex request for a slot value, you can provide those utterances to
    ///       improve accuracy. This is optional. In most cases, Amazon Lex is capable of
    ///       understanding user utterances. </p>
    public let sampleUtterances: [String]?
    /// <p>Specifies whether the slot is required or optional. </p>
    public let slotConstraint: SlotConstraint?
    /// <p>The type of the slot, either a custom slot type that you defined or
    ///       one of the built-in slot types.</p>
    public let slotType: String?
    /// <p>The version of the slot type.</p>
    public let slotTypeVersion: String?
    /// <p>The prompt that Amazon Lex uses to elicit the slot value from the
    ///       user.</p>
    public let valueElicitationPrompt: Prompt?

    public init (
        defaultValueSpec: SlotDefaultValueSpec? = nil,
        description: String? = nil,
        name: String? = nil,
        obfuscationSetting: ObfuscationSetting? = nil,
        priority: Int? = nil,
        responseCard: String? = nil,
        sampleUtterances: [String]? = nil,
        slotConstraint: SlotConstraint? = nil,
        slotType: String? = nil,
        slotTypeVersion: String? = nil,
        valueElicitationPrompt: Prompt? = nil
    )
    {
        self.defaultValueSpec = defaultValueSpec
        self.description = description
        self.name = name
        self.obfuscationSetting = obfuscationSetting
        self.priority = priority
        self.responseCard = responseCard
        self.sampleUtterances = sampleUtterances
        self.slotConstraint = slotConstraint
        self.slotType = slotType
        self.slotTypeVersion = slotTypeVersion
        self.valueElicitationPrompt = valueElicitationPrompt
    }
}
