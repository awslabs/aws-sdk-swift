// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutBotAliasOutputBody: Equatable {
    public let name: String?
    public let description: String?
    public let botVersion: String?
    public let botName: String?
    public let lastUpdatedDate: Date?
    public let createdDate: Date?
    public let checksum: String?
    public let conversationLogs: ConversationLogsResponse?
    public let tags: [Tag]?
}

extension PutBotAliasOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case botName
        case botVersion
        case checksum
        case conversationLogs
        case createdDate
        case description
        case lastUpdatedDate
        case name
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botName)
        botName = botNameDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(String.self, forKey: .checksum)
        checksum = checksumDecoded
        let conversationLogsDecoded = try containerValues.decodeIfPresent(ConversationLogsResponse.self, forKey: .conversationLogs)
        conversationLogs = conversationLogsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
