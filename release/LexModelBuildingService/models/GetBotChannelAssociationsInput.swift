// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetBotChannelAssociationsInput: Equatable {
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which
    ///       this association is being made.</p>
    public let botAlias: String?
    /// <p>The name of the Amazon Lex bot in the association.</p>
    public let botName: String?
    /// <p>The maximum number of associations to return in the response. The
    ///       default is 50. </p>
    public let maxResults: Int?
    /// <p>Substring to match in channel association names. An association
    ///       will be returned if any part of its name matches the substring. For
    ///       example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot
    ///       channel associations, use a hyphen ("-") as the <code>nameContains</code>
    ///       parameter.</p>
    public let nameContains: String?
    /// <p>A pagination token for fetching the next page of associations. If
    ///       the response to this call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of associations, specify the
    ///       pagination token in the next request. </p>
    public let nextToken: String?

    public init (
        botAlias: String? = nil,
        botName: String? = nil,
        maxResults: Int? = nil,
        nameContains: String? = nil,
        nextToken: String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}
