// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Slot: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultValueSpec
        case description
        case name
        case obfuscationSetting
        case priority
        case responseCard
        case sampleUtterances
        case slotConstraint
        case slotType
        case slotTypeVersion
        case valueElicitationPrompt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValueSpec = defaultValueSpec {
            try encodeContainer.encode(defaultValueSpec, forKey: .defaultValueSpec)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let obfuscationSetting = obfuscationSetting {
            try encodeContainer.encode(obfuscationSetting.rawValue, forKey: .obfuscationSetting)
        }
        if let priority = priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let responseCard = responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for slotutterancelist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(slotutterancelist0)
            }
        }
        if let slotConstraint = slotConstraint {
            try encodeContainer.encode(slotConstraint.rawValue, forKey: .slotConstraint)
        }
        if let slotType = slotType {
            try encodeContainer.encode(slotType, forKey: .slotType)
        }
        if let slotTypeVersion = slotTypeVersion {
            try encodeContainer.encode(slotTypeVersion, forKey: .slotTypeVersion)
        }
        if let valueElicitationPrompt = valueElicitationPrompt {
            try encodeContainer.encode(valueElicitationPrompt, forKey: .valueElicitationPrompt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let slotConstraintDecoded = try containerValues.decodeIfPresent(SlotConstraint.self, forKey: .slotConstraint)
        slotConstraint = slotConstraintDecoded
        let slotTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotType)
        slotType = slotTypeDecoded
        let slotTypeVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotTypeVersion)
        slotTypeVersion = slotTypeVersionDecoded
        let valueElicitationPromptDecoded = try containerValues.decodeIfPresent(Prompt.self, forKey: .valueElicitationPrompt)
        valueElicitationPrompt = valueElicitationPromptDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .priority)
        priority = priorityDecoded
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([String].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [String]()
            for string0 in sampleUtterancesContainer {
                sampleUtterancesDecoded0?.append(string0)
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let responseCardDecoded = try containerValues.decodeIfPresent(String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
        let obfuscationSettingDecoded = try containerValues.decodeIfPresent(ObfuscationSetting.self, forKey: .obfuscationSetting)
        obfuscationSetting = obfuscationSettingDecoded
        let defaultValueSpecDecoded = try containerValues.decodeIfPresent(SlotDefaultValueSpec.self, forKey: .defaultValueSpec)
        defaultValueSpec = defaultValueSpecDecoded
    }
}
