// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIntentVersionOutputBody: Equatable {
    public let name: String?
    public let description: String?
    public let slots: [Slot]?
    public let sampleUtterances: [String]?
    public let confirmationPrompt: Prompt?
    public let rejectionStatement: Statement?
    public let followUpPrompt: FollowUpPrompt?
    public let conclusionStatement: Statement?
    public let dialogCodeHook: CodeHook?
    public let fulfillmentActivity: FulfillmentActivity?
    public let parentIntentSignature: String?
    public let lastUpdatedDate: Date?
    public let createdDate: Date?
    public let version: String?
    public let checksum: String?
    public let kendraConfiguration: KendraConfiguration?
    public let inputContexts: [InputContext]?
    public let outputContexts: [OutputContext]?
}

extension CreateIntentVersionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createdDate
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case lastUpdatedDate
        case name
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let slotsContainer = try containerValues.decodeIfPresent([Slot].self, forKey: .slots)
        var slotsDecoded0:[Slot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [Slot]()
            for structure0 in slotsContainer {
                slotsDecoded0?.append(structure0)
            }
        }
        slots = slotsDecoded0
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([String].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [String]()
            for string0 in sampleUtterancesContainer {
                sampleUtterancesDecoded0?.append(string0)
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let confirmationPromptDecoded = try containerValues.decodeIfPresent(Prompt.self, forKey: .confirmationPrompt)
        confirmationPrompt = confirmationPromptDecoded
        let rejectionStatementDecoded = try containerValues.decodeIfPresent(Statement.self, forKey: .rejectionStatement)
        rejectionStatement = rejectionStatementDecoded
        let followUpPromptDecoded = try containerValues.decodeIfPresent(FollowUpPrompt.self, forKey: .followUpPrompt)
        followUpPrompt = followUpPromptDecoded
        let conclusionStatementDecoded = try containerValues.decodeIfPresent(Statement.self, forKey: .conclusionStatement)
        conclusionStatement = conclusionStatementDecoded
        let dialogCodeHookDecoded = try containerValues.decodeIfPresent(CodeHook.self, forKey: .dialogCodeHook)
        dialogCodeHook = dialogCodeHookDecoded
        let fulfillmentActivityDecoded = try containerValues.decodeIfPresent(FulfillmentActivity.self, forKey: .fulfillmentActivity)
        fulfillmentActivity = fulfillmentActivityDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(String.self, forKey: .checksum)
        checksum = checksumDecoded
        let kendraConfigurationDecoded = try containerValues.decodeIfPresent(KendraConfiguration.self, forKey: .kendraConfiguration)
        kendraConfiguration = kendraConfigurationDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([InputContext].self, forKey: .inputContexts)
        var inputContextsDecoded0:[InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [InputContext]()
            for structure0 in inputContextsContainer {
                inputContextsDecoded0?.append(structure0)
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([OutputContext].self, forKey: .outputContexts)
        var outputContextsDecoded0:[OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [OutputContext]()
            for structure0 in outputContextsContainer {
                outputContextsDecoded0?.append(structure0)
            }
        }
        outputContexts = outputContextsDecoded0
    }
}
