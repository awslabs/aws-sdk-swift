// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartImportInput: Equatable {
    /// <p>Specifies the action that the <code>StartImport</code> operation
    ///       should take when there is an existing resource with the same
    ///       name.</p>
    ///          <ul>
    ///             <li>
    ///                <p>FAIL_ON_CONFLICT - The import operation is stopped on the first
    ///           conflict between a resource in the import file and an existing
    ///           resource. The name of the resource causing the conflict is in the
    ///             <code>failureReason</code> field of the response to the
    ///             <code>GetImport</code> operation.</p>
    ///                <p>OVERWRITE_LATEST - The import operation proceeds even if there
    ///           is a conflict with an existing resource. The $LASTEST version of the
    ///           existing resource is overwritten with the data from the import
    ///           file.</p>
    ///             </li>
    ///          </ul>
    public let mergeStrategy: MergeStrategy?
    /// <p>A zip archive in binary format. The archive should contain one file, a
    ///       JSON file containing the resource to import. The resource should match the
    ///       type specified in the <code>resourceType</code> field.</p>
    public let payload: Data?
    /// <p>Specifies the type of resource to export. Each resource also
    ///       exports any resources that it depends on. </p>
    ///          <ul>
    ///             <li>
    ///                <p>A bot exports dependent intents.</p>
    ///             </li>
    ///             <li>
    ///                <p>An intent exports dependent slot types.</p>
    ///             </li>
    ///          </ul>
    public let resourceType: ResourceType?
    /// <p>A list of tags to add to the imported bot. You can only add tags when
    ///       you import a bot, you can't add tags to an intent or slot type.</p>
    public let tags: [Tag]?

    public init (
        mergeStrategy: MergeStrategy? = nil,
        payload: Data? = nil,
        resourceType: ResourceType? = nil,
        tags: [Tag]? = nil
    )
    {
        self.mergeStrategy = mergeStrategy
        self.payload = payload
        self.resourceType = resourceType
        self.tags = tags
    }
}
