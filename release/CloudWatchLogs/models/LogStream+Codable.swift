// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case creationTime
        case firstEventTimestamp
        case lastEventTimestamp
        case lastIngestionTime
        case logStreamName
        case storedBytes
        case uploadSequenceToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let firstEventTimestamp = firstEventTimestamp {
            try encodeContainer.encode(firstEventTimestamp, forKey: .firstEventTimestamp)
        }
        if let lastEventTimestamp = lastEventTimestamp {
            try encodeContainer.encode(lastEventTimestamp, forKey: .lastEventTimestamp)
        }
        if let lastIngestionTime = lastIngestionTime {
            try encodeContainer.encode(lastIngestionTime, forKey: .lastIngestionTime)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let storedBytes = storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
        if let uploadSequenceToken = uploadSequenceToken {
            try encodeContainer.encode(uploadSequenceToken, forKey: .uploadSequenceToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let firstEventTimestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .firstEventTimestamp)
        firstEventTimestamp = firstEventTimestampDecoded
        let lastEventTimestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lastEventTimestamp)
        lastEventTimestamp = lastEventTimestampDecoded
        let lastIngestionTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lastIngestionTime)
        lastIngestionTime = lastIngestionTimeDecoded
        let uploadSequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadSequenceToken)
        uploadSequenceToken = uploadSequenceTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
    }
}
