// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricFilterMatchRecord: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventMessage
        case eventNumber
        case extractedValues
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventMessage = eventMessage {
            try encodeContainer.encode(eventMessage, forKey: .eventMessage)
        }
        if eventNumber != 0 {
            try encodeContainer.encode(eventNumber, forKey: .eventNumber)
        }
        if let extractedValues = extractedValues {
            var extractedValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .extractedValues)
            for (dictKey0, extractedvalues0) in extractedValues {
                try extractedValuesContainer.encode(extractedvalues0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventNumberDecoded = try containerValues.decode(Int.self, forKey: .eventNumber)
        eventNumber = eventNumberDecoded
        let eventMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventMessage)
        eventMessage = eventMessageDecoded
        let extractedValuesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .extractedValues)
        var extractedValuesDecoded0: [String:String]? = nil
        if let extractedValuesContainer = extractedValuesContainer {
            extractedValuesDecoded0 = [String:String]()
            for (key0, value0) in extractedValuesContainer {
                extractedValuesDecoded0?[key0] = value0
            }
        }
        extractedValues = extractedValuesDecoded0
    }
}
