// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubscriptionFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
