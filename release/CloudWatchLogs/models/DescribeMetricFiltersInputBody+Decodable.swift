// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeMetricFiltersInputBody: Equatable {
    public let logGroupName: String?
    public let filterNamePrefix: String?
    public let nextToken: String?
    public let limit: Int?
    public let metricName: String?
    public let metricNamespace: String?
}

extension DescribeMetricFiltersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
    }
}
