// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutQueryDefinitionInputBody: Equatable {
    public let name: String?
    public let queryDefinitionId: String?
    public let logGroupNames: [String]?
    public let queryString: String?
}

extension PutQueryDefinitionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [String]()
            for string0 in logGroupNamesContainer {
                logGroupNamesDecoded0?.append(string0)
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}
