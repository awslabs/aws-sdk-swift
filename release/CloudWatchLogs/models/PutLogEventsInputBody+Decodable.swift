// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutLogEventsInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamName: String?
    public let logEvents: [InputLogEvent]?
    public let sequenceToken: String?
}

extension PutLogEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let logEventsContainer = try containerValues.decodeIfPresent([InputLogEvent].self, forKey: .logEvents)
        var logEventsDecoded0:[InputLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [InputLogEvent]()
            for structure0 in logEventsContainer {
                logEventsDecoded0?.append(structure0)
            }
        }
        logEvents = logEventsDecoded0
        let sequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceToken)
        sequenceToken = sequenceTokenDecoded
    }
}
