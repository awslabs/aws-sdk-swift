// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetLogEventsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startFromHead = startFromHead {
            try encodeContainer.encode(startFromHead, forKey: .startFromHead)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}
