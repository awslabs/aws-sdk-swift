// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetLogEventsOutputBody: Equatable {
    public let events: [OutputLogEvent]?
    public let nextForwardToken: String?
    public let nextBackwardToken: String?
}

extension GetLogEventsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events
        case nextBackwardToken
        case nextForwardToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([OutputLogEvent].self, forKey: .events)
        var eventsDecoded0:[OutputLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [OutputLogEvent]()
            for structure0 in eventsContainer {
                eventsDecoded0?.append(structure0)
            }
        }
        events = eventsDecoded0
        let nextForwardTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextForwardToken)
        nextForwardToken = nextForwardTokenDecoded
        let nextBackwardTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextBackwardToken)
        nextBackwardToken = nextBackwardTokenDecoded
    }
}
