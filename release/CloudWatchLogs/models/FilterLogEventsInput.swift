// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct FilterLogEventsInput: Equatable {
    /// <p>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC. Events with a timestamp later than this time are not returned.</p>
    public let endTime: Int?
    /// <p>The filter pattern to use. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    ///          <p>If not provided, all the events are matched.</p>
    public let filterPattern: String?
    /// <p>If the value is true, the operation makes a best effort to provide responses that
    ///       contain events from multiple log streams within the log group, interleaved in a single
    ///       response. If the value is false, all the matched log events in the first log stream are
    ///       searched first, then those in the next log stream, and so on. The default is false.</p>
    ///          <p>
    ///             <b>Important:</b> Starting on June 17, 2019, this parameter
    ///       is ignored and the value is assumed to be true. The response from this operation always
    ///       interleaves events from multiple log streams within a log group.</p>
    @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.")
    public let interleaved: Bool?
    /// <p>The maximum number of events to return. The default is 10,000 events.</p>
    public let limit: Int?
    /// <p>The name of the log group to search.</p>
    public let logGroupName: String?
    /// <p>Filters the results to include only events from log streams that have names starting with this prefix.</p>
    ///          <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, but the value for
    ///       <code>logStreamNamePrefix</code> does not match any log stream names specified in <code>logStreamNames</code>, the action
    ///     returns an <code>InvalidParameterException</code> error.</p>
    public let logStreamNamePrefix: String?
    /// <p>Filters the results to only logs from the log streams in this list.</p>
    ///          <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, the action
    ///       returns an <code>InvalidParameterException</code> error.</p>
    public let logStreamNames: [String]?
    /// <p>The token for the next set of events to return. (You received this token from a previous call.)</p>
    public let nextToken: String?
    /// <p>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC. Events with a timestamp before this time are not returned.</p>
    public let startTime: Int?

    public init (
        endTime: Int? = nil,
        filterPattern: String? = nil,
        interleaved: Bool? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        logStreamNames: [String]? = nil,
        nextToken: String? = nil,
        startTime: Int? = nil
    )
    {
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.interleaved = interleaved
        self.limit = limit
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.logStreamNames = logStreamNames
        self.nextToken = nextToken
        self.startTime = startTime
    }
}
