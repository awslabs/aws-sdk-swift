// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartQueryInputBody: Equatable {
    public let logGroupName: String?
    public let logGroupNames: [String]?
    public let startTime: Int?
    public let endTime: Int?
    public let queryString: String?
    public let limit: Int?
}

extension StartQueryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [String]()
            for string0 in logGroupNamesContainer {
                logGroupNamesDecoded0?.append(string0)
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
