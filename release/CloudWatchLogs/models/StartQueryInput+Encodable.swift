// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartQueryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupnames0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupnames0)
            }
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}
