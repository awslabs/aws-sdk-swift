// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExportTaskInputBody: Equatable {
    public let taskName: String?
    public let logGroupName: String?
    public let logStreamNamePrefix: String?
    public let from: Int?
    public let to: Int?
    public let destination: String?
    public let destinationPrefix: String?
}

extension CreateExportTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
    }
}
