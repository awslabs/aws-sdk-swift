// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutSubscriptionFilterInputBody: Equatable {
    public let logGroupName: String?
    public let filterName: String?
    public let filterPattern: String?
    public let destinationArn: String?
    public let roleArn: String?
    public let distribution: Distribution?
}

extension PutSubscriptionFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
    }
}
