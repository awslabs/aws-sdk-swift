// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutMetricFilterInputBody: Equatable {
    public let logGroupName: String?
    public let filterName: String?
    public let filterPattern: String?
    public let metricTransformations: [MetricTransformation]?
}

extension PutMetricFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([MetricTransformation].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                metricTransformationsDecoded0?.append(structure0)
            }
        }
        metricTransformations = metricTransformationsDecoded0
    }
}
