// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FilteredLogEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventId
        case ingestionTime
        case logStreamName
        case message
        case timestamp
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let ingestionTime = ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}
