// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AssociateKmsKeyInputBodyMiddleware: Middleware {
    public let id: String = "AssociateKmsKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateKmsKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateKmsKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateKmsKeyInput>
    public typealias MOutput = OperationOutput<AssociateKmsKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateKmsKeyOutputError>
}

extension AssociateKmsKeyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateKmsKeyInput(kmsKeyId: \(String(describing: kmsKeyId)), logGroupName: \(String(describing: logGroupName)))"}
}

extension AssociateKmsKeyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct AssociateKmsKeyInputHeadersMiddleware: Middleware {
    public let id: String = "AssociateKmsKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateKmsKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateKmsKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateKmsKeyInput>
    public typealias MOutput = OperationOutput<AssociateKmsKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateKmsKeyOutputError>
}

public struct AssociateKmsKeyInputQueryItemMiddleware: Middleware {
    public let id: String = "AssociateKmsKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateKmsKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateKmsKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateKmsKeyInput>
    public typealias MOutput = OperationOutput<AssociateKmsKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateKmsKeyOutputError>
}

public struct AssociateKmsKeyInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. This must be a symmetric CMK.
    ///       For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric Keys</a>.</p>
    public let kmsKeyId: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        kmsKeyId: String? = nil,
        logGroupName: String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
    }
}

struct AssociateKmsKeyInputBody: Equatable {
    public let logGroupName: String?
    public let kmsKeyId: String?
}

extension AssociateKmsKeyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension AssociateKmsKeyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateKmsKeyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateKmsKeyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateKmsKeyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociateKmsKeyOutputResponse()"}
}

extension AssociateKmsKeyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AssociateKmsKeyOutputResponse: Equatable {

    public init() {}
}

struct AssociateKmsKeyOutputResponseBody: Equatable {
}

extension AssociateKmsKeyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CancelExportTaskInputBodyMiddleware: Middleware {
    public let id: String = "CancelExportTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelExportTaskInput>
    public typealias MOutput = OperationOutput<CancelExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelExportTaskOutputError>
}

extension CancelExportTaskInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelExportTaskInput(taskId: \(String(describing: taskId)))"}
}

extension CancelExportTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case taskId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

public struct CancelExportTaskInputHeadersMiddleware: Middleware {
    public let id: String = "CancelExportTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelExportTaskInput>
    public typealias MOutput = OperationOutput<CancelExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelExportTaskOutputError>
}

public struct CancelExportTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelExportTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelExportTaskInput>
    public typealias MOutput = OperationOutput<CancelExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelExportTaskOutputError>
}

public struct CancelExportTaskInput: Equatable {
    /// <p>The ID of the export task.</p>
    public let taskId: String?

    public init (
        taskId: String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelExportTaskInputBody: Equatable {
    public let taskId: String?
}

extension CancelExportTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case taskId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension CancelExportTaskOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelExportTaskOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelExportTaskOutputError: Equatable {
    case invalidOperationException(InvalidOperationException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelExportTaskOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelExportTaskOutputResponse()"}
}

extension CancelExportTaskOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CancelExportTaskOutputResponse: Equatable {

    public init() {}
}

struct CancelExportTaskOutputResponseBody: Equatable {
}

extension CancelExportTaskOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateExportTaskInputBodyMiddleware: Middleware {
    public let id: String = "CreateExportTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateExportTaskInput>
    public typealias MOutput = OperationOutput<CreateExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateExportTaskOutputError>
}

extension CreateExportTaskInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateExportTaskInput(destination: \(String(describing: destination)), destinationPrefix: \(String(describing: destinationPrefix)), from: \(String(describing: from)), logGroupName: \(String(describing: logGroupName)), logStreamNamePrefix: \(String(describing: logStreamNamePrefix)), taskName: \(String(describing: taskName)), to: \(String(describing: to)))"}
}

extension CreateExportTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let from = from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let taskName = taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }
}

public struct CreateExportTaskInputHeadersMiddleware: Middleware {
    public let id: String = "CreateExportTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateExportTaskInput>
    public typealias MOutput = OperationOutput<CreateExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateExportTaskOutputError>
}

public struct CreateExportTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateExportTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateExportTaskInput>
    public typealias MOutput = OperationOutput<CreateExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateExportTaskOutputError>
}

public struct CreateExportTaskInput: Equatable {
    /// <p>The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.</p>
    public let destination: String?
    /// <p>The prefix used as the start of the key for every object exported. If you don't
    ///       specify a value, the default is <code>exportedlogs</code>.</p>
    public let destinationPrefix: String?
    /// <p>The start time of the range for the request, expressed as the number of milliseconds
    ///       after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not
    ///       exported.</p>
    public let from: Int?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>Export only log streams that match the provided prefix. If you don't
    ///       specify a value, no prefix filter is applied.</p>
    public let logStreamNamePrefix: String?
    /// <p>The name of the export task.</p>
    public let taskName: String?
    /// <p>The end time of the range for the request, expreswatchlogsdocused as the number of milliseconds
    ///       after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not
    ///       exported.</p>
    public let to: Int?

    public init (
        destination: String? = nil,
        destinationPrefix: String? = nil,
        from: Int? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        taskName: String? = nil,
        to: Int? = nil
    )
    {
        self.destination = destination
        self.destinationPrefix = destinationPrefix
        self.from = from
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.taskName = taskName
        self.to = to
    }
}

struct CreateExportTaskInputBody: Equatable {
    public let taskName: String?
    public let logGroupName: String?
    public let logStreamNamePrefix: String?
    public let from: Int?
    public let to: Int?
    public let destination: String?
    public let destinationPrefix: String?
}

extension CreateExportTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
    }
}

extension CreateExportTaskOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateExportTaskOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateExportTaskOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateExportTaskOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateExportTaskOutputResponse(taskId: \(String(describing: taskId)))"}
}

extension CreateExportTaskOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateExportTaskOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct CreateExportTaskOutputResponse: Equatable {
    /// <p>The ID of the export task.</p>
    public let taskId: String?

    public init (
        taskId: String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CreateExportTaskOutputResponseBody: Equatable {
    public let taskId: String?
}

extension CreateExportTaskOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case taskId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

public struct CreateLogGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateLogGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLogGroupInput>
    public typealias MOutput = OperationOutput<CreateLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLogGroupOutputError>
}

extension CreateLogGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLogGroupInput(kmsKeyId: \(String(describing: kmsKeyId)), logGroupName: \(String(describing: logGroupName)), tags: \(String(describing: tags)))"}
}

extension CreateLogGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId
        case logGroupName
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateLogGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLogGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLogGroupInput>
    public typealias MOutput = OperationOutput<CreateLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLogGroupOutputError>
}

public struct CreateLogGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLogGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLogGroupInput>
    public typealias MOutput = OperationOutput<CreateLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLogGroupOutputError>
}

public struct CreateLogGroupInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
    ///       For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.</p>
    public let kmsKeyId: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The key-value pairs to use for the tags.</p>
    public let tags: [String:String]?

    public init (
        kmsKeyId: String? = nil,
        logGroupName: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct CreateLogGroupInputBody: Equatable {
    public let logGroupName: String?
    public let kmsKeyId: String?
    public let tags: [String:String]?
}

extension CreateLogGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId
        case logGroupName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLogGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLogGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLogGroupOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLogGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLogGroupOutputResponse()"}
}

extension CreateLogGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateLogGroupOutputResponse: Equatable {

    public init() {}
}

struct CreateLogGroupOutputResponseBody: Equatable {
}

extension CreateLogGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateLogStreamInputBodyMiddleware: Middleware {
    public let id: String = "CreateLogStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLogStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLogStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLogStreamInput>
    public typealias MOutput = OperationOutput<CreateLogStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLogStreamOutputError>
}

extension CreateLogStreamInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLogStreamInput(logGroupName: \(String(describing: logGroupName)), logStreamName: \(String(describing: logStreamName)))"}
}

extension CreateLogStreamInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case logStreamName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }
}

public struct CreateLogStreamInputHeadersMiddleware: Middleware {
    public let id: String = "CreateLogStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLogStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLogStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLogStreamInput>
    public typealias MOutput = OperationOutput<CreateLogStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLogStreamOutputError>
}

public struct CreateLogStreamInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateLogStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateLogStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateLogStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateLogStreamInput>
    public typealias MOutput = OperationOutput<CreateLogStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateLogStreamOutputError>
}

public struct CreateLogStreamInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The name of the log stream.</p>
    public let logStreamName: String?

    public init (
        logGroupName: String? = nil,
        logStreamName: String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

struct CreateLogStreamInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamName: String?
}

extension CreateLogStreamInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case logStreamName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension CreateLogStreamOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLogStreamOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLogStreamOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLogStreamOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateLogStreamOutputResponse()"}
}

extension CreateLogStreamOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateLogStreamOutputResponse: Equatable {

    public init() {}
}

struct CreateLogStreamOutputResponseBody: Equatable {
}

extension CreateLogStreamOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DataAlreadyAcceptedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DataAlreadyAcceptedException(expectedSequenceToken: \(String(describing: expectedSequenceToken)), message: \(String(describing: message)))"}
}

extension DataAlreadyAcceptedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DataAlreadyAcceptedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.expectedSequenceToken = output.expectedSequenceToken
            self.message = output.message
        } else {
            self.expectedSequenceToken = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The event was already logged.</p>
public struct DataAlreadyAcceptedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var expectedSequenceToken: String?
    public var message: String?

    public init (
        expectedSequenceToken: String? = nil,
        message: String? = nil
    )
    {
        self.expectedSequenceToken = expectedSequenceToken
        self.message = message
    }
}

struct DataAlreadyAcceptedExceptionBody: Equatable {
    public let expectedSequenceToken: String?
    public let message: String?
}

extension DataAlreadyAcceptedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case expectedSequenceToken
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedSequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expectedSequenceToken)
        expectedSequenceToken = expectedSequenceTokenDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeleteDestinationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDestinationInput>
    public typealias MOutput = OperationOutput<DeleteDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDestinationOutputError>
}

extension DeleteDestinationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteDestinationInput(destinationName: \(String(describing: destinationName)))"}
}

extension DeleteDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
    }
}

public struct DeleteDestinationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDestinationInput>
    public typealias MOutput = OperationOutput<DeleteDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDestinationOutputError>
}

public struct DeleteDestinationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDestinationInput>
    public typealias MOutput = OperationOutput<DeleteDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDestinationOutputError>
}

public struct DeleteDestinationInput: Equatable {
    /// <p>The name of the destination.</p>
    public let destinationName: String?

    public init (
        destinationName: String? = nil
    )
    {
        self.destinationName = destinationName
    }
}

struct DeleteDestinationInputBody: Equatable {
    public let destinationName: String?
}

extension DeleteDestinationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
    }
}

extension DeleteDestinationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDestinationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDestinationOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDestinationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteDestinationOutputResponse()"}
}

extension DeleteDestinationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDestinationOutputResponse: Equatable {

    public init() {}
}

struct DeleteDestinationOutputResponseBody: Equatable {
}

extension DeleteDestinationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteLogGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteLogGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLogGroupInput>
    public typealias MOutput = OperationOutput<DeleteLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLogGroupOutputError>
}

extension DeleteLogGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLogGroupInput(logGroupName: \(String(describing: logGroupName)))"}
}

extension DeleteLogGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct DeleteLogGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteLogGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLogGroupInput>
    public typealias MOutput = OperationOutput<DeleteLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLogGroupOutputError>
}

public struct DeleteLogGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteLogGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLogGroupInput>
    public typealias MOutput = OperationOutput<DeleteLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLogGroupOutputError>
}

public struct DeleteLogGroupInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        logGroupName: String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DeleteLogGroupInputBody: Equatable {
    public let logGroupName: String?
}

extension DeleteLogGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DeleteLogGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLogGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLogGroupOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLogGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLogGroupOutputResponse()"}
}

extension DeleteLogGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLogGroupOutputResponse: Equatable {

    public init() {}
}

struct DeleteLogGroupOutputResponseBody: Equatable {
}

extension DeleteLogGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteLogStreamInputBodyMiddleware: Middleware {
    public let id: String = "DeleteLogStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLogStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLogStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLogStreamInput>
    public typealias MOutput = OperationOutput<DeleteLogStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLogStreamOutputError>
}

extension DeleteLogStreamInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLogStreamInput(logGroupName: \(String(describing: logGroupName)), logStreamName: \(String(describing: logStreamName)))"}
}

extension DeleteLogStreamInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case logStreamName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }
}

public struct DeleteLogStreamInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteLogStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLogStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLogStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLogStreamInput>
    public typealias MOutput = OperationOutput<DeleteLogStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLogStreamOutputError>
}

public struct DeleteLogStreamInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteLogStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteLogStreamInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteLogStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteLogStreamInput>
    public typealias MOutput = OperationOutput<DeleteLogStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteLogStreamOutputError>
}

public struct DeleteLogStreamInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The name of the log stream.</p>
    public let logStreamName: String?

    public init (
        logGroupName: String? = nil,
        logStreamName: String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

struct DeleteLogStreamInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamName: String?
}

extension DeleteLogStreamInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case logStreamName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension DeleteLogStreamOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLogStreamOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLogStreamOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLogStreamOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteLogStreamOutputResponse()"}
}

extension DeleteLogStreamOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLogStreamOutputResponse: Equatable {

    public init() {}
}

struct DeleteLogStreamOutputResponseBody: Equatable {
}

extension DeleteLogStreamOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteMetricFilterInputBodyMiddleware: Middleware {
    public let id: String = "DeleteMetricFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMetricFilterInput>
    public typealias MOutput = OperationOutput<DeleteMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMetricFilterOutputError>
}

extension DeleteMetricFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMetricFilterInput(filterName: \(String(describing: filterName)), logGroupName: \(String(describing: logGroupName)))"}
}

extension DeleteMetricFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct DeleteMetricFilterInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMetricFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMetricFilterInput>
    public typealias MOutput = OperationOutput<DeleteMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMetricFilterOutputError>
}

public struct DeleteMetricFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMetricFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMetricFilterInput>
    public typealias MOutput = OperationOutput<DeleteMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMetricFilterOutputError>
}

public struct DeleteMetricFilterInput: Equatable {
    /// <p>The name of the metric filter.</p>
    public let filterName: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        filterName: String? = nil,
        logGroupName: String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

struct DeleteMetricFilterInputBody: Equatable {
    public let logGroupName: String?
    public let filterName: String?
}

extension DeleteMetricFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterName
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteMetricFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMetricFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMetricFilterOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMetricFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMetricFilterOutputResponse()"}
}

extension DeleteMetricFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMetricFilterOutputResponse: Equatable {

    public init() {}
}

struct DeleteMetricFilterOutputResponseBody: Equatable {
}

extension DeleteMetricFilterOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteQueryDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "DeleteQueryDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueryDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueryDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueryDefinitionInput>
    public typealias MOutput = OperationOutput<DeleteQueryDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueryDefinitionOutputError>
}

extension DeleteQueryDefinitionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteQueryDefinitionInput(queryDefinitionId: \(String(describing: queryDefinitionId)))"}
}

extension DeleteQueryDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case queryDefinitionId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryDefinitionId = queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
    }
}

public struct DeleteQueryDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteQueryDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueryDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueryDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueryDefinitionInput>
    public typealias MOutput = OperationOutput<DeleteQueryDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueryDefinitionOutputError>
}

public struct DeleteQueryDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteQueryDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteQueryDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteQueryDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteQueryDefinitionInput>
    public typealias MOutput = OperationOutput<DeleteQueryDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteQueryDefinitionOutputError>
}

public struct DeleteQueryDefinitionInput: Equatable {
    /// <p>The ID of the query definition that you want to delete. You can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a> to retrieve the
    ///       IDs of your saved query definitions.</p>
    public let queryDefinitionId: String?

    public init (
        queryDefinitionId: String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

struct DeleteQueryDefinitionInputBody: Equatable {
    public let queryDefinitionId: String?
}

extension DeleteQueryDefinitionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queryDefinitionId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
    }
}

extension DeleteQueryDefinitionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteQueryDefinitionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteQueryDefinitionOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQueryDefinitionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteQueryDefinitionOutputResponse(success: \(String(describing: success)))"}
}

extension DeleteQueryDefinitionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteQueryDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct DeleteQueryDefinitionOutputResponse: Equatable {
    /// <p>A value of TRUE indicates that the operation succeeded. FALSE indicates that the operation
    ///       failed.</p>
    public let success: Bool

    public init (
        success: Bool = false
    )
    {
        self.success = success
    }
}

struct DeleteQueryDefinitionOutputResponseBody: Equatable {
    public let success: Bool
}

extension DeleteQueryDefinitionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case success
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decode(Bool.self, forKey: .success)
        success = successDecoded
    }
}

public struct DeleteResourcePolicyInputBodyMiddleware: Middleware {
    public let id: String = "DeleteResourcePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteResourcePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteResourcePolicyInput>
    public typealias MOutput = OperationOutput<DeleteResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteResourcePolicyOutputError>
}

extension DeleteResourcePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteResourcePolicyInput(policyName: \(String(describing: policyName)))"}
}

extension DeleteResourcePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

public struct DeleteResourcePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteResourcePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteResourcePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteResourcePolicyInput>
    public typealias MOutput = OperationOutput<DeleteResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteResourcePolicyOutputError>
}

public struct DeleteResourcePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteResourcePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteResourcePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteResourcePolicyInput>
    public typealias MOutput = OperationOutput<DeleteResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteResourcePolicyOutputError>
}

public struct DeleteResourcePolicyInput: Equatable {
    /// <p>The name of the policy to be revoked. This parameter is required.</p>
    public let policyName: String?

    public init (
        policyName: String? = nil
    )
    {
        self.policyName = policyName
    }
}

struct DeleteResourcePolicyInputBody: Equatable {
    public let policyName: String?
}

extension DeleteResourcePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension DeleteResourcePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteResourcePolicyOutputResponse()"}
}

extension DeleteResourcePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Equatable {

    public init() {}
}

struct DeleteResourcePolicyOutputResponseBody: Equatable {
}

extension DeleteResourcePolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteRetentionPolicyInputBodyMiddleware: Middleware {
    public let id: String = "DeleteRetentionPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteRetentionPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteRetentionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteRetentionPolicyInput>
    public typealias MOutput = OperationOutput<DeleteRetentionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteRetentionPolicyOutputError>
}

extension DeleteRetentionPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteRetentionPolicyInput(logGroupName: \(String(describing: logGroupName)))"}
}

extension DeleteRetentionPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct DeleteRetentionPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteRetentionPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteRetentionPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteRetentionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteRetentionPolicyInput>
    public typealias MOutput = OperationOutput<DeleteRetentionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteRetentionPolicyOutputError>
}

public struct DeleteRetentionPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteRetentionPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteRetentionPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteRetentionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteRetentionPolicyInput>
    public typealias MOutput = OperationOutput<DeleteRetentionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteRetentionPolicyOutputError>
}

public struct DeleteRetentionPolicyInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        logGroupName: String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DeleteRetentionPolicyInputBody: Equatable {
    public let logGroupName: String?
}

extension DeleteRetentionPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DeleteRetentionPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRetentionPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRetentionPolicyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRetentionPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteRetentionPolicyOutputResponse()"}
}

extension DeleteRetentionPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRetentionPolicyOutputResponse: Equatable {

    public init() {}
}

struct DeleteRetentionPolicyOutputResponseBody: Equatable {
}

extension DeleteRetentionPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteSubscriptionFilterInputBodyMiddleware: Middleware {
    public let id: String = "DeleteSubscriptionFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<DeleteSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSubscriptionFilterOutputError>
}

extension DeleteSubscriptionFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteSubscriptionFilterInput(filterName: \(String(describing: filterName)), logGroupName: \(String(describing: logGroupName)))"}
}

extension DeleteSubscriptionFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct DeleteSubscriptionFilterInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteSubscriptionFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<DeleteSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSubscriptionFilterOutputError>
}

public struct DeleteSubscriptionFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteSubscriptionFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<DeleteSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSubscriptionFilterOutputError>
}

public struct DeleteSubscriptionFilterInput: Equatable {
    /// <p>The name of the subscription filter.</p>
    public let filterName: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        filterName: String? = nil,
        logGroupName: String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

struct DeleteSubscriptionFilterInputBody: Equatable {
    public let logGroupName: String?
    public let filterName: String?
}

extension DeleteSubscriptionFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterName
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteSubscriptionFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSubscriptionFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSubscriptionFilterOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSubscriptionFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteSubscriptionFilterOutputResponse()"}
}

extension DeleteSubscriptionFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSubscriptionFilterOutputResponse: Equatable {

    public init() {}
}

struct DeleteSubscriptionFilterOutputResponseBody: Equatable {
}

extension DeleteSubscriptionFilterOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeDestinationsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeDestinationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeDestinationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeDestinationsInput>
    public typealias MOutput = OperationOutput<DescribeDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeDestinationsOutputError>
}

extension DescribeDestinationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeDestinationsInput(destinationNamePrefix: \(String(describing: destinationNamePrefix)), limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeDestinationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationNamePrefix = "DestinationNamePrefix"
        case limit
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationNamePrefix = destinationNamePrefix {
            try encodeContainer.encode(destinationNamePrefix, forKey: .destinationNamePrefix)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeDestinationsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeDestinationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeDestinationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeDestinationsInput>
    public typealias MOutput = OperationOutput<DescribeDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeDestinationsOutputError>
}

public struct DescribeDestinationsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeDestinationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeDestinationsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeDestinationsInput>
    public typealias MOutput = OperationOutput<DescribeDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeDestinationsOutputError>
}

public struct DescribeDestinationsInput: Equatable {
    /// <p>The prefix to match. If you don't specify a value, no prefix filter is applied.</p>
    public let destinationNamePrefix: String?
    /// <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>
    public let limit: Int?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    public let nextToken: String?

    public init (
        destinationNamePrefix: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.destinationNamePrefix = destinationNamePrefix
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDestinationsInputBody: Equatable {
    public let destinationNamePrefix: String?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeDestinationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationNamePrefix = "DestinationNamePrefix"
        case limit
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationNamePrefix)
        destinationNamePrefix = destinationNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDestinationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDestinationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDestinationsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDestinationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeDestinationsOutputResponse(destinations: \(String(describing: destinations)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeDestinationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.destinations = output.destinations
            self.nextToken = output.nextToken
        } else {
            self.destinations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDestinationsOutputResponse: Equatable {
    /// <p>The destinations.</p>
    public let destinations: [Destination]?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?

    public init (
        destinations: [Destination]? = nil,
        nextToken: String? = nil
    )
    {
        self.destinations = destinations
        self.nextToken = nextToken
    }
}

struct DescribeDestinationsOutputResponseBody: Equatable {
    public let destinations: [Destination]?
    public let nextToken: String?
}

extension DescribeDestinationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinations
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([Destination?].self, forKey: .destinations)
        var destinationsDecoded0:[Destination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [Destination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeExportTasksInputBodyMiddleware: Middleware {
    public let id: String = "DescribeExportTasksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeExportTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeExportTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeExportTasksInput>
    public typealias MOutput = OperationOutput<DescribeExportTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeExportTasksOutputError>
}

extension DescribeExportTasksInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeExportTasksInput(limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)), statusCode: \(String(describing: statusCode)), taskId: \(String(describing: taskId)))"}
}

extension DescribeExportTasksInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit
        case nextToken
        case statusCode
        case taskId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

public struct DescribeExportTasksInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeExportTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeExportTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeExportTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeExportTasksInput>
    public typealias MOutput = OperationOutput<DescribeExportTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeExportTasksOutputError>
}

public struct DescribeExportTasksInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeExportTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeExportTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeExportTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeExportTasksInput>
    public typealias MOutput = OperationOutput<DescribeExportTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeExportTasksOutputError>
}

public struct DescribeExportTasksInput: Equatable {
    /// <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>
    public let limit: Int?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    public let nextToken: String?
    /// <p>The status code of the export task. Specifying a status code filters the results to zero or more export tasks.</p>
    public let statusCode: ExportTaskStatusCode?
    /// <p>The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.</p>
    public let taskId: String?

    public init (
        limit: Int? = nil,
        nextToken: String? = nil,
        statusCode: ExportTaskStatusCode? = nil,
        taskId: String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.statusCode = statusCode
        self.taskId = taskId
    }
}

struct DescribeExportTasksInputBody: Equatable {
    public let taskId: String?
    public let statusCode: ExportTaskStatusCode?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeExportTasksInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit
        case nextToken
        case statusCode
        case taskId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(ExportTaskStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeExportTasksOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExportTasksOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeExportTasksOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExportTasksOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeExportTasksOutputResponse(exportTasks: \(String(describing: exportTasks)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeExportTasksOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeExportTasksOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.exportTasks = output.exportTasks
            self.nextToken = output.nextToken
        } else {
            self.exportTasks = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeExportTasksOutputResponse: Equatable {
    /// <p>The export tasks.</p>
    public let exportTasks: [ExportTask]?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?

    public init (
        exportTasks: [ExportTask]? = nil,
        nextToken: String? = nil
    )
    {
        self.exportTasks = exportTasks
        self.nextToken = nextToken
    }
}

struct DescribeExportTasksOutputResponseBody: Equatable {
    public let exportTasks: [ExportTask]?
    public let nextToken: String?
}

extension DescribeExportTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportTasks
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportTasksContainer = try containerValues.decodeIfPresent([ExportTask?].self, forKey: .exportTasks)
        var exportTasksDecoded0:[ExportTask]? = nil
        if let exportTasksContainer = exportTasksContainer {
            exportTasksDecoded0 = [ExportTask]()
            for structure0 in exportTasksContainer {
                if let structure0 = structure0 {
                    exportTasksDecoded0?.append(structure0)
                }
            }
        }
        exportTasks = exportTasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLogGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLogGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLogGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLogGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLogGroupsInput>
    public typealias MOutput = OperationOutput<DescribeLogGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLogGroupsOutputError>
}

extension DescribeLogGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLogGroupsInput(limit: \(String(describing: limit)), logGroupNamePrefix: \(String(describing: logGroupNamePrefix)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLogGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit
        case logGroupNamePrefix
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupNamePrefix = logGroupNamePrefix {
            try encodeContainer.encode(logGroupNamePrefix, forKey: .logGroupNamePrefix)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeLogGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLogGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLogGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLogGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLogGroupsInput>
    public typealias MOutput = OperationOutput<DescribeLogGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLogGroupsOutputError>
}

public struct DescribeLogGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLogGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLogGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLogGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLogGroupsInput>
    public typealias MOutput = OperationOutput<DescribeLogGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLogGroupsOutputError>
}

public struct DescribeLogGroupsInput: Equatable {
    /// <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>
    public let limit: Int?
    /// <p>The prefix to match.</p>
    public let logGroupNamePrefix: String?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    public let nextToken: String?

    public init (
        limit: Int? = nil,
        logGroupNamePrefix: String? = nil,
        nextToken: String? = nil
    )
    {
        self.limit = limit
        self.logGroupNamePrefix = logGroupNamePrefix
        self.nextToken = nextToken
    }
}

struct DescribeLogGroupsInputBody: Equatable {
    public let logGroupNamePrefix: String?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeLogGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit
        case logGroupNamePrefix
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupNamePrefix)
        logGroupNamePrefix = logGroupNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeLogGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLogGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLogGroupsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLogGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLogGroupsOutputResponse(logGroups: \(String(describing: logGroups)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLogGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLogGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.logGroups = output.logGroups
            self.nextToken = output.nextToken
        } else {
            self.logGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLogGroupsOutputResponse: Equatable {
    /// <p>The log groups.</p>
    ///          <p>If the <code>retentionInDays</code> value if not included for a log group, then that log group
    ///     is set to have its events never expire.</p>
    public let logGroups: [LogGroup]?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?

    public init (
        logGroups: [LogGroup]? = nil,
        nextToken: String? = nil
    )
    {
        self.logGroups = logGroups
        self.nextToken = nextToken
    }
}

struct DescribeLogGroupsOutputResponseBody: Equatable {
    public let logGroups: [LogGroup]?
    public let nextToken: String?
}

extension DescribeLogGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroups
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupsContainer = try containerValues.decodeIfPresent([LogGroup?].self, forKey: .logGroups)
        var logGroupsDecoded0:[LogGroup]? = nil
        if let logGroupsContainer = logGroupsContainer {
            logGroupsDecoded0 = [LogGroup]()
            for structure0 in logGroupsContainer {
                if let structure0 = structure0 {
                    logGroupsDecoded0?.append(structure0)
                }
            }
        }
        logGroups = logGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLogStreamsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeLogStreamsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLogStreamsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLogStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLogStreamsInput>
    public typealias MOutput = OperationOutput<DescribeLogStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLogStreamsOutputError>
}

extension DescribeLogStreamsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLogStreamsInput(descending: \(String(describing: descending)), limit: \(String(describing: limit)), logGroupName: \(String(describing: logGroupName)), logStreamNamePrefix: \(String(describing: logStreamNamePrefix)), nextToken: \(String(describing: nextToken)), orderBy: \(String(describing: orderBy)))"}
}

extension DescribeLogStreamsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case descending
        case limit
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let descending = descending {
            try encodeContainer.encode(descending, forKey: .descending)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let orderBy = orderBy {
            try encodeContainer.encode(orderBy.rawValue, forKey: .orderBy)
        }
    }
}

public struct DescribeLogStreamsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLogStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLogStreamsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLogStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLogStreamsInput>
    public typealias MOutput = OperationOutput<DescribeLogStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLogStreamsOutputError>
}

public struct DescribeLogStreamsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLogStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLogStreamsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLogStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLogStreamsInput>
    public typealias MOutput = OperationOutput<DescribeLogStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLogStreamsOutputError>
}

public struct DescribeLogStreamsInput: Equatable {
    /// <p>If the value is true, results are returned in descending order.
    ///       If the value is to false, results are returned in ascending order.
    ///       The default value is false.</p>
    public let descending: Bool?
    /// <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>
    public let limit: Int?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The prefix to match.</p>
    ///          <p>If <code>orderBy</code> is <code>LastEventTime</code>, you cannot specify this
    ///       parameter.</p>
    public let logStreamNamePrefix: String?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    public let nextToken: String?
    /// <p>If the value is <code>LogStreamName</code>, the results are ordered by log stream name.
    ///       If the value is <code>LastEventTime</code>, the results are ordered by the event time.
    ///       The default value is <code>LogStreamName</code>.</p>
    ///          <p>If you order the results by event time, you cannot specify the <code>logStreamNamePrefix</code> parameter.</p>
    ///          <p>
    ///             <code>lastEventTimestamp</code> represents the time of the most recent log event in the
    ///       log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after
    ///       Jan 1, 1970 00:00:00 UTC. <code>lastEventTimestamp</code> updates on an eventual consistency
    ///       basis. It typically updates in less than an hour from ingestion, but in rare situations might
    ///       take longer.</p>
    public let orderBy: OrderBy?

    public init (
        descending: Bool? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        nextToken: String? = nil,
        orderBy: OrderBy? = nil
    )
    {
        self.descending = descending
        self.limit = limit
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.nextToken = nextToken
        self.orderBy = orderBy
    }
}

struct DescribeLogStreamsInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamNamePrefix: String?
    public let orderBy: OrderBy?
    public let descending: Bool?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeLogStreamsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case descending
        case limit
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let orderByDecoded = try containerValues.decodeIfPresent(OrderBy.self, forKey: .orderBy)
        orderBy = orderByDecoded
        let descendingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .descending)
        descending = descendingDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeLogStreamsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLogStreamsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLogStreamsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLogStreamsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLogStreamsOutputResponse(logStreams: \(String(describing: logStreams)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeLogStreamsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLogStreamsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.logStreams = output.logStreams
            self.nextToken = output.nextToken
        } else {
            self.logStreams = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLogStreamsOutputResponse: Equatable {
    /// <p>The log streams.</p>
    public let logStreams: [LogStream]?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?

    public init (
        logStreams: [LogStream]? = nil,
        nextToken: String? = nil
    )
    {
        self.logStreams = logStreams
        self.nextToken = nextToken
    }
}

struct DescribeLogStreamsOutputResponseBody: Equatable {
    public let logStreams: [LogStream]?
    public let nextToken: String?
}

extension DescribeLogStreamsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logStreams
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamsContainer = try containerValues.decodeIfPresent([LogStream?].self, forKey: .logStreams)
        var logStreamsDecoded0:[LogStream]? = nil
        if let logStreamsContainer = logStreamsContainer {
            logStreamsDecoded0 = [LogStream]()
            for structure0 in logStreamsContainer {
                if let structure0 = structure0 {
                    logStreamsDecoded0?.append(structure0)
                }
            }
        }
        logStreams = logStreamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeMetricFiltersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeMetricFiltersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMetricFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMetricFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMetricFiltersInput>
    public typealias MOutput = OperationOutput<DescribeMetricFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMetricFiltersOutputError>
}

extension DescribeMetricFiltersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMetricFiltersInput(filterNamePrefix: \(String(describing: filterNamePrefix)), limit: \(String(describing: limit)), logGroupName: \(String(describing: logGroupName)), metricName: \(String(describing: metricName)), metricNamespace: \(String(describing: metricNamespace)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeMetricFiltersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterNamePrefix = filterNamePrefix {
            try encodeContainer.encode(filterNamePrefix, forKey: .filterNamePrefix)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeMetricFiltersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeMetricFiltersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMetricFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMetricFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMetricFiltersInput>
    public typealias MOutput = OperationOutput<DescribeMetricFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMetricFiltersOutputError>
}

public struct DescribeMetricFiltersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeMetricFiltersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeMetricFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeMetricFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeMetricFiltersInput>
    public typealias MOutput = OperationOutput<DescribeMetricFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeMetricFiltersOutputError>
}

public struct DescribeMetricFiltersInput: Equatable {
    /// <p>The prefix to match. CloudWatch Logs uses the value you set here
    ///     only if you also include the <code>logGroupName</code> parameter in your request.</p>
    public let filterNamePrefix: String?
    /// <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>
    public let limit: Int?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>Filters results to include only those with the specified metric name. If you include this parameter in your request, you
    ///     must also include the <code>metricNamespace</code> parameter.</p>
    public let metricName: String?
    /// <p>Filters results to include only those in the specified namespace. If you include this parameter in your request, you
    ///     must also include the <code>metricName</code> parameter.</p>
    public let metricNamespace: String?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    public let nextToken: String?

    public init (
        filterNamePrefix: String? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        metricName: String? = nil,
        metricNamespace: String? = nil,
        nextToken: String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.nextToken = nextToken
    }
}

struct DescribeMetricFiltersInputBody: Equatable {
    public let logGroupName: String?
    public let filterNamePrefix: String?
    public let nextToken: String?
    public let limit: Int?
    public let metricName: String?
    public let metricNamespace: String?
}

extension DescribeMetricFiltersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
    }
}

extension DescribeMetricFiltersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMetricFiltersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMetricFiltersOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMetricFiltersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeMetricFiltersOutputResponse(metricFilters: \(String(describing: metricFilters)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeMetricFiltersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeMetricFiltersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.metricFilters = output.metricFilters
            self.nextToken = output.nextToken
        } else {
            self.metricFilters = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeMetricFiltersOutputResponse: Equatable {
    /// <p>The metric filters.</p>
    public let metricFilters: [MetricFilter]?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?

    public init (
        metricFilters: [MetricFilter]? = nil,
        nextToken: String? = nil
    )
    {
        self.metricFilters = metricFilters
        self.nextToken = nextToken
    }
}

struct DescribeMetricFiltersOutputResponseBody: Equatable {
    public let metricFilters: [MetricFilter]?
    public let nextToken: String?
}

extension DescribeMetricFiltersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case metricFilters
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricFiltersContainer = try containerValues.decodeIfPresent([MetricFilter?].self, forKey: .metricFilters)
        var metricFiltersDecoded0:[MetricFilter]? = nil
        if let metricFiltersContainer = metricFiltersContainer {
            metricFiltersDecoded0 = [MetricFilter]()
            for structure0 in metricFiltersContainer {
                if let structure0 = structure0 {
                    metricFiltersDecoded0?.append(structure0)
                }
            }
        }
        metricFilters = metricFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeQueriesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeQueriesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeQueriesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeQueriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeQueriesInput>
    public typealias MOutput = OperationOutput<DescribeQueriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeQueriesOutputError>
}

extension DescribeQueriesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeQueriesInput(logGroupName: \(String(describing: logGroupName)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension DescribeQueriesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case maxResults
        case nextToken
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct DescribeQueriesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeQueriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeQueriesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeQueriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeQueriesInput>
    public typealias MOutput = OperationOutput<DescribeQueriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeQueriesOutputError>
}

public struct DescribeQueriesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeQueriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeQueriesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeQueriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeQueriesInput>
    public typealias MOutput = OperationOutput<DescribeQueriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeQueriesOutputError>
}

public struct DescribeQueriesInput: Equatable {
    /// <p>Limits the returned queries to only those for the specified log group.</p>
    public let logGroupName: String?
    /// <p>Limits the number of returned queries to the specified number.</p>
    public let maxResults: Int?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>Limits the returned queries to only those that have the specified status. Valid values are <code>Cancelled</code>,
    ///       <code>Complete</code>, <code>Failed</code>, <code>Running</code>, and <code>Scheduled</code>.</p>
    public let status: QueryStatus?

    public init (
        logGroupName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: QueryStatus? = nil
    )
    {
        self.logGroupName = logGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct DescribeQueriesInputBody: Equatable {
    public let logGroupName: String?
    public let status: QueryStatus?
    public let maxResults: Int?
    public let nextToken: String?
}

extension DescribeQueriesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case maxResults
        case nextToken
        case status
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueryStatus.self, forKey: .status)
        status = statusDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueriesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQueriesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeQueriesOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQueriesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeQueriesOutputResponse(nextToken: \(String(describing: nextToken)), queries: \(String(describing: queries)))"}
}

extension DescribeQueriesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeQueriesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.queries = output.queries
        } else {
            self.nextToken = nil
            self.queries = nil
        }
    }
}

public struct DescribeQueriesOutputResponse: Equatable {
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>The list of queries that match the request.</p>
    public let queries: [QueryInfo]?

    public init (
        nextToken: String? = nil,
        queries: [QueryInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.queries = queries
    }
}

struct DescribeQueriesOutputResponseBody: Equatable {
    public let queries: [QueryInfo]?
    public let nextToken: String?
}

extension DescribeQueriesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case queries
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queriesContainer = try containerValues.decodeIfPresent([QueryInfo?].self, forKey: .queries)
        var queriesDecoded0:[QueryInfo]? = nil
        if let queriesContainer = queriesContainer {
            queriesDecoded0 = [QueryInfo]()
            for structure0 in queriesContainer {
                if let structure0 = structure0 {
                    queriesDecoded0?.append(structure0)
                }
            }
        }
        queries = queriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeQueryDefinitionsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeQueryDefinitionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeQueryDefinitionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeQueryDefinitionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeQueryDefinitionsInput>
    public typealias MOutput = OperationOutput<DescribeQueryDefinitionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeQueryDefinitionsOutputError>
}

extension DescribeQueryDefinitionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeQueryDefinitionsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), queryDefinitionNamePrefix: \(String(describing: queryDefinitionNamePrefix)))"}
}

extension DescribeQueryDefinitionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults
        case nextToken
        case queryDefinitionNamePrefix
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryDefinitionNamePrefix = queryDefinitionNamePrefix {
            try encodeContainer.encode(queryDefinitionNamePrefix, forKey: .queryDefinitionNamePrefix)
        }
    }
}

public struct DescribeQueryDefinitionsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeQueryDefinitionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeQueryDefinitionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeQueryDefinitionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeQueryDefinitionsInput>
    public typealias MOutput = OperationOutput<DescribeQueryDefinitionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeQueryDefinitionsOutputError>
}

public struct DescribeQueryDefinitionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeQueryDefinitionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeQueryDefinitionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeQueryDefinitionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeQueryDefinitionsInput>
    public typealias MOutput = OperationOutput<DescribeQueryDefinitionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeQueryDefinitionsOutputError>
}

public struct DescribeQueryDefinitionsInput: Equatable {
    /// <p>Limits the number of returned query definitions to the specified number.</p>
    public let maxResults: Int?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>Use this parameter to filter your results to only the query definitions that have names that start with the prefix you specify.</p>
    public let queryDefinitionNamePrefix: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queryDefinitionNamePrefix: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryDefinitionNamePrefix = queryDefinitionNamePrefix
    }
}

struct DescribeQueryDefinitionsInputBody: Equatable {
    public let queryDefinitionNamePrefix: String?
    public let maxResults: Int?
    public let nextToken: String?
}

extension DescribeQueryDefinitionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults
        case nextToken
        case queryDefinitionNamePrefix
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryDefinitionNamePrefix)
        queryDefinitionNamePrefix = queryDefinitionNamePrefixDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueryDefinitionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQueryDefinitionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeQueryDefinitionsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQueryDefinitionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeQueryDefinitionsOutputResponse(nextToken: \(String(describing: nextToken)), queryDefinitions: \(String(describing: queryDefinitions)))"}
}

extension DescribeQueryDefinitionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeQueryDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.queryDefinitions = output.queryDefinitions
        } else {
            self.nextToken = nil
            self.queryDefinitions = nil
        }
    }
}

public struct DescribeQueryDefinitionsOutputResponse: Equatable {
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>The list of query definitions that match your request.</p>
    public let queryDefinitions: [QueryDefinition]?

    public init (
        nextToken: String? = nil,
        queryDefinitions: [QueryDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryDefinitions = queryDefinitions
    }
}

struct DescribeQueryDefinitionsOutputResponseBody: Equatable {
    public let queryDefinitions: [QueryDefinition]?
    public let nextToken: String?
}

extension DescribeQueryDefinitionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case queryDefinitions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionsContainer = try containerValues.decodeIfPresent([QueryDefinition?].self, forKey: .queryDefinitions)
        var queryDefinitionsDecoded0:[QueryDefinition]? = nil
        if let queryDefinitionsContainer = queryDefinitionsContainer {
            queryDefinitionsDecoded0 = [QueryDefinition]()
            for structure0 in queryDefinitionsContainer {
                if let structure0 = structure0 {
                    queryDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        queryDefinitions = queryDefinitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeResourcePoliciesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeResourcePoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeResourcePoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeResourcePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeResourcePoliciesInput>
    public typealias MOutput = OperationOutput<DescribeResourcePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeResourcePoliciesOutputError>
}

extension DescribeResourcePoliciesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeResourcePoliciesInput(limit: \(String(describing: limit)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeResourcePoliciesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeResourcePoliciesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeResourcePoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeResourcePoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeResourcePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeResourcePoliciesInput>
    public typealias MOutput = OperationOutput<DescribeResourcePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeResourcePoliciesOutputError>
}

public struct DescribeResourcePoliciesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeResourcePoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeResourcePoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeResourcePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeResourcePoliciesInput>
    public typealias MOutput = OperationOutput<DescribeResourcePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeResourcePoliciesOutputError>
}

public struct DescribeResourcePoliciesInput: Equatable {
    /// <p>The maximum number of resource policies to be displayed with one call of this API.</p>
    public let limit: Int?
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?

    public init (
        limit: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeResourcePoliciesInputBody: Equatable {
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeResourcePoliciesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeResourcePoliciesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourcePoliciesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeResourcePoliciesOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourcePoliciesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeResourcePoliciesOutputResponse(nextToken: \(String(describing: nextToken)), resourcePolicies: \(String(describing: resourcePolicies)))"}
}

extension DescribeResourcePoliciesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeResourcePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.resourcePolicies = output.resourcePolicies
        } else {
            self.nextToken = nil
            self.resourcePolicies = nil
        }
    }
}

public struct DescribeResourcePoliciesOutputResponse: Equatable {
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>The resource policies that exist in this account.</p>
    public let resourcePolicies: [ResourcePolicy]?

    public init (
        nextToken: String? = nil,
        resourcePolicies: [ResourcePolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourcePolicies = resourcePolicies
    }
}

struct DescribeResourcePoliciesOutputResponseBody: Equatable {
    public let resourcePolicies: [ResourcePolicy]?
    public let nextToken: String?
}

extension DescribeResourcePoliciesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case resourcePolicies
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePoliciesContainer = try containerValues.decodeIfPresent([ResourcePolicy?].self, forKey: .resourcePolicies)
        var resourcePoliciesDecoded0:[ResourcePolicy]? = nil
        if let resourcePoliciesContainer = resourcePoliciesContainer {
            resourcePoliciesDecoded0 = [ResourcePolicy]()
            for structure0 in resourcePoliciesContainer {
                if let structure0 = structure0 {
                    resourcePoliciesDecoded0?.append(structure0)
                }
            }
        }
        resourcePolicies = resourcePoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeSubscriptionFiltersInputBodyMiddleware: Middleware {
    public let id: String = "DescribeSubscriptionFiltersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSubscriptionFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSubscriptionFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSubscriptionFiltersInput>
    public typealias MOutput = OperationOutput<DescribeSubscriptionFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSubscriptionFiltersOutputError>
}

extension DescribeSubscriptionFiltersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeSubscriptionFiltersInput(filterNamePrefix: \(String(describing: filterNamePrefix)), limit: \(String(describing: limit)), logGroupName: \(String(describing: logGroupName)), nextToken: \(String(describing: nextToken)))"}
}

extension DescribeSubscriptionFiltersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterNamePrefix = filterNamePrefix {
            try encodeContainer.encode(filterNamePrefix, forKey: .filterNamePrefix)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeSubscriptionFiltersInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeSubscriptionFiltersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSubscriptionFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSubscriptionFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSubscriptionFiltersInput>
    public typealias MOutput = OperationOutput<DescribeSubscriptionFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSubscriptionFiltersOutputError>
}

public struct DescribeSubscriptionFiltersInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeSubscriptionFiltersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSubscriptionFiltersInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSubscriptionFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSubscriptionFiltersInput>
    public typealias MOutput = OperationOutput<DescribeSubscriptionFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSubscriptionFiltersOutputError>
}

public struct DescribeSubscriptionFiltersInput: Equatable {
    /// <p>The prefix to match. If you don't specify a value, no prefix filter is applied.</p>
    public let filterNamePrefix: String?
    /// <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>
    public let limit: Int?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    public let nextToken: String?

    public init (
        filterNamePrefix: String? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        nextToken: String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.nextToken = nextToken
    }
}

struct DescribeSubscriptionFiltersInputBody: Equatable {
    public let logGroupName: String?
    public let filterNamePrefix: String?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeSubscriptionFiltersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeSubscriptionFiltersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSubscriptionFiltersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSubscriptionFiltersOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSubscriptionFiltersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeSubscriptionFiltersOutputResponse(nextToken: \(String(describing: nextToken)), subscriptionFilters: \(String(describing: subscriptionFilters)))"}
}

extension DescribeSubscriptionFiltersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeSubscriptionFiltersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.subscriptionFilters = output.subscriptionFilters
        } else {
            self.nextToken = nil
            self.subscriptionFilters = nil
        }
    }
}

public struct DescribeSubscriptionFiltersOutputResponse: Equatable {
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>The subscription filters.</p>
    public let subscriptionFilters: [SubscriptionFilter]?

    public init (
        nextToken: String? = nil,
        subscriptionFilters: [SubscriptionFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscriptionFilters = subscriptionFilters
    }
}

struct DescribeSubscriptionFiltersOutputResponseBody: Equatable {
    public let subscriptionFilters: [SubscriptionFilter]?
    public let nextToken: String?
}

extension DescribeSubscriptionFiltersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case subscriptionFilters
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionFiltersContainer = try containerValues.decodeIfPresent([SubscriptionFilter?].self, forKey: .subscriptionFilters)
        var subscriptionFiltersDecoded0:[SubscriptionFilter]? = nil
        if let subscriptionFiltersContainer = subscriptionFiltersContainer {
            subscriptionFiltersDecoded0 = [SubscriptionFilter]()
            for structure0 in subscriptionFiltersContainer {
                if let structure0 = structure0 {
                    subscriptionFiltersDecoded0?.append(structure0)
                }
            }
        }
        subscriptionFilters = subscriptionFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension Destination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessPolicy
        case arn
        case creationTime
        case destinationName
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension Destination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Destination(accessPolicy: \(String(describing: accessPolicy)), arn: \(String(describing: arn)), creationTime: \(String(describing: creationTime)), destinationName: \(String(describing: destinationName)), roleArn: \(String(describing: roleArn)), targetArn: \(String(describing: targetArn)))"}
}

/// <p>Represents a cross-account destination that receives subscription log events.</p>
public struct Destination: Equatable {
    /// <p>An IAM policy document that governs which AWS accounts can create subscription filters
    ///       against this destination.</p>
    public let accessPolicy: String?
    /// <p>The ARN of this destination.</p>
    public let arn: String?
    /// <p>The creation time of the destination, expressed as the number of milliseconds after Jan
    ///       1, 1970 00:00:00 UTC.</p>
    public let creationTime: Int?
    /// <p>The name of the destination.</p>
    public let destinationName: String?
    /// <p>A role for impersonation, used when delivering log events to the target.</p>
    public let roleArn: String?
    /// <p>The Amazon Resource Name (ARN) of the physical target where the log events are
    ///       delivered (for example, a Kinesis stream).</p>
    public let targetArn: String?

    public init (
        accessPolicy: String? = nil,
        arn: String? = nil,
        creationTime: Int? = nil,
        destinationName: String? = nil,
        roleArn: String? = nil,
        targetArn: String? = nil
    )
    {
        self.accessPolicy = accessPolicy
        self.arn = arn
        self.creationTime = creationTime
        self.destinationName = destinationName
        self.roleArn = roleArn
        self.targetArn = targetArn
    }
}

public struct DisassociateKmsKeyInputBodyMiddleware: Middleware {
    public let id: String = "DisassociateKmsKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateKmsKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateKmsKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateKmsKeyInput>
    public typealias MOutput = OperationOutput<DisassociateKmsKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateKmsKeyOutputError>
}

extension DisassociateKmsKeyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateKmsKeyInput(logGroupName: \(String(describing: logGroupName)))"}
}

extension DisassociateKmsKeyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct DisassociateKmsKeyInputHeadersMiddleware: Middleware {
    public let id: String = "DisassociateKmsKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateKmsKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateKmsKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateKmsKeyInput>
    public typealias MOutput = OperationOutput<DisassociateKmsKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateKmsKeyOutputError>
}

public struct DisassociateKmsKeyInputQueryItemMiddleware: Middleware {
    public let id: String = "DisassociateKmsKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisassociateKmsKeyInput>,
                  next: H) -> Swift.Result<OperationOutput<DisassociateKmsKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisassociateKmsKeyInput>
    public typealias MOutput = OperationOutput<DisassociateKmsKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisassociateKmsKeyOutputError>
}

public struct DisassociateKmsKeyInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        logGroupName: String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DisassociateKmsKeyInputBody: Equatable {
    public let logGroupName: String?
}

extension DisassociateKmsKeyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DisassociateKmsKeyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateKmsKeyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateKmsKeyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateKmsKeyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisassociateKmsKeyOutputResponse()"}
}

extension DisassociateKmsKeyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateKmsKeyOutputResponse: Equatable {

    public init() {}
}

struct DisassociateKmsKeyOutputResponseBody: Equatable {
}

extension DisassociateKmsKeyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

/// <p>The method used to distribute log data to the destination, which can be either
///       random or grouped by log stream.</p>
public enum Distribution {
    case bylogstream
    case random
    case sdkUnknown(String)
}

extension Distribution : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Distribution] {
        return [
            .bylogstream,
            .random,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bylogstream: return "ByLogStream"
        case .random: return "Random"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Distribution(rawValue: rawValue) ?? Distribution.sdkUnknown(rawValue)
    }
}

extension ExportTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination
        case destinationPrefix
        case executionInfo
        case from
        case logGroupName
        case status
        case taskId
        case taskName
        case to
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let executionInfo = executionInfo {
            try encodeContainer.encode(executionInfo, forKey: .executionInfo)
        }
        if let from = from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskName = taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ExportTaskStatus.self, forKey: .status)
        status = statusDecoded
        let executionInfoDecoded = try containerValues.decodeIfPresent(ExportTaskExecutionInfo.self, forKey: .executionInfo)
        executionInfo = executionInfoDecoded
    }
}

extension ExportTask: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportTask(destination: \(String(describing: destination)), destinationPrefix: \(String(describing: destinationPrefix)), executionInfo: \(String(describing: executionInfo)), from: \(String(describing: from)), logGroupName: \(String(describing: logGroupName)), status: \(String(describing: status)), taskId: \(String(describing: taskId)), taskName: \(String(describing: taskName)), to: \(String(describing: to)))"}
}

/// <p>Represents an export task.</p>
public struct ExportTask: Equatable {
    /// <p>The name of the S3 bucket to which the log data was exported.</p>
    public let destination: String?
    /// <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>
    public let destinationPrefix: String?
    /// <p>Execution information about the export task.</p>
    public let executionInfo: ExportTaskExecutionInfo?
    /// <p>The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
    ///       Events with a timestamp before this time are not exported.</p>
    public let from: Int?
    /// <p>The name of the log group from which logs data was exported.</p>
    public let logGroupName: String?
    /// <p>The status of the export task.</p>
    public let status: ExportTaskStatus?
    /// <p>The ID of the export task.</p>
    public let taskId: String?
    /// <p>The name of the export task.</p>
    public let taskName: String?
    /// <p>The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
    ///       Events with a timestamp later than this time are not exported.</p>
    public let to: Int?

    public init (
        destination: String? = nil,
        destinationPrefix: String? = nil,
        executionInfo: ExportTaskExecutionInfo? = nil,
        from: Int? = nil,
        logGroupName: String? = nil,
        status: ExportTaskStatus? = nil,
        taskId: String? = nil,
        taskName: String? = nil,
        to: Int? = nil
    )
    {
        self.destination = destination
        self.destinationPrefix = destinationPrefix
        self.executionInfo = executionInfo
        self.from = from
        self.logGroupName = logGroupName
        self.status = status
        self.taskId = taskId
        self.taskName = taskName
        self.to = to
    }
}

extension ExportTaskExecutionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime
        case creationTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime, forKey: .completionTime)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
    }
}

extension ExportTaskExecutionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportTaskExecutionInfo(completionTime: \(String(describing: completionTime)), creationTime: \(String(describing: creationTime)))"}
}

/// <p>Represents the status of an export task.</p>
public struct ExportTaskExecutionInfo: Equatable {
    /// <p>The completion time of the export task, expressed as the number of milliseconds after
    ///       Jan 1, 1970 00:00:00 UTC.</p>
    public let completionTime: Int?
    /// <p>The creation time of the export task, expressed as the number of milliseconds after Jan
    ///       1, 1970 00:00:00 UTC.</p>
    public let creationTime: Int?

    public init (
        completionTime: Int? = nil,
        creationTime: Int? = nil
    )
    {
        self.completionTime = completionTime
        self.creationTime = creationTime
    }
}

extension ExportTaskStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(ExportTaskStatusCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ExportTaskStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportTaskStatus(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>Represents the status of an export task.</p>
public struct ExportTaskStatus: Equatable {
    /// <p>The status code of the export task.</p>
    public let code: ExportTaskStatusCode?
    /// <p>The status message related to the status code.</p>
    public let message: String?

    public init (
        code: ExportTaskStatusCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum ExportTaskStatusCode {
    case cancelled
    case completed
    case failed
    case pending
    case pendingCancel
    case running
    case sdkUnknown(String)
}

extension ExportTaskStatusCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExportTaskStatusCode] {
        return [
            .cancelled,
            .completed,
            .failed,
            .pending,
            .pendingCancel,
            .running,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "CANCELLED"
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .pending: return "PENDING"
        case .pendingCancel: return "PENDING_CANCEL"
        case .running: return "RUNNING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExportTaskStatusCode(rawValue: rawValue) ?? ExportTaskStatusCode.sdkUnknown(rawValue)
    }
}

public struct FilterLogEventsInputBodyMiddleware: Middleware {
    public let id: String = "FilterLogEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FilterLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<FilterLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FilterLogEventsInput>
    public typealias MOutput = OperationOutput<FilterLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FilterLogEventsOutputError>
}

extension FilterLogEventsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FilterLogEventsInput(endTime: \(String(describing: endTime)), filterPattern: \(String(describing: filterPattern)), interleaved: \(String(describing: interleaved)), limit: \(String(describing: limit)), logGroupName: \(String(describing: logGroupName)), logStreamNamePrefix: \(String(describing: logStreamNamePrefix)), logStreamNames: \(String(describing: logStreamNames)), nextToken: \(String(describing: nextToken)), startTime: \(String(describing: startTime)))"}
}

extension FilterLogEventsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let interleaved = interleaved {
            try encodeContainer.encode(interleaved, forKey: .interleaved)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let logStreamNames = logStreamNames {
            var logStreamNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNames)
            for inputlogstreamnames0 in logStreamNames {
                try logStreamNamesContainer.encode(inputlogstreamnames0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}

public struct FilterLogEventsInputHeadersMiddleware: Middleware {
    public let id: String = "FilterLogEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FilterLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<FilterLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FilterLogEventsInput>
    public typealias MOutput = OperationOutput<FilterLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FilterLogEventsOutputError>
}

public struct FilterLogEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "FilterLogEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FilterLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<FilterLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FilterLogEventsInput>
    public typealias MOutput = OperationOutput<FilterLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FilterLogEventsOutputError>
}

public struct FilterLogEventsInput: Equatable {
    /// <p>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC. Events with a timestamp later than this time are not returned.</p>
    public let endTime: Int?
    /// <p>The filter pattern to use. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    ///          <p>If not provided, all the events are matched.</p>
    public let filterPattern: String?
    /// <p>If the value is true, the operation makes a best effort to provide responses that
    ///       contain events from multiple log streams within the log group, interleaved in a single
    ///       response. If the value is false, all the matched log events in the first log stream are
    ///       searched first, then those in the next log stream, and so on. The default is false.</p>
    ///          <p>
    ///             <b>Important:</b> Starting on June 17, 2019, this parameter
    ///       is ignored and the value is assumed to be true. The response from this operation always
    ///       interleaves events from multiple log streams within a log group.</p>
    @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.")
    public let interleaved: Bool?
    /// <p>The maximum number of events to return. The default is 10,000 events.</p>
    public let limit: Int?
    /// <p>The name of the log group to search.</p>
    public let logGroupName: String?
    /// <p>Filters the results to include only events from log streams that have names starting with this prefix.</p>
    ///          <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, but the value for
    ///       <code>logStreamNamePrefix</code> does not match any log stream names specified in <code>logStreamNames</code>, the action
    ///     returns an <code>InvalidParameterException</code> error.</p>
    public let logStreamNamePrefix: String?
    /// <p>Filters the results to only logs from the log streams in this list.</p>
    ///          <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, the action
    ///       returns an <code>InvalidParameterException</code> error.</p>
    public let logStreamNames: [String]?
    /// <p>The token for the next set of events to return. (You received this token from a previous call.)</p>
    public let nextToken: String?
    /// <p>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC. Events with a timestamp before this time are not returned.</p>
    public let startTime: Int?

    public init (
        endTime: Int? = nil,
        filterPattern: String? = nil,
        interleaved: Bool? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        logStreamNames: [String]? = nil,
        nextToken: String? = nil,
        startTime: Int? = nil
    )
    {
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.interleaved = interleaved
        self.limit = limit
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.logStreamNames = logStreamNames
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

struct FilterLogEventsInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamNames: [String]?
    public let logStreamNamePrefix: String?
    public let startTime: Int?
    public let endTime: Int?
    public let filterPattern: String?
    public let nextToken: String?
    public let limit: Int?
    public let interleaved: Bool?
}

extension FilterLogEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logStreamNames)
        var logStreamNamesDecoded0:[String]? = nil
        if let logStreamNamesContainer = logStreamNamesContainer {
            logStreamNamesDecoded0 = [String]()
            for string0 in logStreamNamesContainer {
                if let string0 = string0 {
                    logStreamNamesDecoded0?.append(string0)
                }
            }
        }
        logStreamNames = logStreamNamesDecoded0
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let interleavedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .interleaved)
        interleaved = interleavedDecoded
    }
}

extension FilterLogEventsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension FilterLogEventsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum FilterLogEventsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension FilterLogEventsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FilterLogEventsOutputResponse(events: \(String(describing: events)), nextToken: \(String(describing: nextToken)), searchedLogStreams: \(String(describing: searchedLogStreams)))"}
}

extension FilterLogEventsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: FilterLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.events = output.events
            self.nextToken = output.nextToken
            self.searchedLogStreams = output.searchedLogStreams
        } else {
            self.events = nil
            self.nextToken = nil
            self.searchedLogStreams = nil
        }
    }
}

public struct FilterLogEventsOutputResponse: Equatable {
    /// <p>The matched events.</p>
    public let events: [FilteredLogEvent]?
    /// <p>The token to use when requesting the next set of items. The token expires after 24 hours.</p>
    public let nextToken: String?
    /// <p>
    ///             <b>IMPORTANT</b> Starting on May 15, 2020,
    ///     this parameter will be deprecated. This parameter will be an empty list
    ///     after the deprecation occurs.</p>
    ///          <p>Indicates which log streams have been searched and whether each has been searched completely.</p>
    public let searchedLogStreams: [SearchedLogStream]?

    public init (
        events: [FilteredLogEvent]? = nil,
        nextToken: String? = nil,
        searchedLogStreams: [SearchedLogStream]? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
        self.searchedLogStreams = searchedLogStreams
    }
}

struct FilterLogEventsOutputResponseBody: Equatable {
    public let events: [FilteredLogEvent]?
    public let searchedLogStreams: [SearchedLogStream]?
    public let nextToken: String?
}

extension FilterLogEventsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events
        case nextToken
        case searchedLogStreams
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([FilteredLogEvent?].self, forKey: .events)
        var eventsDecoded0:[FilteredLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [FilteredLogEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let searchedLogStreamsContainer = try containerValues.decodeIfPresent([SearchedLogStream?].self, forKey: .searchedLogStreams)
        var searchedLogStreamsDecoded0:[SearchedLogStream]? = nil
        if let searchedLogStreamsContainer = searchedLogStreamsContainer {
            searchedLogStreamsDecoded0 = [SearchedLogStream]()
            for structure0 in searchedLogStreamsContainer {
                if let structure0 = structure0 {
                    searchedLogStreamsDecoded0?.append(structure0)
                }
            }
        }
        searchedLogStreams = searchedLogStreamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension FilteredLogEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventId
        case ingestionTime
        case logStreamName
        case message
        case timestamp
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let ingestionTime = ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}

extension FilteredLogEvent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FilteredLogEvent(eventId: \(String(describing: eventId)), ingestionTime: \(String(describing: ingestionTime)), logStreamName: \(String(describing: logStreamName)), message: \(String(describing: message)), timestamp: \(String(describing: timestamp)))"}
}

/// <p>Represents a matched event.</p>
public struct FilteredLogEvent: Equatable {
    /// <p>The ID of the event.</p>
    public let eventId: String?
    /// <p>The time the event was ingested, expressed as the number of milliseconds after Jan 1,
    ///       1970 00:00:00 UTC.</p>
    public let ingestionTime: Int?
    /// <p>The name of the log stream to which this event belongs.</p>
    public let logStreamName: String?
    /// <p>The data contained in the log event.</p>
    public let message: String?
    /// <p>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC.</p>
    public let timestamp: Int?

    public init (
        eventId: String? = nil,
        ingestionTime: Int? = nil,
        logStreamName: String? = nil,
        message: String? = nil,
        timestamp: Int? = nil
    )
    {
        self.eventId = eventId
        self.ingestionTime = ingestionTime
        self.logStreamName = logStreamName
        self.message = message
        self.timestamp = timestamp
    }
}

public struct GetLogEventsInputBodyMiddleware: Middleware {
    public let id: String = "GetLogEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogEventsInput>
    public typealias MOutput = OperationOutput<GetLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogEventsOutputError>
}

extension GetLogEventsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetLogEventsInput(endTime: \(String(describing: endTime)), limit: \(String(describing: limit)), logGroupName: \(String(describing: logGroupName)), logStreamName: \(String(describing: logStreamName)), nextToken: \(String(describing: nextToken)), startFromHead: \(String(describing: startFromHead)), startTime: \(String(describing: startTime)))"}
}

extension GetLogEventsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startFromHead = startFromHead {
            try encodeContainer.encode(startFromHead, forKey: .startFromHead)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}

public struct GetLogEventsInputHeadersMiddleware: Middleware {
    public let id: String = "GetLogEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogEventsInput>
    public typealias MOutput = OperationOutput<GetLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogEventsOutputError>
}

public struct GetLogEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetLogEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogEventsInput>
    public typealias MOutput = OperationOutput<GetLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogEventsOutputError>
}

public struct GetLogEventsInput: Equatable {
    /// <p>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC. Events with a timestamp equal to or later than this time are not
    ///       included.</p>
    public let endTime: Int?
    /// <p>The maximum number of log events returned. If you don't specify a value, the maximum is
    ///       as many log events as can fit in a response size of 1 MB, up to 10,000 log events.</p>
    public let limit: Int?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The name of the log stream.</p>
    public let logStreamName: String?
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    ///          <p>Using this token works only when you specify <code>true</code> for <code>startFromHead</code>.</p>
    public let nextToken: String?
    /// <p>If the value is true, the earliest log events are returned first.
    ///       If the value is false, the latest log events are returned first.
    ///       The default value is false.</p>
    ///          <p>If you are using <code>nextToken</code> in this operation, you must specify <code>true</code> for <code>startFromHead</code>.</p>
    public let startFromHead: Bool?
    /// <p>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included.
    ///       Events with a timestamp earlier than this time are not included.</p>
    public let startTime: Int?

    public init (
        endTime: Int? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        logStreamName: String? = nil,
        nextToken: String? = nil,
        startFromHead: Bool? = nil,
        startTime: Int? = nil
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.nextToken = nextToken
        self.startFromHead = startFromHead
        self.startTime = startTime
    }
}

struct GetLogEventsInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamName: String?
    public let startTime: Int?
    public let endTime: Int?
    public let nextToken: String?
    public let limit: Int?
    public let startFromHead: Bool?
}

extension GetLogEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let startFromHeadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .startFromHead)
        startFromHead = startFromHeadDecoded
    }
}

extension GetLogEventsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLogEventsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLogEventsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLogEventsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetLogEventsOutputResponse(events: \(String(describing: events)), nextBackwardToken: \(String(describing: nextBackwardToken)), nextForwardToken: \(String(describing: nextForwardToken)))"}
}

extension GetLogEventsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.events = output.events
            self.nextBackwardToken = output.nextBackwardToken
            self.nextForwardToken = output.nextForwardToken
        } else {
            self.events = nil
            self.nextBackwardToken = nil
            self.nextForwardToken = nil
        }
    }
}

public struct GetLogEventsOutputResponse: Equatable {
    /// <p>The events.</p>
    public let events: [OutputLogEvent]?
    /// <p>The token for the next set of items in the backward direction. The token expires after
    ///       24 hours. This token is never null. If you have reached the end of the stream, it returns the
    ///       same token you passed in.</p>
    public let nextBackwardToken: String?
    /// <p>The token for the next set of items in the forward direction. The token expires after
    ///       24 hours. If you have reached the end of the stream, it returns the same token you passed
    ///       in.</p>
    public let nextForwardToken: String?

    public init (
        events: [OutputLogEvent]? = nil,
        nextBackwardToken: String? = nil,
        nextForwardToken: String? = nil
    )
    {
        self.events = events
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
    }
}

struct GetLogEventsOutputResponseBody: Equatable {
    public let events: [OutputLogEvent]?
    public let nextForwardToken: String?
    public let nextBackwardToken: String?
}

extension GetLogEventsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events
        case nextBackwardToken
        case nextForwardToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([OutputLogEvent?].self, forKey: .events)
        var eventsDecoded0:[OutputLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [OutputLogEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextForwardTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextForwardToken)
        nextForwardToken = nextForwardTokenDecoded
        let nextBackwardTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextBackwardToken)
        nextBackwardToken = nextBackwardTokenDecoded
    }
}

public struct GetLogGroupFieldsInputBodyMiddleware: Middleware {
    public let id: String = "GetLogGroupFieldsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogGroupFieldsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogGroupFieldsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogGroupFieldsInput>
    public typealias MOutput = OperationOutput<GetLogGroupFieldsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogGroupFieldsOutputError>
}

extension GetLogGroupFieldsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetLogGroupFieldsInput(logGroupName: \(String(describing: logGroupName)), time: \(String(describing: time)))"}
}

extension GetLogGroupFieldsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case time
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let time = time {
            try encodeContainer.encode(time, forKey: .time)
        }
    }
}

public struct GetLogGroupFieldsInputHeadersMiddleware: Middleware {
    public let id: String = "GetLogGroupFieldsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogGroupFieldsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogGroupFieldsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogGroupFieldsInput>
    public typealias MOutput = OperationOutput<GetLogGroupFieldsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogGroupFieldsOutputError>
}

public struct GetLogGroupFieldsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetLogGroupFieldsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogGroupFieldsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogGroupFieldsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogGroupFieldsInput>
    public typealias MOutput = OperationOutput<GetLogGroupFieldsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogGroupFieldsOutputError>
}

public struct GetLogGroupFieldsInput: Equatable {
    /// <p>The name of the log group to search.</p>
    public let logGroupName: String?
    /// <p>The time to set as the center of the query. If you specify <code>time</code>, the 15 minutes
    ///        before this time are queries. If you omit <code>time</code> the 8
    ///       minutes before and 8 minutes after this time are searched.</p>
    ///          <p>The <code>time</code> value is specified as epoch time, the number of seconds since
    ///       January 1, 1970, 00:00:00 UTC.</p>
    public let time: Int?

    public init (
        logGroupName: String? = nil,
        time: Int? = nil
    )
    {
        self.logGroupName = logGroupName
        self.time = time
    }
}

struct GetLogGroupFieldsInputBody: Equatable {
    public let logGroupName: String?
    public let time: Int?
}

extension GetLogGroupFieldsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case time
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .time)
        time = timeDecoded
    }
}

extension GetLogGroupFieldsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLogGroupFieldsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLogGroupFieldsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLogGroupFieldsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetLogGroupFieldsOutputResponse(logGroupFields: \(String(describing: logGroupFields)))"}
}

extension GetLogGroupFieldsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetLogGroupFieldsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.logGroupFields = output.logGroupFields
        } else {
            self.logGroupFields = nil
        }
    }
}

public struct GetLogGroupFieldsOutputResponse: Equatable {
    /// <p>The array of fields found in the query. Each object in the array contains the name of the field, along with the
    ///     percentage of time it appeared in the log events that were queried.</p>
    public let logGroupFields: [LogGroupField]?

    public init (
        logGroupFields: [LogGroupField]? = nil
    )
    {
        self.logGroupFields = logGroupFields
    }
}

struct GetLogGroupFieldsOutputResponseBody: Equatable {
    public let logGroupFields: [LogGroupField]?
}

extension GetLogGroupFieldsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupFields
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupFieldsContainer = try containerValues.decodeIfPresent([LogGroupField?].self, forKey: .logGroupFields)
        var logGroupFieldsDecoded0:[LogGroupField]? = nil
        if let logGroupFieldsContainer = logGroupFieldsContainer {
            logGroupFieldsDecoded0 = [LogGroupField]()
            for structure0 in logGroupFieldsContainer {
                if let structure0 = structure0 {
                    logGroupFieldsDecoded0?.append(structure0)
                }
            }
        }
        logGroupFields = logGroupFieldsDecoded0
    }
}

public struct GetLogRecordInputBodyMiddleware: Middleware {
    public let id: String = "GetLogRecordInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogRecordInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogRecordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogRecordInput>
    public typealias MOutput = OperationOutput<GetLogRecordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogRecordOutputError>
}

extension GetLogRecordInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetLogRecordInput(logRecordPointer: \(String(describing: logRecordPointer)))"}
}

extension GetLogRecordInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logRecordPointer
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logRecordPointer = logRecordPointer {
            try encodeContainer.encode(logRecordPointer, forKey: .logRecordPointer)
        }
    }
}

public struct GetLogRecordInputHeadersMiddleware: Middleware {
    public let id: String = "GetLogRecordInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogRecordInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogRecordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogRecordInput>
    public typealias MOutput = OperationOutput<GetLogRecordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogRecordOutputError>
}

public struct GetLogRecordInputQueryItemMiddleware: Middleware {
    public let id: String = "GetLogRecordInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLogRecordInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLogRecordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLogRecordInput>
    public typealias MOutput = OperationOutput<GetLogRecordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLogRecordOutputError>
}

public struct GetLogRecordInput: Equatable {
    /// <p>The pointer corresponding to the log event record you want to retrieve. You get this from
    ///       the response of a <code>GetQueryResults</code> operation. In that response, the value of the
    ///         <code>@ptr</code> field for a log event is the value to use as <code>logRecordPointer</code>
    ///       to retrieve that complete log event record.</p>
    public let logRecordPointer: String?

    public init (
        logRecordPointer: String? = nil
    )
    {
        self.logRecordPointer = logRecordPointer
    }
}

struct GetLogRecordInputBody: Equatable {
    public let logRecordPointer: String?
}

extension GetLogRecordInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logRecordPointer
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRecordPointerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logRecordPointer)
        logRecordPointer = logRecordPointerDecoded
    }
}

extension GetLogRecordOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLogRecordOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLogRecordOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLogRecordOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetLogRecordOutputResponse(logRecord: \(String(describing: logRecord)))"}
}

extension GetLogRecordOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetLogRecordOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.logRecord = output.logRecord
        } else {
            self.logRecord = nil
        }
    }
}

public struct GetLogRecordOutputResponse: Equatable {
    /// <p>The requested log event, as a JSON string.</p>
    public let logRecord: [String:String]?

    public init (
        logRecord: [String:String]? = nil
    )
    {
        self.logRecord = logRecord
    }
}

struct GetLogRecordOutputResponseBody: Equatable {
    public let logRecord: [String:String]?
}

extension GetLogRecordOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logRecord
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRecordContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .logRecord)
        var logRecordDecoded0: [String:String]? = nil
        if let logRecordContainer = logRecordContainer {
            logRecordDecoded0 = [String:String]()
            for (key0, value0) in logRecordContainer {
                if let value0 = value0 {
                    logRecordDecoded0?[key0] = value0
                }
            }
        }
        logRecord = logRecordDecoded0
    }
}

public struct GetQueryResultsInputBodyMiddleware: Middleware {
    public let id: String = "GetQueryResultsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueryResultsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueryResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueryResultsInput>
    public typealias MOutput = OperationOutput<GetQueryResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueryResultsOutputError>
}

extension GetQueryResultsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueryResultsInput(queryId: \(String(describing: queryId)))"}
}

extension GetQueryResultsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case queryId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryId = queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
    }
}

public struct GetQueryResultsInputHeadersMiddleware: Middleware {
    public let id: String = "GetQueryResultsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueryResultsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueryResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueryResultsInput>
    public typealias MOutput = OperationOutput<GetQueryResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueryResultsOutputError>
}

public struct GetQueryResultsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetQueryResultsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetQueryResultsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetQueryResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetQueryResultsInput>
    public typealias MOutput = OperationOutput<GetQueryResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetQueryResultsOutputError>
}

public struct GetQueryResultsInput: Equatable {
    /// <p>The ID number of the query.</p>
    public let queryId: String?

    public init (
        queryId: String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct GetQueryResultsInputBody: Equatable {
    public let queryId: String?
}

extension GetQueryResultsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queryId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension GetQueryResultsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetQueryResultsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetQueryResultsOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQueryResultsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetQueryResultsOutputResponse(results: \(String(describing: results)), statistics: \(String(describing: statistics)), status: \(String(describing: status)))"}
}

extension GetQueryResultsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetQueryResultsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.results = output.results
            self.statistics = output.statistics
            self.status = output.status
        } else {
            self.results = nil
            self.statistics = nil
            self.status = nil
        }
    }
}

public struct GetQueryResultsOutputResponse: Equatable {
    /// <p>The log events that matched the query criteria during the most recent time it ran.</p>
    ///          <p>The <code>results</code> value is an array of arrays. Each log event is one object in the
    ///       top-level array. Each of these log event objects is an array of
    ///         <code>field</code>/<code>value</code> pairs.</p>
    public let results: [[ResultField]]?
    /// <p>Includes the number of log events scanned by the query, the number of log events that matched the
    ///     query criteria, and the total number of bytes in the log events that were scanned. These values
    ///     reflect the full raw results of the query.</p>
    public let statistics: QueryStatistics?
    /// <p>The status of the most recent running of the query. Possible values are <code>Cancelled</code>,
    ///       <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>,
    ///       <code>Timeout</code>, and <code>Unknown</code>.</p>
    ///          <p>Queries time out after 15 minutes of execution. To avoid having your queries time out,
    ///       reduce the time range being searched or partition your query into a number of queries.</p>
    public let status: QueryStatus?

    public init (
        results: [[ResultField]]? = nil,
        statistics: QueryStatistics? = nil,
        status: QueryStatus? = nil
    )
    {
        self.results = results
        self.statistics = statistics
        self.status = status
    }
}

struct GetQueryResultsOutputResponseBody: Equatable {
    public let results: [[ResultField]]?
    public let statistics: QueryStatistics?
    public let status: QueryStatus?
}

extension GetQueryResultsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case results
        case statistics
        case status
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([[ResultField?]?].self, forKey: .results)
        var resultsDecoded0:[[ResultField]]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [[ResultField]]()
            for list0 in resultsContainer {
                var list0Decoded0: [ResultField]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [ResultField]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    resultsDecoded0?.append(list0Decoded0)
                }
            }
        }
        results = resultsDecoded0
        let statisticsDecoded = try containerValues.decodeIfPresent(QueryStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueryStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension InputLogEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case message
        case timestamp
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InputLogEvent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InputLogEvent(message: \(String(describing: message)), timestamp: \(String(describing: timestamp)))"}
}

/// <p>Represents a log event, which is a record of activity that was recorded
///       by the application or resource being monitored.</p>
public struct InputLogEvent: Equatable {
    /// <p>The raw event message.</p>
    public let message: String?
    /// <p>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC.</p>
    public let timestamp: Int?

    public init (
        message: String? = nil,
        timestamp: Int? = nil
    )
    {
        self.message = message
        self.timestamp = timestamp
    }
}

extension InvalidOperationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidOperationException(message: \(String(describing: message)))"}
}

extension InvalidOperationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidOperationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation is not valid on the specified resource.</p>
public struct InvalidOperationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidOperationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidParameterException(message: \(String(describing: message)))"}
}

extension InvalidParameterException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A parameter is specified incorrectly.</p>
public struct InvalidParameterException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Equatable {
    public let message: String?
}

extension InvalidParameterExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSequenceTokenException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidSequenceTokenException(expectedSequenceToken: \(String(describing: expectedSequenceToken)), message: \(String(describing: message)))"}
}

extension InvalidSequenceTokenException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidSequenceTokenExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.expectedSequenceToken = output.expectedSequenceToken
            self.message = output.message
        } else {
            self.expectedSequenceToken = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The sequence token is not valid. You can get the correct sequence token in
///       the <code>expectedSequenceToken</code> field in the <code>InvalidSequenceTokenException</code>
///     message. </p>
public struct InvalidSequenceTokenException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var expectedSequenceToken: String?
    public var message: String?

    public init (
        expectedSequenceToken: String? = nil,
        message: String? = nil
    )
    {
        self.expectedSequenceToken = expectedSequenceToken
        self.message = message
    }
}

struct InvalidSequenceTokenExceptionBody: Equatable {
    public let expectedSequenceToken: String?
    public let message: String?
}

extension InvalidSequenceTokenExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case expectedSequenceToken
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedSequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expectedSequenceToken)
        expectedSequenceToken = expectedSequenceTokenDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LimitExceededException(message: \(String(describing: message)))"}
}

extension LimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You have reached the maximum number of resources that can be created.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension LimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListTagsLogGroupInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsLogGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsLogGroupInput>
    public typealias MOutput = OperationOutput<ListTagsLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsLogGroupOutputError>
}

extension ListTagsLogGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsLogGroupInput(logGroupName: \(String(describing: logGroupName)))"}
}

extension ListTagsLogGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct ListTagsLogGroupInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsLogGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsLogGroupInput>
    public typealias MOutput = OperationOutput<ListTagsLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsLogGroupOutputError>
}

public struct ListTagsLogGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsLogGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsLogGroupInput>
    public typealias MOutput = OperationOutput<ListTagsLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsLogGroupOutputError>
}

public struct ListTagsLogGroupInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?

    public init (
        logGroupName: String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct ListTagsLogGroupInputBody: Equatable {
    public let logGroupName: String?
}

extension ListTagsLogGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension ListTagsLogGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsLogGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsLogGroupOutputError: Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsLogGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsLogGroupOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListTagsLogGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsLogGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsLogGroupOutputResponse: Equatable {
    /// <p>The tags for the log group.</p>
    public let tags: [String:String]?

    public init (
        tags: [String:String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsLogGroupOutputResponseBody: Equatable {
    public let tags: [String:String]?
}

extension ListTagsLogGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LogGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case creationTime
        case kmsKeyId
        case logGroupName
        case metricFilterCount
        case retentionInDays
        case storedBytes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricFilterCount = metricFilterCount {
            try encodeContainer.encode(metricFilterCount, forKey: .metricFilterCount)
        }
        if let retentionInDays = retentionInDays {
            try encodeContainer.encode(retentionInDays, forKey: .retentionInDays)
        }
        if let storedBytes = storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let retentionInDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .retentionInDays)
        retentionInDays = retentionInDaysDecoded
        let metricFilterCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .metricFilterCount)
        metricFilterCount = metricFilterCountDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension LogGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogGroup(arn: \(String(describing: arn)), creationTime: \(String(describing: creationTime)), kmsKeyId: \(String(describing: kmsKeyId)), logGroupName: \(String(describing: logGroupName)), metricFilterCount: \(String(describing: metricFilterCount)), retentionInDays: \(String(describing: retentionInDays)), storedBytes: \(String(describing: storedBytes)))"}
}

/// <p>Represents a log group.</p>
public struct LogGroup: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the log group.</p>
    public let arn: String?
    /// <p>The creation time of the log group, expressed as the number of milliseconds after Jan
    ///       1, 1970 00:00:00 UTC.</p>
    public let creationTime: Int?
    /// <p>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.</p>
    public let kmsKeyId: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The number of metric filters.</p>
    public let metricFilterCount: Int?
    /// <p>The number of days to retain the log events in the specified log group.
    ///       Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</p>
    ///          <p>If you omit <code>retentionInDays</code> in a <code>PutRetentionPolicy</code> operation,
    ///   the events in the log group are always retained and never expire.</p>
    public let retentionInDays: Int?
    /// <p>The number of bytes stored.</p>
    public let storedBytes: Int?

    public init (
        arn: String? = nil,
        creationTime: Int? = nil,
        kmsKeyId: String? = nil,
        logGroupName: String? = nil,
        metricFilterCount: Int? = nil,
        retentionInDays: Int? = nil,
        storedBytes: Int? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
        self.metricFilterCount = metricFilterCount
        self.retentionInDays = retentionInDays
        self.storedBytes = storedBytes
    }
}

extension LogGroupField: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case percent
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if percent != 0 {
            try encodeContainer.encode(percent, forKey: .percent)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let percentDecoded = try containerValues.decode(Int.self, forKey: .percent)
        percent = percentDecoded
    }
}

extension LogGroupField: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogGroupField(name: \(String(describing: name)), percent: \(String(describing: percent)))"}
}

/// <p>The fields contained in log events found by a <code>GetLogGroupFields</code> operation,
///       along with the percentage of queried log events in which each field appears.</p>
public struct LogGroupField: Equatable {
    /// <p>The name of a log field.</p>
    public let name: String?
    /// <p>The percentage of log events queried that contained the field.</p>
    public let percent: Int

    public init (
        name: String? = nil,
        percent: Int = 0
    )
    {
        self.name = name
        self.percent = percent
    }
}

extension LogStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case creationTime
        case firstEventTimestamp
        case lastEventTimestamp
        case lastIngestionTime
        case logStreamName
        case storedBytes
        case uploadSequenceToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let firstEventTimestamp = firstEventTimestamp {
            try encodeContainer.encode(firstEventTimestamp, forKey: .firstEventTimestamp)
        }
        if let lastEventTimestamp = lastEventTimestamp {
            try encodeContainer.encode(lastEventTimestamp, forKey: .lastEventTimestamp)
        }
        if let lastIngestionTime = lastIngestionTime {
            try encodeContainer.encode(lastIngestionTime, forKey: .lastIngestionTime)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let storedBytes = storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
        if let uploadSequenceToken = uploadSequenceToken {
            try encodeContainer.encode(uploadSequenceToken, forKey: .uploadSequenceToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let firstEventTimestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .firstEventTimestamp)
        firstEventTimestamp = firstEventTimestampDecoded
        let lastEventTimestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lastEventTimestamp)
        lastEventTimestamp = lastEventTimestampDecoded
        let lastIngestionTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lastIngestionTime)
        lastIngestionTime = lastIngestionTimeDecoded
        let uploadSequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadSequenceToken)
        uploadSequenceToken = uploadSequenceTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
    }
}

extension LogStream: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogStream(arn: \(String(describing: arn)), creationTime: \(String(describing: creationTime)), firstEventTimestamp: \(String(describing: firstEventTimestamp)), lastEventTimestamp: \(String(describing: lastEventTimestamp)), lastIngestionTime: \(String(describing: lastIngestionTime)), logStreamName: \(String(describing: logStreamName)), storedBytes: \(String(describing: storedBytes)), uploadSequenceToken: \(String(describing: uploadSequenceToken)))"}
}

/// <p>Represents a log stream, which is a sequence of log events from
///       a single emitter of logs.</p>
public struct LogStream: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the log stream.</p>
    public let arn: String?
    /// <p>The creation time of the stream, expressed as the number of milliseconds after Jan 1,
    ///       1970 00:00:00 UTC.</p>
    public let creationTime: Int?
    /// <p>The time of the first event, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC.</p>
    public let firstEventTimestamp: Int?
    /// <p>The time of the most recent log event in the log stream in CloudWatch Logs. This number
    ///       is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The
    ///         <code>lastEventTime</code> value updates on an eventual consistency basis. It typically
    ///       updates in less than an hour from ingestion, but in rare situations might take
    ///       longer.</p>
    public let lastEventTimestamp: Int?
    /// <p>The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00
    ///       UTC.</p>
    public let lastIngestionTime: Int?
    /// <p>The name of the log stream.</p>
    public let logStreamName: String?
    /// <p>The number of bytes stored.</p>
    ///          <p>
    ///             <b>Important:</b> On June 17, 2019, this parameter was
    ///       deprecated for log streams, and is always reported as zero. This change applies only to log
    ///       streams. The <code>storedBytes</code> parameter for log groups is not affected.</p>
    @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.")
    public let storedBytes: Int?
    /// <p>The sequence token.</p>
    public let uploadSequenceToken: String?

    public init (
        arn: String? = nil,
        creationTime: Int? = nil,
        firstEventTimestamp: Int? = nil,
        lastEventTimestamp: Int? = nil,
        lastIngestionTime: Int? = nil,
        logStreamName: String? = nil,
        storedBytes: Int? = nil,
        uploadSequenceToken: String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.firstEventTimestamp = firstEventTimestamp
        self.lastEventTimestamp = lastEventTimestamp
        self.lastIngestionTime = lastIngestionTime
        self.logStreamName = logStreamName
        self.storedBytes = storedBytes
        self.uploadSequenceToken = uploadSequenceToken
    }
}

extension MalformedQueryException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MalformedQueryException(message: \(String(describing: message)), queryCompileError: \(String(describing: queryCompileError)))"}
}

extension MalformedQueryException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: MalformedQueryExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.queryCompileError = output.queryCompileError
        } else {
            self.message = nil
            self.queryCompileError = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The query string is not valid. Details about this error are displayed in a
///       <code>QueryCompileError</code> object. For more information, see
///       <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_QueryCompileError.html">QueryCompileError</a>.</p>
///          <p>For more information about valid query syntax, see
///       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.</p>
public struct MalformedQueryException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    /// <p>Reserved.</p>
    public var queryCompileError: QueryCompileError?

    public init (
        message: String? = nil,
        queryCompileError: QueryCompileError? = nil
    )
    {
        self.message = message
        self.queryCompileError = queryCompileError
    }
}

struct MalformedQueryExceptionBody: Equatable {
    public let queryCompileError: QueryCompileError?
    public let message: String?
}

extension MalformedQueryExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
        case queryCompileError
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryCompileErrorDecoded = try containerValues.decodeIfPresent(QueryCompileError.self, forKey: .queryCompileError)
        queryCompileError = queryCompileErrorDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MetricFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformations0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformations0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension MetricFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricFilter(creationTime: \(String(describing: creationTime)), filterName: \(String(describing: filterName)), filterPattern: \(String(describing: filterPattern)), logGroupName: \(String(describing: logGroupName)), metricTransformations: \(String(describing: metricTransformations)))"}
}

/// <p>Metric filters express how CloudWatch Logs would extract metric observations
///       from ingested log events and transform them into metric data in a CloudWatch metric.</p>
public struct MetricFilter: Equatable {
    /// <p>The creation time of the metric filter, expressed as the number of milliseconds after
    ///       Jan 1, 1970 00:00:00 UTC.</p>
    public let creationTime: Int?
    /// <p>The name of the metric filter.</p>
    public let filterName: String?
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log
    ///       event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You
    ///       use the filter pattern to specify what to look for in the log event message.</p>
    public let filterPattern: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The metric transformations.</p>
    public let metricTransformations: [MetricTransformation]?

    public init (
        creationTime: Int? = nil,
        filterName: String? = nil,
        filterPattern: String? = nil,
        logGroupName: String? = nil,
        metricTransformations: [MetricTransformation]? = nil
    )
    {
        self.creationTime = creationTime
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.metricTransformations = metricTransformations
    }
}

extension MetricFilterMatchRecord: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventMessage
        case eventNumber
        case extractedValues
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventMessage = eventMessage {
            try encodeContainer.encode(eventMessage, forKey: .eventMessage)
        }
        if eventNumber != 0 {
            try encodeContainer.encode(eventNumber, forKey: .eventNumber)
        }
        if let extractedValues = extractedValues {
            var extractedValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .extractedValues)
            for (dictKey0, extractedvalues0) in extractedValues {
                try extractedValuesContainer.encode(extractedvalues0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventNumberDecoded = try containerValues.decode(Int.self, forKey: .eventNumber)
        eventNumber = eventNumberDecoded
        let eventMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventMessage)
        eventMessage = eventMessageDecoded
        let extractedValuesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .extractedValues)
        var extractedValuesDecoded0: [String:String]? = nil
        if let extractedValuesContainer = extractedValuesContainer {
            extractedValuesDecoded0 = [String:String]()
            for (key0, value0) in extractedValuesContainer {
                if let value0 = value0 {
                    extractedValuesDecoded0?[key0] = value0
                }
            }
        }
        extractedValues = extractedValuesDecoded0
    }
}

extension MetricFilterMatchRecord: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricFilterMatchRecord(eventMessage: \(String(describing: eventMessage)), eventNumber: \(String(describing: eventNumber)), extractedValues: \(String(describing: extractedValues)))"}
}

/// <p>Represents a matched event.</p>
public struct MetricFilterMatchRecord: Equatable {
    /// <p>The raw event data.</p>
    public let eventMessage: String?
    /// <p>The event number.</p>
    public let eventNumber: Int
    /// <p>The values extracted from the event data by the filter.</p>
    public let extractedValues: [String:String]?

    public init (
        eventMessage: String? = nil,
        eventNumber: Int = 0,
        extractedValues: [String:String]? = nil
    )
    {
        self.eventMessage = eventMessage
        self.eventNumber = eventNumber
        self.extractedValues = extractedValues
    }
}

extension MetricTransformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultValue
        case dimensions
        case metricName
        case metricNamespace
        case metricValue
        case unit
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValue = defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .dimensions)
            for (dictKey0, dimensions0) in dimensions {
                try dimensionsContainer.encode(dimensions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let metricValue = metricValue {
            try encodeContainer.encode(metricValue, forKey: .metricValue)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricValue)
        metricValue = metricValueDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .dimensions)
        var dimensionsDecoded0: [String:String]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [String:String]()
            for (key0, dimensionsvalue0) in dimensionsContainer {
                if let dimensionsvalue0 = dimensionsvalue0 {
                    dimensionsDecoded0?[key0] = dimensionsvalue0
                }
            }
        }
        dimensions = dimensionsDecoded0
        let unitDecoded = try containerValues.decodeIfPresent(StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension MetricTransformation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricTransformation(defaultValue: \(String(describing: defaultValue)), dimensions: \(String(describing: dimensions)), metricName: \(String(describing: metricName)), metricNamespace: \(String(describing: metricNamespace)), metricValue: \(String(describing: metricValue)), unit: \(String(describing: unit)))"}
}

/// <p>Indicates how to transform ingested log events to metric data in a CloudWatch
///       metric.</p>
public struct MetricTransformation: Equatable {
    /// <p>(Optional) The value to emit when a filter pattern does not match a log event.
    ///       This value can be null.</p>
    public let defaultValue: Double?
    /// <p>The fields to use as dimensions for the metric. One metric filter can include
    ///     as many as three dimensions.</p>
    ///          <important>
    ///             <p>Metrics extracted from log events are charged as custom metrics.
    ///       To prevent unexpected high charges, do not specify high-cardinality fields such as
    ///       <code>IPAddress</code> or <code>requestID</code> as dimensions. Each different value
    ///       found for
    ///       a dimension is treated as a separate metric and accrues charges as a separate custom metric.
    ///     </p>
    ///             <p>To help prevent accidental high charges, Amazon disables a metric filter
    ///         if it generates 1000 different name/value pairs for the dimensions that you
    ///         have specified within a certain amount of time.</p>
    ///             <p>You can also set up a billing alarm to alert you if your charges are higher than
    ///         expected. For more information,
    ///         see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html">
    ///           Creating a Billing Alarm to Monitor Your Estimated AWS Charges</a>.
    ///        </p>
    ///          </important>
    public let dimensions: [String:String]?
    /// <p>The name of the CloudWatch metric.</p>
    public let metricName: String?
    /// <p>A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics
    ///       that are similar. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">Namespaces</a>.</p>
    public let metricNamespace: String?
    /// <p>The value to publish to the CloudWatch metric when a filter pattern matches a log event.</p>
    public let metricValue: String?
    /// <p>The unit to assign to the metric. If you omit this, the unit is set as <code>None</code>.</p>
    public let unit: StandardUnit?

    public init (
        defaultValue: Double? = nil,
        dimensions: [String:String]? = nil,
        metricName: String? = nil,
        metricNamespace: String? = nil,
        metricValue: String? = nil,
        unit: StandardUnit? = nil
    )
    {
        self.defaultValue = defaultValue
        self.dimensions = dimensions
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.metricValue = metricValue
        self.unit = unit
    }
}

extension OperationAbortedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OperationAbortedException(message: \(String(describing: message)))"}
}

extension OperationAbortedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OperationAbortedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Multiple requests to update the same resource were in conflict.</p>
public struct OperationAbortedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OperationAbortedExceptionBody: Equatable {
    public let message: String?
}

extension OperationAbortedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum OrderBy {
    case lasteventtime
    case logstreamname
    case sdkUnknown(String)
}

extension OrderBy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OrderBy] {
        return [
            .lasteventtime,
            .logstreamname,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .lasteventtime: return "LastEventTime"
        case .logstreamname: return "LogStreamName"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OrderBy(rawValue: rawValue) ?? OrderBy.sdkUnknown(rawValue)
    }
}

extension OutputLogEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ingestionTime
        case message
        case timestamp
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ingestionTime = ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
    }
}

extension OutputLogEvent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OutputLogEvent(ingestionTime: \(String(describing: ingestionTime)), message: \(String(describing: message)), timestamp: \(String(describing: timestamp)))"}
}

/// <p>Represents a log event.</p>
public struct OutputLogEvent: Equatable {
    /// <p>The time the event was ingested, expressed as the number of milliseconds after Jan 1,
    ///       1970 00:00:00 UTC.</p>
    public let ingestionTime: Int?
    /// <p>The data contained in the log event.</p>
    public let message: String?
    /// <p>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970
    ///       00:00:00 UTC.</p>
    public let timestamp: Int?

    public init (
        ingestionTime: Int? = nil,
        message: String? = nil,
        timestamp: Int? = nil
    )
    {
        self.ingestionTime = ingestionTime
        self.message = message
        self.timestamp = timestamp
    }
}

public struct PutDestinationInputBodyMiddleware: Middleware {
    public let id: String = "PutDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutDestinationInput>
    public typealias MOutput = OperationOutput<PutDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutDestinationOutputError>
}

extension PutDestinationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutDestinationInput(destinationName: \(String(describing: destinationName)), roleArn: \(String(describing: roleArn)), targetArn: \(String(describing: targetArn)))"}
}

extension PutDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationName
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }
}

public struct PutDestinationInputHeadersMiddleware: Middleware {
    public let id: String = "PutDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutDestinationInput>
    public typealias MOutput = OperationOutput<PutDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutDestinationOutputError>
}

public struct PutDestinationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutDestinationInput>
    public typealias MOutput = OperationOutput<PutDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutDestinationOutputError>
}

public struct PutDestinationInput: Equatable {
    /// <p>A name for the destination.</p>
    public let destinationName: String?
    /// <p>The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon
    ///       Kinesis <code>PutRecord</code> operation on the destination stream.</p>
    public let roleArn: String?
    /// <p>The ARN of an Amazon Kinesis stream to which to deliver matching log events.</p>
    public let targetArn: String?

    public init (
        destinationName: String? = nil,
        roleArn: String? = nil,
        targetArn: String? = nil
    )
    {
        self.destinationName = destinationName
        self.roleArn = roleArn
        self.targetArn = targetArn
    }
}

struct PutDestinationInputBody: Equatable {
    public let destinationName: String?
    public let targetArn: String?
    public let roleArn: String?
}

extension PutDestinationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationName
        case roleArn
        case targetArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension PutDestinationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDestinationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDestinationOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDestinationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutDestinationOutputResponse(destination: \(String(describing: destination)))"}
}

extension PutDestinationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutDestinationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.destination = output.destination
        } else {
            self.destination = nil
        }
    }
}

public struct PutDestinationOutputResponse: Equatable {
    /// <p>The destination.</p>
    public let destination: Destination?

    public init (
        destination: Destination? = nil
    )
    {
        self.destination = destination
    }
}

struct PutDestinationOutputResponseBody: Equatable {
    public let destination: Destination?
}

extension PutDestinationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destination
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(Destination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

public struct PutDestinationPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutDestinationPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutDestinationPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutDestinationPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutDestinationPolicyInput>
    public typealias MOutput = OperationOutput<PutDestinationPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutDestinationPolicyOutputError>
}

extension PutDestinationPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutDestinationPolicyInput(accessPolicy: \(String(describing: accessPolicy)), destinationName: \(String(describing: destinationName)))"}
}

extension PutDestinationPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessPolicy
        case destinationName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
    }
}

public struct PutDestinationPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutDestinationPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutDestinationPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutDestinationPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutDestinationPolicyInput>
    public typealias MOutput = OperationOutput<PutDestinationPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutDestinationPolicyOutputError>
}

public struct PutDestinationPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutDestinationPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutDestinationPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutDestinationPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutDestinationPolicyInput>
    public typealias MOutput = OperationOutput<PutDestinationPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutDestinationPolicyOutputError>
}

public struct PutDestinationPolicyInput: Equatable {
    /// <p>An IAM policy document that authorizes cross-account users to deliver their log events
    ///       to the associated destination. This can be up to 5120 bytes.</p>
    public let accessPolicy: String?
    /// <p>A name for an existing destination.</p>
    public let destinationName: String?

    public init (
        accessPolicy: String? = nil,
        destinationName: String? = nil
    )
    {
        self.accessPolicy = accessPolicy
        self.destinationName = destinationName
    }
}

struct PutDestinationPolicyInputBody: Equatable {
    public let destinationName: String?
    public let accessPolicy: String?
}

extension PutDestinationPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accessPolicy
        case destinationName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
    }
}

extension PutDestinationPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDestinationPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDestinationPolicyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDestinationPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutDestinationPolicyOutputResponse()"}
}

extension PutDestinationPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutDestinationPolicyOutputResponse: Equatable {

    public init() {}
}

struct PutDestinationPolicyOutputResponseBody: Equatable {
}

extension PutDestinationPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutLogEventsInputBodyMiddleware: Middleware {
    public let id: String = "PutLogEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLogEventsInput>
    public typealias MOutput = OperationOutput<PutLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLogEventsOutputError>
}

extension PutLogEventsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutLogEventsInput(logEvents: \(String(describing: logEvents)), logGroupName: \(String(describing: logGroupName)), logStreamName: \(String(describing: logStreamName)), sequenceToken: \(String(describing: sequenceToken)))"}
}

extension PutLogEventsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logEvents = logEvents {
            var logEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEvents)
            for inputlogevents0 in logEvents {
                try logEventsContainer.encode(inputlogevents0)
            }
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let sequenceToken = sequenceToken {
            try encodeContainer.encode(sequenceToken, forKey: .sequenceToken)
        }
    }
}

public struct PutLogEventsInputHeadersMiddleware: Middleware {
    public let id: String = "PutLogEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLogEventsInput>
    public typealias MOutput = OperationOutput<PutLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLogEventsOutputError>
}

public struct PutLogEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "PutLogEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLogEventsInput>
    public typealias MOutput = OperationOutput<PutLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLogEventsOutputError>
}

public struct PutLogEventsInput: Equatable {
    /// <p>The log events.</p>
    public let logEvents: [InputLogEvent]?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The name of the log stream.</p>
    public let logStreamName: String?
    /// <p>The sequence token obtained from the response of the previous <code>PutLogEvents</code>
    ///       call. An upload in a newly created log stream does not require a sequence token. You can also
    ///       get the sequence token using <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeLogStreams.html">DescribeLogStreams</a>. If you call <code>PutLogEvents</code> twice within a narrow
    ///       time period using the same value for <code>sequenceToken</code>, both calls might be
    ///       successful or one might be rejected.</p>
    public let sequenceToken: String?

    public init (
        logEvents: [InputLogEvent]? = nil,
        logGroupName: String? = nil,
        logStreamName: String? = nil,
        sequenceToken: String? = nil
    )
    {
        self.logEvents = logEvents
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.sequenceToken = sequenceToken
    }
}

struct PutLogEventsInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamName: String?
    public let logEvents: [InputLogEvent]?
    public let sequenceToken: String?
}

extension PutLogEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let logEventsContainer = try containerValues.decodeIfPresent([InputLogEvent?].self, forKey: .logEvents)
        var logEventsDecoded0:[InputLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [InputLogEvent]()
            for structure0 in logEventsContainer {
                if let structure0 = structure0 {
                    logEventsDecoded0?.append(structure0)
                }
            }
        }
        logEvents = logEventsDecoded0
        let sequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sequenceToken)
        sequenceToken = sequenceTokenDecoded
    }
}

extension PutLogEventsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLogEventsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DataAlreadyAcceptedException" : self = .dataAlreadyAcceptedException(try DataAlreadyAcceptedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSequenceTokenException" : self = .invalidSequenceTokenException(try InvalidSequenceTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnrecognizedClientException" : self = .unrecognizedClientException(try UnrecognizedClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLogEventsOutputError: Equatable {
    case dataAlreadyAcceptedException(DataAlreadyAcceptedException)
    case invalidParameterException(InvalidParameterException)
    case invalidSequenceTokenException(InvalidSequenceTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unrecognizedClientException(UnrecognizedClientException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLogEventsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutLogEventsOutputResponse(nextSequenceToken: \(String(describing: nextSequenceToken)), rejectedLogEventsInfo: \(String(describing: rejectedLogEventsInfo)))"}
}

extension PutLogEventsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextSequenceToken = output.nextSequenceToken
            self.rejectedLogEventsInfo = output.rejectedLogEventsInfo
        } else {
            self.nextSequenceToken = nil
            self.rejectedLogEventsInfo = nil
        }
    }
}

public struct PutLogEventsOutputResponse: Equatable {
    /// <p>The next sequence token.</p>
    public let nextSequenceToken: String?
    /// <p>The rejected events.</p>
    public let rejectedLogEventsInfo: RejectedLogEventsInfo?

    public init (
        nextSequenceToken: String? = nil,
        rejectedLogEventsInfo: RejectedLogEventsInfo? = nil
    )
    {
        self.nextSequenceToken = nextSequenceToken
        self.rejectedLogEventsInfo = rejectedLogEventsInfo
    }
}

struct PutLogEventsOutputResponseBody: Equatable {
    public let nextSequenceToken: String?
    public let rejectedLogEventsInfo: RejectedLogEventsInfo?
}

extension PutLogEventsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextSequenceToken
        case rejectedLogEventsInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextSequenceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextSequenceToken)
        nextSequenceToken = nextSequenceTokenDecoded
        let rejectedLogEventsInfoDecoded = try containerValues.decodeIfPresent(RejectedLogEventsInfo.self, forKey: .rejectedLogEventsInfo)
        rejectedLogEventsInfo = rejectedLogEventsInfoDecoded
    }
}

public struct PutMetricFilterInputBodyMiddleware: Middleware {
    public let id: String = "PutMetricFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMetricFilterInput>
    public typealias MOutput = OperationOutput<PutMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMetricFilterOutputError>
}

extension PutMetricFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutMetricFilterInput(filterName: \(String(describing: filterName)), filterPattern: \(String(describing: filterPattern)), logGroupName: \(String(describing: logGroupName)), metricTransformations: \(String(describing: metricTransformations)))"}
}

extension PutMetricFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformations0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformations0)
            }
        }
    }
}

public struct PutMetricFilterInputHeadersMiddleware: Middleware {
    public let id: String = "PutMetricFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMetricFilterInput>
    public typealias MOutput = OperationOutput<PutMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMetricFilterOutputError>
}

public struct PutMetricFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "PutMetricFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<PutMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutMetricFilterInput>
    public typealias MOutput = OperationOutput<PutMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutMetricFilterOutputError>
}

public struct PutMetricFilterInput: Equatable {
    /// <p>A name for the metric filter.</p>
    public let filterName: String?
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    public let filterPattern: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    public let metricTransformations: [MetricTransformation]?

    public init (
        filterName: String? = nil,
        filterPattern: String? = nil,
        logGroupName: String? = nil,
        metricTransformations: [MetricTransformation]? = nil
    )
    {
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.metricTransformations = metricTransformations
    }
}

struct PutMetricFilterInputBody: Equatable {
    public let logGroupName: String?
    public let filterName: String?
    public let filterPattern: String?
    public let metricTransformations: [MetricTransformation]?
}

extension PutMetricFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
    }
}

extension PutMetricFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutMetricFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutMetricFilterOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutMetricFilterOutputResponse()"}
}

extension PutMetricFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricFilterOutputResponse: Equatable {

    public init() {}
}

struct PutMetricFilterOutputResponseBody: Equatable {
}

extension PutMetricFilterOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutQueryDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "PutQueryDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutQueryDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutQueryDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutQueryDefinitionInput>
    public typealias MOutput = OperationOutput<PutQueryDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutQueryDefinitionOutputError>
}

extension PutQueryDefinitionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutQueryDefinitionInput(logGroupNames: \(String(describing: logGroupNames)), name: \(String(describing: name)), queryDefinitionId: \(String(describing: queryDefinitionId)), queryString: \(String(describing: queryString)))"}
}

extension PutQueryDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupnames0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupnames0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryDefinitionId = queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }
}

public struct PutQueryDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "PutQueryDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutQueryDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutQueryDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutQueryDefinitionInput>
    public typealias MOutput = OperationOutput<PutQueryDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutQueryDefinitionOutputError>
}

public struct PutQueryDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "PutQueryDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutQueryDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<PutQueryDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutQueryDefinitionInput>
    public typealias MOutput = OperationOutput<PutQueryDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutQueryDefinitionOutputError>
}

public struct PutQueryDefinitionInput: Equatable {
    /// <p>Use this parameter to include specific log groups as part of your query definition.</p>
    ///          <p>If you are updating a query definition and you omit this parameter, then the updated
    ///       definition will contain no log groups.</p>
    public let logGroupNames: [String]?
    /// <p>A name for the query definition. If you are saving a lot of query definitions, we
    ///       recommend that you name them so that you can easily find the ones you want by using the first
    ///       part of the name as a filter in the <code>queryDefinitionNamePrefix</code> parameter of <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a>.</p>
    public let name: String?
    /// <p>If you are updating a query definition, use this parameter to specify the ID of the query
    ///       definition that you want to update. You can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a> to retrieve the IDs of your saved query
    ///       definitions.</p>
    ///          <p>If you are creating a query definition, do not specify this parameter. CloudWatch
    ///       generates a unique ID for the new query definition and include it in the response to this
    ///       operation.</p>
    public let queryDefinitionId: String?
    /// <p>The query string to use for this definition.
    ///       For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.</p>
    public let queryString: String?

    public init (
        logGroupNames: [String]? = nil,
        name: String? = nil,
        queryDefinitionId: String? = nil,
        queryString: String? = nil
    )
    {
        self.logGroupNames = logGroupNames
        self.name = name
        self.queryDefinitionId = queryDefinitionId
        self.queryString = queryString
    }
}

struct PutQueryDefinitionInputBody: Equatable {
    public let name: String?
    public let queryDefinitionId: String?
    public let logGroupNames: [String]?
    public let queryString: String?
}

extension PutQueryDefinitionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}

extension PutQueryDefinitionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutQueryDefinitionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutQueryDefinitionOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutQueryDefinitionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutQueryDefinitionOutputResponse(queryDefinitionId: \(String(describing: queryDefinitionId)))"}
}

extension PutQueryDefinitionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutQueryDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queryDefinitionId = output.queryDefinitionId
        } else {
            self.queryDefinitionId = nil
        }
    }
}

public struct PutQueryDefinitionOutputResponse: Equatable {
    /// <p>The ID of the query definition.</p>
    public let queryDefinitionId: String?

    public init (
        queryDefinitionId: String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

struct PutQueryDefinitionOutputResponseBody: Equatable {
    public let queryDefinitionId: String?
}

extension PutQueryDefinitionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queryDefinitionId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
    }
}

public struct PutResourcePolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutResourcePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutResourcePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutResourcePolicyInput>
    public typealias MOutput = OperationOutput<PutResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutResourcePolicyOutputError>
}

extension PutResourcePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutResourcePolicyInput(policyDocument: \(String(describing: policyDocument)), policyName: \(String(describing: policyName)))"}
}

extension PutResourcePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

public struct PutResourcePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutResourcePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutResourcePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutResourcePolicyInput>
    public typealias MOutput = OperationOutput<PutResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutResourcePolicyOutputError>
}

public struct PutResourcePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutResourcePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutResourcePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutResourcePolicyInput>
    public typealias MOutput = OperationOutput<PutResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutResourcePolicyOutputError>
}

public struct PutResourcePolicyInput: Equatable {
    /// <p>Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string.
    ///     This parameter is required.</p>
    ///          <p>The following example creates a resource policy enabling the Route 53 service to put
    ///       DNS query logs in to the specified log group. Replace <code>"logArn"</code> with the ARN of your CloudWatch Logs resource, such as a log group or log stream.</p>
    ///          <p>
    ///             <code>{
    ///    "Version": "2012-10-17",
    ///    "Statement": [
    ///      {
    ///        "Sid": "Route53LogsToCloudWatchLogs",
    ///        "Effect": "Allow",
    ///        "Principal": {
    ///         "Service": [
    ///                 "route53.amazonaws.com"
    ///                ]
    ///             },
    ///          "Action":"logs:PutLogEvents",
    ///          "Resource": "logArn"
    ///       }
    ///     ]
    /// } </code>
    ///
    ///          </p>
    public let policyDocument: String?
    /// <p>Name of the new policy. This parameter is required.</p>
    public let policyName: String?

    public init (
        policyDocument: String? = nil,
        policyName: String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

struct PutResourcePolicyInputBody: Equatable {
    public let policyName: String?
    public let policyDocument: String?
}

extension PutResourcePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyDocument
        case policyName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension PutResourcePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutResourcePolicyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutResourcePolicyOutputResponse(resourcePolicy: \(String(describing: resourcePolicy)))"}
}

extension PutResourcePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct PutResourcePolicyOutputResponse: Equatable {
    /// <p>The new policy.</p>
    public let resourcePolicy: ResourcePolicy?

    public init (
        resourcePolicy: ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyOutputResponseBody: Equatable {
    public let resourcePolicy: ResourcePolicy?
}

extension PutResourcePolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourcePolicy
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

public struct PutRetentionPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutRetentionPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutRetentionPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutRetentionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutRetentionPolicyInput>
    public typealias MOutput = OperationOutput<PutRetentionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutRetentionPolicyOutputError>
}

extension PutRetentionPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutRetentionPolicyInput(logGroupName: \(String(describing: logGroupName)), retentionInDays: \(String(describing: retentionInDays)))"}
}

extension PutRetentionPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case retentionInDays
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let retentionInDays = retentionInDays {
            try encodeContainer.encode(retentionInDays, forKey: .retentionInDays)
        }
    }
}

public struct PutRetentionPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutRetentionPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutRetentionPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutRetentionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutRetentionPolicyInput>
    public typealias MOutput = OperationOutput<PutRetentionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutRetentionPolicyOutputError>
}

public struct PutRetentionPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutRetentionPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutRetentionPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutRetentionPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutRetentionPolicyInput>
    public typealias MOutput = OperationOutput<PutRetentionPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutRetentionPolicyOutputError>
}

public struct PutRetentionPolicyInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The number of days to retain the log events in the specified log group.
    ///       Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</p>
    ///          <p>If you omit <code>retentionInDays</code> in a <code>PutRetentionPolicy</code> operation,
    ///   the events in the log group are always retained and never expire.</p>
    public let retentionInDays: Int?

    public init (
        logGroupName: String? = nil,
        retentionInDays: Int? = nil
    )
    {
        self.logGroupName = logGroupName
        self.retentionInDays = retentionInDays
    }
}

struct PutRetentionPolicyInputBody: Equatable {
    public let logGroupName: String?
    public let retentionInDays: Int?
}

extension PutRetentionPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case retentionInDays
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let retentionInDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .retentionInDays)
        retentionInDays = retentionInDaysDecoded
    }
}

extension PutRetentionPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRetentionPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutRetentionPolicyOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRetentionPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutRetentionPolicyOutputResponse()"}
}

extension PutRetentionPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutRetentionPolicyOutputResponse: Equatable {

    public init() {}
}

struct PutRetentionPolicyOutputResponseBody: Equatable {
}

extension PutRetentionPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutSubscriptionFilterInputBodyMiddleware: Middleware {
    public let id: String = "PutSubscriptionFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<PutSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSubscriptionFilterOutputError>
}

extension PutSubscriptionFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutSubscriptionFilterInput(destinationArn: \(String(describing: destinationArn)), distribution: \(String(describing: distribution)), filterName: \(String(describing: filterName)), filterPattern: \(String(describing: filterPattern)), logGroupName: \(String(describing: logGroupName)), roleArn: \(String(describing: roleArn)))"}
}

extension PutSubscriptionFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct PutSubscriptionFilterInputHeadersMiddleware: Middleware {
    public let id: String = "PutSubscriptionFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<PutSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSubscriptionFilterOutputError>
}

public struct PutSubscriptionFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "PutSubscriptionFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<PutSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSubscriptionFilterOutputError>
}

public struct PutSubscriptionFilterInput: Equatable {
    /// <p>The ARN of the destination to deliver matching log events to. Currently, the supported
    ///       destinations are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,
    ///           for same-account delivery.</p>
    ///             </li>
    ///             <li>
    ///                <p>A logical destination (specified using an ARN) belonging to a different account,
    ///           for cross-account delivery.</p>
    ///                <p>If you are setting up a cross-account subscription, the destination must have an
    ///         IAM policy associated with it that allows the sender to send logs to the destination.
    ///         For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html">PutDestinationPolicy</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>An Amazon Kinesis Firehose delivery stream belonging to the same account as the
    ///           subscription filter, for same-account delivery.</p>
    ///             </li>
    ///             <li>
    ///                <p>An AWS Lambda function belonging to the same account as the subscription filter,
    ///           for same-account delivery.</p>
    ///             </li>
    ///          </ul>
    public let destinationArn: String?
    /// <p>The method used to distribute log data to the destination. By default, log data is
    ///       grouped by log stream, but the grouping can be set to random for a more even distribution.
    ///       This property is only applicable when the destination is an Amazon Kinesis stream. </p>
    public let distribution: Distribution?
    /// <p>A name for the subscription filter. If you are updating an existing filter, you must
    ///       specify the correct name in <code>filterName</code>. To find the name of the filter currently
    ///       associated with a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html">DescribeSubscriptionFilters</a>.</p>
    public let filterName: String?
    /// <p>A filter pattern for subscribing to a filtered stream of log events.</p>
    public let filterPattern: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log
    ///       events to the destination stream. You don't need to provide the ARN when you are working with
    ///       a logical destination for cross-account delivery.</p>
    public let roleArn: String?

    public init (
        destinationArn: String? = nil,
        distribution: Distribution? = nil,
        filterName: String? = nil,
        filterPattern: String? = nil,
        logGroupName: String? = nil,
        roleArn: String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.distribution = distribution
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.roleArn = roleArn
    }
}

struct PutSubscriptionFilterInputBody: Equatable {
    public let logGroupName: String?
    public let filterName: String?
    public let filterPattern: String?
    public let destinationArn: String?
    public let roleArn: String?
    public let distribution: Distribution?
}

extension PutSubscriptionFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
    }
}

extension PutSubscriptionFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutSubscriptionFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutSubscriptionFilterOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutSubscriptionFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutSubscriptionFilterOutputResponse()"}
}

extension PutSubscriptionFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutSubscriptionFilterOutputResponse: Equatable {

    public init() {}
}

struct PutSubscriptionFilterOutputResponseBody: Equatable {
}

extension PutSubscriptionFilterOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension QueryCompileError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case location
        case message
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(QueryCompileErrorLocation.self, forKey: .location)
        location = locationDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension QueryCompileError: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryCompileError(location: \(String(describing: location)), message: \(String(describing: message)))"}
}

/// <p>Reserved.</p>
public struct QueryCompileError: Equatable {
    /// <p>Reserved.</p>
    public let location: QueryCompileErrorLocation?
    /// <p>Reserved.</p>
    public let message: String?

    public init (
        location: QueryCompileErrorLocation? = nil,
        message: String? = nil
    )
    {
        self.location = location
        self.message = message
    }
}

extension QueryCompileErrorLocation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endCharOffset
        case startCharOffset
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endCharOffset = endCharOffset {
            try encodeContainer.encode(endCharOffset, forKey: .endCharOffset)
        }
        if let startCharOffset = startCharOffset {
            try encodeContainer.encode(startCharOffset, forKey: .startCharOffset)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startCharOffsetDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startCharOffset)
        startCharOffset = startCharOffsetDecoded
        let endCharOffsetDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .endCharOffset)
        endCharOffset = endCharOffsetDecoded
    }
}

extension QueryCompileErrorLocation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryCompileErrorLocation(endCharOffset: \(String(describing: endCharOffset)), startCharOffset: \(String(describing: startCharOffset)))"}
}

/// <p>Reserved.</p>
public struct QueryCompileErrorLocation: Equatable {
    /// <p>Reserved.</p>
    public let endCharOffset: Int?
    /// <p>Reserved.</p>
    public let startCharOffset: Int?

    public init (
        endCharOffset: Int? = nil,
        startCharOffset: Int? = nil
    )
    {
        self.endCharOffset = endCharOffset
        self.startCharOffset = startCharOffset
    }
}

extension QueryDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastModified
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupnames0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupnames0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryDefinitionId = queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
    }
}

extension QueryDefinition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryDefinition(lastModified: \(String(describing: lastModified)), logGroupNames: \(String(describing: logGroupNames)), name: \(String(describing: name)), queryDefinitionId: \(String(describing: queryDefinitionId)), queryString: \(String(describing: queryString)))"}
}

/// <p>This structure contains details about a saved CloudWatch Logs Insights query definition.</p>
public struct QueryDefinition: Equatable {
    /// <p>The date that the query definition was most recently modified.</p>
    public let lastModified: Int?
    /// <p>If this query definition contains a list of log groups that it is limited to, that list appears here.</p>
    public let logGroupNames: [String]?
    /// <p>The name of the query definition.</p>
    public let name: String?
    /// <p>The unique ID of the query definition.</p>
    public let queryDefinitionId: String?
    /// <p>The query string to use for this definition.
    ///       For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.</p>
    public let queryString: String?

    public init (
        lastModified: Int? = nil,
        logGroupNames: [String]? = nil,
        name: String? = nil,
        queryDefinitionId: String? = nil,
        queryString: String? = nil
    )
    {
        self.lastModified = lastModified
        self.logGroupNames = logGroupNames
        self.name = name
        self.queryDefinitionId = queryDefinitionId
        self.queryString = queryString
    }
}

extension QueryInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createTime
        case logGroupName
        case queryId
        case queryString
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = createTime {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let queryId = queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueryStatus.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .createTime)
        createTime = createTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension QueryInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryInfo(createTime: \(String(describing: createTime)), logGroupName: \(String(describing: logGroupName)), queryId: \(String(describing: queryId)), queryString: \(String(describing: queryString)), status: \(String(describing: status)))"}
}

/// <p>Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. </p>
public struct QueryInfo: Equatable {
    /// <p>The date and time that this query was created.</p>
    public let createTime: Int?
    /// <p>The name of the log group scanned by this query.</p>
    public let logGroupName: String?
    /// <p>The unique ID number of this query.</p>
    public let queryId: String?
    /// <p>The query string used in this query.</p>
    public let queryString: String?
    /// <p>The status of this query. Possible values are <code>Cancelled</code>,
    ///       <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.</p>
    public let status: QueryStatus?

    public init (
        createTime: Int? = nil,
        logGroupName: String? = nil,
        queryId: String? = nil,
        queryString: String? = nil,
        status: QueryStatus? = nil
    )
    {
        self.createTime = createTime
        self.logGroupName = logGroupName
        self.queryId = queryId
        self.queryString = queryString
        self.status = status
    }
}

extension QueryStatistics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bytesScanned
        case recordsMatched
        case recordsScanned
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bytesScanned != 0.0 {
            try encodeContainer.encode(bytesScanned, forKey: .bytesScanned)
        }
        if recordsMatched != 0.0 {
            try encodeContainer.encode(recordsMatched, forKey: .recordsMatched)
        }
        if recordsScanned != 0.0 {
            try encodeContainer.encode(recordsScanned, forKey: .recordsScanned)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsMatchedDecoded = try containerValues.decode(Double.self, forKey: .recordsMatched)
        recordsMatched = recordsMatchedDecoded
        let recordsScannedDecoded = try containerValues.decode(Double.self, forKey: .recordsScanned)
        recordsScanned = recordsScannedDecoded
        let bytesScannedDecoded = try containerValues.decode(Double.self, forKey: .bytesScanned)
        bytesScanned = bytesScannedDecoded
    }
}

extension QueryStatistics: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryStatistics(bytesScanned: \(String(describing: bytesScanned)), recordsMatched: \(String(describing: recordsMatched)), recordsScanned: \(String(describing: recordsScanned)))"}
}

/// <p>Contains the number of log events scanned by the query, the number of log events that matched the
///       query criteria, and the total number of bytes in the log events that were scanned.</p>
public struct QueryStatistics: Equatable {
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    public let bytesScanned: Double
    /// <p>The number of log events that matched the query string.</p>
    public let recordsMatched: Double
    /// <p>The total number of log events scanned during the query.</p>
    public let recordsScanned: Double

    public init (
        bytesScanned: Double = 0.0,
        recordsMatched: Double = 0.0,
        recordsScanned: Double = 0.0
    )
    {
        self.bytesScanned = bytesScanned
        self.recordsMatched = recordsMatched
        self.recordsScanned = recordsScanned
    }
}

public enum QueryStatus {
    case cancelled
    case complete
    case failed
    case running
    case scheduled
    case timeout
    case unknown
    case sdkUnknown(String)
}

extension QueryStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [QueryStatus] {
        return [
            .cancelled,
            .complete,
            .failed,
            .running,
            .scheduled,
            .timeout,
            .unknown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "Cancelled"
        case .complete: return "Complete"
        case .failed: return "Failed"
        case .running: return "Running"
        case .scheduled: return "Scheduled"
        case .timeout: return "Timeout"
        case .unknown: return "Unknown"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = QueryStatus(rawValue: rawValue) ?? QueryStatus.sdkUnknown(rawValue)
    }
}

extension RejectedLogEventsInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expiredLogEventEndIndex
        case tooNewLogEventStartIndex
        case tooOldLogEventEndIndex
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiredLogEventEndIndex = expiredLogEventEndIndex {
            try encodeContainer.encode(expiredLogEventEndIndex, forKey: .expiredLogEventEndIndex)
        }
        if let tooNewLogEventStartIndex = tooNewLogEventStartIndex {
            try encodeContainer.encode(tooNewLogEventStartIndex, forKey: .tooNewLogEventStartIndex)
        }
        if let tooOldLogEventEndIndex = tooOldLogEventEndIndex {
            try encodeContainer.encode(tooOldLogEventEndIndex, forKey: .tooOldLogEventEndIndex)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tooNewLogEventStartIndexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tooNewLogEventStartIndex)
        tooNewLogEventStartIndex = tooNewLogEventStartIndexDecoded
        let tooOldLogEventEndIndexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tooOldLogEventEndIndex)
        tooOldLogEventEndIndex = tooOldLogEventEndIndexDecoded
        let expiredLogEventEndIndexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .expiredLogEventEndIndex)
        expiredLogEventEndIndex = expiredLogEventEndIndexDecoded
    }
}

extension RejectedLogEventsInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RejectedLogEventsInfo(expiredLogEventEndIndex: \(String(describing: expiredLogEventEndIndex)), tooNewLogEventStartIndex: \(String(describing: tooNewLogEventStartIndex)), tooOldLogEventEndIndex: \(String(describing: tooOldLogEventEndIndex)))"}
}

/// <p>Represents the rejected events.</p>
public struct RejectedLogEventsInfo: Equatable {
    /// <p>The expired log events.</p>
    public let expiredLogEventEndIndex: Int?
    /// <p>The log events that are too new.</p>
    public let tooNewLogEventStartIndex: Int?
    /// <p>The log events that are too old.</p>
    public let tooOldLogEventEndIndex: Int?

    public init (
        expiredLogEventEndIndex: Int? = nil,
        tooNewLogEventStartIndex: Int? = nil,
        tooOldLogEventEndIndex: Int? = nil
    )
    {
        self.expiredLogEventEndIndex = expiredLogEventEndIndex
        self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
        self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
    }
}

extension ResourceAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceAlreadyExistsException(message: \(String(describing: message)))"}
}

extension ResourceAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource already exists.</p>
public struct ResourceAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension ResourceAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceNotFoundException(message: \(String(describing: message)))"}
}

extension ResourceNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource does not exist.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension ResourceNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourcePolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastUpdatedTime
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let policyDocument = policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension ResourcePolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourcePolicy(lastUpdatedTime: \(String(describing: lastUpdatedTime)), policyDocument: \(String(describing: policyDocument)), policyName: \(String(describing: policyName)))"}
}

/// <p>A policy enabling one or more entities to put logs to a log group in this account.</p>
public struct ResourcePolicy: Equatable {
    /// <p>Timestamp showing when this policy was last updated, expressed as the number of
    ///       milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    public let lastUpdatedTime: Int?
    /// <p>The details of the policy.</p>
    public let policyDocument: String?
    /// <p>The name of the resource policy.</p>
    public let policyName: String?

    public init (
        lastUpdatedTime: Int? = nil,
        policyDocument: String? = nil,
        policyName: String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

extension ResultField: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case field
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let field = field {
            try encodeContainer.encode(field, forKey: .field)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .field)
        field = fieldDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ResultField: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResultField(field: \(String(describing: field)), value: \(String(describing: value)))"}
}

/// <p>Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.</p>
///          <p>For more information about the fields that are
///       generated by CloudWatch logs, see
///       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html">Supported Logs and Discovered Fields</a>.</p>
public struct ResultField: Equatable {
    /// <p>The log event field.</p>
    public let field: String?
    /// <p>The value of this field.</p>
    public let value: String?

    public init (
        field: String? = nil,
        value: String? = nil
    )
    {
        self.field = field
        self.value = value
    }
}

extension SearchedLogStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logStreamName
        case searchedCompletely
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let searchedCompletely = searchedCompletely {
            try encodeContainer.encode(searchedCompletely, forKey: .searchedCompletely)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let searchedCompletelyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .searchedCompletely)
        searchedCompletely = searchedCompletelyDecoded
    }
}

extension SearchedLogStream: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SearchedLogStream(logStreamName: \(String(describing: logStreamName)), searchedCompletely: \(String(describing: searchedCompletely)))"}
}

/// <p>Represents the search status of a log stream.</p>
public struct SearchedLogStream: Equatable {
    /// <p>The name of the log stream.</p>
    public let logStreamName: String?
    /// <p>Indicates whether all the events in this log stream were searched.</p>
    public let searchedCompletely: Bool?

    public init (
        logStreamName: String? = nil,
        searchedCompletely: Bool? = nil
    )
    {
        self.logStreamName = logStreamName
        self.searchedCompletely = searchedCompletely
    }
}

extension ServiceUnavailableException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceUnavailableException(message: \(String(describing: message)))"}
}

extension ServiceUnavailableException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service cannot complete the request.</p>
public struct ServiceUnavailableException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Equatable {
    public let message: String?
}

extension ServiceUnavailableExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum StandardUnit {
    case bits
    case bitssecond
    case bytes
    case bytessecond
    case count
    case countsecond
    case gigabits
    case gigabitssecond
    case gigabytes
    case gigabytessecond
    case kilobits
    case kilobitssecond
    case kilobytes
    case kilobytessecond
    case megabits
    case megabitssecond
    case megabytes
    case megabytessecond
    case microseconds
    case milliseconds
    case `none`
    case percent
    case seconds
    case terabits
    case terabitssecond
    case terabytes
    case terabytessecond
    case sdkUnknown(String)
}

extension StandardUnit : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StandardUnit] {
        return [
            .bits,
            .bitssecond,
            .bytes,
            .bytessecond,
            .count,
            .countsecond,
            .gigabits,
            .gigabitssecond,
            .gigabytes,
            .gigabytessecond,
            .kilobits,
            .kilobitssecond,
            .kilobytes,
            .kilobytessecond,
            .megabits,
            .megabitssecond,
            .megabytes,
            .megabytessecond,
            .microseconds,
            .milliseconds,
            .none,
            .percent,
            .seconds,
            .terabits,
            .terabitssecond,
            .terabytes,
            .terabytessecond,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bits: return "Bits"
        case .bitssecond: return "Bits/Second"
        case .bytes: return "Bytes"
        case .bytessecond: return "Bytes/Second"
        case .count: return "Count"
        case .countsecond: return "Count/Second"
        case .gigabits: return "Gigabits"
        case .gigabitssecond: return "Gigabits/Second"
        case .gigabytes: return "Gigabytes"
        case .gigabytessecond: return "Gigabytes/Second"
        case .kilobits: return "Kilobits"
        case .kilobitssecond: return "Kilobits/Second"
        case .kilobytes: return "Kilobytes"
        case .kilobytessecond: return "Kilobytes/Second"
        case .megabits: return "Megabits"
        case .megabitssecond: return "Megabits/Second"
        case .megabytes: return "Megabytes"
        case .megabytessecond: return "Megabytes/Second"
        case .microseconds: return "Microseconds"
        case .milliseconds: return "Milliseconds"
        case .none: return "None"
        case .percent: return "Percent"
        case .seconds: return "Seconds"
        case .terabits: return "Terabits"
        case .terabitssecond: return "Terabits/Second"
        case .terabytes: return "Terabytes"
        case .terabytessecond: return "Terabytes/Second"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StandardUnit(rawValue: rawValue) ?? StandardUnit.sdkUnknown(rawValue)
    }
}

public struct StartQueryInputBodyMiddleware: Middleware {
    public let id: String = "StartQueryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartQueryInput>,
                  next: H) -> Swift.Result<OperationOutput<StartQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartQueryInput>
    public typealias MOutput = OperationOutput<StartQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartQueryOutputError>
}

extension StartQueryInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartQueryInput(endTime: \(String(describing: endTime)), limit: \(String(describing: limit)), logGroupName: \(String(describing: logGroupName)), logGroupNames: \(String(describing: logGroupNames)), queryString: \(String(describing: queryString)), startTime: \(String(describing: startTime)))"}
}

extension StartQueryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupnames0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupnames0)
            }
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}

public struct StartQueryInputHeadersMiddleware: Middleware {
    public let id: String = "StartQueryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartQueryInput>,
                  next: H) -> Swift.Result<OperationOutput<StartQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartQueryInput>
    public typealias MOutput = OperationOutput<StartQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartQueryOutputError>
}

public struct StartQueryInputQueryItemMiddleware: Middleware {
    public let id: String = "StartQueryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartQueryInput>,
                  next: H) -> Swift.Result<OperationOutput<StartQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartQueryInput>
    public typealias MOutput = OperationOutput<StartQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartQueryOutputError>
}

public struct StartQueryInput: Equatable {
    /// <p>The end of the time range to query. The range is inclusive, so the specified
    ///       end time is included in the query. Specified as epoch
    ///       time, the number of seconds since January 1, 1970, 00:00:00 UTC.</p>
    public let endTime: Int?
    /// <p>The maximum number of log events to return in the query. If the query string uses the <code>fields</code> command,
    ///     only the specified fields and their values are returned. The default is 1000.</p>
    public let limit: Int?
    /// <p>The log group on which to perform the query.</p>
    ///          <p>A <code>StartQuery</code> operation must include a <code>logGroupNames</code> or a <code>logGroupName</code> parameter, but
    ///       not both.</p>
    public let logGroupName: String?
    /// <p>The list of log groups to be queried. You can include up to 20 log groups.</p>
    ///          <p>A <code>StartQuery</code> operation must include a <code>logGroupNames</code> or a <code>logGroupName</code> parameter, but
    ///     not both.</p>
    public let logGroupNames: [String]?
    /// <p>The query string to use.
    ///       For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.</p>
    public let queryString: String?
    /// <p>The beginning of the time range to query. The range is inclusive, so the specified
    ///       start time is included in the query. Specified as epoch time, the
    ///       number of seconds since January 1, 1970, 00:00:00 UTC.</p>
    public let startTime: Int?

    public init (
        endTime: Int? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        logGroupNames: [String]? = nil,
        queryString: String? = nil,
        startTime: Int? = nil
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupName = logGroupName
        self.logGroupNames = logGroupNames
        self.queryString = queryString
        self.startTime = startTime
    }
}

struct StartQueryInputBody: Equatable {
    public let logGroupName: String?
    public let logGroupNames: [String]?
    public let startTime: Int?
    public let endTime: Int?
    public let queryString: String?
    public let limit: Int?
}

extension StartQueryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case limit
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension StartQueryOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartQueryOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedQueryException" : self = .malformedQueryException(try MalformedQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartQueryOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case malformedQueryException(MalformedQueryException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartQueryOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartQueryOutputResponse(queryId: \(String(describing: queryId)))"}
}

extension StartQueryOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartQueryOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.queryId = output.queryId
        } else {
            self.queryId = nil
        }
    }
}

public struct StartQueryOutputResponse: Equatable {
    /// <p>The unique ID of the query. </p>
    public let queryId: String?

    public init (
        queryId: String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct StartQueryOutputResponseBody: Equatable {
    public let queryId: String?
}

extension StartQueryOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queryId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

public struct StopQueryInputBodyMiddleware: Middleware {
    public let id: String = "StopQueryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopQueryInput>,
                  next: H) -> Swift.Result<OperationOutput<StopQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopQueryInput>
    public typealias MOutput = OperationOutput<StopQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopQueryOutputError>
}

extension StopQueryInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopQueryInput(queryId: \(String(describing: queryId)))"}
}

extension StopQueryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case queryId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryId = queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
    }
}

public struct StopQueryInputHeadersMiddleware: Middleware {
    public let id: String = "StopQueryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopQueryInput>,
                  next: H) -> Swift.Result<OperationOutput<StopQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopQueryInput>
    public typealias MOutput = OperationOutput<StopQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopQueryOutputError>
}

public struct StopQueryInputQueryItemMiddleware: Middleware {
    public let id: String = "StopQueryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopQueryInput>,
                  next: H) -> Swift.Result<OperationOutput<StopQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopQueryInput>
    public typealias MOutput = OperationOutput<StopQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopQueryOutputError>
}

public struct StopQueryInput: Equatable {
    /// <p>The ID number of the query to stop. To find this ID number, use
    ///         <code>DescribeQueries</code>.</p>
    public let queryId: String?

    public init (
        queryId: String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct StopQueryInputBody: Equatable {
    public let queryId: String?
}

extension StopQueryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case queryId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension StopQueryOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopQueryOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopQueryOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopQueryOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopQueryOutputResponse(success: \(String(describing: success)))"}
}

extension StopQueryOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StopQueryOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct StopQueryOutputResponse: Equatable {
    /// <p>This is true if the query was stopped by the <code>StopQuery</code> operation.</p>
    public let success: Bool

    public init (
        success: Bool = false
    )
    {
        self.success = success
    }
}

struct StopQueryOutputResponseBody: Equatable {
    public let success: Bool
}

extension StopQueryOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case success
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decode(Bool.self, forKey: .success)
        success = successDecoded
    }
}

extension SubscriptionFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension SubscriptionFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SubscriptionFilter(creationTime: \(String(describing: creationTime)), destinationArn: \(String(describing: destinationArn)), distribution: \(String(describing: distribution)), filterName: \(String(describing: filterName)), filterPattern: \(String(describing: filterPattern)), logGroupName: \(String(describing: logGroupName)), roleArn: \(String(describing: roleArn)))"}
}

/// <p>Represents a subscription filter.</p>
public struct SubscriptionFilter: Equatable {
    /// <p>The creation time of the subscription filter, expressed as the number of milliseconds
    ///       after Jan 1, 1970 00:00:00 UTC.</p>
    public let creationTime: Int?
    /// <p>The Amazon Resource Name (ARN) of the destination.</p>
    public let destinationArn: String?
    /// <p>The method used to distribute log data to the destination, which can be either
    ///       random or grouped by log stream.</p>
    public let distribution: Distribution?
    /// <p>The name of the subscription filter.</p>
    public let filterName: String?
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log
    ///       event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You
    ///       use the filter pattern to specify what to look for in the log event message.</p>
    public let filterPattern: String?
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p></p>
    public let roleArn: String?

    public init (
        creationTime: Int? = nil,
        destinationArn: String? = nil,
        distribution: Distribution? = nil,
        filterName: String? = nil,
        filterPattern: String? = nil,
        logGroupName: String? = nil,
        roleArn: String? = nil
    )
    {
        self.creationTime = creationTime
        self.destinationArn = destinationArn
        self.distribution = distribution
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.roleArn = roleArn
    }
}

public struct TagLogGroupInputBodyMiddleware: Middleware {
    public let id: String = "TagLogGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<TagLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagLogGroupInput>
    public typealias MOutput = OperationOutput<TagLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagLogGroupOutputError>
}

extension TagLogGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagLogGroupInput(logGroupName: \(String(describing: logGroupName)), tags: \(String(describing: tags)))"}
}

extension TagLogGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagLogGroupInputHeadersMiddleware: Middleware {
    public let id: String = "TagLogGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<TagLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagLogGroupInput>
    public typealias MOutput = OperationOutput<TagLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagLogGroupOutputError>
}

public struct TagLogGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "TagLogGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<TagLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagLogGroupInput>
    public typealias MOutput = OperationOutput<TagLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagLogGroupOutputError>
}

public struct TagLogGroupInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The key-value pairs to use for the tags.</p>
    public let tags: [String:String]?

    public init (
        logGroupName: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct TagLogGroupInputBody: Equatable {
    public let logGroupName: String?
    public let tags: [String:String]?
}

extension TagLogGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagLogGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagLogGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagLogGroupOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagLogGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagLogGroupOutputResponse()"}
}

extension TagLogGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagLogGroupOutputResponse: Equatable {

    public init() {}
}

struct TagLogGroupOutputResponseBody: Equatable {
}

extension TagLogGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct TestMetricFilterInputBodyMiddleware: Middleware {
    public let id: String = "TestMetricFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<TestMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestMetricFilterInput>
    public typealias MOutput = OperationOutput<TestMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestMetricFilterOutputError>
}

extension TestMetricFilterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TestMetricFilterInput(filterPattern: \(String(describing: filterPattern)), logEventMessages: \(String(describing: logEventMessages)))"}
}

extension TestMetricFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterPattern
        case logEventMessages
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logEventMessages = logEventMessages {
            var logEventMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEventMessages)
            for testeventmessages0 in logEventMessages {
                try logEventMessagesContainer.encode(testeventmessages0)
            }
        }
    }
}

public struct TestMetricFilterInputHeadersMiddleware: Middleware {
    public let id: String = "TestMetricFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<TestMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestMetricFilterInput>
    public typealias MOutput = OperationOutput<TestMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestMetricFilterOutputError>
}

public struct TestMetricFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "TestMetricFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestMetricFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<TestMetricFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestMetricFilterInput>
    public typealias MOutput = OperationOutput<TestMetricFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestMetricFilterOutputError>
}

public struct TestMetricFilterInput: Equatable {
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log
    ///       event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You
    ///       use the filter pattern to specify what to look for in the log event message.</p>
    public let filterPattern: String?
    /// <p>The log event messages to test.</p>
    public let logEventMessages: [String]?

    public init (
        filterPattern: String? = nil,
        logEventMessages: [String]? = nil
    )
    {
        self.filterPattern = filterPattern
        self.logEventMessages = logEventMessages
    }
}

struct TestMetricFilterInputBody: Equatable {
    public let filterPattern: String?
    public let logEventMessages: [String]?
}

extension TestMetricFilterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filterPattern
        case logEventMessages
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let logEventMessagesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .logEventMessages)
        var logEventMessagesDecoded0:[String]? = nil
        if let logEventMessagesContainer = logEventMessagesContainer {
            logEventMessagesDecoded0 = [String]()
            for string0 in logEventMessagesContainer {
                if let string0 = string0 {
                    logEventMessagesDecoded0?.append(string0)
                }
            }
        }
        logEventMessages = logEventMessagesDecoded0
    }
}

extension TestMetricFilterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestMetricFilterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestMetricFilterOutputError: Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestMetricFilterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TestMetricFilterOutputResponse(matches: \(String(describing: matches)))"}
}

extension TestMetricFilterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TestMetricFilterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.matches = output.matches
        } else {
            self.matches = nil
        }
    }
}

public struct TestMetricFilterOutputResponse: Equatable {
    /// <p>The matched events.</p>
    public let matches: [MetricFilterMatchRecord]?

    public init (
        matches: [MetricFilterMatchRecord]? = nil
    )
    {
        self.matches = matches
    }
}

struct TestMetricFilterOutputResponseBody: Equatable {
    public let matches: [MetricFilterMatchRecord]?
}

extension TestMetricFilterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case matches
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchesContainer = try containerValues.decodeIfPresent([MetricFilterMatchRecord?].self, forKey: .matches)
        var matchesDecoded0:[MetricFilterMatchRecord]? = nil
        if let matchesContainer = matchesContainer {
            matchesDecoded0 = [MetricFilterMatchRecord]()
            for structure0 in matchesContainer {
                if let structure0 = structure0 {
                    matchesDecoded0?.append(structure0)
                }
            }
        }
        matches = matchesDecoded0
    }
}

extension UnrecognizedClientException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnrecognizedClientException(message: \(String(describing: message)))"}
}

extension UnrecognizedClientException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnrecognizedClientExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The most likely cause is an invalid AWS access key ID or secret key.</p>
public struct UnrecognizedClientException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UnrecognizedClientExceptionBody: Equatable {
    public let message: String?
}

extension UnrecognizedClientExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagLogGroupInputBodyMiddleware: Middleware {
    public let id: String = "UntagLogGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagLogGroupInput>
    public typealias MOutput = OperationOutput<UntagLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagLogGroupOutputError>
}

extension UntagLogGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagLogGroupInput(logGroupName: \(String(describing: logGroupName)), tags: \(String(describing: tags)))"}
}

extension UntagLogGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct UntagLogGroupInputHeadersMiddleware: Middleware {
    public let id: String = "UntagLogGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagLogGroupInput>
    public typealias MOutput = OperationOutput<UntagLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagLogGroupOutputError>
}

public struct UntagLogGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagLogGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagLogGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagLogGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagLogGroupInput>
    public typealias MOutput = OperationOutput<UntagLogGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagLogGroupOutputError>
}

public struct UntagLogGroupInput: Equatable {
    /// <p>The name of the log group.</p>
    public let logGroupName: String?
    /// <p>The tag keys. The corresponding tags are removed from the log group.</p>
    public let tags: [String]?

    public init (
        logGroupName: String? = nil,
        tags: [String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct UntagLogGroupInputBody: Equatable {
    public let logGroupName: String?
    public let tags: [String]?
}

extension UntagLogGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logGroupName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tags)
        var tagsDecoded0:[String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String]()
            for string0 in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?.append(string0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension UntagLogGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagLogGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagLogGroupOutputError: Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagLogGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagLogGroupOutputResponse()"}
}

extension UntagLogGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagLogGroupOutputResponse: Equatable {

    public init() {}
}

struct UntagLogGroupOutputResponseBody: Equatable {
}

extension UntagLogGroupOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}
