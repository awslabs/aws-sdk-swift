// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Destination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessPolicy
        case arn
        case creationTime
        case destinationName
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
