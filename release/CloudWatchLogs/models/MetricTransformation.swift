// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Indicates how to transform ingested log events to metric data in a CloudWatch
///       metric.</p>
public struct MetricTransformation: Equatable {
    /// <p>(Optional) The value to emit when a filter pattern does not match a log event.
    ///       This value can be null.</p>
    public let defaultValue: Double?
    /// <p>The fields to use as dimensions for the metric. One metric filter can include
    ///     as many as three dimensions.</p>
    ///          <important>
    ///             <p>Metrics extracted from log events are charged as custom metrics.
    ///       To prevent unexpected high charges, do not specify high-cardinality fields such as
    ///       <code>IPAddress</code> or <code>requestID</code> as dimensions. Each different value
    ///       found for
    ///       a dimension is treated as a separate metric and accrues charges as a separate custom metric.
    ///     </p>
    ///             <p>To help prevent accidental high charges, Amazon disables a metric filter
    ///         if it generates 1000 different name/value pairs for the dimensions that you
    ///         have specified within a certain amount of time.</p>
    ///             <p>You can also set up a billing alarm to alert you if your charges are higher than
    ///         expected. For more information,
    ///         see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html">
    ///           Creating a Billing Alarm to Monitor Your Estimated AWS Charges</a>.
    ///        </p>
    ///          </important>
    public let dimensions: [String:String]?
    /// <p>The name of the CloudWatch metric.</p>
    public let metricName: String?
    /// <p>A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics
    ///       that are similar. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">Namespaces</a>.</p>
    public let metricNamespace: String?
    /// <p>The value to publish to the CloudWatch metric when a filter pattern matches a log event.</p>
    public let metricValue: String?
    /// <p>The unit to assign to the metric. If you omit this, the unit is set as <code>None</code>.</p>
    public let unit: StandardUnit?

    public init (
        defaultValue: Double? = nil,
        dimensions: [String:String]? = nil,
        metricName: String? = nil,
        metricNamespace: String? = nil,
        metricValue: String? = nil,
        unit: StandardUnit? = nil
    )
    {
        self.defaultValue = defaultValue
        self.dimensions = dimensions
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.metricValue = metricValue
        self.unit = unit
    }
}
