// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLogStreamsInputBody: Equatable {
    public let logGroupName: String?
    public let logStreamNamePrefix: String?
    public let orderBy: OrderBy?
    public let descending: Bool?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeLogStreamsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case descending
        case limit
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let orderByDecoded = try containerValues.decodeIfPresent(OrderBy.self, forKey: .orderBy)
        orderBy = orderByDecoded
        let descendingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .descending)
        descending = descendingDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
