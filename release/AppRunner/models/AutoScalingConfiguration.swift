// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an AWS App Runner automatic scaling configuration resource. Multiple revisions of a configuration have the same
///         <code>AutoScalingConfigurationName</code> and different <code>AutoScalingConfigurationRevision</code> values.</p>
///          <p>A higher <code>MinSize</code> increases the spread of your App Runner service over more Availability Zones in the AWS Region. The tradeoff is a higher
///       minimal cost.</p>
///          <p>A lower <code>MaxSize</code> controls your cost. The tradeoff is lower responsiveness during peak demand.</p>
public struct AutoScalingConfiguration: Equatable {
    /// <p>The Amazon Resource Name (ARN) of this auto scaling configuration.</p>
    public let autoScalingConfigurationArn: String?
    /// <p>The customer-provided auto scaling configuration name. It can be used in multiple revisions of a configuration.</p>
    public let autoScalingConfigurationName: String?
    /// <p>The revision of this auto scaling configuration. It's unique among all the active configurations (<code>"Status": "ACTIVE"</code>) that share the same
    ///         <code>AutoScalingConfigurationName</code>.</p>
    public let autoScalingConfigurationRevision: Int
    /// <p>The time when the auto scaling configuration was created. It's in Unix time stamp format.</p>
    public let createdAt: Date?
    /// <p>The time when the auto scaling configuration was deleted. It's in Unix time stamp format.</p>
    public let deletedAt: Date?
    /// <p>It's set to <code>true</code> for the configuration with the highest <code>Revision</code> among all configurations that share the same
    ///         <code>Name</code>. It's set to <code>false</code> otherwise.</p>
    public let latest: Bool
    /// <p>The maximum number of concurrent requests that an instance processes. If the number of concurrent requests exceeds this limit, App Runner scales the service
    ///       up.</p>
    public let maxConcurrency: Int
    /// <p>The maximum number of instances that a service scales up to. At most <code>MaxSize</code> instances actively serve traffic for your service.</p>
    public let maxSize: Int
    /// <p>The minimum number of instances that App Runner provisions for a service. The service always has at least <code>MinSize</code> provisioned instances. Some
    ///       of them actively serve traffic. The rest of them (provisioned and inactive instances) are a cost-effective compute capacity reserve and are ready to be
    ///       quickly activated. You pay for memory usage of all the provisioned instances. You pay for CPU usage of only the active subset.</p>
    ///          <p>App Runner temporarily doubles the number of provisioned instances during deployments, to maintain the same capacity for both old and new code.</p>
    public let minSize: Int
    /// <p>The current state of the auto scaling configuration. If the status of a configuration revision is <code>INACTIVE</code>, it was deleted and can't be
    ///       used. Inactive configuration revisions are permanently removed some time after they are deleted.</p>
    public let status: AutoScalingConfigurationStatus?

    public init (
        autoScalingConfigurationArn: String? = nil,
        autoScalingConfigurationName: String? = nil,
        autoScalingConfigurationRevision: Int = 0,
        createdAt: Date? = nil,
        deletedAt: Date? = nil,
        latest: Bool = false,
        maxConcurrency: Int = 0,
        maxSize: Int = 0,
        minSize: Int = 0,
        status: AutoScalingConfigurationStatus? = nil
    )
    {
        self.autoScalingConfigurationArn = autoScalingConfigurationArn
        self.autoScalingConfigurationName = autoScalingConfigurationName
        self.autoScalingConfigurationRevision = autoScalingConfigurationRevision
        self.createdAt = createdAt
        self.deletedAt = deletedAt
        self.latest = latest
        self.maxConcurrency = maxConcurrency
        self.maxSize = maxSize
        self.minSize = minSize
        self.status = status
    }
}
