// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMLTaskRunOutputBody: Equatable {
    public let transformId: String?
    public let taskRunId: String?
    public let status: TaskStatusType?
    public let logGroupName: String?
    public let properties: TaskRunProperties?
    public let errorString: String?
    public let startedOn: Date?
    public let lastModifiedOn: Date?
    public let completedOn: Date?
    public let executionTime: Int
}

extension GetMLTaskRunOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case completedOn = "CompletedOn"
        case errorString = "ErrorString"
        case executionTime = "ExecutionTime"
        case lastModifiedOn = "LastModifiedOn"
        case logGroupName = "LogGroupName"
        case properties = "Properties"
        case startedOn = "StartedOn"
        case status = "Status"
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let taskRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TaskStatusType.self, forKey: .status)
        status = statusDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let propertiesDecoded = try containerValues.decodeIfPresent(TaskRunProperties.self, forKey: .properties)
        properties = propertiesDecoded
        let errorStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorString)
        errorString = errorStringDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let executionTimeDecoded = try containerValues.decode(Int.self, forKey: .executionTime)
        executionTime = executionTimeDecoded
    }
}
