// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransformEncryption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mlUserDataEncryption = "MlUserDataEncryption"
        case taskRunSecurityConfigurationName = "TaskRunSecurityConfigurationName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlUserDataEncryption = mlUserDataEncryption {
            try encodeContainer.encode(mlUserDataEncryption, forKey: .mlUserDataEncryption)
        }
        if let taskRunSecurityConfigurationName = taskRunSecurityConfigurationName {
            try encodeContainer.encode(taskRunSecurityConfigurationName, forKey: .taskRunSecurityConfigurationName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlUserDataEncryptionDecoded = try containerValues.decodeIfPresent(MLUserDataEncryption.self, forKey: .mlUserDataEncryption)
        mlUserDataEncryption = mlUserDataEncryptionDecoded
        let taskRunSecurityConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskRunSecurityConfigurationName)
        taskRunSecurityConfigurationName = taskRunSecurityConfigurationNameDecoded
    }
}
