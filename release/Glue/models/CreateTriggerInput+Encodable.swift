// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTriggerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case description = "Description"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
        case startOnCreation = "StartOnCreation"
        case tags = "Tags"
        case type = "Type"
        case workflowName = "WorkflowName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicate = predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if startOnCreation != false {
            try encodeContainer.encode(startOnCreation, forKey: .startOnCreation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let workflowName = workflowName {
            try encodeContainer.encode(workflowName, forKey: .workflowName)
        }
    }
}
