// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Workflow: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdOn = "CreatedOn"
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case graph = "Graph"
        case lastModifiedOn = "LastModifiedOn"
        case lastRun = "LastRun"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let defaultRunProperties = defaultRunProperties {
            var defaultRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .defaultRunProperties)
            for (dictKey0, workflowrunproperties0) in defaultRunProperties {
                try defaultRunPropertiesContainer.encode(workflowrunproperties0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let graph = graph {
            try encodeContainer.encode(graph, forKey: .graph)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let lastRun = lastRun {
            try encodeContainer.encode(lastRun, forKey: .lastRun)
        }
        if let maxConcurrentRuns = maxConcurrentRuns {
            try encodeContainer.encode(maxConcurrentRuns, forKey: .maxConcurrentRuns)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRunPropertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .defaultRunProperties)
        var defaultRunPropertiesDecoded0: [String:String]? = nil
        if let defaultRunPropertiesContainer = defaultRunPropertiesContainer {
            defaultRunPropertiesDecoded0 = [String:String]()
            for (key0, genericstring0) in defaultRunPropertiesContainer {
                defaultRunPropertiesDecoded0?[key0] = genericstring0
            }
        }
        defaultRunProperties = defaultRunPropertiesDecoded0
        let createdOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let lastRunDecoded = try containerValues.decodeIfPresent(WorkflowRun.self, forKey: .lastRun)
        lastRun = lastRunDecoded
        let graphDecoded = try containerValues.decodeIfPresent(WorkflowGraph.self, forKey: .graph)
        graph = graphDecoded
        let maxConcurrentRunsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxConcurrentRuns)
        maxConcurrentRuns = maxConcurrentRunsDecoded
    }
}
