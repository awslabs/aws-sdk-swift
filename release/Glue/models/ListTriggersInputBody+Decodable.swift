// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTriggersInputBody: Equatable {
    public let nextToken: String?
    public let dependentJobName: String?
    public let maxResults: Int?
    public let tags: [String:String]?
}

extension ListTriggersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dependentJobName = "DependentJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dependentJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dependentJobName)
        dependentJobName = dependentJobNameDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
