// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateCrawlerInputBody: Equatable {
    public let name: String?
    public let role: String?
    public let databaseName: String?
    public let description: String?
    public let targets: CrawlerTargets?
    public let schedule: String?
    public let classifiers: [String]?
    public let tablePrefix: String?
    public let schemaChangePolicy: SchemaChangePolicy?
    public let recrawlPolicy: RecrawlPolicy?
    public let lineageConfiguration: LineageConfiguration?
    public let configuration: String?
    public let crawlerSecurityConfiguration: String?
}

extension UpdateCrawlerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case tablePrefix = "TablePrefix"
        case targets = "Targets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let targetsDecoded = try containerValues.decodeIfPresent(CrawlerTargets.self, forKey: .targets)
        targets = targetsDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let classifiersContainer = try containerValues.decodeIfPresent([String].self, forKey: .classifiers)
        var classifiersDecoded0:[String]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [String]()
            for string0 in classifiersContainer {
                classifiersDecoded0?.append(string0)
            }
        }
        classifiers = classifiersDecoded0
        let tablePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tablePrefix)
        tablePrefix = tablePrefixDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(SchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
        let recrawlPolicyDecoded = try containerValues.decodeIfPresent(RecrawlPolicy.self, forKey: .recrawlPolicy)
        recrawlPolicy = recrawlPolicyDecoded
        let lineageConfigurationDecoded = try containerValues.decodeIfPresent(LineageConfiguration.self, forKey: .lineageConfiguration)
        lineageConfiguration = lineageConfigurationDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configuration)
        configuration = configurationDecoded
        let crawlerSecurityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .crawlerSecurityConfiguration)
        crawlerSecurityConfiguration = crawlerSecurityConfigurationDecoded
    }
}
