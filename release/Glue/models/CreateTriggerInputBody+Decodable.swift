// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTriggerInputBody: Equatable {
    public let name: String?
    public let workflowName: String?
    public let type: TriggerType?
    public let schedule: String?
    public let predicate: Predicate?
    public let actions: [Action]?
    public let description: String?
    public let startOnCreation: Bool
    public let tags: [String:String]?
}

extension CreateTriggerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case description = "Description"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
        case startOnCreation = "StartOnCreation"
        case tags = "Tags"
        case type = "Type"
        case workflowName = "WorkflowName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let workflowNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowName)
        workflowName = workflowNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TriggerType.self, forKey: .type)
        type = typeDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let predicateDecoded = try containerValues.decodeIfPresent(Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Action].self, forKey: .actions)
        var actionsDecoded0:[Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Action]()
            for structure0 in actionsContainer {
                actionsDecoded0?.append(structure0)
            }
        }
        actions = actionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let startOnCreationDecoded = try containerValues.decode(Bool.self, forKey: .startOnCreation)
        startOnCreation = startOnCreationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
