// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents a collection of related data organized in columns and rows.</p>
public struct Table: Equatable {
    /// <p>The ID of the Data Catalog in which the table resides.</p>
    public let catalogId: String?
    /// <p>The time when the table definition was created in the Data Catalog.</p>
    public let createTime: Date?
    /// <p>The person or entity who created the table.</p>
    public let createdBy: String?
    /// <p>The name of the database where the table metadata resides.
    ///       For Hive compatibility, this must be all lowercase.</p>
    public let databaseName: String?
    /// <p>A description of the table.</p>
    public let description: String?
    /// <p>Indicates whether the table has been registered with AWS Lake Formation.</p>
    public let isRegisteredWithLakeFormation: Bool
    /// <p>The last time that the table was accessed. This is usually taken from HDFS, and might not
    ///       be reliable.</p>
    public let lastAccessTime: Date?
    /// <p>The last time that column statistics were computed for this table.</p>
    public let lastAnalyzedTime: Date?
    /// <p>The table name. For Hive compatibility, this must be entirely
    ///       lowercase.</p>
    public let name: String?
    /// <p>The owner of the table.</p>
    public let owner: String?
    /// <p>These key-value pairs define properties associated with the table.</p>
    public let parameters: [String:String]?
    /// <p>A list of columns by which the table is partitioned. Only primitive
    ///       types are supported as partition keys.</p>
    /// 	        <p>When you create a table used by Amazon Athena, and you do not specify any
    ///         <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to
    ///       an empty list. For example:</p>
    ///          <p>
    ///             <code>"PartitionKeys": []</code>
    ///          </p>
    public let partitionKeys: [Column]?
    /// <p>The retention time for this table.</p>
    public let retention: Int
    /// <p>A storage descriptor containing information about the physical storage
    ///       of this table.</p>
    public let storageDescriptor: StorageDescriptor?
    /// <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
    public let tableType: String?
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    public let targetTable: TableIdentifier?
    /// <p>The last time that the table was updated.</p>
    public let updateTime: Date?
    /// <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
    public let viewExpandedText: String?
    /// <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
    public let viewOriginalText: String?

    public init (
        catalogId: String? = nil,
        createTime: Date? = nil,
        createdBy: String? = nil,
        databaseName: String? = nil,
        description: String? = nil,
        isRegisteredWithLakeFormation: Bool = false,
        lastAccessTime: Date? = nil,
        lastAnalyzedTime: Date? = nil,
        name: String? = nil,
        owner: String? = nil,
        parameters: [String:String]? = nil,
        partitionKeys: [Column]? = nil,
        retention: Int = 0,
        storageDescriptor: StorageDescriptor? = nil,
        tableType: String? = nil,
        targetTable: TableIdentifier? = nil,
        updateTime: Date? = nil,
        viewExpandedText: String? = nil,
        viewOriginalText: String? = nil
    )
    {
        self.catalogId = catalogId
        self.createTime = createTime
        self.createdBy = createdBy
        self.databaseName = databaseName
        self.description = description
        self.isRegisteredWithLakeFormation = isRegisteredWithLakeFormation
        self.lastAccessTime = lastAccessTime
        self.lastAnalyzedTime = lastAnalyzedTime
        self.name = name
        self.owner = owner
        self.parameters = parameters
        self.partitionKeys = partitionKeys
        self.retention = retention
        self.storageDescriptor = storageDescriptor
        self.tableType = tableType
        self.targetTable = targetTable
        self.updateTime = updateTime
        self.viewExpandedText = viewExpandedText
        self.viewOriginalText = viewOriginalText
    }
}
