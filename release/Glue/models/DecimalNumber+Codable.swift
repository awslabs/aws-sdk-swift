// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DecimalNumber: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scale = "Scale"
        case unscaledValue = "UnscaledValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scale != 0 {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let unscaledValue = unscaledValue {
            try encodeContainer.encode(unscaledValue.base64EncodedString(), forKey: .unscaledValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unscaledValueDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .unscaledValue)
        unscaledValue = unscaledValueDecoded
        let scaleDecoded = try containerValues.decode(Int.self, forKey: .scale)
        scale = scaleDecoded
    }
}
