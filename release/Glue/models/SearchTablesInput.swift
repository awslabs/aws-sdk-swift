// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct SearchTablesInput: Equatable {
    /// <p>A unique identifier, consisting of <code>
    ///                <i>account_id</i>
    ///             </code>.</p>
    public let catalogId: String?
    /// <p>A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate.</p>
    /// 	
    /// 	        <p>The <code>Comparator</code> member of the <code>PropertyPredicate</code> struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when <code>Key=Name</code>, a fuzzy match algorithm is used. The <code>Key</code> field (for example, the value of the <code>Name</code> field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the <code>Value</code> member of <code>PropertyPredicate</code>. For example, if <code>Key=Name</code> and <code>Value=link</code>, tables named <code>customer-link</code> and <code>xx-link-yy</code> are returned, but <code>xxlinkyy</code> is not returned.</p>
    public let filters: [PropertyPredicate]?
    /// <p>The maximum number of tables to return in a single response.</p>
    public let maxResults: Int?
    /// <p>A continuation token, included if this is a continuation call.</p>
    public let nextToken: String?
    /// <p>Allows you to specify that you want to search the tables shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p>
    /// 	
    /// 	        <ul>
    ///             <li>
    ///                <p>If set to <code>FOREIGN</code>, will search the tables shared with your account. </p>
    ///             </li>
    ///             <li>
    ///                <p>If set to <code>ALL</code>, will search the tables shared with your account, as well as the tables in yor local account. </p>
    ///             </li>
    ///          </ul>
    public let resourceShareType: ResourceShareType?
    /// <p>A string used for a text search.</p>
    /// 	        <p>Specifying a value in quotes filters based on an exact match to the value.</p>
    public let searchText: String?
    /// <p>A list of criteria for sorting the results by a field name, in an ascending or descending order.</p>
    public let sortCriteria: [SortCriterion]?

    public init (
        catalogId: String? = nil,
        filters: [PropertyPredicate]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceShareType: ResourceShareType? = nil,
        searchText: String? = nil,
        sortCriteria: [SortCriterion]? = nil
    )
    {
        self.catalogId = catalogId
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceShareType = resourceShareType
        self.searchText = searchText
        self.sortCriteria = sortCriteria
    }
}
