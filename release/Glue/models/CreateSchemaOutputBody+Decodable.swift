// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSchemaOutputBody: Equatable {
    public let registryName: String?
    public let registryArn: String?
    public let schemaName: String?
    public let schemaArn: String?
    public let description: String?
    public let dataFormat: DataFormat?
    public let compatibility: Compatibility?
    public let schemaCheckpoint: Int
    public let latestSchemaVersion: Int
    public let nextSchemaVersion: Int
    public let schemaStatus: SchemaStatus?
    public let tags: [String:String]?
    public let schemaVersionId: String?
    public let schemaVersionStatus: SchemaVersionStatus?
}

extension CreateSchemaOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case compatibility = "Compatibility"
        case dataFormat = "DataFormat"
        case description = "Description"
        case latestSchemaVersion = "LatestSchemaVersion"
        case nextSchemaVersion = "NextSchemaVersion"
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaCheckpoint = "SchemaCheckpoint"
        case schemaName = "SchemaName"
        case schemaStatus = "SchemaStatus"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionStatus = "SchemaVersionStatus"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let schemaArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let schemaCheckpointDecoded = try containerValues.decode(Int.self, forKey: .schemaCheckpoint)
        schemaCheckpoint = schemaCheckpointDecoded
        let latestSchemaVersionDecoded = try containerValues.decode(Int.self, forKey: .latestSchemaVersion)
        latestSchemaVersion = latestSchemaVersionDecoded
        let nextSchemaVersionDecoded = try containerValues.decode(Int.self, forKey: .nextSchemaVersion)
        nextSchemaVersion = nextSchemaVersionDecoded
        let schemaStatusDecoded = try containerValues.decodeIfPresent(SchemaStatus.self, forKey: .schemaStatus)
        schemaStatus = schemaStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let schemaVersionStatusDecoded = try containerValues.decodeIfPresent(SchemaVersionStatus.self, forKey: .schemaVersionStatus)
        schemaVersionStatus = schemaVersionStatusDecoded
    }
}
