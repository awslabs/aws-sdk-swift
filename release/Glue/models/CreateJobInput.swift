// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateJobInput: Equatable {
    /// <p>This parameter is deprecated. Use <code>MaxCapacity</code> instead.</p>
    /// 	
    ///          <p>The number of AWS Glue data processing units (DPUs) to allocate to this Job. You can
    ///       allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing
    ///       power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information,
    ///       see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing
    ///       page</a>.</p>
    @available(*, deprecated, message: "This property is deprecated, use MaxCapacity instead.")
    public let allocatedCapacity: Int
    /// <p>The <code>JobCommand</code> that executes this job.</p>
    public let command: JobCommand?
    /// <p>The connections used for this job.</p>
    public let connections: ConnectionsList?
    /// <p>The default arguments for this job.</p>
    ///          <p>You can specify arguments here that your own job-execution script
    ///       consumes, as well as arguments that AWS Glue itself consumes.</p>
    ///          <p>For information about how to specify and consume your own Job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>
    ///          <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>
    public let defaultArguments: [String:String]?
    /// <p>Description of the job being defined.</p>
    public let description: String?
    /// <p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed
    ///       for this job.</p>
    public let executionProperty: ExecutionProperty?
    /// <p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark. </p>
    ///
    ///          <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    /// 	
    /// 	        <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>
    public let glueVersion: String?
    /// <p>This field is reserved for future use.</p>
    public let logUri: String?
    /// <p>The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure
    ///        of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
    ///        For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue
    ///          pricing page</a>.</p>
    /// 		
    /// 	        <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p>
    ///
    ///          <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are
    ///       running a Python shell job or an Apache Spark ETL job:</p>
    ///          <ul>
    ///             <li>
    ///                <p>When you specify a Python shell job (<code>JobCommand.Name</code>="pythonshell"), you can
    ///           allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p>
    ///             </li>
    ///             <li>
    ///                <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>="glueetl") or Apache
    ///          Spark streaming ETL job (<code>JobCommand.Name</code>="gluestreaming"), you can allocate from 2 to 100 DPUs.
    ///          The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p>
    ///             </li>
    ///          </ul>
    public let maxCapacity: Double?
    /// <p>The maximum number of times to retry this job if it fails.</p>
    public let maxRetries: Int
    /// <p>The name you assign to this job definition. It must be unique in your account.</p>
    public let name: String?
    /// <p>Non-overridable arguments for this job, specified as name-value pairs.</p>
    public let nonOverridableArguments: [String:String]?
    /// <p>Specifies configuration properties of a job notification.</p>
    public let notificationProperty: NotificationProperty?
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>
    /// 	
    /// 	        <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>
    public let numberOfWorkers: Int?
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
    public let role: String?
    /// <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
    ///       job.</p>
    public let securityConfiguration: String?
    /// <p>The tags to use with this job. You may use tags to limit access to the job. For more information about tags in AWS Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">AWS Tags in AWS Glue</a> in the developer guide.</p>
    public let tags: [String:String]?
    /// <p>The job timeout in minutes.  This is the maximum time that a job run
    ///       can consume resources before it is terminated and enters <code>TIMEOUT</code>
    ///       status. The default is 2,880 minutes (48 hours).</p>
    public let timeout: Int?
    /// <p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.</p>
    /// 	        <ul>
    ///             <li>
    ///                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
    ///             </li>
    ///             <li>
    ///                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
    ///             </li>
    ///             <li>
    ///                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
    ///             </li>
    ///          </ul>
    public let workerType: WorkerType?

    public init (
        allocatedCapacity: Int = 0,
        command: JobCommand? = nil,
        connections: ConnectionsList? = nil,
        defaultArguments: [String:String]? = nil,
        description: String? = nil,
        executionProperty: ExecutionProperty? = nil,
        glueVersion: String? = nil,
        logUri: String? = nil,
        maxCapacity: Double? = nil,
        maxRetries: Int = 0,
        name: String? = nil,
        nonOverridableArguments: [String:String]? = nil,
        notificationProperty: NotificationProperty? = nil,
        numberOfWorkers: Int? = nil,
        role: String? = nil,
        securityConfiguration: String? = nil,
        tags: [String:String]? = nil,
        timeout: Int? = nil,
        workerType: WorkerType? = nil
    )
    {
        self.allocatedCapacity = allocatedCapacity
        self.command = command
        self.connections = connections
        self.defaultArguments = defaultArguments
        self.description = description
        self.executionProperty = executionProperty
        self.glueVersion = glueVersion
        self.logUri = logUri
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.nonOverridableArguments = nonOverridableArguments
        self.notificationProperty = notificationProperty
        self.numberOfWorkers = numberOfWorkers
        self.role = role
        self.securityConfiguration = securityConfiguration
        self.tags = tags
        self.timeout = timeout
        self.workerType = workerType
    }
}
