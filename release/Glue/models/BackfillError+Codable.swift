// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackfillError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case partitions = "Partitions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let partitions = partitions {
            var partitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitions)
            for backfillerroredpartitionslist0 in partitions {
                try partitionsContainer.encode(backfillerroredpartitionslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(BackfillErrorCode.self, forKey: .code)
        code = codeDecoded
        let partitionsContainer = try containerValues.decodeIfPresent([PartitionValueList].self, forKey: .partitions)
        var partitionsDecoded0:[PartitionValueList]? = nil
        if let partitionsContainer = partitionsContainer {
            partitionsDecoded0 = [PartitionValueList]()
            for structure0 in partitionsContainer {
                partitionsDecoded0?.append(structure0)
            }
        }
        partitions = partitionsDecoded0
    }
}
