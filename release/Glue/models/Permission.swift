// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Permission {
    case all
    case alter
    case createDatabase
    case createTable
    case dataLocationAccess
    case delete
    case drop
    case insert
    case select
    case sdkUnknown(String)
}

extension Permission : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Permission] {
        return [
            .all,
            .alter,
            .createDatabase,
            .createTable,
            .dataLocationAccess,
            .delete,
            .drop,
            .insert,
            .select,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .alter: return "ALTER"
        case .createDatabase: return "CREATE_DATABASE"
        case .createTable: return "CREATE_TABLE"
        case .dataLocationAccess: return "DATA_LOCATION_ACCESS"
        case .delete: return "DELETE"
        case .drop: return "DROP"
        case .insert: return "INSERT"
        case .select: return "SELECT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Permission(rawValue: rawValue) ?? Permission.sdkUnknown(rawValue)
    }
}
