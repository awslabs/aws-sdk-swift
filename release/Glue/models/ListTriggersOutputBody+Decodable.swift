// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTriggersOutputBody: Equatable {
    public let triggerNames: [String]?
    public let nextToken: String?
}

extension ListTriggersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case triggerNames = "TriggerNames"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .triggerNames)
        var triggerNamesDecoded0:[String]? = nil
        if let triggerNamesContainer = triggerNamesContainer {
            triggerNamesDecoded0 = [String]()
            for string0 in triggerNamesContainer {
                triggerNamesDecoded0?.append(string0)
            }
        }
        triggerNames = triggerNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
