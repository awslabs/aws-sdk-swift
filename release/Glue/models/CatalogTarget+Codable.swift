// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CatalogTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case databaseName = "DatabaseName"
        case tables = "Tables"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tables = tables {
            var tablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tables)
            for catalogtableslist0 in tables {
                try tablesContainer.encode(catalogtableslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tablesContainer = try containerValues.decodeIfPresent([String].self, forKey: .tables)
        var tablesDecoded0:[String]? = nil
        if let tablesContainer = tablesContainer {
            tablesDecoded0 = [String]()
            for string0 in tablesContainer {
                tablesDecoded0?.append(string0)
            }
        }
        tables = tablesDecoded0
    }
}
