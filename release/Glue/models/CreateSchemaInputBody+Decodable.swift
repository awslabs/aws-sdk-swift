// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSchemaInputBody: Equatable {
    public let registryId: RegistryId?
    public let schemaName: String?
    public let dataFormat: DataFormat?
    public let compatibility: Compatibility?
    public let description: String?
    public let tags: [String:String]?
    public let schemaDefinition: String?
}

extension CreateSchemaInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case compatibility = "Compatibility"
        case dataFormat = "DataFormat"
        case description = "Description"
        case registryId = "RegistryId"
        case schemaDefinition = "SchemaDefinition"
        case schemaName = "SchemaName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}
