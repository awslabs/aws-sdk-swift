// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPlanInputBody: Equatable {
    public let mapping: [MappingEntry]?
    public let source: CatalogEntry?
    public let sinks: [CatalogEntry]?
    public let location: Location?
    public let language: Language?
    public let additionalPlanOptionsMap: [String:String]?
}

extension GetPlanInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case additionalPlanOptionsMap = "AdditionalPlanOptionsMap"
        case language = "Language"
        case location = "Location"
        case mapping = "Mapping"
        case sinks = "Sinks"
        case source = "Source"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mappingContainer = try containerValues.decodeIfPresent([MappingEntry].self, forKey: .mapping)
        var mappingDecoded0:[MappingEntry]? = nil
        if let mappingContainer = mappingContainer {
            mappingDecoded0 = [MappingEntry]()
            for structure0 in mappingContainer {
                mappingDecoded0?.append(structure0)
            }
        }
        mapping = mappingDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(CatalogEntry.self, forKey: .source)
        source = sourceDecoded
        let sinksContainer = try containerValues.decodeIfPresent([CatalogEntry].self, forKey: .sinks)
        var sinksDecoded0:[CatalogEntry]? = nil
        if let sinksContainer = sinksContainer {
            sinksDecoded0 = [CatalogEntry]()
            for structure0 in sinksContainer {
                sinksDecoded0?.append(structure0)
            }
        }
        sinks = sinksDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(Location.self, forKey: .location)
        location = locationDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Language.self, forKey: .language)
        language = languageDecoded
        let additionalPlanOptionsMapContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .additionalPlanOptionsMap)
        var additionalPlanOptionsMapDecoded0: [String:String]? = nil
        if let additionalPlanOptionsMapContainer = additionalPlanOptionsMapContainer {
            additionalPlanOptionsMapDecoded0 = [String:String]()
            for (key0, genericstring0) in additionalPlanOptionsMapContainer {
                additionalPlanOptionsMapDecoded0?[key0] = genericstring0
            }
        }
        additionalPlanOptionsMap = additionalPlanOptionsMapDecoded0
    }
}
