// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateCsvClassifierRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowSingleColumn = "AllowSingleColumn"
        case containsHeader = "ContainsHeader"
        case delimiter = "Delimiter"
        case disableValueTrimming = "DisableValueTrimming"
        case header = "Header"
        case name = "Name"
        case quoteSymbol = "QuoteSymbol"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowSingleColumn = allowSingleColumn {
            try encodeContainer.encode(allowSingleColumn, forKey: .allowSingleColumn)
        }
        if let containsHeader = containsHeader {
            try encodeContainer.encode(containsHeader.rawValue, forKey: .containsHeader)
        }
        if let delimiter = delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let disableValueTrimming = disableValueTrimming {
            try encodeContainer.encode(disableValueTrimming, forKey: .disableValueTrimming)
        }
        if let header = header {
            var headerContainer = encodeContainer.nestedUnkeyedContainer(forKey: .header)
            for csvheader0 in header {
                try headerContainer.encode(csvheader0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quoteSymbol = quoteSymbol {
            try encodeContainer.encode(quoteSymbol, forKey: .quoteSymbol)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let quoteSymbolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .quoteSymbol)
        quoteSymbol = quoteSymbolDecoded
        let containsHeaderDecoded = try containerValues.decodeIfPresent(CsvHeaderOption.self, forKey: .containsHeader)
        containsHeader = containsHeaderDecoded
        let headerContainer = try containerValues.decodeIfPresent([String].self, forKey: .header)
        var headerDecoded0:[String]? = nil
        if let headerContainer = headerContainer {
            headerDecoded0 = [String]()
            for string0 in headerContainer {
                headerDecoded0?.append(string0)
            }
        }
        header = headerDecoded0
        let disableValueTrimmingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableValueTrimming)
        disableValueTrimming = disableValueTrimmingDecoded
        let allowSingleColumnDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .allowSingleColumn)
        allowSingleColumn = allowSingleColumnDecoded
    }
}
