// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetPlanInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalPlanOptionsMap = "AdditionalPlanOptionsMap"
        case language = "Language"
        case location = "Location"
        case mapping = "Mapping"
        case sinks = "Sinks"
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalPlanOptionsMap = additionalPlanOptionsMap {
            var additionalPlanOptionsMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .additionalPlanOptionsMap)
            for (dictKey0, additionalplanoptionsmap0) in additionalPlanOptionsMap {
                try additionalPlanOptionsMapContainer.encode(additionalplanoptionsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let language = language {
            try encodeContainer.encode(language.rawValue, forKey: .language)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let mapping = mapping {
            var mappingContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mapping)
            for mappinglist0 in mapping {
                try mappingContainer.encode(mappinglist0)
            }
        }
        if let sinks = sinks {
            var sinksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sinks)
            for catalogentries0 in sinks {
                try sinksContainer.encode(catalogentries0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }
}
