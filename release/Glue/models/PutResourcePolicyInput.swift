// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutResourcePolicyInput: Equatable {
    /// <p>If <code>'TRUE'</code>, indicates that you are using both methods to grant cross-account
    ///       access to Data Catalog resources:</p>
    ///          <ul>
    ///             <li>
    ///                <p>By directly updating the resource policy with <code>PutResourePolicy</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>By using the <b>Grant permissions</b> command on the AWS
    ///           Management Console.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Must be set to <code>'TRUE'</code> if you have already used the Management Console to
    ///       grant cross-account access, otherwise the call fails. Default is 'FALSE'.</p>
    public let enableHybrid: EnableHybridValues?
    /// <p>A value of <code>MUST_EXIST</code> is used to update a policy. A value of
    ///         <code>NOT_EXIST</code> is used to create a new policy. If a value of <code>NONE</code> or a
    ///       null value is used, the call does not depend on the existence of a policy.</p>
    public let policyExistsCondition: ExistCondition?
    /// <p>The hash value returned when the previous policy was set using
    ///         <code>PutResourcePolicy</code>. Its purpose is to prevent concurrent modifications of a
    ///       policy. Do not use this parameter if no previous policy has been set.</p>
    public let policyHashCondition: String?
    /// <p>Contains the policy document to set, in JSON format.</p>
    public let policyInJson: String?
    /// <p>Do not use. For internal use only.</p>
    public let resourceArn: String?

    public init (
        enableHybrid: EnableHybridValues? = nil,
        policyExistsCondition: ExistCondition? = nil,
        policyHashCondition: String? = nil,
        policyInJson: String? = nil,
        resourceArn: String? = nil
    )
    {
        self.enableHybrid = enableHybrid
        self.policyExistsCondition = policyExistsCondition
        self.policyHashCondition = policyHashCondition
        self.policyInJson = policyInJson
        self.resourceArn = resourceArn
    }
}
