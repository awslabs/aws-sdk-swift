// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Job: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case command = "Command"
        case connections = "Connections"
        case createdOn = "CreatedOn"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case lastModifiedOn = "LastModifiedOn"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let connections = connections {
            try encodeContainer.encode(connections, forKey: .connections)
        }
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let defaultArguments = defaultArguments {
            var defaultArgumentsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .defaultArguments)
            for (dictKey0, genericmap0) in defaultArguments {
                try defaultArgumentsContainer.encode(genericmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let executionProperty = executionProperty {
            try encodeContainer.encode(executionProperty, forKey: .executionProperty)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if maxRetries != 0 {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nonOverridableArguments = nonOverridableArguments {
            var nonOverridableArgumentsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .nonOverridableArguments)
            for (dictKey0, genericmap0) in nonOverridableArguments {
                try nonOverridableArgumentsContainer.encode(genericmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let executionPropertyDecoded = try containerValues.decodeIfPresent(ExecutionProperty.self, forKey: .executionProperty)
        executionProperty = executionPropertyDecoded
        let commandDecoded = try containerValues.decodeIfPresent(JobCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [String:String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [String:String]()
            for (key0, genericstring0) in defaultArgumentsContainer {
                defaultArgumentsDecoded0?[key0] = genericstring0
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let nonOverridableArgumentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .nonOverridableArguments)
        var nonOverridableArgumentsDecoded0: [String:String]? = nil
        if let nonOverridableArgumentsContainer = nonOverridableArgumentsContainer {
            nonOverridableArgumentsDecoded0 = [String:String]()
            for (key0, genericstring0) in nonOverridableArgumentsContainer {
                nonOverridableArgumentsDecoded0?[key0] = genericstring0
            }
        }
        nonOverridableArguments = nonOverridableArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxRetriesDecoded = try containerValues.decode(Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let allocatedCapacityDecoded = try containerValues.decode(Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
    }
}
