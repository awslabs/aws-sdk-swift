// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JdbcTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionName = "ConnectionName"
        case exclusions = "Exclusions"
        case path = "Path"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let exclusions = exclusions {
            var exclusionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusions)
            for pathlist0 in exclusions {
                try exclusionsContainer.encode(pathlist0)
            }
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let exclusionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .exclusions)
        var exclusionsDecoded0:[String]? = nil
        if let exclusionsContainer = exclusionsContainer {
            exclusionsDecoded0 = [String]()
            for string0 in exclusionsContainer {
                exclusionsDecoded0?.append(string0)
            }
        }
        exclusions = exclusionsDecoded0
    }
}
