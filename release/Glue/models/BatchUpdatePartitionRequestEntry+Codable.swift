// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchUpdatePartitionRequestEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case partitionInput = "PartitionInput"
        case partitionValueList = "PartitionValueList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partitionInput = partitionInput {
            try encodeContainer.encode(partitionInput, forKey: .partitionInput)
        }
        if let partitionValueList = partitionValueList {
            var partitionValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValueList)
            for boundedpartitionvaluelist0 in partitionValueList {
                try partitionValueListContainer.encode(boundedpartitionvaluelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionValueListContainer = try containerValues.decodeIfPresent([String].self, forKey: .partitionValueList)
        var partitionValueListDecoded0:[String]? = nil
        if let partitionValueListContainer = partitionValueListContainer {
            partitionValueListDecoded0 = [String]()
            for string0 in partitionValueListContainer {
                partitionValueListDecoded0?.append(string0)
            }
        }
        partitionValueList = partitionValueListDecoded0
        let partitionInputDecoded = try containerValues.decodeIfPresent(PartitionInput.self, forKey: .partitionInput)
        partitionInput = partitionInputDecoded
    }
}
