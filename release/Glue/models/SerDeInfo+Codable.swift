// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SerDeInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case parameters = "Parameters"
        case serializationLibrary = "SerializationLibrary"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let serializationLibrary = serializationLibrary {
            try encodeContainer.encode(serializationLibrary, forKey: .serializationLibrary)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let serializationLibraryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serializationLibrary)
        serializationLibrary = serializationLibraryDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                parametersDecoded0?[key0] = parametersmapvalue0
            }
        }
        parameters = parametersDecoded0
    }
}
