// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PrincipalPermissions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case permissions = "Permissions"
        case principal = "Principal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for permissionlist0 in permissions {
                try permissionsContainer.encode(permissionlist0.rawValue)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(DataLakePrincipal.self, forKey: .principal)
        principal = principalDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([Permission].self, forKey: .permissions)
        var permissionsDecoded0:[Permission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [Permission]()
            for string0 in permissionsContainer {
                permissionsDecoded0?.append(string0)
            }
        }
        permissions = permissionsDecoded0
    }
}
