// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkflowRun: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completedOn = "CompletedOn"
        case errorMessage = "ErrorMessage"
        case graph = "Graph"
        case name = "Name"
        case previousRunId = "PreviousRunId"
        case startedOn = "StartedOn"
        case statistics = "Statistics"
        case status = "Status"
        case workflowRunId = "WorkflowRunId"
        case workflowRunProperties = "WorkflowRunProperties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let graph = graph {
            try encodeContainer.encode(graph, forKey: .graph)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let previousRunId = previousRunId {
            try encodeContainer.encode(previousRunId, forKey: .previousRunId)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let statistics = statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let workflowRunId = workflowRunId {
            try encodeContainer.encode(workflowRunId, forKey: .workflowRunId)
        }
        if let workflowRunProperties = workflowRunProperties {
            var workflowRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .workflowRunProperties)
            for (dictKey0, workflowrunproperties0) in workflowRunProperties {
                try workflowRunPropertiesContainer.encode(workflowrunproperties0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let workflowRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowRunId)
        workflowRunId = workflowRunIdDecoded
        let previousRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .previousRunId)
        previousRunId = previousRunIdDecoded
        let workflowRunPropertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .workflowRunProperties)
        var workflowRunPropertiesDecoded0: [String:String]? = nil
        if let workflowRunPropertiesContainer = workflowRunPropertiesContainer {
            workflowRunPropertiesDecoded0 = [String:String]()
            for (key0, genericstring0) in workflowRunPropertiesContainer {
                workflowRunPropertiesDecoded0?[key0] = genericstring0
            }
        }
        workflowRunProperties = workflowRunPropertiesDecoded0
        let startedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(WorkflowRunStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let statisticsDecoded = try containerValues.decodeIfPresent(WorkflowRunStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let graphDecoded = try containerValues.decodeIfPresent(WorkflowGraph.self, forKey: .graph)
        graph = graphDecoded
    }
}
