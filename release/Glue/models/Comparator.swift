// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Comparator {
    case equals
    case greaterThan
    case greaterThanEquals
    case lessThan
    case lessThanEquals
    case sdkUnknown(String)
}

extension Comparator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Comparator] {
        return [
            .equals,
            .greaterThan,
            .greaterThanEquals,
            .lessThan,
            .lessThanEquals,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .equals: return "EQUALS"
        case .greaterThan: return "GREATER_THAN"
        case .greaterThanEquals: return "GREATER_THAN_EQUALS"
        case .lessThan: return "LESS_THAN"
        case .lessThanEquals: return "LESS_THAN_EQUALS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Comparator(rawValue: rawValue) ?? Comparator.sdkUnknown(rawValue)
    }
}
