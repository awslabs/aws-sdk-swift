// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartJobRunInputBody: Equatable {
    public let jobName: String?
    public let jobRunId: String?
    public let arguments: [String:String]?
    public let allocatedCapacity: Int
    public let timeout: Int?
    public let maxCapacity: Double?
    public let securityConfiguration: String?
    public let notificationProperty: NotificationProperty?
    public let workerType: WorkerType?
    public let numberOfWorkers: Int?
}

extension StartJobRunInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case arguments = "Arguments"
        case jobName = "JobName"
        case jobRunId = "JobRunId"
        case maxCapacity = "MaxCapacity"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobRunId)
        jobRunId = jobRunIdDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .arguments)
        var argumentsDecoded0: [String:String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [String:String]()
            for (key0, genericstring0) in argumentsContainer {
                argumentsDecoded0?[key0] = genericstring0
            }
        }
        arguments = argumentsDecoded0
        let allocatedCapacityDecoded = try containerValues.decode(Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
    }
}
