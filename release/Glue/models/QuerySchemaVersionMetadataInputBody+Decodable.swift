// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct QuerySchemaVersionMetadataInputBody: Equatable {
    public let schemaId: SchemaId?
    public let schemaVersionNumber: SchemaVersionNumber?
    public let schemaVersionId: String?
    public let metadataList: [MetadataKeyValuePair]?
    public let maxResults: Int
    public let nextToken: String?
}

extension QuerySchemaVersionMetadataInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case metadataList = "MetadataList"
        case nextToken = "NextToken"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decodeIfPresent(SchemaVersionNumber.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let metadataListContainer = try containerValues.decodeIfPresent([MetadataKeyValuePair].self, forKey: .metadataList)
        var metadataListDecoded0:[MetadataKeyValuePair]? = nil
        if let metadataListContainer = metadataListContainer {
            metadataListDecoded0 = [MetadataKeyValuePair]()
            for structure0 in metadataListContainer {
                metadataListDecoded0?.append(structure0)
            }
        }
        metadataList = metadataListDecoded0
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
