// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CatalogImportStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case importCompleted = "ImportCompleted"
        case importTime = "ImportTime"
        case importedBy = "ImportedBy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if importCompleted != false {
            try encodeContainer.encode(importCompleted, forKey: .importCompleted)
        }
        if let importTime = importTime {
            try encodeContainer.encode(importTime.timeIntervalSince1970, forKey: .importTime)
        }
        if let importedBy = importedBy {
            try encodeContainer.encode(importedBy, forKey: .importedBy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importCompletedDecoded = try containerValues.decode(Bool.self, forKey: .importCompleted)
        importCompleted = importCompletedDecoded
        let importTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .importTime)
        importTime = importTimeDecoded
        let importedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importedBy)
        importedBy = importedByDecoded
    }
}
