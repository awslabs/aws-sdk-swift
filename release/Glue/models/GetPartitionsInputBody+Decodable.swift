// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPartitionsInputBody: Equatable {
    public let catalogId: String?
    public let databaseName: String?
    public let tableName: String?
    public let expression: String?
    public let nextToken: String?
    public let segment: Segment?
    public let maxResults: Int?
    public let excludeColumnSchema: Bool?
}

extension GetPartitionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case excludeColumnSchema = "ExcludeColumnSchema"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case segment = "Segment"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expression)
        expression = expressionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let segmentDecoded = try containerValues.decodeIfPresent(Segment.self, forKey: .segment)
        segment = segmentDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let excludeColumnSchemaDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .excludeColumnSchema)
        excludeColumnSchema = excludeColumnSchemaDecoded
    }
}
