// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FindMatchesMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case areaUnderPRCurve = "AreaUnderPRCurve"
        case columnImportances = "ColumnImportances"
        case confusionMatrix = "ConfusionMatrix"
        case f1 = "F1"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let areaUnderPRCurve = areaUnderPRCurve {
            try encodeContainer.encode(areaUnderPRCurve, forKey: .areaUnderPRCurve)
        }
        if let columnImportances = columnImportances {
            var columnImportancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnImportances)
            for columnimportancelist0 in columnImportances {
                try columnImportancesContainer.encode(columnimportancelist0)
            }
        }
        if let confusionMatrix = confusionMatrix {
            try encodeContainer.encode(confusionMatrix, forKey: .confusionMatrix)
        }
        if let f1 = f1 {
            try encodeContainer.encode(f1, forKey: .f1)
        }
        if let precision = precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let areaUnderPRCurveDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .areaUnderPRCurve)
        areaUnderPRCurve = areaUnderPRCurveDecoded
        let precisionDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .recall)
        recall = recallDecoded
        let f1Decoded = try containerValues.decodeIfPresent(Double.self, forKey: .f1)
        f1 = f1Decoded
        let confusionMatrixDecoded = try containerValues.decodeIfPresent(ConfusionMatrix.self, forKey: .confusionMatrix)
        confusionMatrix = confusionMatrixDecoded
        let columnImportancesContainer = try containerValues.decodeIfPresent([ColumnImportance].self, forKey: .columnImportances)
        var columnImportancesDecoded0:[ColumnImportance]? = nil
        if let columnImportancesContainer = columnImportancesContainer {
            columnImportancesDecoded0 = [ColumnImportance]()
            for structure0 in columnImportancesContainer {
                columnImportancesDecoded0?.append(structure0)
            }
        }
        columnImportances = columnImportancesDecoded0
    }
}
