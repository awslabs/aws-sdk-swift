// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetPartitionsInput: Equatable {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is provided,
    ///       the AWS account ID is used by default.</p>
    public let catalogId: String?
    /// <p>The name of the catalog database where the partitions reside.</p>
    public let databaseName: String?
    public let excludeColumnSchema: Bool?
    /// <p>An expression that filters the partitions to be returned.</p>
    ///          <p>The expression uses SQL syntax similar to the SQL <code>WHERE</code> filter clause. The
    ///       SQL statement parser <a href="http://jsqlparser.sourceforge.net/home.php">JSQLParser</a> parses the expression. </p>
    ///          <p>
    ///             <i>Operators</i>: The following are the operators that you can use in the
    ///         <code>Expression</code> API call:</p>
    ///          <dl>
    ///             <dt>=</dt>
    ///             <dd>
    ///                <p>Checks whether the values of the two operands are equal; if yes, then the condition becomes
    ///             true.</p>
    ///                <p>Example: Assume 'variable a' holds 10 and 'variable b' holds 20. </p>
    ///                <p>(a = b) is not true.</p>
    ///             </dd>
    ///             <dt>< ></dt>
    ///             <dd>
    ///                <p>Checks whether the values of two operands are equal; if the values are not equal,
    ///             then the condition becomes true.</p>
    ///                <p>Example: (a < > b) is true.</p>
    ///             </dd>
    ///             <dt>></dt>
    ///             <dd>
    ///                <p>Checks whether the value of the left operand is greater than the value of the right
    ///             operand; if yes, then the condition becomes true.</p>
    ///                <p>Example: (a > b) is not true.</p>
    ///             </dd>
    ///             <dt><</dt>
    ///             <dd>
    ///                <p>Checks whether the value of the left operand is less than the value of the right
    ///             operand; if yes, then the condition becomes true.</p>
    ///                <p>Example: (a < b) is true.</p>
    ///             </dd>
    ///             <dt>>=</dt>
    ///             <dd>
    ///                <p>Checks whether the value of the left operand is greater than or equal to the value
    ///             of the right operand; if yes, then the condition becomes true.</p>
    ///                <p>Example: (a >= b) is not true.</p>
    ///             </dd>
    ///             <dt><=</dt>
    ///             <dd>
    ///                <p>Checks whether the value of the left operand is less than or equal to the value of
    ///             the right operand; if yes, then the condition becomes true.</p>
    ///                <p>Example: (a <= b) is true.</p>
    ///             </dd>
    ///             <dt>AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL</dt>
    ///             <dd>
    ///                <p>Logical operators.</p>
    ///             </dd>
    ///          </dl>
    ///          <p>
    ///             <i>Supported Partition Key Types</i>: The following are the supported
    ///       partition keys.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>string</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>date</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>timestamp</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>int</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>bigint</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>long</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tinyint</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>smallint</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>decimal</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>If an invalid type is encountered, an exception is thrown. </p>
    ///          <p>The following list shows the valid operators on each type. When you define a crawler, the
    ///         <code>partitionKey</code> type is created as a <code>STRING</code>, to be compatible with the catalog
    ///       partitions. </p>
    ///
    ///          <p>
    ///             <i>Sample API Call</i>: </p>
    public let expression: String?
    /// <p>The maximum number of partitions to return in a single response.</p>
    public let maxResults: Int?
    /// <p>A continuation token, if this is not the first call to retrieve
    ///       these partitions.</p>
    public let nextToken: String?
    /// <p>The segment of the table's partitions to scan in this request.</p>
    public let segment: Segment?
    /// <p>The name of the partitions' table.</p>
    public let tableName: String?

    public init (
        catalogId: String? = nil,
        databaseName: String? = nil,
        excludeColumnSchema: Bool? = nil,
        expression: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        segment: Segment? = nil,
        tableName: String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.excludeColumnSchema = excludeColumnSchema
        self.expression = expression
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.segment = segment
        self.tableName = tableName
    }
}
