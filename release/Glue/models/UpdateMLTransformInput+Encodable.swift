// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateMLTransformInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case timeout = "Timeout"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}
