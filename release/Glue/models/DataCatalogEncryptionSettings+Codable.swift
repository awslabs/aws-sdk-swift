// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataCatalogEncryptionSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionPasswordEncryption = "ConnectionPasswordEncryption"
        case encryptionAtRest = "EncryptionAtRest"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionPasswordEncryption = connectionPasswordEncryption {
            try encodeContainer.encode(connectionPasswordEncryption, forKey: .connectionPasswordEncryption)
        }
        if let encryptionAtRest = encryptionAtRest {
            try encodeContainer.encode(encryptionAtRest, forKey: .encryptionAtRest)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionAtRestDecoded = try containerValues.decodeIfPresent(EncryptionAtRest.self, forKey: .encryptionAtRest)
        encryptionAtRest = encryptionAtRestDecoded
        let connectionPasswordEncryptionDecoded = try containerValues.decodeIfPresent(ConnectionPasswordEncryption.self, forKey: .connectionPasswordEncryption)
        connectionPasswordEncryption = connectionPasswordEncryptionDecoded
    }
}
