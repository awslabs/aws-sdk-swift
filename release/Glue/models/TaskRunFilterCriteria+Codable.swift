// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaskRunFilterCriteria: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case startedAfter = "StartedAfter"
        case startedBefore = "StartedBefore"
        case status = "Status"
        case taskRunType = "TaskRunType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startedAfter = startedAfter {
            try encodeContainer.encode(startedAfter.timeIntervalSince1970, forKey: .startedAfter)
        }
        if let startedBefore = startedBefore {
            try encodeContainer.encode(startedBefore.timeIntervalSince1970, forKey: .startedBefore)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskRunType = taskRunType {
            try encodeContainer.encode(taskRunType.rawValue, forKey: .taskRunType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunTypeDecoded = try containerValues.decodeIfPresent(TaskType.self, forKey: .taskRunType)
        taskRunType = taskRunTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TaskStatusType.self, forKey: .status)
        status = statusDecoded
        let startedBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedBefore)
        startedBefore = startedBeforeDecoded
        let startedAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedAfter)
        startedAfter = startedAfterDecoded
    }
}
