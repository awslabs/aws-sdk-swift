// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PartitionIndexDescriptor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backfillErrors = "BackfillErrors"
        case indexName = "IndexName"
        case indexStatus = "IndexStatus"
        case keys = "Keys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backfillErrors = backfillErrors {
            var backfillErrorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .backfillErrors)
            for backfillerrors0 in backfillErrors {
                try backfillErrorsContainer.encode(backfillerrors0)
            }
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexStatus = indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for keyschemaelementlist0 in keys {
                try keysContainer.encode(keyschemaelementlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keysContainer = try containerValues.decodeIfPresent([KeySchemaElement].self, forKey: .keys)
        var keysDecoded0:[KeySchemaElement]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [KeySchemaElement]()
            for structure0 in keysContainer {
                keysDecoded0?.append(structure0)
            }
        }
        keys = keysDecoded0
        let indexStatusDecoded = try containerValues.decodeIfPresent(PartitionIndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let backfillErrorsContainer = try containerValues.decodeIfPresent([BackfillError].self, forKey: .backfillErrors)
        var backfillErrorsDecoded0:[BackfillError]? = nil
        if let backfillErrorsContainer = backfillErrorsContainer {
            backfillErrorsDecoded0 = [BackfillError]()
            for structure0 in backfillErrorsContainer {
                backfillErrorsDecoded0?.append(structure0)
            }
        }
        backfillErrors = backfillErrorsDecoded0
    }
}
