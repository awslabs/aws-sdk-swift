// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DevEndpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arguments = "Arguments"
        case availabilityZone = "AvailabilityZone"
        case createdTimestamp = "CreatedTimestamp"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case failureReason = "FailureReason"
        case glueVersion = "GlueVersion"
        case lastModifiedTimestamp = "LastModifiedTimestamp"
        case lastUpdateStatus = "LastUpdateStatus"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case privateAddress = "PrivateAddress"
        case publicAddress = "PublicAddress"
        case publicKey = "PublicKey"
        case publicKeys = "PublicKeys"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case status = "Status"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
        case workerType = "WorkerType"
        case yarnEndpointAddress = "YarnEndpointAddress"
        case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .arguments)
            for (dictKey0, mapvalue0) in arguments {
                try argumentsContainer.encode(mapvalue0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let extraJarsS3Path = extraJarsS3Path {
            try encodeContainer.encode(extraJarsS3Path, forKey: .extraJarsS3Path)
        }
        if let extraPythonLibsS3Path = extraPythonLibsS3Path {
            try encodeContainer.encode(extraPythonLibsS3Path, forKey: .extraPythonLibsS3Path)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedTimestamp = lastModifiedTimestamp {
            try encodeContainer.encode(lastModifiedTimestamp.timeIntervalSince1970, forKey: .lastModifiedTimestamp)
        }
        if let lastUpdateStatus = lastUpdateStatus {
            try encodeContainer.encode(lastUpdateStatus, forKey: .lastUpdateStatus)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let privateAddress = privateAddress {
            try encodeContainer.encode(privateAddress, forKey: .privateAddress)
        }
        if let publicAddress = publicAddress {
            try encodeContainer.encode(publicAddress, forKey: .publicAddress)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let publicKeys = publicKeys {
            var publicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicKeys)
            for publickeyslist0 in publicKeys {
                try publicKeysContainer.encode(publickeyslist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
        if let yarnEndpointAddress = yarnEndpointAddress {
            try encodeContainer.encode(yarnEndpointAddress, forKey: .yarnEndpointAddress)
        }
        if zeppelinRemoteSparkInterpreterPort != 0 {
            try encodeContainer.encode(zeppelinRemoteSparkInterpreterPort, forKey: .zeppelinRemoteSparkInterpreterPort)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let yarnEndpointAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .yarnEndpointAddress)
        yarnEndpointAddress = yarnEndpointAddressDecoded
        let privateAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateAddress)
        privateAddress = privateAddressDecoded
        let zeppelinRemoteSparkInterpreterPortDecoded = try containerValues.decode(Int.self, forKey: .zeppelinRemoteSparkInterpreterPort)
        zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPortDecoded
        let publicAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicAddress)
        publicAddress = publicAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let numberOfNodesDecoded = try containerValues.decode(Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdateStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdateStatus)
        lastUpdateStatus = lastUpdateStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastModifiedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTimestamp)
        lastModifiedTimestamp = lastModifiedTimestampDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let publicKeysContainer = try containerValues.decodeIfPresent([String].self, forKey: .publicKeys)
        var publicKeysDecoded0:[String]? = nil
        if let publicKeysContainer = publicKeysContainer {
            publicKeysDecoded0 = [String]()
            for string0 in publicKeysContainer {
                publicKeysDecoded0?.append(string0)
            }
        }
        publicKeys = publicKeysDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .arguments)
        var argumentsDecoded0: [String:String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [String:String]()
            for (key0, genericstring0) in argumentsContainer {
                argumentsDecoded0?[key0] = genericstring0
            }
        }
        arguments = argumentsDecoded0
    }
}
