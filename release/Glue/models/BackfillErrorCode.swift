// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BackfillErrorCode {
    case encryptedPartitionError
    case internalError
    case invalidPartitionTypeDataError
    case missingPartitionValueError
    case unsupportedPartitionCharacterError
    case sdkUnknown(String)
}

extension BackfillErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BackfillErrorCode] {
        return [
            .encryptedPartitionError,
            .internalError,
            .invalidPartitionTypeDataError,
            .missingPartitionValueError,
            .unsupportedPartitionCharacterError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .encryptedPartitionError: return "ENCRYPTED_PARTITION_ERROR"
        case .internalError: return "INTERNAL_ERROR"
        case .invalidPartitionTypeDataError: return "INVALID_PARTITION_TYPE_DATA_ERROR"
        case .missingPartitionValueError: return "MISSING_PARTITION_VALUE_ERROR"
        case .unsupportedPartitionCharacterError: return "UNSUPPORTED_PARTITION_CHARACTER_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BackfillErrorCode(rawValue: rawValue) ?? BackfillErrorCode.sdkUnknown(rawValue)
    }
}
