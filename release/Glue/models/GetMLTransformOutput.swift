// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetMLTransformOutput: Equatable {
    /// <p>The date and time when the transform was created.</p>
    public let createdOn: Date?
    /// <p>A description of the transform.</p>
    public let description: String?
    /// <p>The latest evaluation metrics.</p>
    public let evaluationMetrics: EvaluationMetrics?
    /// <p>This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9.  For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">AWS Glue Versions</a> in the developer guide.</p>
    public let glueVersion: String?
    /// <p>A list of AWS Glue table definitions used by the transform.</p>
    public let inputRecordTables: [GlueTable]?
    /// <p>The number of labels available for this transform.</p>
    public let labelCount: Int
    /// <p>The date and time when the transform was last modified.</p>
    public let lastModifiedOn: Date?
    /// <p>The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
    ///       processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
    ///       information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing
    ///         page</a>. </p>
    /// 		
    ///          <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>
    public let maxCapacity: Double?
    /// <p>The maximum number of times to retry a task for this transform after a task run fails.</p>
    public let maxRetries: Int?
    /// <p>The unique name given to the transform when it was created.</p>
    public let name: String?
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p>
    public let numberOfWorkers: Int?
    /// <p>The configuration parameters that are specific to the algorithm used.</p>
    public let parameters: TransformParameters?
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role with the required
    ///       permissions.</p>
    public let role: String?
    /// <p>The <code>Map<Column, Type></code> object that represents the schema that this
    ///       transform accepts. Has an upper bound of 100 columns.</p>
    public let schema: [SchemaColumn]?
    /// <p>The last known status of the transform (to indicate whether it can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
    public let status: TransformStatusType?
    /// <p>The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    public let timeout: Int?
    /// <p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>
    public let transformEncryption: TransformEncryption?
    /// <p>The unique identifier of the transform, generated at the time that the transform was
    ///       created.</p>
    public let transformId: String?
    /// <p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p>
    /// 	        <ul>
    ///             <li>
    ///                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
    ///             </li>
    ///             <li>
    ///                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
    ///             </li>
    ///             <li>
    ///                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
    ///             </li>
    ///          </ul>
    public let workerType: WorkerType?

    public init (
        createdOn: Date? = nil,
        description: String? = nil,
        evaluationMetrics: EvaluationMetrics? = nil,
        glueVersion: String? = nil,
        inputRecordTables: [GlueTable]? = nil,
        labelCount: Int = 0,
        lastModifiedOn: Date? = nil,
        maxCapacity: Double? = nil,
        maxRetries: Int? = nil,
        name: String? = nil,
        numberOfWorkers: Int? = nil,
        parameters: TransformParameters? = nil,
        role: String? = nil,
        schema: [SchemaColumn]? = nil,
        status: TransformStatusType? = nil,
        timeout: Int? = nil,
        transformEncryption: TransformEncryption? = nil,
        transformId: String? = nil,
        workerType: WorkerType? = nil
    )
    {
        self.createdOn = createdOn
        self.description = description
        self.evaluationMetrics = evaluationMetrics
        self.glueVersion = glueVersion
        self.inputRecordTables = inputRecordTables
        self.labelCount = labelCount
        self.lastModifiedOn = lastModifiedOn
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.numberOfWorkers = numberOfWorkers
        self.parameters = parameters
        self.role = role
        self.schema = schema
        self.status = status
        self.timeout = timeout
        self.transformEncryption = transformEncryption
        self.transformId = transformId
        self.workerType = workerType
    }
}
