// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeGenEdge: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case source = "Source"
        case target = "Target"
        case targetParameter = "TargetParameter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let targetParameter = targetParameter {
            try encodeContainer.encode(targetParameter, forKey: .targetParameter)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .source)
        source = sourceDecoded
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
        let targetParameterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetParameter)
        targetParameter = targetParameterDecoded
    }
}
