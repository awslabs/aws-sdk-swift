// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TriggerState {
    case activated
    case activating
    case created
    case creating
    case deactivated
    case deactivating
    case deleting
    case updating
    case sdkUnknown(String)
}

extension TriggerState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TriggerState] {
        return [
            .activated,
            .activating,
            .created,
            .creating,
            .deactivated,
            .deactivating,
            .deleting,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activated: return "ACTIVATED"
        case .activating: return "ACTIVATING"
        case .created: return "CREATED"
        case .creating: return "CREATING"
        case .deactivated: return "DEACTIVATED"
        case .deactivating: return "DEACTIVATING"
        case .deleting: return "DELETING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TriggerState(rawValue: rawValue) ?? TriggerState.sdkUnknown(rawValue)
    }
}
