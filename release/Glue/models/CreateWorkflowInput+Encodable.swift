// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateWorkflowInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultRunProperties = defaultRunProperties {
            var defaultRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .defaultRunProperties)
            for (dictKey0, workflowrunproperties0) in defaultRunProperties {
                try defaultRunPropertiesContainer.encode(workflowrunproperties0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let maxConcurrentRuns = maxConcurrentRuns {
            try encodeContainer.encode(maxConcurrentRuns, forKey: .maxConcurrentRuns)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
