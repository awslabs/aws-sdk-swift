// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let logUri: String?
    public let role: String?
    public let executionProperty: ExecutionProperty?
    public let command: JobCommand?
    public let defaultArguments: [String:String]?
    public let nonOverridableArguments: [String:String]?
    public let connections: ConnectionsList?
    public let maxRetries: Int
    public let allocatedCapacity: Int
    public let timeout: Int?
    public let maxCapacity: Double?
    public let securityConfiguration: String?
    public let tags: [String:String]?
    public let notificationProperty: NotificationProperty?
    public let glueVersion: String?
    public let numberOfWorkers: Int?
    public let workerType: WorkerType?
}

extension CreateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case tags = "Tags"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let executionPropertyDecoded = try containerValues.decodeIfPresent(ExecutionProperty.self, forKey: .executionProperty)
        executionProperty = executionPropertyDecoded
        let commandDecoded = try containerValues.decodeIfPresent(JobCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [String:String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [String:String]()
            for (key0, genericstring0) in defaultArgumentsContainer {
                defaultArgumentsDecoded0?[key0] = genericstring0
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let nonOverridableArgumentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .nonOverridableArguments)
        var nonOverridableArgumentsDecoded0: [String:String]? = nil
        if let nonOverridableArgumentsContainer = nonOverridableArgumentsContainer {
            nonOverridableArgumentsDecoded0 = [String:String]()
            for (key0, genericstring0) in nonOverridableArgumentsContainer {
                nonOverridableArgumentsDecoded0?[key0] = genericstring0
            }
        }
        nonOverridableArguments = nonOverridableArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxRetriesDecoded = try containerValues.decode(Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let allocatedCapacityDecoded = try containerValues.decode(Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
    }
}
