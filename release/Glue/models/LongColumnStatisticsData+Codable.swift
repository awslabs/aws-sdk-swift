// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LongColumnStatisticsData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumValue = "MaximumValue"
        case minimumValue = "MinimumValue"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumValue != 0 {
            try encodeContainer.encode(maximumValue, forKey: .maximumValue)
        }
        if minimumValue != 0 {
            try encodeContainer.encode(minimumValue, forKey: .minimumValue)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumValueDecoded = try containerValues.decode(Int.self, forKey: .minimumValue)
        minimumValue = minimumValueDecoded
        let maximumValueDecoded = try containerValues.decode(Int.self, forKey: .maximumValue)
        maximumValue = maximumValueDecoded
        let numberOfNullsDecoded = try containerValues.decode(Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decode(Int.self, forKey: .numberOfDistinctValues)
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}
