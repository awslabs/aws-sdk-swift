// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateMLTransformInputBody: Equatable {
    public let transformId: String?
    public let name: String?
    public let description: String?
    public let parameters: TransformParameters?
    public let role: String?
    public let glueVersion: String?
    public let maxCapacity: Double?
    public let workerType: WorkerType?
    public let numberOfWorkers: Int?
    public let timeout: Int?
    public let maxRetries: Int?
}

extension UpdateMLTransformInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case timeout = "Timeout"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(TransformParameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
    }
}
