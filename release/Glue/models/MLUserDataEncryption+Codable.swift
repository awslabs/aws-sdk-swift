// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MLUserDataEncryption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId = "KmsKeyId"
        case mlUserDataEncryptionMode = "MlUserDataEncryptionMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let mlUserDataEncryptionMode = mlUserDataEncryptionMode {
            try encodeContainer.encode(mlUserDataEncryptionMode.rawValue, forKey: .mlUserDataEncryptionMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlUserDataEncryptionModeDecoded = try containerValues.decodeIfPresent(MLUserDataEncryptionModeString.self, forKey: .mlUserDataEncryptionMode)
        mlUserDataEncryptionMode = mlUserDataEncryptionModeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
