// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TriggerUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case description = "Description"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicate = predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Action].self, forKey: .actions)
        var actionsDecoded0:[Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Action]()
            for structure0 in actionsContainer {
                actionsDecoded0?.append(structure0)
            }
        }
        actions = actionsDecoded0
        let predicateDecoded = try containerValues.decodeIfPresent(Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
    }
}
