// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectionInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionProperties = "ConnectionProperties"
        case connectionType = "ConnectionType"
        case description = "Description"
        case matchCriteria = "MatchCriteria"
        case name = "Name"
        case physicalConnectionRequirements = "PhysicalConnectionRequirements"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionProperties = connectionProperties {
            var connectionPropertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .connectionProperties)
            for (dictKey0, connectionproperties0) in connectionProperties {
                try connectionPropertiesContainer.encode(connectionproperties0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let connectionType = connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let matchCriteria = matchCriteria {
            var matchCriteriaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchCriteria)
            for matchcriteria0 in matchCriteria {
                try matchCriteriaContainer.encode(matchcriteria0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let physicalConnectionRequirements = physicalConnectionRequirements {
            try encodeContainer.encode(physicalConnectionRequirements, forKey: .physicalConnectionRequirements)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let matchCriteriaContainer = try containerValues.decodeIfPresent([String].self, forKey: .matchCriteria)
        var matchCriteriaDecoded0:[String]? = nil
        if let matchCriteriaContainer = matchCriteriaContainer {
            matchCriteriaDecoded0 = [String]()
            for string0 in matchCriteriaContainer {
                matchCriteriaDecoded0?.append(string0)
            }
        }
        matchCriteria = matchCriteriaDecoded0
        let connectionPropertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .connectionProperties)
        var connectionPropertiesDecoded0: [String:String]? = nil
        if let connectionPropertiesContainer = connectionPropertiesContainer {
            connectionPropertiesDecoded0 = [String:String]()
            for (key0, valuestring0) in connectionPropertiesContainer {
                connectionPropertiesDecoded0?[key0] = valuestring0
            }
        }
        connectionProperties = connectionPropertiesDecoded0
        let physicalConnectionRequirementsDecoded = try containerValues.decodeIfPresent(PhysicalConnectionRequirements.self, forKey: .physicalConnectionRequirements)
        physicalConnectionRequirements = physicalConnectionRequirementsDecoded
    }
}
