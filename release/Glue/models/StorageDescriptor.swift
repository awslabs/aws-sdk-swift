// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the physical storage of table data.</p>
public struct StorageDescriptor: Equatable {
    /// <p>A list of reducer grouping columns, clustering columns, and
    ///       bucketing columns in the table.</p>
    public let bucketColumns: [String]?
    /// <p>A list of the <code>Columns</code> in the table.</p>
    public let columns: [Column]?
    /// <p>
    ///             <code>True</code> if the data in the table is compressed, or <code>False</code> if
    ///       not.</p>
    public let compressed: Bool
    /// <p>The input format: <code>SequenceFileInputFormat</code> (binary),
    ///       or <code>TextInputFormat</code>, or a custom format.</p>
    public let inputFormat: String?
    /// <p>The physical location of the table. By default, this takes the form of the warehouse
    ///       location, followed by the database location in the warehouse, followed by the table
    ///       name.</p>
    public let location: String?
    /// <p>Must be specified if the table contains any dimension columns.</p>
    public let numberOfBuckets: Int
    /// <p>The output format: <code>SequenceFileOutputFormat</code> (binary),
    ///       or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>
    public let outputFormat: String?
    /// <p>The user-supplied properties in key-value form.</p>
    public let parameters: [String:String]?
    /// <p>An object that references a schema stored in the AWS Glue Schema Registry.</p>
    /// 	
    /// 	        <p>When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.</p>
    public let schemaReference: SchemaReference?
    /// <p>The serialization/deserialization (SerDe) information.</p>
    public let serdeInfo: SerDeInfo?
    /// <p>The information about values that appear frequently in a column (skewed values).</p>
    public let skewedInfo: SkewedInfo?
    /// <p>A list specifying the sort order of each bucket in the table.</p>
    public let sortColumns: [Order]?
    /// <p>
    ///             <code>True</code> if the table data is stored in subdirectories, or <code>False</code> if
    ///       not.</p>
    public let storedAsSubDirectories: Bool

    public init (
        bucketColumns: [String]? = nil,
        columns: [Column]? = nil,
        compressed: Bool = false,
        inputFormat: String? = nil,
        location: String? = nil,
        numberOfBuckets: Int = 0,
        outputFormat: String? = nil,
        parameters: [String:String]? = nil,
        schemaReference: SchemaReference? = nil,
        serdeInfo: SerDeInfo? = nil,
        skewedInfo: SkewedInfo? = nil,
        sortColumns: [Order]? = nil,
        storedAsSubDirectories: Bool = false
    )
    {
        self.bucketColumns = bucketColumns
        self.columns = columns
        self.compressed = compressed
        self.inputFormat = inputFormat
        self.location = location
        self.numberOfBuckets = numberOfBuckets
        self.outputFormat = outputFormat
        self.parameters = parameters
        self.schemaReference = schemaReference
        self.serdeInfo = serdeInfo
        self.skewedInfo = skewedInfo
        self.sortColumns = sortColumns
        self.storedAsSubDirectories = storedAsSubDirectories
    }
}
