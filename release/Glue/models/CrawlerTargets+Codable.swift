// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CrawlerTargets: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogTargets = "CatalogTargets"
        case dynamoDBTargets = "DynamoDBTargets"
        case jdbcTargets = "JdbcTargets"
        case mongoDBTargets = "MongoDBTargets"
        case s3Targets = "S3Targets"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogTargets = catalogTargets {
            var catalogTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .catalogTargets)
            for catalogtargetlist0 in catalogTargets {
                try catalogTargetsContainer.encode(catalogtargetlist0)
            }
        }
        if let dynamoDBTargets = dynamoDBTargets {
            var dynamoDBTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dynamoDBTargets)
            for dynamodbtargetlist0 in dynamoDBTargets {
                try dynamoDBTargetsContainer.encode(dynamodbtargetlist0)
            }
        }
        if let jdbcTargets = jdbcTargets {
            var jdbcTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jdbcTargets)
            for jdbctargetlist0 in jdbcTargets {
                try jdbcTargetsContainer.encode(jdbctargetlist0)
            }
        }
        if let mongoDBTargets = mongoDBTargets {
            var mongoDBTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mongoDBTargets)
            for mongodbtargetlist0 in mongoDBTargets {
                try mongoDBTargetsContainer.encode(mongodbtargetlist0)
            }
        }
        if let s3Targets = s3Targets {
            var s3TargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .s3Targets)
            for s3targetlist0 in s3Targets {
                try s3TargetsContainer.encode(s3targetlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3TargetsContainer = try containerValues.decodeIfPresent([S3Target].self, forKey: .s3Targets)
        var s3TargetsDecoded0:[S3Target]? = nil
        if let s3TargetsContainer = s3TargetsContainer {
            s3TargetsDecoded0 = [S3Target]()
            for structure0 in s3TargetsContainer {
                s3TargetsDecoded0?.append(structure0)
            }
        }
        s3Targets = s3TargetsDecoded0
        let jdbcTargetsContainer = try containerValues.decodeIfPresent([JdbcTarget].self, forKey: .jdbcTargets)
        var jdbcTargetsDecoded0:[JdbcTarget]? = nil
        if let jdbcTargetsContainer = jdbcTargetsContainer {
            jdbcTargetsDecoded0 = [JdbcTarget]()
            for structure0 in jdbcTargetsContainer {
                jdbcTargetsDecoded0?.append(structure0)
            }
        }
        jdbcTargets = jdbcTargetsDecoded0
        let mongoDBTargetsContainer = try containerValues.decodeIfPresent([MongoDBTarget].self, forKey: .mongoDBTargets)
        var mongoDBTargetsDecoded0:[MongoDBTarget]? = nil
        if let mongoDBTargetsContainer = mongoDBTargetsContainer {
            mongoDBTargetsDecoded0 = [MongoDBTarget]()
            for structure0 in mongoDBTargetsContainer {
                mongoDBTargetsDecoded0?.append(structure0)
            }
        }
        mongoDBTargets = mongoDBTargetsDecoded0
        let dynamoDBTargetsContainer = try containerValues.decodeIfPresent([DynamoDBTarget].self, forKey: .dynamoDBTargets)
        var dynamoDBTargetsDecoded0:[DynamoDBTarget]? = nil
        if let dynamoDBTargetsContainer = dynamoDBTargetsContainer {
            dynamoDBTargetsDecoded0 = [DynamoDBTarget]()
            for structure0 in dynamoDBTargetsContainer {
                dynamoDBTargetsDecoded0?.append(structure0)
            }
        }
        dynamoDBTargets = dynamoDBTargetsDecoded0
        let catalogTargetsContainer = try containerValues.decodeIfPresent([CatalogTarget].self, forKey: .catalogTargets)
        var catalogTargetsDecoded0:[CatalogTarget]? = nil
        if let catalogTargetsContainer = catalogTargetsContainer {
            catalogTargetsDecoded0 = [CatalogTarget]()
            for structure0 in catalogTargetsContainer {
                catalogTargetsDecoded0?.append(structure0)
            }
        }
        catalogTargets = catalogTargetsDecoded0
    }
}
