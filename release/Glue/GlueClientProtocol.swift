// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS Glue</fullname>
///          <p>Defines the public endpoint for the AWS Glue service.</p>
public protocol GlueClientProtocol {
    /// <p>Creates one or more partitions in a batch operation.</p>
    func batchCreatePartition(input: BatchCreatePartitionInput, completion: @escaping (SdkResult<BatchCreatePartitionOutputResponse, BatchCreatePartitionOutputError>) -> Void)
    /// <p>Deletes a list of connection definitions from the Data Catalog.</p>
    func batchDeleteConnection(input: BatchDeleteConnectionInput, completion: @escaping (SdkResult<BatchDeleteConnectionOutputResponse, BatchDeleteConnectionOutputError>) -> Void)
    /// <p>Deletes one or more partitions in a batch operation.</p>
    func batchDeletePartition(input: BatchDeletePartitionInput, completion: @escaping (SdkResult<BatchDeletePartitionOutputResponse, BatchDeletePartitionOutputError>) -> Void)
    /// <p>Deletes multiple tables at once.</p>
    ///          <note>
    ///             <p>After completing this operation, you no longer have access to the table versions and
    ///         partitions that belong to the deleted table. AWS Glue deletes these "orphaned" resources
    ///         asynchronously in a timely manner, at the discretion of the service.</p>
    ///             <p>To ensure the immediate deletion of all related resources, before calling
    ///           <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or
    ///           <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or
    ///           <code>BatchDeletePartition</code>, to delete any resources that belong to the
    ///         table.</p>
    ///          </note>
    func batchDeleteTable(input: BatchDeleteTableInput, completion: @escaping (SdkResult<BatchDeleteTableOutputResponse, BatchDeleteTableOutputError>) -> Void)
    /// <p>Deletes a specified batch of versions of a table.</p>
    func batchDeleteTableVersion(input: BatchDeleteTableVersionInput, completion: @escaping (SdkResult<BatchDeleteTableVersionOutputResponse, BatchDeleteTableVersionOutputError>) -> Void)
    /// <p>Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
    func batchGetCrawlers(input: BatchGetCrawlersInput, completion: @escaping (SdkResult<BatchGetCrawlersOutputResponse, BatchGetCrawlersOutputError>) -> Void)
    /// <p>Returns a list of resource metadata for a given list of development endpoint names. After
    ///       calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the
    ///       data to which you have been granted permissions. This operation supports all IAM permissions,
    ///       including permission conditions that uses tags.</p>
    func batchGetDevEndpoints(input: BatchGetDevEndpointsInput, completion: @escaping (SdkResult<BatchGetDevEndpointsOutputResponse, BatchGetDevEndpointsOutputError>) -> Void)
    /// <p>Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
    /// </p>
    func batchGetJobs(input: BatchGetJobsInput, completion: @escaping (SdkResult<BatchGetJobsOutputResponse, BatchGetJobsOutputError>) -> Void)
    /// <p>Retrieves partitions in a batch request.</p>
    func batchGetPartition(input: BatchGetPartitionInput, completion: @escaping (SdkResult<BatchGetPartitionOutputResponse, BatchGetPartitionOutputError>) -> Void)
    /// <p>Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
    func batchGetTriggers(input: BatchGetTriggersInput, completion: @escaping (SdkResult<BatchGetTriggersOutputResponse, BatchGetTriggersOutputError>) -> Void)
    /// <p>Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
    func batchGetWorkflows(input: BatchGetWorkflowsInput, completion: @escaping (SdkResult<BatchGetWorkflowsOutputResponse, BatchGetWorkflowsOutputError>) -> Void)
    /// <p>Stops one or more job runs for a specified job definition.</p>
    func batchStopJobRun(input: BatchStopJobRunInput, completion: @escaping (SdkResult<BatchStopJobRunOutputResponse, BatchStopJobRunOutputError>) -> Void)
    /// <p>Updates one or more partitions in a batch operation.</p>
    func batchUpdatePartition(input: BatchUpdatePartitionInput, completion: @escaping (SdkResult<BatchUpdatePartitionOutputResponse, BatchUpdatePartitionOutputError>) -> Void)
    /// <p>Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that AWS
    ///       Glue runs on your behalf as part of various machine learning workflows. You can cancel a
    ///       machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task
    ///       run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>. </p>
    func cancelMLTaskRun(input: CancelMLTaskRunInput, completion: @escaping (SdkResult<CancelMLTaskRunOutputResponse, CancelMLTaskRunOutputError>) -> Void)
    /// <p>Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using <code>DataFormat</code> as the format. Since it does not take a schema set name, no compatibility checks are performed.</p>
    func checkSchemaVersionValidity(input: CheckSchemaVersionValidityInput, completion: @escaping (SdkResult<CheckSchemaVersionValidityOutputResponse, CheckSchemaVersionValidityOutputError>) -> Void)
    /// <p>Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an
    ///         <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>,
    ///       depending on which field of the request is present.</p>
    func createClassifier(input: CreateClassifierInput, completion: @escaping (SdkResult<CreateClassifierOutputResponse, CreateClassifierOutputError>) -> Void)
    /// <p>Creates a connection definition in the Data Catalog.</p>
    func createConnection(input: CreateConnectionInput, completion: @escaping (SdkResult<CreateConnectionOutputResponse, CreateConnectionOutputError>) -> Void)
    /// <p>Creates a new crawler with specified targets, role, configuration, and optional schedule.
    ///       At least one crawl target must be specified, in the <code>s3Targets</code> field, the
    ///         <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field.</p>
    func createCrawler(input: CreateCrawlerInput, completion: @escaping (SdkResult<CreateCrawlerOutputResponse, CreateCrawlerOutputError>) -> Void)
    /// <p>Creates a new database in a Data Catalog.</p>
    func createDatabase(input: CreateDatabaseInput, completion: @escaping (SdkResult<CreateDatabaseOutputResponse, CreateDatabaseOutputError>) -> Void)
    /// <p>Creates a new development endpoint.</p>
    func createDevEndpoint(input: CreateDevEndpointInput, completion: @escaping (SdkResult<CreateDevEndpointOutputResponse, CreateDevEndpointOutputError>) -> Void)
    /// <p>Creates a new job definition.</p>
    func createJob(input: CreateJobInput, completion: @escaping (SdkResult<CreateJobOutputResponse, CreateJobOutputError>) -> Void)
    /// <p>Creates an AWS Glue machine learning transform. This operation creates the transform and
    ///       all the necessary parameters to train it.</p>
    /// 	
    /// 	        <p>Call this operation as the first step in the process of using a machine learning transform
    ///       (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an
    ///       optional <code>Description</code>, in addition to the parameters that you want to use for your
    ///       algorithm.</p>
    ///
    ///          <p>You must also specify certain parameters for the tasks that AWS Glue runs on your
    ///       behalf as part of learning from your data and creating a high-quality machine learning
    ///       transform. These parameters include <code>Role</code>, and optionally,
    ///         <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more
    ///       information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html">Jobs</a>.</p>
    func createMLTransform(input: CreateMLTransformInput, completion: @escaping (SdkResult<CreateMLTransformOutputResponse, CreateMLTransformOutputError>) -> Void)
    /// <p>Creates a new partition.</p>
    func createPartition(input: CreatePartitionInput, completion: @escaping (SdkResult<CreatePartitionOutputResponse, CreatePartitionOutputError>) -> Void)
    /// <p>Creates a specified partition index in an existing table.</p>
    func createPartitionIndex(input: CreatePartitionIndexInput, completion: @escaping (SdkResult<CreatePartitionIndexOutputResponse, CreatePartitionIndexOutputError>) -> Void)
    /// <p>Creates a new registry which may be used to hold a collection of schemas.</p>
    func createRegistry(input: CreateRegistryInput, completion: @escaping (SdkResult<CreateRegistryOutputResponse, CreateRegistryOutputError>) -> Void)
    /// <p>Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.</p>
    ///          <p>When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode "DISABLED" restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the <code>RegisterSchemaVersion</code> API is used.</p>
    ///          <p>When this API is called without a <code>RegistryId</code>, this will create an entry for a "default-registry" in the registry database tables, if it is not already present.</p>
    func createSchema(input: CreateSchemaInput, completion: @escaping (SdkResult<CreateSchemaOutputResponse, CreateSchemaOutputError>) -> Void)
    /// <p>Transforms a directed acyclic graph (DAG) into code.</p>
    func createScript(input: CreateScriptInput, completion: @escaping (SdkResult<CreateScriptOutputResponse, CreateScriptOutputError>) -> Void)
    /// <p>Creates a new security configuration. A security configuration is a set of security properties that can be used by AWS Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in AWS Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>.</p>
    func createSecurityConfiguration(input: CreateSecurityConfigurationInput, completion: @escaping (SdkResult<CreateSecurityConfigurationOutputResponse, CreateSecurityConfigurationOutputError>) -> Void)
    /// <p>Creates a new table definition in the Data Catalog.</p>
    func createTable(input: CreateTableInput, completion: @escaping (SdkResult<CreateTableOutputResponse, CreateTableOutputError>) -> Void)
    /// <p>Creates a new trigger.</p>
    func createTrigger(input: CreateTriggerInput, completion: @escaping (SdkResult<CreateTriggerOutputResponse, CreateTriggerOutputError>) -> Void)
    /// <p>Creates a new function definition in the Data Catalog.</p>
    func createUserDefinedFunction(input: CreateUserDefinedFunctionInput, completion: @escaping (SdkResult<CreateUserDefinedFunctionOutputResponse, CreateUserDefinedFunctionOutputError>) -> Void)
    /// <p>Creates a new workflow.</p>
    func createWorkflow(input: CreateWorkflowInput, completion: @escaping (SdkResult<CreateWorkflowOutputResponse, CreateWorkflowOutputError>) -> Void)
    /// <p>Removes a classifier from the Data Catalog.</p>
    func deleteClassifier(input: DeleteClassifierInput, completion: @escaping (SdkResult<DeleteClassifierOutputResponse, DeleteClassifierOutputError>) -> Void)
    /// <p>Delete the partition column statistics of a column.</p>
    /// 	
    /// 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeletePartition</code>.</p>
    func deleteColumnStatisticsForPartition(input: DeleteColumnStatisticsForPartitionInput, completion: @escaping (SdkResult<DeleteColumnStatisticsForPartitionOutputResponse, DeleteColumnStatisticsForPartitionOutputError>) -> Void)
    /// <p>Retrieves table statistics of columns.</p>
    /// 	
    /// 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeleteTable</code>.</p>
    func deleteColumnStatisticsForTable(input: DeleteColumnStatisticsForTableInput, completion: @escaping (SdkResult<DeleteColumnStatisticsForTableOutputResponse, DeleteColumnStatisticsForTableOutputError>) -> Void)
    /// <p>Deletes a connection from the Data Catalog.</p>
    func deleteConnection(input: DeleteConnectionInput, completion: @escaping (SdkResult<DeleteConnectionOutputResponse, DeleteConnectionOutputError>) -> Void)
    /// <p>Removes a specified crawler from the AWS Glue Data Catalog, unless the crawler state is
    ///         <code>RUNNING</code>.</p>
    func deleteCrawler(input: DeleteCrawlerInput, completion: @escaping (SdkResult<DeleteCrawlerOutputResponse, DeleteCrawlerOutputError>) -> Void)
    /// <p>Removes a specified database from a Data Catalog.</p>
    ///          <note>
    ///             <p>After completing this operation, you no longer have access to the tables (and all table
    ///         versions and partitions that might belong to the tables) and the user-defined functions in
    ///         the deleted database. AWS Glue deletes these "orphaned" resources asynchronously in a timely
    ///         manner, at the discretion of the service.</p>
    ///             <p>To ensure the immediate deletion of all related resources, before calling
    ///           <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or
    ///           <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or
    ///           <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and
    ///           <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that
    ///         belong to the database.</p>
    ///          </note>
    func deleteDatabase(input: DeleteDatabaseInput, completion: @escaping (SdkResult<DeleteDatabaseOutputResponse, DeleteDatabaseOutputError>) -> Void)
    /// <p>Deletes a specified development endpoint.</p>
    func deleteDevEndpoint(input: DeleteDevEndpointInput, completion: @escaping (SdkResult<DeleteDevEndpointOutputResponse, DeleteDevEndpointOutputError>) -> Void)
    /// <p>Deletes a specified job definition. If the job definition
    ///       is not found, no exception is thrown.</p>
    func deleteJob(input: DeleteJobInput, completion: @escaping (SdkResult<DeleteJobOutputResponse, DeleteJobOutputError>) -> Void)
    /// <p>Deletes an AWS Glue machine learning transform. Machine learning transforms are a special
    ///       type of transform that use machine learning to learn the details of the transformation to be
    ///       performed by learning from examples provided by humans. These transformations are then saved
    ///       by AWS Glue. If you no longer need a transform, you can delete it by calling
    ///         <code>DeleteMLTransforms</code>. However, any AWS Glue jobs that still reference the deleted
    ///       transform will no longer succeed.</p>
    func deleteMLTransform(input: DeleteMLTransformInput, completion: @escaping (SdkResult<DeleteMLTransformOutputResponse, DeleteMLTransformOutputError>) -> Void)
    /// <p>Deletes a specified partition.</p>
    func deletePartition(input: DeletePartitionInput, completion: @escaping (SdkResult<DeletePartitionOutputResponse, DeletePartitionOutputError>) -> Void)
    /// <p>Deletes a specified partition index from an existing table.</p>
    func deletePartitionIndex(input: DeletePartitionIndexInput, completion: @escaping (SdkResult<DeletePartitionIndexOutputResponse, DeletePartitionIndexOutputError>) -> Void)
    /// <p>Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the <code>GetRegistry</code> API after the asynchronous call. Deleting a registry will disable all online operations for the registry such as the <code>UpdateRegistry</code>, <code>CreateSchema</code>, <code>UpdateSchema</code>, and <code>RegisterSchemaVersion</code> APIs. </p>
    func deleteRegistry(input: DeleteRegistryInput, completion: @escaping (SdkResult<DeleteRegistryOutputResponse, DeleteRegistryOutputError>) -> Void)
    /// <p>Deletes a specified policy.</p>
    func deleteResourcePolicy(input: DeleteResourcePolicyInput, completion: @escaping (SdkResult<DeleteResourcePolicyOutputResponse, DeleteResourcePolicyOutputError>) -> Void)
    /// <p>Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call <code>GetSchema</code> API after the asynchronous call. Deleting a registry will disable all online operations for the schema, such as the <code>GetSchemaByDefinition</code>, and <code>RegisterSchemaVersion</code> APIs.</p>
    func deleteSchema(input: DeleteSchemaInput, completion: @escaping (SdkResult<DeleteSchemaOutputResponse, DeleteSchemaOutputError>) -> Void)
    /// <p>Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.  Calling the <code>GetSchemaVersions</code> API after this call will list the status of the deleted versions.</p>
    ///          <p>When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the <code>DeleteSchemaCheckpoint</code> API before using this API.</p>
    ///          <p>You cannot use the <code>DeleteSchemaVersions</code> API to delete the first schema version in the schema set. The first schema version can only be deleted by the <code>DeleteSchema</code> API. This operation will also delete the attached <code>SchemaVersionMetadata</code> under the schema versions. Hard deletes will be enforced on the database.</p>
    ///          <p>If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.</p>
    func deleteSchemaVersions(input: DeleteSchemaVersionsInput, completion: @escaping (SdkResult<DeleteSchemaVersionsOutputResponse, DeleteSchemaVersionsOutputError>) -> Void)
    /// <p>Deletes a specified security configuration.</p>
    func deleteSecurityConfiguration(input: DeleteSecurityConfigurationInput, completion: @escaping (SdkResult<DeleteSecurityConfigurationOutputResponse, DeleteSecurityConfigurationOutputError>) -> Void)
    /// <p>Removes a table definition from the Data Catalog.</p>
    ///          <note>
    ///             <p>After completing this operation, you no longer have access to the table versions and
    ///         partitions that belong to the deleted table. AWS Glue deletes these "orphaned" resources
    ///         asynchronously in a timely manner, at the discretion of the service.</p>
    ///             <p>To ensure the immediate deletion of all related resources, before calling
    ///           <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or
    ///           <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or
    ///           <code>BatchDeletePartition</code>, to delete any resources that belong to the
    ///         table.</p>
    ///          </note>
    func deleteTable(input: DeleteTableInput, completion: @escaping (SdkResult<DeleteTableOutputResponse, DeleteTableOutputError>) -> Void)
    /// <p>Deletes a specified version of a table.</p>
    func deleteTableVersion(input: DeleteTableVersionInput, completion: @escaping (SdkResult<DeleteTableVersionOutputResponse, DeleteTableVersionOutputError>) -> Void)
    /// <p>Deletes a specified trigger. If the trigger is not found, no
    ///       exception is thrown.</p>
    func deleteTrigger(input: DeleteTriggerInput, completion: @escaping (SdkResult<DeleteTriggerOutputResponse, DeleteTriggerOutputError>) -> Void)
    /// <p>Deletes an existing function definition from the Data Catalog.</p>
    func deleteUserDefinedFunction(input: DeleteUserDefinedFunctionInput, completion: @escaping (SdkResult<DeleteUserDefinedFunctionOutputResponse, DeleteUserDefinedFunctionOutputError>) -> Void)
    /// <p>Deletes a workflow.</p>
    func deleteWorkflow(input: DeleteWorkflowInput, completion: @escaping (SdkResult<DeleteWorkflowOutputResponse, DeleteWorkflowOutputError>) -> Void)
    /// <p>Retrieves the status of a migration operation.</p>
    func getCatalogImportStatus(input: GetCatalogImportStatusInput, completion: @escaping (SdkResult<GetCatalogImportStatusOutputResponse, GetCatalogImportStatusOutputError>) -> Void)
    /// <p>Retrieve a classifier by name.</p>
    func getClassifier(input: GetClassifierInput, completion: @escaping (SdkResult<GetClassifierOutputResponse, GetClassifierOutputError>) -> Void)
    /// <p>Lists all classifier objects in the Data Catalog.</p>
    func getClassifiers(input: GetClassifiersInput, completion: @escaping (SdkResult<GetClassifiersOutputResponse, GetClassifiersOutputError>) -> Void)
    /// <p>Retrieves partition statistics of columns.</p>
    /// 	
    /// 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetPartition</code>.</p>
    func getColumnStatisticsForPartition(input: GetColumnStatisticsForPartitionInput, completion: @escaping (SdkResult<GetColumnStatisticsForPartitionOutputResponse, GetColumnStatisticsForPartitionOutputError>) -> Void)
    /// <p>Retrieves table statistics of columns.</p>
    /// 	
    ///          <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetTable</code>.</p>
    func getColumnStatisticsForTable(input: GetColumnStatisticsForTableInput, completion: @escaping (SdkResult<GetColumnStatisticsForTableOutputResponse, GetColumnStatisticsForTableOutputError>) -> Void)
    /// <p>Retrieves a connection definition from the Data Catalog.</p>
    func getConnection(input: GetConnectionInput, completion: @escaping (SdkResult<GetConnectionOutputResponse, GetConnectionOutputError>) -> Void)
    /// <p>Retrieves a list of connection definitions from the Data Catalog.</p>
    func getConnections(input: GetConnectionsInput, completion: @escaping (SdkResult<GetConnectionsOutputResponse, GetConnectionsOutputError>) -> Void)
    /// <p>Retrieves metadata for a specified crawler.</p>
    func getCrawler(input: GetCrawlerInput, completion: @escaping (SdkResult<GetCrawlerOutputResponse, GetCrawlerOutputError>) -> Void)
    /// <p>Retrieves metrics about specified crawlers.</p>
    func getCrawlerMetrics(input: GetCrawlerMetricsInput, completion: @escaping (SdkResult<GetCrawlerMetricsOutputResponse, GetCrawlerMetricsOutputError>) -> Void)
    /// <p>Retrieves metadata for all crawlers defined in the customer
    ///       account.</p>
    func getCrawlers(input: GetCrawlersInput, completion: @escaping (SdkResult<GetCrawlersOutputResponse, GetCrawlersOutputError>) -> Void)
    /// <p>Retrieves the definition of a specified database.</p>
    func getDatabase(input: GetDatabaseInput, completion: @escaping (SdkResult<GetDatabaseOutputResponse, GetDatabaseOutputError>) -> Void)
    /// <p>Retrieves all databases defined in a given Data Catalog.</p>
    func getDatabases(input: GetDatabasesInput, completion: @escaping (SdkResult<GetDatabasesOutputResponse, GetDatabasesOutputError>) -> Void)
    /// <p>Retrieves the security configuration for a specified catalog.</p>
    func getDataCatalogEncryptionSettings(input: GetDataCatalogEncryptionSettingsInput, completion: @escaping (SdkResult<GetDataCatalogEncryptionSettingsOutputResponse, GetDataCatalogEncryptionSettingsOutputError>) -> Void)
    /// <p>Transforms a Python script into a directed acyclic graph (DAG). </p>
    func getDataflowGraph(input: GetDataflowGraphInput, completion: @escaping (SdkResult<GetDataflowGraphOutputResponse, GetDataflowGraphOutputError>) -> Void)
    /// <p>Retrieves information about a specified development endpoint.</p>
    ///          <note>
    ///             <p>When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only
    ///         a private IP address, and the public IP address field is not populated. When you create a
    ///         non-VPC development endpoint, AWS Glue returns only a public IP address.</p>
    ///          </note>
    func getDevEndpoint(input: GetDevEndpointInput, completion: @escaping (SdkResult<GetDevEndpointOutputResponse, GetDevEndpointOutputError>) -> Void)
    /// <p>Retrieves all the development endpoints in this AWS account.</p>
    ///          <note>
    ///             <p>When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address
    ///       and the public IP address field is not populated. When you create a non-VPC development
    ///       endpoint, AWS Glue returns only a public IP address.</p>
    ///          </note>
    func getDevEndpoints(input: GetDevEndpointsInput, completion: @escaping (SdkResult<GetDevEndpointsOutputResponse, GetDevEndpointsOutputError>) -> Void)
    /// <p>Retrieves an existing job definition.</p>
    func getJob(input: GetJobInput, completion: @escaping (SdkResult<GetJobOutputResponse, GetJobOutputError>) -> Void)
    /// <p>Returns information on a job bookmark entry.</p>
    func getJobBookmark(input: GetJobBookmarkInput, completion: @escaping (SdkResult<GetJobBookmarkOutputResponse, GetJobBookmarkOutputError>) -> Void)
    /// <p>Retrieves the metadata for a given job run.</p>
    func getJobRun(input: GetJobRunInput, completion: @escaping (SdkResult<GetJobRunOutputResponse, GetJobRunOutputError>) -> Void)
    /// <p>Retrieves metadata for all runs of a given job definition.</p>
    func getJobRuns(input: GetJobRunsInput, completion: @escaping (SdkResult<GetJobRunsOutputResponse, GetJobRunsOutputError>) -> Void)
    /// <p>Retrieves all current job definitions.</p>
    func getJobs(input: GetJobsInput, completion: @escaping (SdkResult<GetJobsOutputResponse, GetJobsOutputError>) -> Void)
    /// <p>Creates mappings.</p>
    func getMapping(input: GetMappingInput, completion: @escaping (SdkResult<GetMappingOutputResponse, GetMappingOutputError>) -> Void)
    /// <p>Gets details for a specific task run on a machine learning transform. Machine learning
    ///       task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine
    ///       learning workflows. You can check the stats of any task run by calling
    ///         <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's
    ///         <code>TransformID</code>.</p>
    func getMLTaskRun(input: GetMLTaskRunInput, completion: @escaping (SdkResult<GetMLTaskRunOutputResponse, GetMLTaskRunOutputError>) -> Void)
    /// <p>Gets a list of runs for a machine learning transform. Machine learning task runs are
    ///       asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning
    ///       workflows. You can get a sortable, filterable list of machine learning task runs by calling
    ///         <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other
    ///       optional parameters as documented in this section.</p>
    /// 	
    /// 	        <p>This operation returns a list of historic runs and must be paginated.</p>
    func getMLTaskRuns(input: GetMLTaskRunsInput, completion: @escaping (SdkResult<GetMLTaskRunsOutputResponse, GetMLTaskRunsOutputError>) -> Void)
    /// <p>Gets an AWS Glue machine learning transform artifact and all its corresponding metadata.
    ///       Machine learning transforms are a special type of transform that use machine learning to learn
    ///       the details of the transformation to be performed by learning from examples provided by
    ///       humans. These transformations are then saved by AWS Glue. You can retrieve their metadata by
    ///       calling <code>GetMLTransform</code>.</p>
    func getMLTransform(input: GetMLTransformInput, completion: @escaping (SdkResult<GetMLTransformOutputResponse, GetMLTransformOutputError>) -> Void)
    /// <p>Gets a sortable, filterable list of existing AWS Glue machine learning transforms. Machine
    ///       learning transforms are a special type of transform that use machine learning to learn the
    ///       details of the transformation to be performed by learning from examples provided by humans.
    ///       These transformations are then saved by AWS Glue, and you can retrieve their metadata by
    ///       calling <code>GetMLTransforms</code>.</p>
    func getMLTransforms(input: GetMLTransformsInput, completion: @escaping (SdkResult<GetMLTransformsOutputResponse, GetMLTransformsOutputError>) -> Void)
    /// <p>Retrieves information about a specified partition.</p>
    func getPartition(input: GetPartitionInput, completion: @escaping (SdkResult<GetPartitionOutputResponse, GetPartitionOutputError>) -> Void)
    /// <p>Retrieves the partition indexes associated with a table.</p>
    func getPartitionIndexes(input: GetPartitionIndexesInput, completion: @escaping (SdkResult<GetPartitionIndexesOutputResponse, GetPartitionIndexesOutputError>) -> Void)
    /// <p>Retrieves information about the partitions in a table.</p>
    func getPartitions(input: GetPartitionsInput, completion: @escaping (SdkResult<GetPartitionsOutputResponse, GetPartitionsOutputError>) -> Void)
    /// <p>Gets code to perform a specified mapping.</p>
    func getPlan(input: GetPlanInput, completion: @escaping (SdkResult<GetPlanOutputResponse, GetPlanOutputError>) -> Void)
    /// <p>Describes the specified registry in detail.</p>
    func getRegistry(input: GetRegistryInput, completion: @escaping (SdkResult<GetRegistryOutputResponse, GetRegistryOutputError>) -> Void)
    /// <p>Retrieves the resource policies set on individual resources by AWS Resource Access Manager
    ///       during cross-account permission grants. Also retrieves the Data Catalog resource
    ///       policy.</p>
    ///          <p>If you enabled metadata encryption in Data Catalog settings, and you do not have
    ///       permission on the AWS KMS key, the operation can't return the Data Catalog resource
    ///       policy.</p>
    func getResourcePolicies(input: GetResourcePoliciesInput, completion: @escaping (SdkResult<GetResourcePoliciesOutputResponse, GetResourcePoliciesOutputError>) -> Void)
    /// <p>Retrieves a specified resource policy.</p>
    func getResourcePolicy(input: GetResourcePolicyInput, completion: @escaping (SdkResult<GetResourcePolicyOutputResponse, GetResourcePolicyOutputError>) -> Void)
    /// <p>Describes the specified schema in detail.</p>
    func getSchema(input: GetSchemaInput, completion: @escaping (SdkResult<GetSchemaOutputResponse, GetSchemaOutputError>) -> Void)
    /// <p>Retrieves a schema by the <code>SchemaDefinition</code>. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the <code>SchemaName</code> or ARN (or the default registry, if none is supplied), that schema’s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in <code>Deleted</code> statuses will not be included in the results.</p>
    func getSchemaByDefinition(input: GetSchemaByDefinitionInput, completion: @escaping (SdkResult<GetSchemaByDefinitionOutputResponse, GetSchemaByDefinitionOutputError>) -> Void)
    /// <p>Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results.</p>
    func getSchemaVersion(input: GetSchemaVersionInput, completion: @escaping (SdkResult<GetSchemaVersionOutputResponse, GetSchemaVersionOutputError>) -> Void)
    /// <p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p>
    ///          <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p>
    func getSchemaVersionsDiff(input: GetSchemaVersionsDiffInput, completion: @escaping (SdkResult<GetSchemaVersionsDiffOutputResponse, GetSchemaVersionsDiffOutputError>) -> Void)
    /// <p>Retrieves a specified security configuration.</p>
    func getSecurityConfiguration(input: GetSecurityConfigurationInput, completion: @escaping (SdkResult<GetSecurityConfigurationOutputResponse, GetSecurityConfigurationOutputError>) -> Void)
    /// <p>Retrieves a list of all security configurations.</p>
    func getSecurityConfigurations(input: GetSecurityConfigurationsInput, completion: @escaping (SdkResult<GetSecurityConfigurationsOutputResponse, GetSecurityConfigurationsOutputError>) -> Void)
    /// <p>Retrieves the <code>Table</code> definition in a Data Catalog for
    ///       a specified table.</p>
    func getTable(input: GetTableInput, completion: @escaping (SdkResult<GetTableOutputResponse, GetTableOutputError>) -> Void)
    /// <p>Retrieves the definitions of some or all of the tables in a given
    ///       <code>Database</code>.</p>
    func getTables(input: GetTablesInput, completion: @escaping (SdkResult<GetTablesOutputResponse, GetTablesOutputError>) -> Void)
    /// <p>Retrieves a specified version of a table.</p>
    func getTableVersion(input: GetTableVersionInput, completion: @escaping (SdkResult<GetTableVersionOutputResponse, GetTableVersionOutputError>) -> Void)
    /// <p>Retrieves a list of strings that identify available versions of
    ///       a specified table.</p>
    func getTableVersions(input: GetTableVersionsInput, completion: @escaping (SdkResult<GetTableVersionsOutputResponse, GetTableVersionsOutputError>) -> Void)
    /// <p>Retrieves a list of tags associated with a resource.</p>
    func getTags(input: GetTagsInput, completion: @escaping (SdkResult<GetTagsOutputResponse, GetTagsOutputError>) -> Void)
    /// <p>Retrieves the definition of a trigger.</p>
    func getTrigger(input: GetTriggerInput, completion: @escaping (SdkResult<GetTriggerOutputResponse, GetTriggerOutputError>) -> Void)
    /// <p>Gets all the triggers associated with a job.</p>
    func getTriggers(input: GetTriggersInput, completion: @escaping (SdkResult<GetTriggersOutputResponse, GetTriggersOutputError>) -> Void)
    /// <p>Retrieves a specified function definition from the Data Catalog.</p>
    func getUserDefinedFunction(input: GetUserDefinedFunctionInput, completion: @escaping (SdkResult<GetUserDefinedFunctionOutputResponse, GetUserDefinedFunctionOutputError>) -> Void)
    /// <p>Retrieves multiple function definitions from the Data Catalog.</p>
    func getUserDefinedFunctions(input: GetUserDefinedFunctionsInput, completion: @escaping (SdkResult<GetUserDefinedFunctionsOutputResponse, GetUserDefinedFunctionsOutputError>) -> Void)
    /// <p>Retrieves resource metadata for a workflow.</p>
    func getWorkflow(input: GetWorkflowInput, completion: @escaping (SdkResult<GetWorkflowOutputResponse, GetWorkflowOutputError>) -> Void)
    /// <p>Retrieves the metadata for a given workflow run. </p>
    func getWorkflowRun(input: GetWorkflowRunInput, completion: @escaping (SdkResult<GetWorkflowRunOutputResponse, GetWorkflowRunOutputError>) -> Void)
    /// <p>Retrieves the workflow run properties which were set during the run.</p>
    func getWorkflowRunProperties(input: GetWorkflowRunPropertiesInput, completion: @escaping (SdkResult<GetWorkflowRunPropertiesOutputResponse, GetWorkflowRunPropertiesOutputError>) -> Void)
    /// <p>Retrieves metadata for all runs of a given workflow.</p>
    func getWorkflowRuns(input: GetWorkflowRunsInput, completion: @escaping (SdkResult<GetWorkflowRunsOutputResponse, GetWorkflowRunsOutputError>) -> Void)
    /// <p>Imports an existing Amazon Athena Data Catalog to AWS Glue</p>
    func importCatalogToGlue(input: ImportCatalogToGlueInput, completion: @escaping (SdkResult<ImportCatalogToGlueOutputResponse, ImportCatalogToGlueOutputError>) -> Void)
    /// <p>Retrieves the names of all crawler resources in this AWS account, or the
    ///       resources with the specified tag. This operation allows you to see which
    ///       resources are available in your account, and their names.</p>
    ///
    ///          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
    ///       the response so that tagged resources can be retrieved as a group. If you choose to use tags
    ///       filtering, only resources with the tag are retrieved.</p>
    func listCrawlers(input: ListCrawlersInput, completion: @escaping (SdkResult<ListCrawlersOutputResponse, ListCrawlersOutputError>) -> Void)
    /// <p>Retrieves the names of all <code>DevEndpoint</code> resources in this AWS account, or the
    ///       resources with the specified tag. This operation allows you to see which resources are
    ///       available in your account, and their names.</p>
    ///
    ///          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
    ///       the response so that tagged resources can be retrieved as a group. If you choose to use tags
    ///       filtering, only resources with the tag are retrieved.</p>
    func listDevEndpoints(input: ListDevEndpointsInput, completion: @escaping (SdkResult<ListDevEndpointsOutputResponse, ListDevEndpointsOutputError>) -> Void)
    /// <p>Retrieves the names of all job resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p>
    /// 	
    /// 	        <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
    ///       the response so that tagged resources can be retrieved as a group. If you choose to use tags
    ///       filtering, only resources with the tag are retrieved.</p>
    func listJobs(input: ListJobsInput, completion: @escaping (SdkResult<ListJobsOutputResponse, ListJobsOutputError>) -> Void)
    /// <p> Retrieves a sortable, filterable list of existing AWS Glue machine learning transforms in this AWS account,
    ///        or the resources with the specified tag. This operation takes the optional <code>Tags</code> field, which you can use as
    ///        a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag
    ///        filtering, only resources with the tags are retrieved.
    ///      </p>
    func listMLTransforms(input: ListMLTransformsInput, completion: @escaping (SdkResult<ListMLTransformsOutputResponse, ListMLTransformsOutputError>) -> Void)
    /// <p>Returns a list of registries that you have created, with minimal registry information. Registries in the <code>Deleting</code> status will not be included in the results. Empty results will be returned if there are no registries available.</p>
    func listRegistries(input: ListRegistriesInput, completion: @escaping (SdkResult<ListRegistriesOutputResponse, ListRegistriesOutputError>) -> Void)
    /// <p>Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.</p>
    ///          <p>When the <code>RegistryId</code> is not provided, all the schemas across registries will be part of the API response.</p>
    func listSchemas(input: ListSchemasInput, completion: @escaping (SdkResult<ListSchemasOutputResponse, ListSchemasOutputError>) -> Void)
    /// <p>Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available.</p>
    func listSchemaVersions(input: ListSchemaVersionsInput, completion: @escaping (SdkResult<ListSchemaVersionsOutputResponse, ListSchemaVersionsOutputError>) -> Void)
    /// <p>Retrieves the names of all trigger resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p>
    ///
    ///          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
    ///       the response so that tagged resources can be retrieved as a group. If you choose to use tags
    ///       filtering, only resources with the tag are retrieved.</p>
    func listTriggers(input: ListTriggersInput, completion: @escaping (SdkResult<ListTriggersOutputResponse, ListTriggersOutputError>) -> Void)
    /// <p>Lists names of workflows created in the account.</p>
    func listWorkflows(input: ListWorkflowsInput, completion: @escaping (SdkResult<ListWorkflowsOutputResponse, ListWorkflowsOutputError>) -> Void)
    /// <p>Sets the security configuration for a specified catalog. After the configuration has been
    ///       set, the specified encryption is applied to every catalog write thereafter.</p>
    func putDataCatalogEncryptionSettings(input: PutDataCatalogEncryptionSettingsInput, completion: @escaping (SdkResult<PutDataCatalogEncryptionSettingsOutputResponse, PutDataCatalogEncryptionSettingsOutputError>) -> Void)
    /// <p>Sets the Data Catalog resource policy for access control.</p>
    func putResourcePolicy(input: PutResourcePolicyInput, completion: @escaping (SdkResult<PutResourcePolicyOutputResponse, PutResourcePolicyOutputError>) -> Void)
    /// <p>Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls.</p>
    func putSchemaVersionMetadata(input: PutSchemaVersionMetadataInput, completion: @escaping (SdkResult<PutSchemaVersionMetadataOutputResponse, PutSchemaVersionMetadataOutputError>) -> Void)
    /// <p>Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.</p>
    func putWorkflowRunProperties(input: PutWorkflowRunPropertiesInput, completion: @escaping (SdkResult<PutWorkflowRunPropertiesOutputResponse, PutWorkflowRunPropertiesOutputError>) -> Void)
    /// <p>Queries for the schema version metadata information. </p>
    func querySchemaVersionMetadata(input: QuerySchemaVersionMetadataInput, completion: @escaping (SdkResult<QuerySchemaVersionMetadataOutputResponse, QuerySchemaVersionMetadataOutputError>) -> Void)
    /// <p>Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.</p>
    ///          <p>If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the <code>GetSchemaVersion</code> API with the <code>SchemaVersionId</code> to check compatibility modes.</p>
    /// 	        <p>If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.</p>
    func registerSchemaVersion(input: RegisterSchemaVersionInput, completion: @escaping (SdkResult<RegisterSchemaVersionOutputResponse, RegisterSchemaVersionOutputError>) -> Void)
    /// <p>Removes a key value pair from the schema version metadata for the specified schema version ID.</p>
    func removeSchemaVersionMetadata(input: RemoveSchemaVersionMetadataInput, completion: @escaping (SdkResult<RemoveSchemaVersionMetadataOutputResponse, RemoveSchemaVersionMetadataOutputError>) -> Void)
    /// <p>Resets a bookmark entry.</p>
    func resetJobBookmark(input: ResetJobBookmarkInput, completion: @escaping (SdkResult<ResetJobBookmarkOutputResponse, ResetJobBookmarkOutputError>) -> Void)
    /// <p>Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run.</p>
    func resumeWorkflowRun(input: ResumeWorkflowRunInput, completion: @escaping (SdkResult<ResumeWorkflowRunOutputResponse, ResumeWorkflowRunOutputError>) -> Void)
    /// <p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p>
    ///          <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>
    func searchTables(input: SearchTablesInput, completion: @escaping (SdkResult<SearchTablesOutputResponse, SearchTablesOutputError>) -> Void)
    /// <p>Starts a crawl using the specified crawler, regardless
    ///       of what is scheduled. If the crawler is already running, returns a
    ///       <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException">CrawlerRunningException</a>.</p>
    func startCrawler(input: StartCrawlerInput, completion: @escaping (SdkResult<StartCrawlerOutputResponse, StartCrawlerOutputError>) -> Void)
    /// <p>Changes the schedule state of the specified crawler to
    ///       <code>SCHEDULED</code>, unless the crawler is already running or the
    ///       schedule state is already <code>SCHEDULED</code>.</p>
    func startCrawlerSchedule(input: StartCrawlerScheduleInput, completion: @escaping (SdkResult<StartCrawlerScheduleOutputResponse, StartCrawlerScheduleOutputError>) -> Void)
    /// <p>Begins an asynchronous task to export all labeled data for a particular transform. This
    ///       task is the only label-related API call that is not part of the typical active learning
    ///       workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with
    ///       all of your existing labels at the same time, such as when you want to remove or change labels
    ///       that were previously submitted as truth. This API operation accepts the
    ///         <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage
    ///       Service (Amazon S3) path to export the labels to. The operation returns a
    ///         <code>TaskRunId</code>. You can check on the status of your task run by calling the
    ///         <code>GetMLTaskRun</code> API.</p>
    func startExportLabelsTaskRun(input: StartExportLabelsTaskRunInput, completion: @escaping (SdkResult<StartExportLabelsTaskRunOutputResponse, StartExportLabelsTaskRunOutputError>) -> Void)
    /// <p>Enables you to provide additional labels (examples of truth) to be used to teach the
    ///       machine learning transform and improve its quality. This API operation is generally used as
    ///       part of the active learning workflow that starts with the
    ///         <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in
    ///       improving the quality of your machine learning transform. </p>
    ///
    ///          <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue machine learning
    ///       will have generated a series of questions for humans to answer. (Answering these questions is
    ///       often called 'labeling' in the machine learning workflows). In the case of the
    ///         <code>FindMatches</code> transform, these questions are of the form, “What is the correct
    ///       way to group these rows together into groups composed entirely of matching records?” After the
    ///       labeling process is finished, users upload their answers/labels with a call to
    ///         <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes,
    ///       all future runs of the machine learning transform use the new and improved labels and perform
    ///       a higher-quality transformation.</p>
    ///
    ///          <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and
    ///       combines all labels that you upload unless you set <code>Replace</code> to true. If you set
    ///         <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all
    ///       previously uploaded labels and learns only from the exact set that you upload. Replacing
    ///       labels can be helpful if you realize that you previously uploaded incorrect labels, and you
    ///       believe that they are having a negative effect on your transform quality.</p>
    ///
    ///          <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code>
    ///       operation. </p>
    func startImportLabelsTaskRun(input: StartImportLabelsTaskRunInput, completion: @escaping (SdkResult<StartImportLabelsTaskRunOutputResponse, StartImportLabelsTaskRunOutputError>) -> Void)
    /// <p>Starts a job run using a job definition.</p>
    func startJobRun(input: StartJobRunInput, completion: @escaping (SdkResult<StartJobRunOutputResponse, StartJobRunOutputError>) -> Void)
    /// <p>Starts a task to estimate the quality of the transform. </p>
    /// 	
    /// 	        <p>When you provide label sets as examples of truth, AWS Glue machine learning uses some of
    ///       those examples to learn from them. The rest of the labels are used as a test to estimate
    ///       quality.</p>
    /// 	
    /// 	        <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more
    ///       information about the stats of the <code>EvaluationTaskRun</code>.</p>
    func startMLEvaluationTaskRun(input: StartMLEvaluationTaskRunInput, completion: @escaping (SdkResult<StartMLEvaluationTaskRunOutputResponse, StartMLEvaluationTaskRunOutputError>) -> Void)
    /// <p>Starts the active learning workflow for your machine learning transform to improve the
    ///       transform's quality by generating label sets and adding labels.</p>
    /// 	
    /// 	        <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue will have
    ///       generated a "labeling set" or a set of questions for humans to answer.</p>
    ///
    ///          <p>In the case of the <code>FindMatches</code> transform, these questions are of the form,
    ///       “What is the correct way to group these rows together into groups composed entirely of
    ///       matching records?” </p>
    ///
    ///          <p>After the labeling process is finished, you can upload your labels with a call to
    ///         <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes,
    ///       all future runs of the machine learning transform will use the new and improved labels and
    ///       perform a higher-quality transformation.</p>
    func startMLLabelingSetGenerationTaskRun(input: StartMLLabelingSetGenerationTaskRunInput, completion: @escaping (SdkResult<StartMLLabelingSetGenerationTaskRunOutputResponse, StartMLLabelingSetGenerationTaskRunOutputError>) -> Void)
    /// <p>Starts an existing trigger. See <a href="https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering
    ///       Jobs</a> for information about how different types of trigger are
    ///       started.</p>
    func startTrigger(input: StartTriggerInput, completion: @escaping (SdkResult<StartTriggerOutputResponse, StartTriggerOutputError>) -> Void)
    /// <p>Starts a new run of the specified workflow.</p>
    func startWorkflowRun(input: StartWorkflowRunInput, completion: @escaping (SdkResult<StartWorkflowRunOutputResponse, StartWorkflowRunOutputError>) -> Void)
    /// <p>If the specified crawler is running, stops the crawl.</p>
    func stopCrawler(input: StopCrawlerInput, completion: @escaping (SdkResult<StopCrawlerOutputResponse, StopCrawlerOutputError>) -> Void)
    /// <p>Sets the schedule state of the specified crawler to
    ///       <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is
    ///       already running.</p>
    func stopCrawlerSchedule(input: StopCrawlerScheduleInput, completion: @escaping (SdkResult<StopCrawlerScheduleOutputResponse, StopCrawlerScheduleOutputError>) -> Void)
    /// <p>Stops a specified trigger.</p>
    func stopTrigger(input: StopTriggerInput, completion: @escaping (SdkResult<StopTriggerOutputResponse, StopTriggerOutputError>) -> Void)
    /// <p>Stops the execution of the specified workflow run.</p>
    func stopWorkflowRun(input: StopWorkflowRunInput, completion: @escaping (SdkResult<StopWorkflowRunOutputResponse, StopWorkflowRunOutputError>) -> Void)
    /// <p>Adds tags to a resource. A tag is a label you can assign to an AWS resource.
    ///       In AWS Glue, you can tag only certain resources. For information about what
    ///       resources you can tag, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">AWS Tags in AWS Glue</a>.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes tags from a resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Modifies an existing classifier (a <code>GrokClassifier</code>,
    ///       an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on
    ///       which field is present).</p>
    func updateClassifier(input: UpdateClassifierInput, completion: @escaping (SdkResult<UpdateClassifierOutputResponse, UpdateClassifierOutputError>) -> Void)
    /// <p>Creates or updates partition statistics of columns.</p>
    /// 	
    ///          <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdatePartition</code>.</p>
    func updateColumnStatisticsForPartition(input: UpdateColumnStatisticsForPartitionInput, completion: @escaping (SdkResult<UpdateColumnStatisticsForPartitionOutputResponse, UpdateColumnStatisticsForPartitionOutputError>) -> Void)
    /// <p>Creates or updates table statistics of columns.</p>
    /// 	
    /// 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdateTable</code>.</p>
    func updateColumnStatisticsForTable(input: UpdateColumnStatisticsForTableInput, completion: @escaping (SdkResult<UpdateColumnStatisticsForTableOutputResponse, UpdateColumnStatisticsForTableOutputError>) -> Void)
    /// <p>Updates a connection definition in the Data Catalog.</p>
    func updateConnection(input: UpdateConnectionInput, completion: @escaping (SdkResult<UpdateConnectionOutputResponse, UpdateConnectionOutputError>) -> Void)
    /// <p>Updates a crawler. If a crawler is
    ///       running, you must stop it using <code>StopCrawler</code> before updating
    ///       it.</p>
    func updateCrawler(input: UpdateCrawlerInput, completion: @escaping (SdkResult<UpdateCrawlerOutputResponse, UpdateCrawlerOutputError>) -> Void)
    /// <p>Updates the schedule of a crawler using a <code>cron</code> expression. </p>
    func updateCrawlerSchedule(input: UpdateCrawlerScheduleInput, completion: @escaping (SdkResult<UpdateCrawlerScheduleOutputResponse, UpdateCrawlerScheduleOutputError>) -> Void)
    /// <p>Updates an existing database definition in a Data Catalog.</p>
    func updateDatabase(input: UpdateDatabaseInput, completion: @escaping (SdkResult<UpdateDatabaseOutputResponse, UpdateDatabaseOutputError>) -> Void)
    /// <p>Updates a specified development endpoint.</p>
    func updateDevEndpoint(input: UpdateDevEndpointInput, completion: @escaping (SdkResult<UpdateDevEndpointOutputResponse, UpdateDevEndpointOutputError>) -> Void)
    /// <p>Updates an existing job definition.</p>
    func updateJob(input: UpdateJobInput, completion: @escaping (SdkResult<UpdateJobOutputResponse, UpdateJobOutputError>) -> Void)
    /// <p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p>
    /// 	
    ///          <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code>
    ///       operation to assess how well your new parameters achieved your goals (such as improving the
    ///       quality of your machine learning transform, or making it more cost-effective).</p>
    func updateMLTransform(input: UpdateMLTransformInput, completion: @escaping (SdkResult<UpdateMLTransformOutputResponse, UpdateMLTransformOutputError>) -> Void)
    /// <p>Updates a partition.</p>
    func updatePartition(input: UpdatePartitionInput, completion: @escaping (SdkResult<UpdatePartitionOutputResponse, UpdatePartitionOutputError>) -> Void)
    /// <p>Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry. </p>
    func updateRegistry(input: UpdateRegistryInput, completion: @escaping (SdkResult<UpdateRegistryOutputResponse, UpdateRegistryOutputError>) -> Void)
    /// <p>Updates the description, compatibility setting, or version checkpoint for a schema set.</p>
    /// 	        <p>For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for <code>Compatibility</code> is provided, the <code>VersionNumber</code> (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.</p>
    ///          <p>If the value for the <code>VersionNumber</code> (checkpoint) is provided, <code>Compatibility</code> is optional and this can be used to set/reset a checkpoint for the schema.</p>
    /// 	        <p>This update will happen only if the schema is in the AVAILABLE state.</p>
    func updateSchema(input: UpdateSchemaInput, completion: @escaping (SdkResult<UpdateSchemaOutputResponse, UpdateSchemaOutputError>) -> Void)
    /// <p>Updates a metadata table in the Data Catalog.</p>
    func updateTable(input: UpdateTableInput, completion: @escaping (SdkResult<UpdateTableOutputResponse, UpdateTableOutputError>) -> Void)
    /// <p>Updates a trigger definition.</p>
    func updateTrigger(input: UpdateTriggerInput, completion: @escaping (SdkResult<UpdateTriggerOutputResponse, UpdateTriggerOutputError>) -> Void)
    /// <p>Updates an existing function definition in the Data Catalog.</p>
    func updateUserDefinedFunction(input: UpdateUserDefinedFunctionInput, completion: @escaping (SdkResult<UpdateUserDefinedFunctionOutputResponse, UpdateUserDefinedFunctionOutputError>) -> Void)
    /// <p>Updates an existing workflow.</p>
    func updateWorkflow(input: UpdateWorkflowInput, completion: @escaping (SdkResult<UpdateWorkflowOutputResponse, UpdateWorkflowOutputError>) -> Void)
}
