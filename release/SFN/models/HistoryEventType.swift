// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum HistoryEventType {
    case activityfailed
    case activityschedulefailed
    case activityscheduled
    case activitystarted
    case activitysucceeded
    case activitytimedout
    case choicestateentered
    case choicestateexited
    case executionaborted
    case executionfailed
    case executionstarted
    case executionsucceeded
    case executiontimedout
    case failstateentered
    case lambdafunctionfailed
    case lambdafunctionschedulefailed
    case lambdafunctionscheduled
    case lambdafunctionstartfailed
    case lambdafunctionstarted
    case lambdafunctionsucceeded
    case lambdafunctiontimedout
    case mapiterationaborted
    case mapiterationfailed
    case mapiterationstarted
    case mapiterationsucceeded
    case mapstateaborted
    case mapstateentered
    case mapstateexited
    case mapstatefailed
    case mapstatestarted
    case mapstatesucceeded
    case parallelstateaborted
    case parallelstateentered
    case parallelstateexited
    case parallelstatefailed
    case parallelstatestarted
    case parallelstatesucceeded
    case passstateentered
    case passstateexited
    case succeedstateentered
    case succeedstateexited
    case taskfailed
    case taskscheduled
    case taskstartfailed
    case taskstarted
    case taskstateaborted
    case taskstateentered
    case taskstateexited
    case tasksubmitfailed
    case tasksubmitted
    case tasksucceeded
    case tasktimedout
    case waitstateaborted
    case waitstateentered
    case waitstateexited
    case sdkUnknown(String)
}

extension HistoryEventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HistoryEventType] {
        return [
            .activityfailed,
            .activityschedulefailed,
            .activityscheduled,
            .activitystarted,
            .activitysucceeded,
            .activitytimedout,
            .choicestateentered,
            .choicestateexited,
            .executionaborted,
            .executionfailed,
            .executionstarted,
            .executionsucceeded,
            .executiontimedout,
            .failstateentered,
            .lambdafunctionfailed,
            .lambdafunctionschedulefailed,
            .lambdafunctionscheduled,
            .lambdafunctionstartfailed,
            .lambdafunctionstarted,
            .lambdafunctionsucceeded,
            .lambdafunctiontimedout,
            .mapiterationaborted,
            .mapiterationfailed,
            .mapiterationstarted,
            .mapiterationsucceeded,
            .mapstateaborted,
            .mapstateentered,
            .mapstateexited,
            .mapstatefailed,
            .mapstatestarted,
            .mapstatesucceeded,
            .parallelstateaborted,
            .parallelstateentered,
            .parallelstateexited,
            .parallelstatefailed,
            .parallelstatestarted,
            .parallelstatesucceeded,
            .passstateentered,
            .passstateexited,
            .succeedstateentered,
            .succeedstateexited,
            .taskfailed,
            .taskscheduled,
            .taskstartfailed,
            .taskstarted,
            .taskstateaborted,
            .taskstateentered,
            .taskstateexited,
            .tasksubmitfailed,
            .tasksubmitted,
            .tasksucceeded,
            .tasktimedout,
            .waitstateaborted,
            .waitstateentered,
            .waitstateexited,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activityfailed: return "ActivityFailed"
        case .activityschedulefailed: return "ActivityScheduleFailed"
        case .activityscheduled: return "ActivityScheduled"
        case .activitystarted: return "ActivityStarted"
        case .activitysucceeded: return "ActivitySucceeded"
        case .activitytimedout: return "ActivityTimedOut"
        case .choicestateentered: return "ChoiceStateEntered"
        case .choicestateexited: return "ChoiceStateExited"
        case .executionaborted: return "ExecutionAborted"
        case .executionfailed: return "ExecutionFailed"
        case .executionstarted: return "ExecutionStarted"
        case .executionsucceeded: return "ExecutionSucceeded"
        case .executiontimedout: return "ExecutionTimedOut"
        case .failstateentered: return "FailStateEntered"
        case .lambdafunctionfailed: return "LambdaFunctionFailed"
        case .lambdafunctionschedulefailed: return "LambdaFunctionScheduleFailed"
        case .lambdafunctionscheduled: return "LambdaFunctionScheduled"
        case .lambdafunctionstartfailed: return "LambdaFunctionStartFailed"
        case .lambdafunctionstarted: return "LambdaFunctionStarted"
        case .lambdafunctionsucceeded: return "LambdaFunctionSucceeded"
        case .lambdafunctiontimedout: return "LambdaFunctionTimedOut"
        case .mapiterationaborted: return "MapIterationAborted"
        case .mapiterationfailed: return "MapIterationFailed"
        case .mapiterationstarted: return "MapIterationStarted"
        case .mapiterationsucceeded: return "MapIterationSucceeded"
        case .mapstateaborted: return "MapStateAborted"
        case .mapstateentered: return "MapStateEntered"
        case .mapstateexited: return "MapStateExited"
        case .mapstatefailed: return "MapStateFailed"
        case .mapstatestarted: return "MapStateStarted"
        case .mapstatesucceeded: return "MapStateSucceeded"
        case .parallelstateaborted: return "ParallelStateAborted"
        case .parallelstateentered: return "ParallelStateEntered"
        case .parallelstateexited: return "ParallelStateExited"
        case .parallelstatefailed: return "ParallelStateFailed"
        case .parallelstatestarted: return "ParallelStateStarted"
        case .parallelstatesucceeded: return "ParallelStateSucceeded"
        case .passstateentered: return "PassStateEntered"
        case .passstateexited: return "PassStateExited"
        case .succeedstateentered: return "SucceedStateEntered"
        case .succeedstateexited: return "SucceedStateExited"
        case .taskfailed: return "TaskFailed"
        case .taskscheduled: return "TaskScheduled"
        case .taskstartfailed: return "TaskStartFailed"
        case .taskstarted: return "TaskStarted"
        case .taskstateaborted: return "TaskStateAborted"
        case .taskstateentered: return "TaskStateEntered"
        case .taskstateexited: return "TaskStateExited"
        case .tasksubmitfailed: return "TaskSubmitFailed"
        case .tasksubmitted: return "TaskSubmitted"
        case .tasksucceeded: return "TaskSucceeded"
        case .tasktimedout: return "TaskTimedOut"
        case .waitstateaborted: return "WaitStateAborted"
        case .waitstateentered: return "WaitStateEntered"
        case .waitstateexited: return "WaitStateExited"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HistoryEventType(rawValue: rawValue) ?? HistoryEventType.sdkUnknown(rawValue)
    }
}
