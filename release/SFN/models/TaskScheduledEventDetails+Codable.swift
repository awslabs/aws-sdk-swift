// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaskScheduledEventDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case heartbeatInSeconds
        case parameters
        case region
        case resource
        case resourceType
        case timeoutInSeconds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if heartbeatInSeconds != 0 {
            try encodeContainer.encode(heartbeatInSeconds, forKey: .heartbeatInSeconds)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if timeoutInSeconds != 0 {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resource)
        resource = resourceDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameters)
        parameters = parametersDecoded
        let timeoutInSecondsDecoded = try containerValues.decode(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let heartbeatInSecondsDecoded = try containerValues.decode(Int.self, forKey: .heartbeatInSeconds)
        heartbeatInSeconds = heartbeatInSecondsDecoded
    }
}
