// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoggingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinations
        case includeExecutionData
        case level
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for logdestinationlist0 in destinations {
                try destinationsContainer.encode(logdestinationlist0)
            }
        }
        if includeExecutionData != false {
            try encodeContainer.encode(includeExecutionData, forKey: .includeExecutionData)
        }
        if let level = level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .level)
        level = levelDecoded
        let includeExecutionDataDecoded = try containerValues.decode(Bool.self, forKey: .includeExecutionData)
        includeExecutionData = includeExecutionDataDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([LogDestination].self, forKey: .destinations)
        var destinationsDecoded0:[LogDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [LogDestination]()
            for structure0 in destinationsContainer {
                destinationsDecoded0?.append(structure0)
            }
        }
        destinations = destinationsDecoded0
    }
}
