// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStateMachineOutputBody: Equatable {
    public let stateMachineArn: String?
    public let name: String?
    public let status: StateMachineStatus?
    public let definition: String?
    public let roleArn: String?
    public let type: StateMachineType?
    public let creationDate: Date?
    public let loggingConfiguration: LoggingConfiguration?
    public let tracingConfiguration: TracingConfiguration?
}

extension DescribeStateMachineOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationDate
        case definition
        case loggingConfiguration
        case name
        case roleArn
        case stateMachineArn
        case status
        case tracingConfiguration
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StateMachineStatus.self, forKey: .status)
        status = statusDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .definition)
        definition = definitionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(StateMachineType.self, forKey: .type)
        type = typeDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let tracingConfigurationDecoded = try containerValues.decodeIfPresent(TracingConfiguration.self, forKey: .tracingConfiguration)
        tracingConfiguration = tracingConfigurationDecoded
    }
}
