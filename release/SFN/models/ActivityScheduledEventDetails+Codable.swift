// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActivityScheduledEventDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case heartbeatInSeconds
        case input
        case inputDetails
        case resource
        case timeoutInSeconds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if heartbeatInSeconds != 0 {
            try encodeContainer.encode(heartbeatInSeconds, forKey: .heartbeatInSeconds)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputDetails = inputDetails {
            try encodeContainer.encode(inputDetails, forKey: .inputDetails)
        }
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if timeoutInSeconds != 0 {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resource)
        resource = resourceDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(HistoryEventExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
        let timeoutInSecondsDecoded = try containerValues.decode(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let heartbeatInSecondsDecoded = try containerValues.decode(Int.self, forKey: .heartbeatInSeconds)
        heartbeatInSeconds = heartbeatInSecondsDecoded
    }
}
