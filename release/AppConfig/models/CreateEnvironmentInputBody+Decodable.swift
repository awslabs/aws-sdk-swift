// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEnvironmentInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let monitors: [Monitor]?
    public let tags: [String:String]?
}

extension CreateEnvironmentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case monitors = "Monitors"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let monitorsContainer = try containerValues.decodeIfPresent([Monitor].self, forKey: .monitors)
        var monitorsDecoded0:[Monitor]? = nil
        if let monitorsContainer = monitorsContainer {
            monitorsDecoded0 = [Monitor]()
            for structure0 in monitorsContainer {
                monitorsDecoded0?.append(structure0)
            }
        }
        monitors = monitorsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
