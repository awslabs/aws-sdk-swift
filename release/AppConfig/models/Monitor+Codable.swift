// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Monitor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmArn = "AlarmArn"
        case alarmRoleArn = "AlarmRoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmArn = alarmArn {
            try encodeContainer.encode(alarmArn, forKey: .alarmArn)
        }
        if let alarmRoleArn = alarmRoleArn {
            try encodeContainer.encode(alarmRoleArn, forKey: .alarmRoleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmRoleArn)
        alarmRoleArn = alarmRoleArnDecoded
    }
}
