// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDeploymentStrategyInput: Equatable {
    /// <p>Total amount of time for a deployment to last.</p>
    public let deploymentDurationInMinutes: Int
    /// <p>A description of the deployment strategy.</p>
    public let description: String?
    /// <p>The amount of time AppConfig monitors for alarms before considering the deployment to be
    ///          complete and no longer eligible for automatic roll back.</p>
    public let finalBakeTimeInMinutes: Int
    /// <p>The percentage of targets to receive a deployed configuration during each
    ///          interval.</p>
    public let growthFactor: Float
    /// <p>The algorithm used to define how percentage grows over time. AWS AppConfig supports the
    ///          following growth types:</p>
    ///          <p>
    ///             <b>Linear</b>: For this type, AppConfig processes the
    ///          deployment by dividing the total number of targets by the value specified for <code>Step
    ///             percentage</code>. For example, a linear deployment that uses a <code>Step
    ///             percentage</code> of 10 deploys the configuration to 10 percent of the hosts. After
    ///          those deployments are complete, the system deploys the configuration to the next 10
    ///          percent. This continues until 100% of the targets have successfully received the
    ///          configuration.</p>
    ///
    ///          <p>
    ///             <b>Exponential</b>: For this type, AppConfig processes the
    ///          deployment exponentially using the following formula: <code>G*(2^N)</code>. In this
    ///          formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is
    ///          the number of steps until the configuration is deployed to all targets. For example, if you
    ///          specify a growth factor of 2, then the system rolls out the configuration as
    ///          follows:</p>
    ///          <p>
    ///             <code>2*(2^0)</code>
    ///          </p>
    ///          <p>
    ///             <code>2*(2^1)</code>
    ///          </p>
    ///          <p>
    ///             <code>2*(2^2)</code>
    ///          </p>
    ///          <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the
    ///          targets, 8% of the targets, and continues until the configuration has been deployed to all
    ///          targets.</p>
    public let growthType: GrowthType?
    /// <p>A name for the deployment strategy.</p>
    public let name: String?
    /// <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    public let replicateTo: ReplicateTo?
    /// <p>Metadata to assign to the deployment strategy. Tags help organize and categorize your
    ///          AppConfig resources. Each tag consists of a key and an optional value, both of which you
    ///          define.</p>
    public let tags: [String:String]?

    public init (
        deploymentDurationInMinutes: Int = 0,
        description: String? = nil,
        finalBakeTimeInMinutes: Int = 0,
        growthFactor: Float = 0.0,
        growthType: GrowthType? = nil,
        name: String? = nil,
        replicateTo: ReplicateTo? = nil,
        tags: [String:String]? = nil
    )
    {
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.description = description
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.name = name
        self.replicateTo = replicateTo
        self.tags = tags
    }
}
