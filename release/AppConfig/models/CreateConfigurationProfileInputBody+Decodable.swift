// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateConfigurationProfileInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let locationUri: String?
    public let retrievalRoleArn: String?
    public let validators: [Validator]?
    public let tags: [String:String]?
}

extension CreateConfigurationProfileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case locationUri = "LocationUri"
        case name = "Name"
        case retrievalRoleArn = "RetrievalRoleArn"
        case tags = "Tags"
        case validators = "Validators"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let retrievalRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .retrievalRoleArn)
        retrievalRoleArn = retrievalRoleArnDecoded
        let validatorsContainer = try containerValues.decodeIfPresent([Validator].self, forKey: .validators)
        var validatorsDecoded0:[Validator]? = nil
        if let validatorsContainer = validatorsContainer {
            validatorsDecoded0 = [Validator]()
            for structure0 in validatorsContainer {
                validatorsDecoded0?.append(structure0)
            }
        }
        validators = validatorsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
