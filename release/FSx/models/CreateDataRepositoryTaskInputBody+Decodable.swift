// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDataRepositoryTaskInputBody: Equatable {
    public let type: DataRepositoryTaskType?
    public let paths: [String]?
    public let fileSystemId: String?
    public let report: CompletionReport?
    public let clientRequestToken: String?
    public let tags: [Tag]?
}

extension CreateDataRepositoryTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case paths = "Paths"
        case report = "Report"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(DataRepositoryTaskType.self, forKey: .type)
        type = typeDecoded
        let pathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .paths)
        var pathsDecoded0:[String]? = nil
        if let pathsContainer = pathsContainer {
            pathsDecoded0 = [String]()
            for string0 in pathsContainer {
                pathsDecoded0?.append(string0)
            }
        }
        paths = pathsDecoded0
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let reportDecoded = try containerValues.decodeIfPresent(CompletionReport.self, forKey: .report)
        report = reportDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
