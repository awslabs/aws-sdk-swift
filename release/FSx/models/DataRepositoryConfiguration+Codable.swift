// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataRepositoryConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoImportPolicy = "AutoImportPolicy"
        case exportPath = "ExportPath"
        case failureDetails = "FailureDetails"
        case importPath = "ImportPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case lifecycle = "Lifecycle"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoImportPolicy = autoImportPolicy {
            try encodeContainer.encode(autoImportPolicy.rawValue, forKey: .autoImportPolicy)
        }
        if let exportPath = exportPath {
            try encodeContainer.encode(exportPath, forKey: .exportPath)
        }
        if let failureDetails = failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let importPath = importPath {
            try encodeContainer.encode(importPath, forKey: .importPath)
        }
        if let importedFileChunkSize = importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let lifecycle = lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleDecoded = try containerValues.decodeIfPresent(DataRepositoryLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let importPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importPath)
        importPath = importPathDecoded
        let exportPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportPath)
        exportPath = exportPathDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let autoImportPolicyDecoded = try containerValues.decodeIfPresent(AutoImportPolicyType.self, forKey: .autoImportPolicy)
        autoImportPolicy = autoImportPolicyDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(DataRepositoryFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
    }
}
