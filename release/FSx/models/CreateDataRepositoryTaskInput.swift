// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDataRepositoryTaskInput: Equatable {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
    ///             ASCII characters. This token is automatically filled on your behalf when you use the AWS
    ///             Command Line Interface (AWS CLI) or an AWS SDK.</p>
    public var clientRequestToken: String?
    /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
    public let fileSystemId: String?
    /// <p>(Optional) The path or paths on the Amazon FSx file system to use when the data repository task is processed.
    ///             The default path is the file system root directory. The paths you provide need to be relative to the mount point of the file system.
    ///             If the mount point is <code>/mnt/fsx</code> and <code>/mnt/fsx/path1</code> is a directory or
    ///             file on the file system you want to export, then the path to provide is <code>path1</code>.
    ///             If a path that you provide isn't valid, the task fails.</p>
    public let paths: [String]?
    /// <p>Defines whether or not Amazon FSx provides a CompletionReport once the task has completed.
    ///             A CompletionReport provides a detailed  report on the files that Amazon FSx processed that meet the criteria specified by the
    ///             <code>Scope</code> parameter. For more information, see
    ///             <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/task-completion-report.html">Working with Task Completion Reports</a>.</p>
    public let report: CompletionReport?
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    public let tags: [Tag]?
    /// <p>Specifies the type of data repository task to create.</p>
    public let type: DataRepositoryTaskType?

    public init (
        clientRequestToken: String? = nil,
        fileSystemId: String? = nil,
        paths: [String]? = nil,
        report: CompletionReport? = nil,
        tags: [Tag]? = nil,
        type: DataRepositoryTaskType? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.fileSystemId = fileSystemId
        self.paths = paths
        self.report = report
        self.tags = tags
        self.type = type
    }
}
