// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Backup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupId = "BackupId"
        case creationTime = "CreationTime"
        case directoryInformation = "DirectoryInformation"
        case failureDetails = "FailureDetails"
        case fileSystem = "FileSystem"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case ownerId = "OwnerId"
        case progressPercent = "ProgressPercent"
        case resourceARN = "ResourceARN"
        case sourceBackupId = "SourceBackupId"
        case sourceBackupRegion = "SourceBackupRegion"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let directoryInformation = directoryInformation {
            try encodeContainer.encode(directoryInformation, forKey: .directoryInformation)
        }
        if let failureDetails = failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileSystem = fileSystem {
            try encodeContainer.encode(fileSystem, forKey: .fileSystem)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let progressPercent = progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let sourceBackupId = sourceBackupId {
            try encodeContainer.encode(sourceBackupId, forKey: .sourceBackupId)
        }
        if let sourceBackupRegion = sourceBackupRegion {
            try encodeContainer.encode(sourceBackupRegion, forKey: .sourceBackupRegion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(BackupLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(BackupFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BackupType.self, forKey: .type)
        type = typeDecoded
        let progressPercentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let fileSystemDecoded = try containerValues.decodeIfPresent(FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
        let directoryInformationDecoded = try containerValues.decodeIfPresent(ActiveDirectoryBackupAttributes.self, forKey: .directoryInformation)
        directoryInformation = directoryInformationDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let sourceBackupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBackupId)
        sourceBackupId = sourceBackupIdDecoded
        let sourceBackupRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBackupRegion)
        sourceBackupRegion = sourceBackupRegionDecoded
    }
}
