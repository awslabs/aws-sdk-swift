// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AdministrativeAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case administrativeActionType = "AdministrativeActionType"
        case failureDetails = "FailureDetails"
        case progressPercent = "ProgressPercent"
        case requestTime = "RequestTime"
        case status = "Status"
        case targetFileSystemValues = "TargetFileSystemValues"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActionType = administrativeActionType {
            try encodeContainer.encode(administrativeActionType.rawValue, forKey: .administrativeActionType)
        }
        if let failureDetails = failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let progressPercent = progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let requestTime = requestTime {
            try encodeContainer.encode(requestTime.timeIntervalSince1970, forKey: .requestTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetFileSystemValues = targetFileSystemValues {
            try encodeContainer.encode(targetFileSystemValues, forKey: .targetFileSystemValues)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let administrativeActionTypeDecoded = try containerValues.decodeIfPresent(AdministrativeActionType.self, forKey: .administrativeActionType)
        administrativeActionType = administrativeActionTypeDecoded
        let progressPercentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
        let requestTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .requestTime)
        requestTime = requestTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Status.self, forKey: .status)
        status = statusDecoded
        let targetFileSystemValuesDecoded = try containerValues.decodeIfPresent(FileSystem.self, forKey: .targetFileSystemValues)
        targetFileSystemValues = targetFileSystemValuesDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(AdministrativeActionFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
    }
}
