// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The lifecycle status of the backup.</p>
///         <ul>
///             <li>
///                <p>
///                   <code>AVAILABLE</code> - The backup is fully available.</p>
///             </li>
///             <li>
///                <p>
///                   <code>PENDING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx has not started creating the backup.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CREATING</code> - Amazon FSx is creating the new user-intiated backup</p>
///             </li>
///             <li>
///                <p>
///                   <code>TRANSFERRING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx is backing up the file system.</p>
///             </li>
///             <li>
///                <p>
///                   <code>COPYING</code> - Amazon FSx is copying the backup.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DELETED</code> - Amazon FSx deleted the backup and it is no longer available.</p>
///             </li>
///             <li>
///                <p>
///                   <code>FAILED</code> - Amazon FSx could not complete the backup.</p>
///             </li>
///          </ul>
public enum BackupLifecycle {
    case available
    case copying
    case creating
    case deleted
    case failed
    case pending
    case transferring
    case sdkUnknown(String)
}

extension BackupLifecycle : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BackupLifecycle] {
        return [
            .available,
            .copying,
            .creating,
            .deleted,
            .failed,
            .pending,
            .transferring,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .copying: return "COPYING"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .failed: return "FAILED"
        case .pending: return "PENDING"
        case .transferring: return "TRANSFERRING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BackupLifecycle(rawValue: rawValue) ?? BackupLifecycle.sdkUnknown(rawValue)
    }
}
