// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CopyBackupInputBody: Equatable {
    public let clientRequestToken: String?
    public let sourceBackupId: String?
    public let sourceRegion: String?
    public let kmsKeyId: String?
    public let copyTags: Bool?
    public let tags: [Tag]?
}

extension CopyBackupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTags = "CopyTags"
        case kmsKeyId = "KmsKeyId"
        case sourceBackupId = "SourceBackupId"
        case sourceRegion = "SourceRegion"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let sourceBackupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBackupId)
        sourceBackupId = sourceBackupIdDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let copyTagsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .copyTags)
        copyTags = copyTagsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
