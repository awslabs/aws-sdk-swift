// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WindowsFileSystemConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeDirectoryId = "ActiveDirectoryId"
        case aliases = "Aliases"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case copyTagsToBackups = "CopyTagsToBackups"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case maintenanceOperationsInProgress = "MaintenanceOperationsInProgress"
        case preferredFileServerIp = "PreferredFileServerIp"
        case preferredSubnetId = "PreferredSubnetId"
        case remoteAdministrationEndpoint = "RemoteAdministrationEndpoint"
        case selfManagedActiveDirectoryConfiguration = "SelfManagedActiveDirectoryConfiguration"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryId = activeDirectoryId {
            try encodeContainer.encode(activeDirectoryId, forKey: .activeDirectoryId)
        }
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for aliases0 in aliases {
                try aliasesContainer.encode(aliases0)
            }
        }
        if let automaticBackupRetentionDays = automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let copyTagsToBackups = copyTagsToBackups {
            try encodeContainer.encode(copyTagsToBackups, forKey: .copyTagsToBackups)
        }
        if let dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let maintenanceOperationsInProgress = maintenanceOperationsInProgress {
            var maintenanceOperationsInProgressContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceOperationsInProgress)
            for filesystemmaintenanceoperations0 in maintenanceOperationsInProgress {
                try maintenanceOperationsInProgressContainer.encode(filesystemmaintenanceoperations0.rawValue)
            }
        }
        if let preferredFileServerIp = preferredFileServerIp {
            try encodeContainer.encode(preferredFileServerIp, forKey: .preferredFileServerIp)
        }
        if let preferredSubnetId = preferredSubnetId {
            try encodeContainer.encode(preferredSubnetId, forKey: .preferredSubnetId)
        }
        if let remoteAdministrationEndpoint = remoteAdministrationEndpoint {
            try encodeContainer.encode(remoteAdministrationEndpoint, forKey: .remoteAdministrationEndpoint)
        }
        if let selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration {
            try encodeContainer.encode(selfManagedActiveDirectoryConfiguration, forKey: .selfManagedActiveDirectoryConfiguration)
        }
        if let throughputCapacity = throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activeDirectoryId)
        activeDirectoryId = activeDirectoryIdDecoded
        let selfManagedActiveDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(SelfManagedActiveDirectoryAttributes.self, forKey: .selfManagedActiveDirectoryConfiguration)
        selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfigurationDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(WindowsDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let remoteAdministrationEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .remoteAdministrationEndpoint)
        remoteAdministrationEndpoint = remoteAdministrationEndpointDecoded
        let preferredSubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredSubnetId)
        preferredSubnetId = preferredSubnetIdDecoded
        let preferredFileServerIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredFileServerIp)
        preferredFileServerIp = preferredFileServerIpDecoded
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let maintenanceOperationsInProgressContainer = try containerValues.decodeIfPresent([FileSystemMaintenanceOperation].self, forKey: .maintenanceOperationsInProgress)
        var maintenanceOperationsInProgressDecoded0:[FileSystemMaintenanceOperation]? = nil
        if let maintenanceOperationsInProgressContainer = maintenanceOperationsInProgressContainer {
            maintenanceOperationsInProgressDecoded0 = [FileSystemMaintenanceOperation]()
            for string0 in maintenanceOperationsInProgressContainer {
                maintenanceOperationsInProgressDecoded0?.append(string0)
            }
        }
        maintenanceOperationsInProgress = maintenanceOperationsInProgressDecoded0
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let copyTagsToBackupsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .copyTagsToBackups)
        copyTagsToBackups = copyTagsToBackupsDecoded
        let aliasesContainer = try containerValues.decodeIfPresent([Alias].self, forKey: .aliases)
        var aliasesDecoded0:[Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [Alias]()
            for structure0 in aliasesContainer {
                aliasesDecoded0?.append(structure0)
            }
        }
        aliases = aliasesDecoded0
    }
}
