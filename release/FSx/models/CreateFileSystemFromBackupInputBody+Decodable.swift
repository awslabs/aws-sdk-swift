// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFileSystemFromBackupInputBody: Equatable {
    public let backupId: String?
    public let clientRequestToken: String?
    public let subnetIds: [String]?
    public let securityGroupIds: [String]?
    public let tags: [Tag]?
    public let windowsConfiguration: CreateFileSystemWindowsConfiguration?
    public let lustreConfiguration: CreateFileSystemLustreConfiguration?
    public let storageType: StorageType?
    public let kmsKeyId: String?
}

extension CreateFileSystemFromBackupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupId = "BackupId"
        case clientRequestToken = "ClientRequestToken"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(CreateFileSystemWindowsConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(CreateFileSystemLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
