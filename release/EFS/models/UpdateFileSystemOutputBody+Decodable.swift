// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFileSystemOutputBody: Equatable {
    public let ownerId: String?
    public let creationToken: String?
    public let fileSystemId: String?
    public let fileSystemArn: String?
    public let creationTime: Date?
    public let lifeCycleState: LifeCycleState?
    public let name: String?
    public let numberOfMountTargets: Int
    public let sizeInBytes: FileSystemSize?
    public let performanceMode: PerformanceMode?
    public let encrypted: Bool?
    public let kmsKeyId: String?
    public let throughputMode: ThroughputMode?
    public let provisionedThroughputInMibps: Double?
    public let availabilityZoneName: String?
    public let availabilityZoneId: String?
    public let tags: [Tag]?
}

extension UpdateFileSystemOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availabilityZoneId = "AvailabilityZoneId"
        case availabilityZoneName = "AvailabilityZoneName"
        case creationTime = "CreationTime"
        case creationToken = "CreationToken"
        case encrypted = "Encrypted"
        case fileSystemArn = "FileSystemArn"
        case fileSystemId = "FileSystemId"
        case kmsKeyId = "KmsKeyId"
        case lifeCycleState = "LifeCycleState"
        case name = "Name"
        case numberOfMountTargets = "NumberOfMountTargets"
        case ownerId = "OwnerId"
        case performanceMode = "PerformanceMode"
        case provisionedThroughputInMibps = "ProvisionedThroughputInMibps"
        case sizeInBytes = "SizeInBytes"
        case tags = "Tags"
        case throughputMode = "ThroughputMode"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let creationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationToken)
        creationToken = creationTokenDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let fileSystemArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileSystemArn)
        fileSystemArn = fileSystemArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lifeCycleStateDecoded = try containerValues.decodeIfPresent(LifeCycleState.self, forKey: .lifeCycleState)
        lifeCycleState = lifeCycleStateDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let numberOfMountTargetsDecoded = try containerValues.decode(Int.self, forKey: .numberOfMountTargets)
        numberOfMountTargets = numberOfMountTargetsDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(FileSystemSize.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let performanceModeDecoded = try containerValues.decodeIfPresent(PerformanceMode.self, forKey: .performanceMode)
        performanceMode = performanceModeDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let throughputModeDecoded = try containerValues.decodeIfPresent(ThroughputMode.self, forKey: .throughputMode)
        throughputMode = throughputModeDecoded
        let provisionedThroughputInMibpsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .provisionedThroughputInMibps)
        provisionedThroughputInMibps = provisionedThroughputInMibpsDecoded
        let availabilityZoneNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZoneName)
        availabilityZoneName = availabilityZoneNameDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
