// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutFileSystemPolicyInput: Equatable {
    /// <p>(Optional) A flag to indicate whether to bypass the <code>FileSystemPolicy</code> lockout safety check. The policy lockout safety check
    ///       determines whether the policy in the request will prevent the principal making the request will be locked out from making future <code>PutFileSystemPolicy</code> requests on the file system.
    ///       Set <code>BypassPolicyLockoutSafetyCheck</code> to <code>True</code> only when you intend to prevent
    ///       the principal that is making the request from making a subsequent <code>PutFileSystemPolicy</code> request on the file system.
    ///       The default value is False.
    ///     </p>
    public let bypassPolicyLockoutSafetyCheck: Bool
    /// <p>The ID of the EFS file system that you want to create or update the <code>FileSystemPolicy</code> for.</p>
    public let fileSystemId: String?
    /// <p>The <code>FileSystemPolicy</code> that you're creating. Accepts a JSON formatted policy definition.
    ///      EFS file system policies have a 20,000 character limit.
    ///       To find out more about the elements that make up a file system policy, see
    ///       <a href="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies">EFS Resource-based Policies</a>.
    ///     </p>
    public let policy: String?

    public init (
        bypassPolicyLockoutSafetyCheck: Bool = false,
        fileSystemId: String? = nil,
        policy: String? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.fileSystemId = fileSystemId
        self.policy = policy
    }
}
