// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum HandshakeConstraintViolationExceptionReason {
    case accountNumberLimitExceeded
    case alreadyInAnOrganization
    case handshakeRateLimitExceeded
    case inviteDisabledDuringEnableAllFeatures
    case organizationAlreadyHasAllFeatures
    case organizationFromDifferentSellerOfRecord
    case organizationIsAlreadyPendingAllFeaturesMigration
    case organizationMembershipChangeRateLimitExceeded
    case paymentInstrumentRequired
    case sdkUnknown(String)
}

extension HandshakeConstraintViolationExceptionReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HandshakeConstraintViolationExceptionReason] {
        return [
            .accountNumberLimitExceeded,
            .alreadyInAnOrganization,
            .handshakeRateLimitExceeded,
            .inviteDisabledDuringEnableAllFeatures,
            .organizationAlreadyHasAllFeatures,
            .organizationFromDifferentSellerOfRecord,
            .organizationIsAlreadyPendingAllFeaturesMigration,
            .organizationMembershipChangeRateLimitExceeded,
            .paymentInstrumentRequired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
        case .alreadyInAnOrganization: return "ALREADY_IN_AN_ORGANIZATION"
        case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
        case .inviteDisabledDuringEnableAllFeatures: return "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES"
        case .organizationAlreadyHasAllFeatures: return "ORGANIZATION_ALREADY_HAS_ALL_FEATURES"
        case .organizationFromDifferentSellerOfRecord: return "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD"
        case .organizationIsAlreadyPendingAllFeaturesMigration: return "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION"
        case .organizationMembershipChangeRateLimitExceeded: return "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED"
        case .paymentInstrumentRequired: return "PAYMENT_INSTRUMENT_REQUIRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HandshakeConstraintViolationExceptionReason(rawValue: rawValue) ?? HandshakeConstraintViolationExceptionReason.sdkUnknown(rawValue)
    }
}
