// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnabledServicePrincipal: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dateEnabled = "DateEnabled"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateEnabled = dateEnabled {
            try encodeContainer.encode(dateEnabled.timeIntervalSince1970, forKey: .dateEnabled)
        }
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let dateEnabledDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dateEnabled)
        dateEnabled = dateEnabledDecoded
    }
}
