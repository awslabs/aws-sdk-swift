// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum CreateAccountFailureReason {
    case accountLimitExceeded
    case concurrentAccountModification
    case emailAlreadyExists
    case failedBusinessValidation
    case govcloudAccountAlreadyExists
    case internalFailure
    case invalidAddress
    case invalidEmail
    case invalidIdentityForBusinessValidation
    case missingBusinessValidation
    case missingPaymentInstrument
    case pendingBusinessValidationv
    case unknownBusinessValidation
    case sdkUnknown(String)
}

extension CreateAccountFailureReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CreateAccountFailureReason] {
        return [
            .accountLimitExceeded,
            .concurrentAccountModification,
            .emailAlreadyExists,
            .failedBusinessValidation,
            .govcloudAccountAlreadyExists,
            .internalFailure,
            .invalidAddress,
            .invalidEmail,
            .invalidIdentityForBusinessValidation,
            .missingBusinessValidation,
            .missingPaymentInstrument,
            .pendingBusinessValidationv,
            .unknownBusinessValidation,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountLimitExceeded: return "ACCOUNT_LIMIT_EXCEEDED"
        case .concurrentAccountModification: return "CONCURRENT_ACCOUNT_MODIFICATION"
        case .emailAlreadyExists: return "EMAIL_ALREADY_EXISTS"
        case .failedBusinessValidation: return "FAILED_BUSINESS_VALIDATION"
        case .govcloudAccountAlreadyExists: return "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
        case .internalFailure: return "INTERNAL_FAILURE"
        case .invalidAddress: return "INVALID_ADDRESS"
        case .invalidEmail: return "INVALID_EMAIL"
        case .invalidIdentityForBusinessValidation: return "INVALID_IDENTITY_FOR_BUSINESS_VALIDATION"
        case .missingBusinessValidation: return "MISSING_BUSINESS_VALIDATION"
        case .missingPaymentInstrument: return "MISSING_PAYMENT_INSTRUMENT"
        case .pendingBusinessValidationv: return "PENDING_BUSINESS_VALIDATION"
        case .unknownBusinessValidation: return "UNKNOWN_BUSINESS_VALIDATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CreateAccountFailureReason(rawValue: rawValue) ?? CreateAccountFailureReason.sdkUnknown(rawValue)
    }
}
