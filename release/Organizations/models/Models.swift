// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AWSOrganizationsNotInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AWSOrganizationsNotInUseException(message: \(String(describing: message)))"}
}

extension AWSOrganizationsNotInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AWSOrganizationsNotInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your account isn't a member of an organization. To make this request, you must use the
///             credentials of an account that belongs to an organization.</p>
public struct AWSOrganizationsNotInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AWSOrganizationsNotInUseExceptionBody: Equatable {
    public let message: String?
}

extension AWSOrganizationsNotInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AcceptHandshakeInputBodyMiddleware: Middleware {
    public let id: String = "AcceptHandshakeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptHandshakeInput>
    public typealias MOutput = OperationOutput<AcceptHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptHandshakeOutputError>
}

extension AcceptHandshakeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AcceptHandshakeInput(handshakeId: \(String(describing: handshakeId)))"}
}

extension AcceptHandshakeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

public struct AcceptHandshakeInputHeadersMiddleware: Middleware {
    public let id: String = "AcceptHandshakeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptHandshakeInput>
    public typealias MOutput = OperationOutput<AcceptHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptHandshakeOutputError>
}

public struct AcceptHandshakeInputQueryItemMiddleware: Middleware {
    public let id: String = "AcceptHandshakeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AcceptHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<AcceptHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AcceptHandshakeInput>
    public typealias MOutput = OperationOutput<AcceptHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AcceptHandshakeOutputError>
}

public struct AcceptHandshakeInput: Equatable {
    /// <p>The unique identifier (ID) of the handshake that you want to accept.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let handshakeId: String?

    public init (
        handshakeId: String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct AcceptHandshakeInputBody: Equatable {
    public let handshakeId: String?
}

extension AcceptHandshakeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension AcceptHandshakeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptHandshakeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccessDeniedForDependencyException" : self = .accessDeniedForDependencyException(try AccessDeniedForDependencyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeAlreadyInStateException" : self = .handshakeAlreadyInStateException(try HandshakeAlreadyInStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeConstraintViolationException" : self = .handshakeConstraintViolationException(try HandshakeConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidHandshakeTransitionException" : self = .invalidHandshakeTransitionException(try InvalidHandshakeTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptHandshakeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accessDeniedForDependencyException(AccessDeniedForDependencyException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeAlreadyInStateException(HandshakeAlreadyInStateException)
    case handshakeConstraintViolationException(HandshakeConstraintViolationException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidHandshakeTransitionException(InvalidHandshakeTransitionException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptHandshakeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AcceptHandshakeOutputResponse(handshake: \(String(describing: handshake)))"}
}

extension AcceptHandshakeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AcceptHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct AcceptHandshakeOutputResponse: Equatable {
    /// <p>A structure that contains details about the accepted handshake.</p>
    public let handshake: Handshake?

    public init (
        handshake: Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct AcceptHandshakeOutputResponseBody: Equatable {
    public let handshake: Handshake?
}

extension AcceptHandshakeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension AccessDeniedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccessDeniedException(message: \(String(describing: message)))"}
}

extension AccessDeniedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You don't have permissions to perform the requested operation. The user or role that
///             is making the request must have at least one IAM permissions policy attached that
///             grants the required permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the
///                 <i>IAM User Guide.</i>
///          </p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Equatable {
    public let message: String?
}

extension AccessDeniedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccessDeniedForDependencyException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccessDeniedForDependencyException(message: \(String(describing: message)), reason: \(String(describing: reason)))"}
}

extension AccessDeniedForDependencyException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccessDeniedForDependencyExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation that you attempted requires you to have the
///                 <code>iam:CreateServiceLinkedRole</code> for
///                 <code>organizations.amazonaws.com</code> permission so that AWS Organizations can create the
///             required service-linked role. You don't have that permission.</p>
public struct AccessDeniedForDependencyException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    public var reason: AccessDeniedForDependencyExceptionReason?

    public init (
        message: String? = nil,
        reason: AccessDeniedForDependencyExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct AccessDeniedForDependencyExceptionBody: Equatable {
    public let message: String?
    public let reason: AccessDeniedForDependencyExceptionReason?
}

extension AccessDeniedForDependencyExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(AccessDeniedForDependencyExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

public enum AccessDeniedForDependencyExceptionReason {
    case accessDeniedDuringCreateServiceLinkedRole
    case sdkUnknown(String)
}

extension AccessDeniedForDependencyExceptionReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AccessDeniedForDependencyExceptionReason] {
        return [
            .accessDeniedDuringCreateServiceLinkedRole,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDeniedDuringCreateServiceLinkedRole: return "ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AccessDeniedForDependencyExceptionReason(rawValue: rawValue) ?? AccessDeniedForDependencyExceptionReason.sdkUnknown(rawValue)
    }
}

extension Account: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case email = "Email"
        case id = "Id"
        case joinedMethod = "JoinedMethod"
        case joinedTimestamp = "JoinedTimestamp"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let joinedMethod = joinedMethod {
            try encodeContainer.encode(joinedMethod.rawValue, forKey: .joinedMethod)
        }
        if let joinedTimestamp = joinedTimestamp {
            try encodeContainer.encode(joinedTimestamp.timeIntervalSince1970, forKey: .joinedTimestamp)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AccountStatus.self, forKey: .status)
        status = statusDecoded
        let joinedMethodDecoded = try containerValues.decodeIfPresent(AccountJoinedMethod.self, forKey: .joinedMethod)
        joinedMethod = joinedMethodDecoded
        let joinedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .joinedTimestamp)
        joinedTimestamp = joinedTimestampDecoded
    }
}

extension Account: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Account(arn: \(String(describing: arn)), email: \(String(describing: email)), id: \(String(describing: id)), joinedMethod: \(String(describing: joinedMethod)), joinedTimestamp: \(String(describing: joinedTimestamp)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>Contains information about an AWS account that is a member of an
///             organization.</p>
public struct Account: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the account.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>The email address associated with the AWS account.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for this parameter is a string of characters that represents a
    ///             standard internet email address.</p>
    public let email: String?
    /// <p>The unique identifier (ID) of the account.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
    ///     digits.</p>
    public let id: String?
    /// <p>The method by which the account joined the organization.</p>
    public let joinedMethod: AccountJoinedMethod?
    /// <p>The date the account became a part of the organization.</p>
    public let joinedTimestamp: Date?
    /// <p>The friendly name of the account.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>The status of the account in the organization.</p>
    public let status: AccountStatus?

    public init (
        arn: String? = nil,
        email: String? = nil,
        id: String? = nil,
        joinedMethod: AccountJoinedMethod? = nil,
        joinedTimestamp: Date? = nil,
        name: String? = nil,
        status: AccountStatus? = nil
    )
    {
        self.arn = arn
        self.email = email
        self.id = id
        self.joinedMethod = joinedMethod
        self.joinedTimestamp = joinedTimestamp
        self.name = name
        self.status = status
    }
}

extension AccountAlreadyRegisteredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccountAlreadyRegisteredException(message: \(String(describing: message)))"}
}

extension AccountAlreadyRegisteredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccountAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified account is already a delegated administrator for this AWS
///             service.</p>
public struct AccountAlreadyRegisteredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AccountAlreadyRegisteredExceptionBody: Equatable {
    public let message: String?
}

extension AccountAlreadyRegisteredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum AccountJoinedMethod {
    case created
    case invited
    case sdkUnknown(String)
}

extension AccountJoinedMethod : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AccountJoinedMethod] {
        return [
            .created,
            .invited,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .created: return "CREATED"
        case .invited: return "INVITED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AccountJoinedMethod(rawValue: rawValue) ?? AccountJoinedMethod.sdkUnknown(rawValue)
    }
}

extension AccountNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccountNotFoundException(message: \(String(describing: message)))"}
}

extension AccountNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccountNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> We can't find an AWS account with the <code>AccountId</code> that you specified, or
///             the account whose credentials you used to make this request isn't a member of an
///             organization.</p>
public struct AccountNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AccountNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension AccountNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccountNotRegisteredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccountNotRegisteredException(message: \(String(describing: message)))"}
}

extension AccountNotRegisteredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccountNotRegisteredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified account is not a delegated administrator for this AWS service. </p>
public struct AccountNotRegisteredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AccountNotRegisteredExceptionBody: Equatable {
    public let message: String?
}

extension AccountNotRegisteredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccountOwnerNotVerifiedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccountOwnerNotVerifiedException(message: \(String(describing: message)))"}
}

extension AccountOwnerNotVerifiedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccountOwnerNotVerifiedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't invite an existing account to your organization until you verify that you
///             own the email address associated with the management account. For more information, see
///                 <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_create.html#about-email-verification">Email
///                 Address Verification</a> in the <i>AWS Organizations User Guide.</i>
///          </p>
public struct AccountOwnerNotVerifiedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AccountOwnerNotVerifiedExceptionBody: Equatable {
    public let message: String?
}

extension AccountOwnerNotVerifiedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum AccountStatus {
    case active
    case suspended
    case sdkUnknown(String)
}

extension AccountStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AccountStatus] {
        return [
            .active,
            .suspended,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .suspended: return "SUSPENDED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AccountStatus(rawValue: rawValue) ?? AccountStatus.sdkUnknown(rawValue)
    }
}

public enum ActionType {
    case addOrganizationsServiceLinkedRole
    case approveAllFeatures
    case enableAllFeatures
    case inviteAccountToOrganization
    case sdkUnknown(String)
}

extension ActionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ActionType] {
        return [
            .addOrganizationsServiceLinkedRole,
            .approveAllFeatures,
            .enableAllFeatures,
            .inviteAccountToOrganization,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .addOrganizationsServiceLinkedRole: return "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE"
        case .approveAllFeatures: return "APPROVE_ALL_FEATURES"
        case .enableAllFeatures: return "ENABLE_ALL_FEATURES"
        case .inviteAccountToOrganization: return "INVITE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ActionType(rawValue: rawValue) ?? ActionType.sdkUnknown(rawValue)
    }
}

extension AlreadyInOrganizationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AlreadyInOrganizationException(message: \(String(describing: message)))"}
}

extension AlreadyInOrganizationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AlreadyInOrganizationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This account is already a member of an organization. An account can belong to only one
///             organization at a time.</p>
public struct AlreadyInOrganizationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyInOrganizationExceptionBody: Equatable {
    public let message: String?
}

extension AlreadyInOrganizationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AttachPolicyInputBodyMiddleware: Middleware {
    public let id: String = "AttachPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachPolicyInput>
    public typealias MOutput = OperationOutput<AttachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachPolicyOutputError>
}

extension AttachPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachPolicyInput(policyId: \(String(describing: policyId)), targetId: \(String(describing: targetId)))"}
}

extension AttachPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

public struct AttachPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "AttachPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachPolicyInput>
    public typealias MOutput = OperationOutput<AttachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachPolicyOutputError>
}

public struct AttachPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "AttachPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AttachPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<AttachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AttachPolicyInput>
    public typealias MOutput = OperationOutput<AttachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AttachPolicyOutputError>
}

public struct AttachPolicyInput: Equatable {
    /// <p>The unique identifier (ID) of the policy that you want to attach to the target. You
    ///             can get the ID for the policy by calling the <a>ListPolicies</a>
    ///             operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let policyId: String?
    /// <p>The unique identifier (ID) of the root, OU, or account that you want to attach the
    ///             policy to. You can get the ID by calling the <a>ListRoots</a>, <a>ListOrganizationalUnitsForParent</a>, or <a>ListAccounts</a>
    ///             operations.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Account</b> - A string that consists of exactly 12 digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let targetId: String?

    public init (
        policyId: String? = nil,
        targetId: String? = nil
    )
    {
        self.policyId = policyId
        self.targetId = targetId
    }
}

struct AttachPolicyInputBody: Equatable {
    public let policyId: String?
    public let targetId: String?
}

extension AttachPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension AttachPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatePolicyAttachmentException" : self = .duplicatePolicyAttachmentException(try DuplicatePolicyAttachmentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotEnabledException" : self = .policyTypeNotEnabledException(try PolicyTypeNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachPolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicatePolicyAttachmentException(DuplicatePolicyAttachmentException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyNotFoundException(PolicyNotFoundException)
    case policyTypeNotEnabledException(PolicyTypeNotEnabledException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttachPolicyOutputResponse()"}
}

extension AttachPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AttachPolicyOutputResponse: Equatable {

    public init() {}
}

struct AttachPolicyOutputResponseBody: Equatable {
}

extension AttachPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CancelHandshakeInputBodyMiddleware: Middleware {
    public let id: String = "CancelHandshakeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelHandshakeInput>
    public typealias MOutput = OperationOutput<CancelHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelHandshakeOutputError>
}

extension CancelHandshakeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelHandshakeInput(handshakeId: \(String(describing: handshakeId)))"}
}

extension CancelHandshakeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

public struct CancelHandshakeInputHeadersMiddleware: Middleware {
    public let id: String = "CancelHandshakeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelHandshakeInput>
    public typealias MOutput = OperationOutput<CancelHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelHandshakeOutputError>
}

public struct CancelHandshakeInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelHandshakeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelHandshakeInput>
    public typealias MOutput = OperationOutput<CancelHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelHandshakeOutputError>
}

public struct CancelHandshakeInput: Equatable {
    /// <p>The unique identifier (ID) of the handshake that you want to cancel. You can get the
    ///             ID from the <a>ListHandshakesForOrganization</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let handshakeId: String?

    public init (
        handshakeId: String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct CancelHandshakeInputBody: Equatable {
    public let handshakeId: String?
}

extension CancelHandshakeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension CancelHandshakeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelHandshakeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeAlreadyInStateException" : self = .handshakeAlreadyInStateException(try HandshakeAlreadyInStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidHandshakeTransitionException" : self = .invalidHandshakeTransitionException(try InvalidHandshakeTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelHandshakeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeAlreadyInStateException(HandshakeAlreadyInStateException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidHandshakeTransitionException(InvalidHandshakeTransitionException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelHandshakeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelHandshakeOutputResponse(handshake: \(String(describing: handshake)))"}
}

extension CancelHandshakeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CancelHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct CancelHandshakeOutputResponse: Equatable {
    /// <p>A structure that contains details about the handshake that you canceled.</p>
    public let handshake: Handshake?

    public init (
        handshake: Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct CancelHandshakeOutputResponseBody: Equatable {
    public let handshake: Handshake?
}

extension CancelHandshakeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension Child: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ChildType.self, forKey: .type)
        type = typeDecoded
    }
}

extension Child: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Child(id: \(String(describing: id)), type: \(String(describing: type)))"}
}

/// <p>Contains a list of child entities, either OUs or accounts.</p>
public struct Child: Equatable {
    /// <p>The unique identifier (ID) of this child entity.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a child ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Account</b> - A string that consists of exactly 12 digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with
    ///           "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that
    ///           contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional
    ///           lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let id: String?
    /// <p>The type of this child entity.</p>
    public let type: ChildType?

    public init (
        id: String? = nil,
        type: ChildType? = nil
    )
    {
        self.id = id
        self.type = type
    }
}

extension ChildNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildNotFoundException(message: \(String(describing: message)))"}
}

extension ChildNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ChildNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find an organizational unit (OU) or AWS account with the
///                 <code>ChildId</code> that you specified.</p>
public struct ChildNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ChildNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension ChildNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ChildType {
    case account
    case organizationalUnit
    case sdkUnknown(String)
}

extension ChildType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ChildType] {
        return [
            .account,
            .organizationalUnit,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .account: return "ACCOUNT"
        case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ChildType(rawValue: rawValue) ?? ChildType.sdkUnknown(rawValue)
    }
}

extension ConcurrentModificationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConcurrentModificationException(message: \(String(describing: message)))"}
}

extension ConcurrentModificationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The target of the operation is currently being modified by a different request. Try
///             again later.</p>
public struct ConcurrentModificationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Equatable {
    public let message: String?
}

extension ConcurrentModificationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConstraintViolationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConstraintViolationException(message: \(String(describing: message)), reason: \(String(describing: reason)))"}
}

extension ConstraintViolationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConstraintViolationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Performing this operation violates a minimum or maximum value limit. For example,
///             attempting to remove the last service control policy (SCP) from an OU or root, inviting
///             or creating too many accounts to the organization, or attaching too many policies to an
///             account, OU, or root. This exception includes a reason that contains additional
///             information about the violated limit:</p>
///         <note>
///             <p>Some of the reasons in the following list might not be applicable to this specific
///                 API or operation.</p>
///         </note>
///         <ul>
///             <li>
///                 <p>ACCOUNT_CANNOT_LEAVE_ORGANIZATION: You attempted to remove the management
///                     account from the organization. You can't remove the management account. Instead,
///                     after you remove all member accounts, delete the organization itself.</p>
///             </li>
///             <li>
///                 <p>ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA: You attempted to remove an account from the
///                     organization that doesn't yet have enough information to exist as a standalone
///                     account. This account requires you to first agree to the AWS Customer
///                     Agreement. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#orgs_manage_accounts_remove-from-master">Removing a member account from your organization</a>in the
///                         <i>AWS Organizations User Guide.</i>
///                </p>
///             </li>
///             <li>
///                 <p>ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION: You attempted to remove an
///                     account from the organization that doesn't yet have enough information to exist
///                     as a standalone account. This account requires you to first complete phone
///                     verification. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#orgs_manage_accounts_remove-from-master">Removing a member account from your organization</a> in the
///                         <i>AWS Organizations User Guide.</i>
///                </p>
///             </li>
///             <li>
///                 <p>ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of
///                     accounts that you can create in one day.</p>
///             </li>
///             <li>
///                 <p>ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number
///                     of accounts in an organization. If you need more accounts, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a> to request an increase
///                     in your limit. </p>
///                 <p>Or the number of invitations that you tried to send would cause you to exceed
///                     the limit of accounts in your organization. Send fewer invitations or contact
///                     AWS Support to request an increase in the number of accounts.</p>
///                 <note>
///                     <p>Deleted and closed accounts still count toward your limit.</p>
///                 </note>
///                 <important>
///                     <p>If you get this exception when running a command immediately after
///                         creating the organization, wait one hour and try again. After an hour, if
///                         the command continues to fail with this error, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
///                 </important>
///             </li>
///             <li>
///                 <p>CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR: You attempted to register
///                     the management account of the organization as a delegated administrator for an
///                     AWS service integrated with Organizations. You can designate only a member
///                     account as a delegated administrator.</p>
///             </li>
///             <li>
///                 <p>CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG: You attempted to remove an
///                     account that is registered as a delegated administrator for a service integrated
///                     with your organization. To complete this operation, you must first deregister
///                     this account as a delegated administrator. </p>
///             </li>
///             <li>
///                 <p>CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION: To create an
///                     organization in the specified region, you must enable all features mode.</p>
///             </li>
///             <li>
///                 <p>DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE: You attempted to register an
///                     AWS account as a delegated administrator for an AWS service that already has a
///                     delegated administrator. To complete this operation, you must first deregister
///                     any existing delegated administrators for this service.</p>
///             </li>
///             <li>
///                 <p>EMAIL_VERIFICATION_CODE_EXPIRED: The email verification code is only valid for
///                     a limited period of time. You must resubmit the request and generate a new
///                     verfication code.</p>
///             </li>
///             <li>
///                 <p>HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of
///                     handshakes that you can send in one day.</p>
///             </li>
///             <li>
///                 <p>MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE: To create an account in
///                     this organization, you first must migrate the organization's management account
///                     to the marketplace that corresponds to the management account's address. For
///                     example, accounts with India addresses must be associated with the AISPL
///                     marketplace. All accounts in an organization must be associated with the same
///                     marketplace.</p>
///             </li>
///             <li>
///                 <p>MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE: Applies only to the AWS Regions in
///                     China. To create an organization, the master must have a valid business license.
///                     For more information, contact customer support.</p>
///             </li>
///             <li>
///                 <p>MASTER_ACCOUNT_MISSING_CONTACT_INFO: To complete this operation, you must
///                     first provide a valid contact address and phone number for the management
///                     account. Then try the operation again.</p>
///             </li>
///             <li>
///                 <p>MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED: To complete this operation, the
///                     management account must have an associated account in the AWS GovCloud
///                     (US-West) Region. For more information, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations</a> in
///                     the
///                     <i>AWS GovCloud User Guide.</i>
///                </p>
///             </li>
///             <li>
///                 <p>MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To create an organization with
///                     this management account, you first must associate a valid payment instrument,
///                     such as a credit card, with the account. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info">To leave an organization when all required account information has not yet
///                         been provided</a> in the <i>AWS Organizations User Guide.</i>
///                </p>
///             </li>
///             <li>
///                 <p>MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED: You attempted to
///                     register more delegated administrators than allowed for the service principal.
///                 </p>
///             </li>
///             <li>
///                 <p>MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to exceed the number
///                     of policies of a certain type that can be attached to an entity at one
///                     time.</p>
///             </li>
///             <li>
///                 <p>MAX_TAG_LIMIT_EXCEEDED: You have exceeded the number of tags allowed on this
///                     resource. </p>
///             </li>
///             <li>
///                 <p>MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To complete this operation with
///                     this member account, you first must associate a valid payment instrument, such
///                     as a credit card, with the account. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info">To leave an organization when all required account information has not yet
///                         been provided</a> in the <i>AWS Organizations User Guide.</i>
///                </p>
///             </li>
///             <li>
///                 <p>MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to detach a policy
///                     from an entity that would cause the entity to have fewer than the minimum number
///                     of policies of a certain type required.</p>
///             </li>
///             <li>
///                 <p>ORGANIZATION_NOT_IN_ALL_FEATURES_MODE: You attempted to perform an operation
///                     that requires the organization to be configured to support all features. An
///                     organization that supports only consolidated billing features can't perform this
///                     operation.</p>
///             </li>
///             <li>
///                 <p>OU_DEPTH_LIMIT_EXCEEDED: You attempted to create an OU tree that is too many
///                     levels deep.</p>
///             </li>
///             <li>
///                 <p>OU_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the number of OUs that you
///                     can have in an organization.</p>
///             </li>
///             <li>
///                 <p>POLICY_CONTENT_LIMIT_EXCEEDED: You attempted to create a policy that is larger
///                     than the maximum size.</p>
///             </li>
///             <li>
///                 <p>POLICY_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the number of policies
///                     that you can have in an organization.</p>
///             </li>
///             <li>
///                 <p>TAG_POLICY_VIOLATION: You attempted to create or update a resource with tags
///                     that are not compliant with the tag policy requirements for this account.</p>
///             </li>
///          </ul>
public struct ConstraintViolationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    public var reason: ConstraintViolationExceptionReason?

    public init (
        message: String? = nil,
        reason: ConstraintViolationExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct ConstraintViolationExceptionBody: Equatable {
    public let message: String?
    public let reason: ConstraintViolationExceptionReason?
}

extension ConstraintViolationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(ConstraintViolationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

public enum ConstraintViolationExceptionReason {
    case accountCannotLeaveOrganization
    case accountCannotLeaveWithoutEula
    case accountCannotLeaveWithoutPhoneVerification
    case accountCreationRateLimitExceeded
    case accountNumberLimitExceeded
    case cannotRegisterMasterAsDelegatedAdministrator
    case cannotRemoveDelegatedAdministratorFromOrg
    case createOrganizationInBillingModeUnsupportedRegion
    case delegatedAdministratorExistsForThisService
    case emailVerificationCodeExpired
    case handshakeRateLimitExceeded
    case masterAccountAddressDoesNotMatchMarketplace
    case masterAccountMissingBusinessLicense
    case masterAccountMissingContactInfo
    case masterAccountNotGovcloudEnabled
    case masterAccountPaymentInstrumentRequired
    case maxDelegatedAdministratorsForServiceLimitExceeded
    case maxPolicyTypeAttachmentLimitExceeded
    case maxTagLimitExceeded
    case memberAccountPaymentInstrumentRequired
    case minPolicyTypeAttachmentLimitExceeded
    case organizationNotInAllFeaturesMode
    case ouDepthLimitExceeded
    case ouNumberLimitExceeded
    case policyContentLimitExceeded
    case policyNumberLimitExceeded
    case tagPolicyViolation
    case waitPeriodActive
    case sdkUnknown(String)
}

extension ConstraintViolationExceptionReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ConstraintViolationExceptionReason] {
        return [
            .accountCannotLeaveOrganization,
            .accountCannotLeaveWithoutEula,
            .accountCannotLeaveWithoutPhoneVerification,
            .accountCreationRateLimitExceeded,
            .accountNumberLimitExceeded,
            .cannotRegisterMasterAsDelegatedAdministrator,
            .cannotRemoveDelegatedAdministratorFromOrg,
            .createOrganizationInBillingModeUnsupportedRegion,
            .delegatedAdministratorExistsForThisService,
            .emailVerificationCodeExpired,
            .handshakeRateLimitExceeded,
            .masterAccountAddressDoesNotMatchMarketplace,
            .masterAccountMissingBusinessLicense,
            .masterAccountMissingContactInfo,
            .masterAccountNotGovcloudEnabled,
            .masterAccountPaymentInstrumentRequired,
            .maxDelegatedAdministratorsForServiceLimitExceeded,
            .maxPolicyTypeAttachmentLimitExceeded,
            .maxTagLimitExceeded,
            .memberAccountPaymentInstrumentRequired,
            .minPolicyTypeAttachmentLimitExceeded,
            .organizationNotInAllFeaturesMode,
            .ouDepthLimitExceeded,
            .ouNumberLimitExceeded,
            .policyContentLimitExceeded,
            .policyNumberLimitExceeded,
            .tagPolicyViolation,
            .waitPeriodActive,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountCannotLeaveOrganization: return "ACCOUNT_CANNOT_LEAVE_ORGANIZATION"
        case .accountCannotLeaveWithoutEula: return "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA"
        case .accountCannotLeaveWithoutPhoneVerification: return "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION"
        case .accountCreationRateLimitExceeded: return "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED"
        case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
        case .cannotRegisterMasterAsDelegatedAdministrator: return "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR"
        case .cannotRemoveDelegatedAdministratorFromOrg: return "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG"
        case .createOrganizationInBillingModeUnsupportedRegion: return "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION"
        case .delegatedAdministratorExistsForThisService: return "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE"
        case .emailVerificationCodeExpired: return "EMAIL_VERIFICATION_CODE_EXPIRED"
        case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
        case .masterAccountAddressDoesNotMatchMarketplace: return "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE"
        case .masterAccountMissingBusinessLicense: return "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE"
        case .masterAccountMissingContactInfo: return "MASTER_ACCOUNT_MISSING_CONTACT_INFO"
        case .masterAccountNotGovcloudEnabled: return "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED"
        case .masterAccountPaymentInstrumentRequired: return "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
        case .maxDelegatedAdministratorsForServiceLimitExceeded: return "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED"
        case .maxPolicyTypeAttachmentLimitExceeded: return "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
        case .maxTagLimitExceeded: return "MAX_TAG_LIMIT_EXCEEDED"
        case .memberAccountPaymentInstrumentRequired: return "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
        case .minPolicyTypeAttachmentLimitExceeded: return "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
        case .organizationNotInAllFeaturesMode: return "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE"
        case .ouDepthLimitExceeded: return "OU_DEPTH_LIMIT_EXCEEDED"
        case .ouNumberLimitExceeded: return "OU_NUMBER_LIMIT_EXCEEDED"
        case .policyContentLimitExceeded: return "POLICY_CONTENT_LIMIT_EXCEEDED"
        case .policyNumberLimitExceeded: return "POLICY_NUMBER_LIMIT_EXCEEDED"
        case .tagPolicyViolation: return "TAG_POLICY_VIOLATION"
        case .waitPeriodActive: return "WAIT_PERIOD_ACTIVE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ConstraintViolationExceptionReason(rawValue: rawValue) ?? ConstraintViolationExceptionReason.sdkUnknown(rawValue)
    }
}

public enum CreateAccountFailureReason {
    case accountLimitExceeded
    case concurrentAccountModification
    case emailAlreadyExists
    case failedBusinessValidation
    case govcloudAccountAlreadyExists
    case internalFailure
    case invalidAddress
    case invalidEmail
    case invalidIdentityForBusinessValidation
    case missingBusinessValidation
    case missingPaymentInstrument
    case pendingBusinessValidationv
    case unknownBusinessValidation
    case sdkUnknown(String)
}

extension CreateAccountFailureReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CreateAccountFailureReason] {
        return [
            .accountLimitExceeded,
            .concurrentAccountModification,
            .emailAlreadyExists,
            .failedBusinessValidation,
            .govcloudAccountAlreadyExists,
            .internalFailure,
            .invalidAddress,
            .invalidEmail,
            .invalidIdentityForBusinessValidation,
            .missingBusinessValidation,
            .missingPaymentInstrument,
            .pendingBusinessValidationv,
            .unknownBusinessValidation,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountLimitExceeded: return "ACCOUNT_LIMIT_EXCEEDED"
        case .concurrentAccountModification: return "CONCURRENT_ACCOUNT_MODIFICATION"
        case .emailAlreadyExists: return "EMAIL_ALREADY_EXISTS"
        case .failedBusinessValidation: return "FAILED_BUSINESS_VALIDATION"
        case .govcloudAccountAlreadyExists: return "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
        case .internalFailure: return "INTERNAL_FAILURE"
        case .invalidAddress: return "INVALID_ADDRESS"
        case .invalidEmail: return "INVALID_EMAIL"
        case .invalidIdentityForBusinessValidation: return "INVALID_IDENTITY_FOR_BUSINESS_VALIDATION"
        case .missingBusinessValidation: return "MISSING_BUSINESS_VALIDATION"
        case .missingPaymentInstrument: return "MISSING_PAYMENT_INSTRUMENT"
        case .pendingBusinessValidationv: return "PENDING_BUSINESS_VALIDATION"
        case .unknownBusinessValidation: return "UNKNOWN_BUSINESS_VALIDATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CreateAccountFailureReason(rawValue: rawValue) ?? CreateAccountFailureReason.sdkUnknown(rawValue)
    }
}

public struct CreateAccountInputBodyMiddleware: Middleware {
    public let id: String = "CreateAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAccountInput>
    public typealias MOutput = OperationOutput<CreateAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAccountOutputError>
}

extension CreateAccountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAccountInput(accountName: \(String(describing: accountName)), email: \(String(describing: email)), iamUserAccessToBilling: \(String(describing: iamUserAccessToBilling)), roleName: \(String(describing: roleName)), tags: \(String(describing: tags)))"}
}

extension CreateAccountInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let iamUserAccessToBilling = iamUserAccessToBilling {
            try encodeContainer.encode(iamUserAccessToBilling.rawValue, forKey: .iamUserAccessToBilling)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}

public struct CreateAccountInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAccountInput>
    public typealias MOutput = OperationOutput<CreateAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAccountOutputError>
}

public struct CreateAccountInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAccountInput>
    public typealias MOutput = OperationOutput<CreateAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAccountOutputError>
}

public struct CreateAccountInput: Equatable {
    /// <p>The friendly name of the member account.</p>
    public let accountName: String?
    /// <p>The email address of the owner to assign to the new member account. This email address
    ///             must not already be associated with another AWS account. You must use a valid email
    ///             address to complete account creation. You can't access the root user of the account or
    ///             remove an account that was created with an invalid email address.</p>
    public let email: String?
    /// <p>If set to <code>ALLOW</code>, the new account enables IAM users to access account
    ///             billing information <i>if</i> they have the required permissions. If set
    ///             to <code>DENY</code>, only the root user of the new account can access account billing
    ///             information. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
    ///                 Access to the Billing and Cost Management Console</a> in the
    ///                 <i>AWS Billing and Cost Management User Guide</i>.</p>
    ///         <p>If you don't specify this parameter, the value defaults to <code>ALLOW</code>, and
    ///             IAM users and roles with the required permissions can access billing information for
    ///             the new account.</p>
    public let iamUserAccessToBilling: IAMUserAccessToBilling?
    /// <p>(Optional)</p>
    ///         <p>The name of an IAM role that AWS Organizations automatically preconfigures in the new member
    ///             account. This role trusts the management account, allowing users in the management
    ///             account to assume the role, as permitted by the management account administrator. The
    ///             role has administrator permissions in the new member account.</p>
    ///         <p>If you don't specify this parameter, the role name defaults to
    ///                 <code>OrganizationAccountAccessRole</code>.</p>
    ///         <p>For more information about how to use this role to access the member account, see the
    ///             following links:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role">Accessing and Administering the Member Accounts in Your
    ///                         Organization</a> in the <i>AWS Organizations User Guide</i>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Steps 2 and 3 in <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html">Tutorial:
    ///                         Delegate Access Across AWS Accounts Using IAM Roles</a> in the
    ///                         <i>IAM User Guide</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that
    ///     is used to validate this parameter. The pattern can include uppercase
    ///     letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-</p>
    public let roleName: String?
    /// <p>A list of tags that you want to attach to the newly created account. For each tag in
    ///             the list, you must specify both a tag key and a value. You can set the value to an empty
    ///             string, but you can't set it to <code>null</code>. For more information about tagging,
    ///             see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations
    ///                 resources</a> in the AWS Organizations User Guide.</p>
    ///         <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
    ///                 an account, then the entire request fails and the account is not created.</p>
    ///         </note>
    public let tags: [Tag]?

    public init (
        accountName: String? = nil,
        email: String? = nil,
        iamUserAccessToBilling: IAMUserAccessToBilling? = nil,
        roleName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.accountName = accountName
        self.email = email
        self.iamUserAccessToBilling = iamUserAccessToBilling
        self.roleName = roleName
        self.tags = tags
    }
}

struct CreateAccountInputBody: Equatable {
    public let email: String?
    public let accountName: String?
    public let roleName: String?
    public let iamUserAccessToBilling: IAMUserAccessToBilling?
    public let tags: [Tag]?
}

extension CreateAccountInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let iamUserAccessToBillingDecoded = try containerValues.decodeIfPresent(IAMUserAccessToBilling.self, forKey: .iamUserAccessToBilling)
        iamUserAccessToBilling = iamUserAccessToBillingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAccountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAccountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FinalizingOrganizationException" : self = .finalizingOrganizationException(try FinalizingOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAccountOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case finalizingOrganizationException(FinalizingOrganizationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAccountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAccountOutputResponse(createAccountStatus: \(String(describing: createAccountStatus)))"}
}

extension CreateAccountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateAccountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.createAccountStatus = output.createAccountStatus
        } else {
            self.createAccountStatus = nil
        }
    }
}

public struct CreateAccountOutputResponse: Equatable {
    /// <p>A structure that contains details about the request to create an account. This
    ///             response structure might not be fully populated when you first receive it because
    ///             account creation is an asynchronous process. You can pass the returned
    ///                 <code>CreateAccountStatus</code> ID as a parameter to <a>DescribeCreateAccountStatus</a> to get status about the progress of the
    ///             request at later times. You can also check the AWS CloudTrail log for the
    ///                 <code>CreateAccountResult</code> event. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html">Monitoring the Activity in Your
    ///                 Organization</a> in the <i>AWS Organizations User Guide</i>.</p>
    public let createAccountStatus: CreateAccountStatus?

    public init (
        createAccountStatus: CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

struct CreateAccountOutputResponseBody: Equatable {
    public let createAccountStatus: CreateAccountStatus?
}

extension CreateAccountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createAccountStatus = "CreateAccountStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusDecoded = try containerValues.decodeIfPresent(CreateAccountStatus.self, forKey: .createAccountStatus)
        createAccountStatus = createAccountStatusDecoded
    }
}

public enum CreateAccountState {
    case failed
    case inProgress
    case succeeded
    case sdkUnknown(String)
}

extension CreateAccountState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CreateAccountState] {
        return [
            .failed,
            .inProgress,
            .succeeded,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .inProgress: return "IN_PROGRESS"
        case .succeeded: return "SUCCEEDED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CreateAccountState(rawValue: rawValue) ?? CreateAccountState.sdkUnknown(rawValue)
    }
}

extension CreateAccountStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case accountName = "AccountName"
        case completedTimestamp = "CompletedTimestamp"
        case failureReason = "FailureReason"
        case govCloudAccountId = "GovCloudAccountId"
        case id = "Id"
        case requestedTimestamp = "RequestedTimestamp"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let accountName = accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let completedTimestamp = completedTimestamp {
            try encodeContainer.encode(completedTimestamp.timeIntervalSince1970, forKey: .completedTimestamp)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let govCloudAccountId = govCloudAccountId {
            try encodeContainer.encode(govCloudAccountId, forKey: .govCloudAccountId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let requestedTimestamp = requestedTimestamp {
            try encodeContainer.encode(requestedTimestamp.timeIntervalSince1970, forKey: .requestedTimestamp)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CreateAccountState.self, forKey: .state)
        state = stateDecoded
        let requestedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .requestedTimestamp)
        requestedTimestamp = requestedTimestampDecoded
        let completedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completedTimestamp)
        completedTimestamp = completedTimestampDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let govCloudAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .govCloudAccountId)
        govCloudAccountId = govCloudAccountIdDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(CreateAccountFailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension CreateAccountStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAccountStatus(accountId: \(String(describing: accountId)), accountName: \(String(describing: accountName)), completedTimestamp: \(String(describing: completedTimestamp)), failureReason: \(String(describing: failureReason)), govCloudAccountId: \(String(describing: govCloudAccountId)), id: \(String(describing: id)), requestedTimestamp: \(String(describing: requestedTimestamp)), state: \(String(describing: state)))"}
}

/// <p>Contains the status about a <a>CreateAccount</a> or <a>CreateGovCloudAccount</a> request to create an AWS account or an AWS
///             GovCloud (US) account in an organization.</p>
public struct CreateAccountStatus: Equatable {
    /// <p>If the account was created successfully, the unique identifier (ID) of the new
    ///             account.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
    ///     digits.</p>
    public let accountId: String?
    /// <p>The account name given to the account when it was created.</p>
    public let accountName: String?
    /// <p>The date and time that the account was created and the request completed.</p>
    public let completedTimestamp: Date?
    /// <p>If the request failed, a description of the reason for the failure.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>ACCOUNT_LIMIT_EXCEEDED: The account couldn't be created because you reached
    ///                     the limit on the number of accounts in your organization.</p>
    ///             </li>
    ///             <li>
    ///                 <p>CONCURRENT_ACCOUNT_MODIFICATION: You already submitted a request with the same
    ///                     information.</p>
    ///             </li>
    ///             <li>
    ///                 <p>EMAIL_ALREADY_EXISTS: The account could not be created because another AWS
    ///                     account with that email address already exists.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FAILED_BUSINESS_VALIDATION: The AWS account that owns your organization
    ///                     failed to receive business license validation.</p>
    ///             </li>
    ///             <li>
    ///                 <p>GOVCLOUD_ACCOUNT_ALREADY_EXISTS: The account in the AWS GovCloud (US) Region
    ///                     could not be created because this Region already includes an account with that
    ///                     email address.</p>
    ///             </li>
    ///             <li>
    ///                 <p>IDENTITY_INVALID_BUSINESS_VALIDATION: The AWS account that owns your
    ///                     organization can't complete business license validation because it doesn't have
    ///                     valid identity data.</p>
    ///             </li>
    ///             <li>
    ///                 <p>INVALID_ADDRESS: The account could not be created because the address you
    ///                     provided is not valid.</p>
    ///             </li>
    ///             <li>
    ///                 <p>INVALID_EMAIL: The account could not be created because the email address you
    ///                     provided is not valid.</p>
    ///             </li>
    ///             <li>
    ///                 <p>INTERNAL_FAILURE: The account could not be created because of an internal
    ///                     failure. Try again later. If the problem persists, contact AWS Customer
    ///                     Support.</p>
    ///             </li>
    ///             <li>
    ///                 <p>MISSING_BUSINESS_VALIDATION: The AWS account that owns your organization has
    ///                     not received Business Validation.</p>
    ///             </li>
    ///             <li>
    ///                 <p> MISSING_PAYMENT_INSTRUMENT: You must configure the management account with a
    ///                     valid payment method, such as a credit card.</p>
    ///             </li>
    ///             <li>
    ///                 <p>PENDING_BUSINESS_VALIDATION: The AWS account that owns your organization is
    ///                     still in the process of completing business license validation.</p>
    ///             </li>
    ///             <li>
    ///                 <p>UNKNOWN_BUSINESS_VALIDATION: The AWS account that owns your organization has
    ///                     an unknown issue with business license validation.</p>
    ///             </li>
    ///          </ul>
    public let failureReason: CreateAccountFailureReason?
    /// <p>If the account was created successfully, the unique identifier (ID) of the new account
    ///             in the AWS GovCloud (US) Region.</p>
    public let govCloudAccountId: String?
    /// <p>The unique identifier (ID) that references this request. You get this value from the
    ///             response of the initial <a>CreateAccount</a> request to create the
    ///             account.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a create account request ID string
    ///     requires "car-" followed by from 8 to 32 lowercase letters or digits.</p>
    public let id: String?
    /// <p>The date and time that the request was made for the account creation.</p>
    public let requestedTimestamp: Date?
    /// <p>The status of the asynchronous request to create an AWS account.</p>
    public let state: CreateAccountState?

    public init (
        accountId: String? = nil,
        accountName: String? = nil,
        completedTimestamp: Date? = nil,
        failureReason: CreateAccountFailureReason? = nil,
        govCloudAccountId: String? = nil,
        id: String? = nil,
        requestedTimestamp: Date? = nil,
        state: CreateAccountState? = nil
    )
    {
        self.accountId = accountId
        self.accountName = accountName
        self.completedTimestamp = completedTimestamp
        self.failureReason = failureReason
        self.govCloudAccountId = govCloudAccountId
        self.id = id
        self.requestedTimestamp = requestedTimestamp
        self.state = state
    }
}

extension CreateAccountStatusNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateAccountStatusNotFoundException(message: \(String(describing: message)))"}
}

extension CreateAccountStatusNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateAccountStatusNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find an create account request with the <code>CreateAccountRequestId</code>
///             that you specified.</p>
public struct CreateAccountStatusNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct CreateAccountStatusNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension CreateAccountStatusNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateGovCloudAccountInputBodyMiddleware: Middleware {
    public let id: String = "CreateGovCloudAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGovCloudAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGovCloudAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGovCloudAccountInput>
    public typealias MOutput = OperationOutput<CreateGovCloudAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGovCloudAccountOutputError>
}

extension CreateGovCloudAccountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGovCloudAccountInput(accountName: \(String(describing: accountName)), email: \(String(describing: email)), iamUserAccessToBilling: \(String(describing: iamUserAccessToBilling)), roleName: \(String(describing: roleName)), tags: \(String(describing: tags)))"}
}

extension CreateGovCloudAccountInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let iamUserAccessToBilling = iamUserAccessToBilling {
            try encodeContainer.encode(iamUserAccessToBilling.rawValue, forKey: .iamUserAccessToBilling)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}

public struct CreateGovCloudAccountInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGovCloudAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGovCloudAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGovCloudAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGovCloudAccountInput>
    public typealias MOutput = OperationOutput<CreateGovCloudAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGovCloudAccountOutputError>
}

public struct CreateGovCloudAccountInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGovCloudAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGovCloudAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGovCloudAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGovCloudAccountInput>
    public typealias MOutput = OperationOutput<CreateGovCloudAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGovCloudAccountOutputError>
}

public struct CreateGovCloudAccountInput: Equatable {
    /// <p>The friendly name of the member account.</p>
    public let accountName: String?
    /// <p>The email address of the owner to assign to the new member account in the commercial
    ///             Region. This email address must not already be associated with another AWS account.
    ///             You must use a valid email address to complete account creation. You can't access the
    ///             root user of the account or remove an account that was created with an invalid email
    ///             address. Like all request parameters for <code>CreateGovCloudAccount</code>, the request
    ///             for the email address for the AWS GovCloud (US) account originates from the commercial
    ///             Region, not from the AWS GovCloud (US) Region.</p>
    public let email: String?
    /// <p>If set to <code>ALLOW</code>, the new linked account in the commercial Region enables
    ///             IAM users to access account billing information <i>if</i> they have the
    ///             required permissions. If set to <code>DENY</code>, only the root user of the new account
    ///             can access account billing information. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
    ///                 Access to the Billing and Cost Management Console</a> in the
    ///                 <i>AWS Billing and Cost Management User Guide.</i>
    ///          </p>
    ///         <p>If you don't specify this parameter, the value defaults to <code>ALLOW</code>, and
    ///             IAM users and roles with the required permissions can access billing information for
    ///             the new account.</p>
    public let iamUserAccessToBilling: IAMUserAccessToBilling?
    /// <p>(Optional)</p>
    ///         <p>The name of an IAM role that AWS Organizations automatically preconfigures in the new member
    ///             accounts in both the AWS GovCloud (US) Region and in the commercial Region. This role
    ///             trusts the management account, allowing users in the management account to assume the
    ///             role, as permitted by the management account administrator. The role has administrator
    ///             permissions in the new member account.</p>
    ///         <p>If you don't specify this parameter, the role name defaults to
    ///                 <code>OrganizationAccountAccessRole</code>.</p>
    ///         <p>For more information about how to use this role to access the member account, see
    ///                 <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role">Accessing and Administering the Member Accounts in Your Organization</a> in the
    ///                 <i>AWS Organizations User Guide</i> and steps 2 and 3 in <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html">Tutorial: Delegate Access Across AWS Accounts Using IAM Roles</a> in the
    ///                 <i>IAM User Guide.</i>
    ///          </p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that
    ///     is used to validate this parameter. The pattern can include uppercase
    ///     letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-</p>
    public let roleName: String?
    /// <p>A list of tags that you want to attach to the newly created account. These tags are
    ///             attached to the commercial account associated with the GovCloud account, and not to the
    ///             GovCloud account itself. To add tags to the actual GovCloud account, call the <a>TagResource</a> operation in the GovCloud region after the new GovCloud
    ///             account exists.</p>
    ///         <p>For each tag in the list, you must specify both a tag key and a value. You can set the
    ///             value to an empty string, but you can't set it to <code>null</code>. For more
    ///             information about tagging, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations resources</a> in the
    ///             AWS Organizations User Guide.</p>
    ///         <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
    ///                 an account, then the entire request fails and the account is not created.</p>
    ///         </note>
    public let tags: [Tag]?

    public init (
        accountName: String? = nil,
        email: String? = nil,
        iamUserAccessToBilling: IAMUserAccessToBilling? = nil,
        roleName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.accountName = accountName
        self.email = email
        self.iamUserAccessToBilling = iamUserAccessToBilling
        self.roleName = roleName
        self.tags = tags
    }
}

struct CreateGovCloudAccountInputBody: Equatable {
    public let email: String?
    public let accountName: String?
    public let roleName: String?
    public let iamUserAccessToBilling: IAMUserAccessToBilling?
    public let tags: [Tag]?
}

extension CreateGovCloudAccountInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let iamUserAccessToBillingDecoded = try containerValues.decodeIfPresent(IAMUserAccessToBilling.self, forKey: .iamUserAccessToBilling)
        iamUserAccessToBilling = iamUserAccessToBillingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateGovCloudAccountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGovCloudAccountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FinalizingOrganizationException" : self = .finalizingOrganizationException(try FinalizingOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGovCloudAccountOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case finalizingOrganizationException(FinalizingOrganizationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGovCloudAccountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGovCloudAccountOutputResponse(createAccountStatus: \(String(describing: createAccountStatus)))"}
}

extension CreateGovCloudAccountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateGovCloudAccountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.createAccountStatus = output.createAccountStatus
        } else {
            self.createAccountStatus = nil
        }
    }
}

public struct CreateGovCloudAccountOutputResponse: Equatable {
    /// <p>Contains the status about a <a>CreateAccount</a> or <a>CreateGovCloudAccount</a> request to create an AWS account or an AWS
    ///             GovCloud (US) account in an organization.</p>
    public let createAccountStatus: CreateAccountStatus?

    public init (
        createAccountStatus: CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

struct CreateGovCloudAccountOutputResponseBody: Equatable {
    public let createAccountStatus: CreateAccountStatus?
}

extension CreateGovCloudAccountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createAccountStatus = "CreateAccountStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusDecoded = try containerValues.decodeIfPresent(CreateAccountStatus.self, forKey: .createAccountStatus)
        createAccountStatus = createAccountStatusDecoded
    }
}

public struct CreateOrganizationInputBodyMiddleware: Middleware {
    public let id: String = "CreateOrganizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrganizationInput>
    public typealias MOutput = OperationOutput<CreateOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrganizationOutputError>
}

extension CreateOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateOrganizationInput(featureSet: \(String(describing: featureSet)))"}
}

extension CreateOrganizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case featureSet = "FeatureSet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureSet = featureSet {
            try encodeContainer.encode(featureSet.rawValue, forKey: .featureSet)
        }
    }
}

public struct CreateOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrganizationInput>
    public typealias MOutput = OperationOutput<CreateOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrganizationOutputError>
}

public struct CreateOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrganizationInput>
    public typealias MOutput = OperationOutput<CreateOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrganizationOutputError>
}

public struct CreateOrganizationInput: Equatable {
    /// <p>Specifies the feature set supported by the new organization. Each feature set supports
    ///             different levels of functionality.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>CONSOLIDATED_BILLING</code>: All member accounts have their bills
    ///                     consolidated to and paid by the management account. For more information, see
    ///                         <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-cb-only">Consolidated billing</a> in the
    ///                     <i>AWS Organizations User Guide.</i>
    ///                </p>
    ///                 <p> The consolidated billing feature subset isn't available for organizations in
    ///                     the AWS GovCloud (US) Region.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ALL</code>: In addition to all the features supported by the
    ///                     consolidated billing feature set, the management account can also apply any
    ///                     policy type to any member account in the organization. For more information, see
    ///                         <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-all">All
    ///                         features</a> in the <i>AWS Organizations User Guide.</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let featureSet: OrganizationFeatureSet?

    public init (
        featureSet: OrganizationFeatureSet? = nil
    )
    {
        self.featureSet = featureSet
    }
}

struct CreateOrganizationInputBody: Equatable {
    public let featureSet: OrganizationFeatureSet?
}

extension CreateOrganizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case featureSet = "FeatureSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureSetDecoded = try containerValues.decodeIfPresent(OrganizationFeatureSet.self, forKey: .featureSet)
        featureSet = featureSetDecoded
    }
}

extension CreateOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccessDeniedForDependencyException" : self = .accessDeniedForDependencyException(try AccessDeniedForDependencyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyInOrganizationException" : self = .alreadyInOrganizationException(try AlreadyInOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accessDeniedForDependencyException(AccessDeniedForDependencyException)
    case alreadyInOrganizationException(AlreadyInOrganizationException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateOrganizationOutputResponse(organization: \(String(describing: organization)))"}
}

extension CreateOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.organization = output.organization
        } else {
            self.organization = nil
        }
    }
}

public struct CreateOrganizationOutputResponse: Equatable {
    /// <p>A structure that contains details about the newly created organization.</p>
    public let organization: Organization?

    public init (
        organization: Organization? = nil
    )
    {
        self.organization = organization
    }
}

struct CreateOrganizationOutputResponseBody: Equatable {
    public let organization: Organization?
}

extension CreateOrganizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organization = "Organization"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationDecoded = try containerValues.decodeIfPresent(Organization.self, forKey: .organization)
        organization = organizationDecoded
    }
}

public struct CreateOrganizationalUnitInputBodyMiddleware: Middleware {
    public let id: String = "CreateOrganizationalUnitInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<CreateOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrganizationalUnitOutputError>
}

extension CreateOrganizationalUnitInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateOrganizationalUnitInput(name: \(String(describing: name)), parentId: \(String(describing: parentId)), tags: \(String(describing: tags)))"}
}

extension CreateOrganizationalUnitInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case parentId = "ParentId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}

public struct CreateOrganizationalUnitInputHeadersMiddleware: Middleware {
    public let id: String = "CreateOrganizationalUnitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<CreateOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrganizationalUnitOutputError>
}

public struct CreateOrganizationalUnitInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateOrganizationalUnitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<CreateOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateOrganizationalUnitOutputError>
}

public struct CreateOrganizationalUnitInput: Equatable {
    /// <p>The friendly name to assign to the new OU.</p>
    public let name: String?
    /// <p>The unique identifier (ID) of the parent root or OU that you want to create the new OU
    ///             in.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let parentId: String?
    /// <p>A list of tags that you want to attach to the newly created OU. For each tag in the
    ///             list, you must specify both a tag key and a value. You can set the value to an empty
    ///             string, but you can't set it to <code>null</code>. For more information about tagging,
    ///             see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations
    ///                 resources</a> in the AWS Organizations User Guide.</p>
    ///         <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
    ///                 an OU, then the entire request fails and the OU is not created.</p>
    ///         </note>
    public let tags: [Tag]?

    public init (
        name: String? = nil,
        parentId: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.name = name
        self.parentId = parentId
        self.tags = tags
    }
}

struct CreateOrganizationalUnitInputBody: Equatable {
    public let parentId: String?
    public let name: String?
    public let tags: [Tag]?
}

extension CreateOrganizationalUnitInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case parentId = "ParentId"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateOrganizationalUnitOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOrganizationalUnitOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateOrganizationalUnitException" : self = .duplicateOrganizationalUnitException(try DuplicateOrganizationalUnitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOrganizationalUnitOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicateOrganizationalUnitException(DuplicateOrganizationalUnitException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrganizationalUnitOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateOrganizationalUnitOutputResponse(organizationalUnit: \(String(describing: organizationalUnit)))"}
}

extension CreateOrganizationalUnitOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateOrganizationalUnitOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.organizationalUnit = output.organizationalUnit
        } else {
            self.organizationalUnit = nil
        }
    }
}

public struct CreateOrganizationalUnitOutputResponse: Equatable {
    /// <p>A structure that contains details about the newly created OU.</p>
    public let organizationalUnit: OrganizationalUnit?

    public init (
        organizationalUnit: OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

struct CreateOrganizationalUnitOutputResponseBody: Equatable {
    public let organizationalUnit: OrganizationalUnit?
}

extension CreateOrganizationalUnitOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organizationalUnit = "OrganizationalUnit"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(OrganizationalUnit.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
    }
}

public struct CreatePolicyInputBodyMiddleware: Middleware {
    public let id: String = "CreatePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePolicyInput>
    public typealias MOutput = OperationOutput<CreatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePolicyOutputError>
}

extension CreatePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePolicyInput(content: \(String(describing: content)), description: \(String(describing: description)), name: \(String(describing: name)), tags: \(String(describing: tags)), type: \(String(describing: type)))"}
}

extension CreatePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct CreatePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePolicyInput>
    public typealias MOutput = OperationOutput<CreatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePolicyOutputError>
}

public struct CreatePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePolicyInput>
    public typealias MOutput = OperationOutput<CreatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePolicyOutputError>
}

public struct CreatePolicyInput: Equatable {
    /// <p>The policy text content to add to the new policy. The text that you supply must adhere
    ///             to the rules of the policy type you specify in the <code>Type</code> parameter.</p>
    public let content: String?
    /// <p>An optional description to assign to the policy.</p>
    public let description: String?
    /// <p>The friendly name to assign to the policy.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>A list of tags that you want to attach to the newly created policy. For each tag in
    ///             the list, you must specify both a tag key and a value. You can set the value to an empty
    ///             string, but you can't set it to <code>null</code>. For more information about tagging,
    ///             see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations
    ///                 resources</a> in the AWS Organizations User Guide.</p>
    ///         <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
    ///                 a policy, then the entire request fails and the policy is not created.</p>
    ///         </note>
    public let tags: [Tag]?
    /// <p>The type of policy to create. You can specify one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let type: PolicyType?

    public init (
        content: String? = nil,
        description: String? = nil,
        name: String? = nil,
        tags: [Tag]? = nil,
        type: PolicyType? = nil
    )
    {
        self.content = content
        self.description = description
        self.name = name
        self.tags = tags
        self.type = type
    }
}

struct CreatePolicyInputBody: Equatable {
    public let content: String?
    public let description: String?
    public let name: String?
    public let type: PolicyType?
    public let tags: [Tag]?
}

extension CreatePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .type)
        type = typeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatePolicyException" : self = .duplicatePolicyException(try DuplicatePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocumentException" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotAvailableForOrganizationException" : self = .policyTypeNotAvailableForOrganizationException(try PolicyTypeNotAvailableForOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicatePolicyException(DuplicatePolicyException)
    case invalidInputException(InvalidInputException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case policyTypeNotAvailableForOrganizationException(PolicyTypeNotAvailableForOrganizationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePolicyOutputResponse(policy: \(String(describing: policy)))"}
}

extension CreatePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreatePolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct CreatePolicyOutputResponse: Equatable {
    /// <p>A structure that contains details about the newly created policy.</p>
    public let policy: Policy?

    public init (
        policy: Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct CreatePolicyOutputResponseBody: Equatable {
    public let policy: Policy?
}

extension CreatePolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

public struct DeclineHandshakeInputBodyMiddleware: Middleware {
    public let id: String = "DeclineHandshakeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeclineHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeclineHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeclineHandshakeInput>
    public typealias MOutput = OperationOutput<DeclineHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeclineHandshakeOutputError>
}

extension DeclineHandshakeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeclineHandshakeInput(handshakeId: \(String(describing: handshakeId)))"}
}

extension DeclineHandshakeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

public struct DeclineHandshakeInputHeadersMiddleware: Middleware {
    public let id: String = "DeclineHandshakeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeclineHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeclineHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeclineHandshakeInput>
    public typealias MOutput = OperationOutput<DeclineHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeclineHandshakeOutputError>
}

public struct DeclineHandshakeInputQueryItemMiddleware: Middleware {
    public let id: String = "DeclineHandshakeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeclineHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeclineHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeclineHandshakeInput>
    public typealias MOutput = OperationOutput<DeclineHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeclineHandshakeOutputError>
}

public struct DeclineHandshakeInput: Equatable {
    /// <p>The unique identifier (ID) of the handshake that you want to decline. You can get the
    ///             ID from the <a>ListHandshakesForAccount</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let handshakeId: String?

    public init (
        handshakeId: String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct DeclineHandshakeInputBody: Equatable {
    public let handshakeId: String?
}

extension DeclineHandshakeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension DeclineHandshakeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeclineHandshakeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeAlreadyInStateException" : self = .handshakeAlreadyInStateException(try HandshakeAlreadyInStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidHandshakeTransitionException" : self = .invalidHandshakeTransitionException(try InvalidHandshakeTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeclineHandshakeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeAlreadyInStateException(HandshakeAlreadyInStateException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidHandshakeTransitionException(InvalidHandshakeTransitionException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeclineHandshakeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeclineHandshakeOutputResponse(handshake: \(String(describing: handshake)))"}
}

extension DeclineHandshakeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeclineHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct DeclineHandshakeOutputResponse: Equatable {
    /// <p>A structure that contains details about the declined handshake. The state is updated
    ///             to show the value <code>DECLINED</code>.</p>
    public let handshake: Handshake?

    public init (
        handshake: Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct DeclineHandshakeOutputResponseBody: Equatable {
    public let handshake: Handshake?
}

extension DeclineHandshakeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension DelegatedAdministrator: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case delegationEnabledDate = "DelegationEnabledDate"
        case email = "Email"
        case id = "Id"
        case joinedMethod = "JoinedMethod"
        case joinedTimestamp = "JoinedTimestamp"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let delegationEnabledDate = delegationEnabledDate {
            try encodeContainer.encode(delegationEnabledDate.timeIntervalSince1970, forKey: .delegationEnabledDate)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let joinedMethod = joinedMethod {
            try encodeContainer.encode(joinedMethod.rawValue, forKey: .joinedMethod)
        }
        if let joinedTimestamp = joinedTimestamp {
            try encodeContainer.encode(joinedTimestamp.timeIntervalSince1970, forKey: .joinedTimestamp)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AccountStatus.self, forKey: .status)
        status = statusDecoded
        let joinedMethodDecoded = try containerValues.decodeIfPresent(AccountJoinedMethod.self, forKey: .joinedMethod)
        joinedMethod = joinedMethodDecoded
        let joinedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .joinedTimestamp)
        joinedTimestamp = joinedTimestampDecoded
        let delegationEnabledDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .delegationEnabledDate)
        delegationEnabledDate = delegationEnabledDateDecoded
    }
}

extension DelegatedAdministrator: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DelegatedAdministrator(arn: \(String(describing: arn)), delegationEnabledDate: \(String(describing: delegationEnabledDate)), email: \(String(describing: email)), id: \(String(describing: id)), joinedMethod: \(String(describing: joinedMethod)), joinedTimestamp: \(String(describing: joinedTimestamp)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>Contains information about the delegated administrator.</p>
public struct DelegatedAdministrator: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the delegated administrator's account.</p>
    public let arn: String?
    /// <p>The date when the account was made a delegated administrator.</p>
    public let delegationEnabledDate: Date?
    /// <p>The email address that is associated with the delegated administrator's AWS
    ///             account.</p>
    public let email: String?
    /// <p>The unique identifier (ID) of the delegated administrator's account.</p>
    public let id: String?
    /// <p>The method by which the delegated administrator's account joined the
    ///             organization.</p>
    public let joinedMethod: AccountJoinedMethod?
    /// <p>The date when the delegated administrator's account became a part of the
    ///             organization.</p>
    public let joinedTimestamp: Date?
    /// <p>The friendly name of the delegated administrator's account.</p>
    public let name: String?
    /// <p>The status of the delegated administrator's account in the organization.</p>
    public let status: AccountStatus?

    public init (
        arn: String? = nil,
        delegationEnabledDate: Date? = nil,
        email: String? = nil,
        id: String? = nil,
        joinedMethod: AccountJoinedMethod? = nil,
        joinedTimestamp: Date? = nil,
        name: String? = nil,
        status: AccountStatus? = nil
    )
    {
        self.arn = arn
        self.delegationEnabledDate = delegationEnabledDate
        self.email = email
        self.id = id
        self.joinedMethod = joinedMethod
        self.joinedTimestamp = joinedTimestamp
        self.name = name
        self.status = status
    }
}

extension DelegatedService: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case delegationEnabledDate = "DelegationEnabledDate"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let delegationEnabledDate = delegationEnabledDate {
            try encodeContainer.encode(delegationEnabledDate.timeIntervalSince1970, forKey: .delegationEnabledDate)
        }
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let delegationEnabledDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .delegationEnabledDate)
        delegationEnabledDate = delegationEnabledDateDecoded
    }
}

extension DelegatedService: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DelegatedService(delegationEnabledDate: \(String(describing: delegationEnabledDate)), servicePrincipal: \(String(describing: servicePrincipal)))"}
}

/// <p>Contains information about the AWS service for which the account is a delegated
///             administrator.</p>
public struct DelegatedService: Equatable {
    /// <p>The date that the account became a delegated administrator for this service. </p>
    public let delegationEnabledDate: Date?
    /// <p>The name of an AWS service that can request an operation for the specified service.
    ///             This is typically in the form of a URL, such as:
    ///                 <code>
    ///                <i>servicename</i>.amazonaws.com</code>.</p>
    public let servicePrincipal: String?

    public init (
        delegationEnabledDate: Date? = nil,
        servicePrincipal: String? = nil
    )
    {
        self.delegationEnabledDate = delegationEnabledDate
        self.servicePrincipal = servicePrincipal
    }
}

extension DeleteOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteOrganizationInput()"}
}

extension DeleteOrganizationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteOrganizationInput>
    public typealias MOutput = OperationOutput<DeleteOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteOrganizationOutputError>
}

public struct DeleteOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteOrganizationInput>
    public typealias MOutput = OperationOutput<DeleteOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteOrganizationOutputError>
}

public struct DeleteOrganizationInput: Equatable {

    public init() {}
}

struct DeleteOrganizationInputBody: Equatable {
}

extension DeleteOrganizationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationNotEmptyException" : self = .organizationNotEmptyException(try OrganizationNotEmptyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case organizationNotEmptyException(OrganizationNotEmptyException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteOrganizationOutputResponse()"}
}

extension DeleteOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOrganizationOutputResponse: Equatable {

    public init() {}
}

struct DeleteOrganizationOutputResponseBody: Equatable {
}

extension DeleteOrganizationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteOrganizationalUnitInputBodyMiddleware: Middleware {
    public let id: String = "DeleteOrganizationalUnitInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<DeleteOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteOrganizationalUnitOutputError>
}

extension DeleteOrganizationalUnitInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteOrganizationalUnitInput(organizationalUnitId: \(String(describing: organizationalUnitId)))"}
}

extension DeleteOrganizationalUnitInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationalUnitId = organizationalUnitId {
            try encodeContainer.encode(organizationalUnitId, forKey: .organizationalUnitId)
        }
    }
}

public struct DeleteOrganizationalUnitInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteOrganizationalUnitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<DeleteOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteOrganizationalUnitOutputError>
}

public struct DeleteOrganizationalUnitInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteOrganizationalUnitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<DeleteOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteOrganizationalUnitOutputError>
}

public struct DeleteOrganizationalUnitInput: Equatable {
    /// <p>The unique identifier (ID) of the organizational unit that you want to delete. You can
    ///             get the ID from the <a>ListOrganizationalUnitsForParent</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
    ///     "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
    ///     OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
    ///     or digits.</p>
    public let organizationalUnitId: String?

    public init (
        organizationalUnitId: String? = nil
    )
    {
        self.organizationalUnitId = organizationalUnitId
    }
}

struct DeleteOrganizationalUnitInputBody: Equatable {
    public let organizationalUnitId: String?
}

extension DeleteOrganizationalUnitInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
    }
}

extension DeleteOrganizationalUnitOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOrganizationalUnitOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotEmptyException" : self = .organizationalUnitNotEmptyException(try OrganizationalUnitNotEmptyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotFoundException" : self = .organizationalUnitNotFoundException(try OrganizationalUnitNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOrganizationalUnitOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case organizationalUnitNotEmptyException(OrganizationalUnitNotEmptyException)
    case organizationalUnitNotFoundException(OrganizationalUnitNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOrganizationalUnitOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteOrganizationalUnitOutputResponse()"}
}

extension DeleteOrganizationalUnitOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOrganizationalUnitOutputResponse: Equatable {

    public init() {}
}

struct DeleteOrganizationalUnitOutputResponseBody: Equatable {
}

extension DeleteOrganizationalUnitOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeletePolicyInputBodyMiddleware: Middleware {
    public let id: String = "DeletePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePolicyOutputError>
}

extension DeletePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeletePolicyInput(policyId: \(String(describing: policyId)))"}
}

extension DeletePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

public struct DeletePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DeletePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DeletePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInput: Equatable {
    /// <p>The unique identifier (ID) of the policy that you want to delete. You can get the ID
    ///             from the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a>
    ///             operations.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let policyId: String?

    public init (
        policyId: String? = nil
    )
    {
        self.policyId = policyId
    }
}

struct DeletePolicyInputBody: Equatable {
    public let policyId: String?
}

extension DeletePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
    }
}

extension DeletePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyInUseException" : self = .policyInUseException(try PolicyInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case policyInUseException(PolicyInUseException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeletePolicyOutputResponse()"}
}

extension DeletePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Equatable {

    public init() {}
}

struct DeletePolicyOutputResponseBody: Equatable {
}

extension DeletePolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeregisterDelegatedAdministratorInputBodyMiddleware: Middleware {
    public let id: String = "DeregisterDelegatedAdministratorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterDelegatedAdministratorInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterDelegatedAdministratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterDelegatedAdministratorInput>
    public typealias MOutput = OperationOutput<DeregisterDelegatedAdministratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterDelegatedAdministratorOutputError>
}

extension DeregisterDelegatedAdministratorInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterDelegatedAdministratorInput(accountId: \(String(describing: accountId)), servicePrincipal: \(String(describing: servicePrincipal)))"}
}

extension DeregisterDelegatedAdministratorInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

public struct DeregisterDelegatedAdministratorInputHeadersMiddleware: Middleware {
    public let id: String = "DeregisterDelegatedAdministratorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterDelegatedAdministratorInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterDelegatedAdministratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterDelegatedAdministratorInput>
    public typealias MOutput = OperationOutput<DeregisterDelegatedAdministratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterDelegatedAdministratorOutputError>
}

public struct DeregisterDelegatedAdministratorInputQueryItemMiddleware: Middleware {
    public let id: String = "DeregisterDelegatedAdministratorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterDelegatedAdministratorInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterDelegatedAdministratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterDelegatedAdministratorInput>
    public typealias MOutput = OperationOutput<DeregisterDelegatedAdministratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterDelegatedAdministratorOutputError>
}

public struct DeregisterDelegatedAdministratorInput: Equatable {
    /// <p>The account ID number of the member account in the organization that you want to
    ///             deregister as a delegated administrator.</p>
    public let accountId: String?
    /// <p>The service principal name of an AWS service for which the account is a delegated
    ///             administrator.</p>
    ///         <p>Delegated administrator privileges are revoked for only the specified AWS service
    ///             from the member account. If the specified service is the only service for which the
    ///             member account is a delegated administrator, the operation also revokes Organizations read action
    ///             permissions.</p>
    public let servicePrincipal: String?

    public init (
        accountId: String? = nil,
        servicePrincipal: String? = nil
    )
    {
        self.accountId = accountId
        self.servicePrincipal = servicePrincipal
    }
}

struct DeregisterDelegatedAdministratorInputBody: Equatable {
    public let accountId: String?
    public let servicePrincipal: String?
}

extension DeregisterDelegatedAdministratorInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension DeregisterDelegatedAdministratorOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterDelegatedAdministratorOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotRegisteredException" : self = .accountNotRegisteredException(try AccountNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterDelegatedAdministratorOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case accountNotRegisteredException(AccountNotRegisteredException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterDelegatedAdministratorOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterDelegatedAdministratorOutputResponse()"}
}

extension DeregisterDelegatedAdministratorOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterDelegatedAdministratorOutputResponse: Equatable {

    public init() {}
}

struct DeregisterDelegatedAdministratorOutputResponseBody: Equatable {
}

extension DeregisterDelegatedAdministratorOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeAccountInputBodyMiddleware: Middleware {
    public let id: String = "DescribeAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAccountInput>
    public typealias MOutput = OperationOutput<DescribeAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAccountOutputError>
}

extension DescribeAccountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAccountInput(accountId: \(String(describing: accountId)))"}
}

extension DescribeAccountInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
    }
}

public struct DescribeAccountInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAccountInput>
    public typealias MOutput = OperationOutput<DescribeAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAccountOutputError>
}

public struct DescribeAccountInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeAccountInput>
    public typealias MOutput = OperationOutput<DescribeAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeAccountOutputError>
}

public struct DescribeAccountInput: Equatable {
    /// <p>The unique identifier (ID) of the AWS account that you want information about. You
    ///             can get the ID from the <a>ListAccounts</a> or <a>ListAccountsForParent</a> operations.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
    ///     digits.</p>
    public let accountId: String?

    public init (
        accountId: String? = nil
    )
    {
        self.accountId = accountId
    }
}

struct DescribeAccountInputBody: Equatable {
    public let accountId: String?
}

extension DescribeAccountInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension DescribeAccountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAccountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeAccountOutputResponse(account: \(String(describing: account)))"}
}

extension DescribeAccountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeAccountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.account = output.account
        } else {
            self.account = nil
        }
    }
}

public struct DescribeAccountOutputResponse: Equatable {
    /// <p>A structure that contains information about the requested account.</p>
    public let account: Account?

    public init (
        account: Account? = nil
    )
    {
        self.account = account
    }
}

struct DescribeAccountOutputResponseBody: Equatable {
    public let account: Account?
}

extension DescribeAccountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case account = "Account"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Account.self, forKey: .account)
        account = accountDecoded
    }
}

public struct DescribeCreateAccountStatusInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCreateAccountStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCreateAccountStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCreateAccountStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCreateAccountStatusInput>
    public typealias MOutput = OperationOutput<DescribeCreateAccountStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCreateAccountStatusOutputError>
}

extension DescribeCreateAccountStatusInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCreateAccountStatusInput(createAccountRequestId: \(String(describing: createAccountRequestId)))"}
}

extension DescribeCreateAccountStatusInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createAccountRequestId = "CreateAccountRequestId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createAccountRequestId = createAccountRequestId {
            try encodeContainer.encode(createAccountRequestId, forKey: .createAccountRequestId)
        }
    }
}

public struct DescribeCreateAccountStatusInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCreateAccountStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCreateAccountStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCreateAccountStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCreateAccountStatusInput>
    public typealias MOutput = OperationOutput<DescribeCreateAccountStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCreateAccountStatusOutputError>
}

public struct DescribeCreateAccountStatusInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCreateAccountStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCreateAccountStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCreateAccountStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCreateAccountStatusInput>
    public typealias MOutput = OperationOutput<DescribeCreateAccountStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCreateAccountStatusOutputError>
}

public struct DescribeCreateAccountStatusInput: Equatable {
    /// <p>Specifies the <code>Id</code> value that uniquely identifies the
    ///                 <code>CreateAccount</code> request. You can get the value from the
    ///                 <code>CreateAccountStatus.Id</code> response in an earlier <a>CreateAccount</a> request, or from the <a>ListCreateAccountStatus</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a create account request ID string
    ///     requires "car-" followed by from 8 to 32 lowercase letters or digits.</p>
    public let createAccountRequestId: String?

    public init (
        createAccountRequestId: String? = nil
    )
    {
        self.createAccountRequestId = createAccountRequestId
    }
}

struct DescribeCreateAccountStatusInputBody: Equatable {
    public let createAccountRequestId: String?
}

extension DescribeCreateAccountStatusInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createAccountRequestId = "CreateAccountRequestId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createAccountRequestId)
        createAccountRequestId = createAccountRequestIdDecoded
    }
}

extension DescribeCreateAccountStatusOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCreateAccountStatusOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CreateAccountStatusNotFoundException" : self = .createAccountStatusNotFoundException(try CreateAccountStatusNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCreateAccountStatusOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case createAccountStatusNotFoundException(CreateAccountStatusNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCreateAccountStatusOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeCreateAccountStatusOutputResponse(createAccountStatus: \(String(describing: createAccountStatus)))"}
}

extension DescribeCreateAccountStatusOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeCreateAccountStatusOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.createAccountStatus = output.createAccountStatus
        } else {
            self.createAccountStatus = nil
        }
    }
}

public struct DescribeCreateAccountStatusOutputResponse: Equatable {
    /// <p>A structure that contains the current status of an account creation request.</p>
    public let createAccountStatus: CreateAccountStatus?

    public init (
        createAccountStatus: CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

struct DescribeCreateAccountStatusOutputResponseBody: Equatable {
    public let createAccountStatus: CreateAccountStatus?
}

extension DescribeCreateAccountStatusOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createAccountStatus = "CreateAccountStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusDecoded = try containerValues.decodeIfPresent(CreateAccountStatus.self, forKey: .createAccountStatus)
        createAccountStatus = createAccountStatusDecoded
    }
}

public struct DescribeEffectivePolicyInputBodyMiddleware: Middleware {
    public let id: String = "DescribeEffectivePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEffectivePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEffectivePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEffectivePolicyInput>
    public typealias MOutput = OperationOutput<DescribeEffectivePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEffectivePolicyOutputError>
}

extension DescribeEffectivePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEffectivePolicyInput(policyType: \(String(describing: policyType)), targetId: \(String(describing: targetId)))"}
}

extension DescribeEffectivePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

public struct DescribeEffectivePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEffectivePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEffectivePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEffectivePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEffectivePolicyInput>
    public typealias MOutput = OperationOutput<DescribeEffectivePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEffectivePolicyOutputError>
}

public struct DescribeEffectivePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEffectivePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEffectivePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEffectivePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEffectivePolicyInput>
    public typealias MOutput = OperationOutput<DescribeEffectivePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEffectivePolicyOutputError>
}

public struct DescribeEffectivePolicyInput: Equatable {
    /// <p>The type of policy that you want information about. You can specify one of the
    ///             following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let policyType: EffectivePolicyType?
    /// <p>When you're signed in as the management account, specify the ID of the account that
    ///             you want details about. Specifying an organization root or organizational unit (OU) as
    ///             the target is not supported.</p>
    public let targetId: String?

    public init (
        policyType: EffectivePolicyType? = nil,
        targetId: String? = nil
    )
    {
        self.policyType = policyType
        self.targetId = targetId
    }
}

struct DescribeEffectivePolicyInputBody: Equatable {
    public let policyType: EffectivePolicyType?
    public let targetId: String?
}

extension DescribeEffectivePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyTypeDecoded = try containerValues.decodeIfPresent(EffectivePolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension DescribeEffectivePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEffectivePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EffectivePolicyNotFoundException" : self = .effectivePolicyNotFoundException(try EffectivePolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEffectivePolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case effectivePolicyNotFoundException(EffectivePolicyNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEffectivePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEffectivePolicyOutputResponse(effectivePolicy: \(String(describing: effectivePolicy)))"}
}

extension DescribeEffectivePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeEffectivePolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.effectivePolicy = output.effectivePolicy
        } else {
            self.effectivePolicy = nil
        }
    }
}

public struct DescribeEffectivePolicyOutputResponse: Equatable {
    /// <p>The contents of the effective policy.</p>
    public let effectivePolicy: EffectivePolicy?

    public init (
        effectivePolicy: EffectivePolicy? = nil
    )
    {
        self.effectivePolicy = effectivePolicy
    }
}

struct DescribeEffectivePolicyOutputResponseBody: Equatable {
    public let effectivePolicy: EffectivePolicy?
}

extension DescribeEffectivePolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case effectivePolicy = "EffectivePolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let effectivePolicyDecoded = try containerValues.decodeIfPresent(EffectivePolicy.self, forKey: .effectivePolicy)
        effectivePolicy = effectivePolicyDecoded
    }
}

public struct DescribeHandshakeInputBodyMiddleware: Middleware {
    public let id: String = "DescribeHandshakeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeHandshakeInput>
    public typealias MOutput = OperationOutput<DescribeHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeHandshakeOutputError>
}

extension DescribeHandshakeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeHandshakeInput(handshakeId: \(String(describing: handshakeId)))"}
}

extension DescribeHandshakeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

public struct DescribeHandshakeInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeHandshakeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeHandshakeInput>
    public typealias MOutput = OperationOutput<DescribeHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeHandshakeOutputError>
}

public struct DescribeHandshakeInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeHandshakeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeHandshakeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeHandshakeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeHandshakeInput>
    public typealias MOutput = OperationOutput<DescribeHandshakeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeHandshakeOutputError>
}

public struct DescribeHandshakeInput: Equatable {
    /// <p>The unique identifier (ID) of the handshake that you want information about. You can
    ///             get the ID from the original call to <a>InviteAccountToOrganization</a>, or
    ///             from a call to <a>ListHandshakesForAccount</a> or <a>ListHandshakesForOrganization</a>.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let handshakeId: String?

    public init (
        handshakeId: String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct DescribeHandshakeInputBody: Equatable {
    public let handshakeId: String?
}

extension DescribeHandshakeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension DescribeHandshakeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHandshakeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeHandshakeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHandshakeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeHandshakeOutputResponse(handshake: \(String(describing: handshake)))"}
}

extension DescribeHandshakeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct DescribeHandshakeOutputResponse: Equatable {
    /// <p>A structure that contains information about the specified handshake.</p>
    public let handshake: Handshake?

    public init (
        handshake: Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct DescribeHandshakeOutputResponseBody: Equatable {
    public let handshake: Handshake?
}

extension DescribeHandshakeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension DescribeOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeOrganizationInput()"}
}

extension DescribeOrganizationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOrganizationInput>
    public typealias MOutput = OperationOutput<DescribeOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOrganizationOutputError>
}

public struct DescribeOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOrganizationInput>
    public typealias MOutput = OperationOutput<DescribeOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOrganizationOutputError>
}

public struct DescribeOrganizationInput: Equatable {

    public init() {}
}

struct DescribeOrganizationInputBody: Equatable {
}

extension DescribeOrganizationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeOrganizationOutputResponse(organization: \(String(describing: organization)))"}
}

extension DescribeOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.organization = output.organization
        } else {
            self.organization = nil
        }
    }
}

public struct DescribeOrganizationOutputResponse: Equatable {
    /// <p>A structure that contains information about the organization.</p>
    ///         <important>
    ///             <p>The <code>AvailablePolicyTypes</code> part of the response is deprecated, and you
    ///                 shouldn't use it in your apps. It doesn't include any policy type supported by Organizations
    ///                 other than SCPs. To determine which policy types are enabled in your organization,
    ///                 use the <code>
    ///                   <a>ListRoots</a>
    ///                </code> operation.</p>
    ///         </important>
    public let organization: Organization?

    public init (
        organization: Organization? = nil
    )
    {
        self.organization = organization
    }
}

struct DescribeOrganizationOutputResponseBody: Equatable {
    public let organization: Organization?
}

extension DescribeOrganizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organization = "Organization"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationDecoded = try containerValues.decodeIfPresent(Organization.self, forKey: .organization)
        organization = organizationDecoded
    }
}

public struct DescribeOrganizationalUnitInputBodyMiddleware: Middleware {
    public let id: String = "DescribeOrganizationalUnitInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<DescribeOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOrganizationalUnitOutputError>
}

extension DescribeOrganizationalUnitInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeOrganizationalUnitInput(organizationalUnitId: \(String(describing: organizationalUnitId)))"}
}

extension DescribeOrganizationalUnitInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationalUnitId = organizationalUnitId {
            try encodeContainer.encode(organizationalUnitId, forKey: .organizationalUnitId)
        }
    }
}

public struct DescribeOrganizationalUnitInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeOrganizationalUnitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<DescribeOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOrganizationalUnitOutputError>
}

public struct DescribeOrganizationalUnitInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeOrganizationalUnitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<DescribeOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeOrganizationalUnitOutputError>
}

public struct DescribeOrganizationalUnitInput: Equatable {
    /// <p>The unique identifier (ID) of the organizational unit that you want details about. You
    ///             can get the ID from the <a>ListOrganizationalUnitsForParent</a>
    ///             operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
    ///     "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
    ///     OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
    ///     or digits.</p>
    public let organizationalUnitId: String?

    public init (
        organizationalUnitId: String? = nil
    )
    {
        self.organizationalUnitId = organizationalUnitId
    }
}

struct DescribeOrganizationalUnitInputBody: Equatable {
    public let organizationalUnitId: String?
}

extension DescribeOrganizationalUnitInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
    }
}

extension DescribeOrganizationalUnitOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationalUnitOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotFoundException" : self = .organizationalUnitNotFoundException(try OrganizationalUnitNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationalUnitOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case organizationalUnitNotFoundException(OrganizationalUnitNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationalUnitOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeOrganizationalUnitOutputResponse(organizationalUnit: \(String(describing: organizationalUnit)))"}
}

extension DescribeOrganizationalUnitOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeOrganizationalUnitOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.organizationalUnit = output.organizationalUnit
        } else {
            self.organizationalUnit = nil
        }
    }
}

public struct DescribeOrganizationalUnitOutputResponse: Equatable {
    /// <p>A structure that contains details about the specified OU.</p>
    public let organizationalUnit: OrganizationalUnit?

    public init (
        organizationalUnit: OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

struct DescribeOrganizationalUnitOutputResponseBody: Equatable {
    public let organizationalUnit: OrganizationalUnit?
}

extension DescribeOrganizationalUnitOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organizationalUnit = "OrganizationalUnit"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(OrganizationalUnit.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
    }
}

public struct DescribePolicyInputBodyMiddleware: Middleware {
    public let id: String = "DescribePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePolicyInput>
    public typealias MOutput = OperationOutput<DescribePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePolicyOutputError>
}

extension DescribePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribePolicyInput(policyId: \(String(describing: policyId)))"}
}

extension DescribePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

public struct DescribePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DescribePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePolicyInput>
    public typealias MOutput = OperationOutput<DescribePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePolicyOutputError>
}

public struct DescribePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePolicyInput>
    public typealias MOutput = OperationOutput<DescribePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePolicyOutputError>
}

public struct DescribePolicyInput: Equatable {
    /// <p>The unique identifier (ID) of the policy that you want details about. You can get the
    ///             ID from the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a>
    ///             operations.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let policyId: String?

    public init (
        policyId: String? = nil
    )
    {
        self.policyId = policyId
    }
}

struct DescribePolicyInputBody: Equatable {
    public let policyId: String?
}

extension DescribePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
    }
}

extension DescribePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribePolicyOutputResponse(policy: \(String(describing: policy)))"}
}

extension DescribePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribePolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct DescribePolicyOutputResponse: Equatable {
    /// <p>A structure that contains details about the specified policy.</p>
    public let policy: Policy?

    public init (
        policy: Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct DescribePolicyOutputResponseBody: Equatable {
    public let policy: Policy?
}

extension DescribePolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension DestinationParentNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DestinationParentNotFoundException(message: \(String(describing: message)))"}
}

extension DestinationParentNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DestinationParentNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find the destination container (a root or OU) with the <code>ParentId</code>
///             that you specified.</p>
public struct DestinationParentNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DestinationParentNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension DestinationParentNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DetachPolicyInputBodyMiddleware: Middleware {
    public let id: String = "DetachPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachPolicyInput>
    public typealias MOutput = OperationOutput<DetachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachPolicyOutputError>
}

extension DetachPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachPolicyInput(policyId: \(String(describing: policyId)), targetId: \(String(describing: targetId)))"}
}

extension DetachPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

public struct DetachPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "DetachPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachPolicyInput>
    public typealias MOutput = OperationOutput<DetachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachPolicyOutputError>
}

public struct DetachPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "DetachPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DetachPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<DetachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DetachPolicyInput>
    public typealias MOutput = OperationOutput<DetachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DetachPolicyOutputError>
}

public struct DetachPolicyInput: Equatable {
    /// <p>The unique identifier (ID) of the policy you want to detach. You can get the ID from
    ///             the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a>
    ///             operations.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let policyId: String?
    /// <p>The unique identifier (ID) of the root, OU, or account that you want to detach the
    ///             policy from. You can get the ID from the <a>ListRoots</a>, <a>ListOrganizationalUnitsForParent</a>, or <a>ListAccounts</a>
    ///             operations.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Account</b> - A string that consists of exactly 12 digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let targetId: String?

    public init (
        policyId: String? = nil,
        targetId: String? = nil
    )
    {
        self.policyId = policyId
        self.targetId = targetId
    }
}

struct DetachPolicyInputBody: Equatable {
    public let policyId: String?
    public let targetId: String?
}

extension DetachPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension DetachPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachedException" : self = .policyNotAttachedException(try PolicyNotAttachedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachPolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyNotAttachedException(PolicyNotAttachedException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DetachPolicyOutputResponse()"}
}

extension DetachPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DetachPolicyOutputResponse: Equatable {

    public init() {}
}

struct DetachPolicyOutputResponseBody: Equatable {
}

extension DetachPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DisableAWSServiceAccessInputBodyMiddleware: Middleware {
    public let id: String = "DisableAWSServiceAccessInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableAWSServiceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableAWSServiceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableAWSServiceAccessInput>
    public typealias MOutput = OperationOutput<DisableAWSServiceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableAWSServiceAccessOutputError>
}

extension DisableAWSServiceAccessInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisableAWSServiceAccessInput(servicePrincipal: \(String(describing: servicePrincipal)))"}
}

extension DisableAWSServiceAccessInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

public struct DisableAWSServiceAccessInputHeadersMiddleware: Middleware {
    public let id: String = "DisableAWSServiceAccessInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableAWSServiceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableAWSServiceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableAWSServiceAccessInput>
    public typealias MOutput = OperationOutput<DisableAWSServiceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableAWSServiceAccessOutputError>
}

public struct DisableAWSServiceAccessInputQueryItemMiddleware: Middleware {
    public let id: String = "DisableAWSServiceAccessInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableAWSServiceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableAWSServiceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableAWSServiceAccessInput>
    public typealias MOutput = OperationOutput<DisableAWSServiceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableAWSServiceAccessOutputError>
}

public struct DisableAWSServiceAccessInput: Equatable {
    /// <p>The service principal name of the AWS service for which you want to disable
    ///             integration with your organization. This is typically in the form of a URL, such as
    ///                     <code>
    ///                <i>service-abbreviation</i>.amazonaws.com</code>.</p>
    public let servicePrincipal: String?

    public init (
        servicePrincipal: String? = nil
    )
    {
        self.servicePrincipal = servicePrincipal
    }
}

struct DisableAWSServiceAccessInputBody: Equatable {
    public let servicePrincipal: String?
}

extension DisableAWSServiceAccessInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension DisableAWSServiceAccessOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableAWSServiceAccessOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableAWSServiceAccessOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableAWSServiceAccessOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisableAWSServiceAccessOutputResponse()"}
}

extension DisableAWSServiceAccessOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DisableAWSServiceAccessOutputResponse: Equatable {

    public init() {}
}

struct DisableAWSServiceAccessOutputResponseBody: Equatable {
}

extension DisableAWSServiceAccessOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DisablePolicyTypeInputBodyMiddleware: Middleware {
    public let id: String = "DisablePolicyTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisablePolicyTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DisablePolicyTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisablePolicyTypeInput>
    public typealias MOutput = OperationOutput<DisablePolicyTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisablePolicyTypeOutputError>
}

extension DisablePolicyTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisablePolicyTypeInput(policyType: \(String(describing: policyType)), rootId: \(String(describing: rootId)))"}
}

extension DisablePolicyTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let rootId = rootId {
            try encodeContainer.encode(rootId, forKey: .rootId)
        }
    }
}

public struct DisablePolicyTypeInputHeadersMiddleware: Middleware {
    public let id: String = "DisablePolicyTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisablePolicyTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DisablePolicyTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisablePolicyTypeInput>
    public typealias MOutput = OperationOutput<DisablePolicyTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisablePolicyTypeOutputError>
}

public struct DisablePolicyTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "DisablePolicyTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisablePolicyTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DisablePolicyTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisablePolicyTypeInput>
    public typealias MOutput = OperationOutput<DisablePolicyTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisablePolicyTypeOutputError>
}

public struct DisablePolicyTypeInput: Equatable {
    /// <p>The policy type that you want to disable in this root. You can specify one of the
    ///             following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let policyType: PolicyType?
    /// <p>The unique identifier (ID) of the root in which you want to disable a policy type. You
    ///             can get the ID from the <a>ListRoots</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string requires "r-" followed by
    ///     from 4 to 32 lowercase letters or digits.</p>
    public let rootId: String?

    public init (
        policyType: PolicyType? = nil,
        rootId: String? = nil
    )
    {
        self.policyType = policyType
        self.rootId = rootId
    }
}

struct DisablePolicyTypeInputBody: Equatable {
    public let rootId: String?
    public let policyType: PolicyType?
}

extension DisablePolicyTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension DisablePolicyTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisablePolicyTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotEnabledException" : self = .policyTypeNotEnabledException(try PolicyTypeNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RootNotFoundException" : self = .rootNotFoundException(try RootNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisablePolicyTypeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyTypeNotEnabledException(PolicyTypeNotEnabledException)
    case rootNotFoundException(RootNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisablePolicyTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisablePolicyTypeOutputResponse(root: \(String(describing: root)))"}
}

extension DisablePolicyTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DisablePolicyTypeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.root = output.root
        } else {
            self.root = nil
        }
    }
}

public struct DisablePolicyTypeOutputResponse: Equatable {
    /// <p>A structure that shows the root with the updated list of enabled policy types.</p>
    public let root: Root?

    public init (
        root: Root? = nil
    )
    {
        self.root = root
    }
}

struct DisablePolicyTypeOutputResponseBody: Equatable {
    public let root: Root?
}

extension DisablePolicyTypeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case root = "Root"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootDecoded = try containerValues.decodeIfPresent(Root.self, forKey: .root)
        root = rootDecoded
    }
}

extension DuplicateAccountException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicateAccountException(message: \(String(describing: message)))"}
}

extension DuplicateAccountException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DuplicateAccountExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>That account is already present in the specified destination.</p>
public struct DuplicateAccountException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateAccountExceptionBody: Equatable {
    public let message: String?
}

extension DuplicateAccountExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicateHandshakeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicateHandshakeException(message: \(String(describing: message)))"}
}

extension DuplicateHandshakeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DuplicateHandshakeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A handshake with the same action and target already exists. For example, if you
///             invited an account to join your organization, the invited account might already have a
///             pending invitation from this organization. If you intend to resend an invitation to an
///             account, ensure that existing handshakes that might be considered duplicates are
///             canceled or declined.</p>
public struct DuplicateHandshakeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateHandshakeExceptionBody: Equatable {
    public let message: String?
}

extension DuplicateHandshakeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicateOrganizationalUnitException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicateOrganizationalUnitException(message: \(String(describing: message)))"}
}

extension DuplicateOrganizationalUnitException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DuplicateOrganizationalUnitExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An OU with the same name already exists.</p>
public struct DuplicateOrganizationalUnitException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateOrganizationalUnitExceptionBody: Equatable {
    public let message: String?
}

extension DuplicateOrganizationalUnitExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicatePolicyAttachmentException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicatePolicyAttachmentException(message: \(String(describing: message)))"}
}

extension DuplicatePolicyAttachmentException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DuplicatePolicyAttachmentExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The selected policy is already attached to the specified target.</p>
public struct DuplicatePolicyAttachmentException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicatePolicyAttachmentExceptionBody: Equatable {
    public let message: String?
}

extension DuplicatePolicyAttachmentExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicatePolicyException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicatePolicyException(message: \(String(describing: message)))"}
}

extension DuplicatePolicyException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DuplicatePolicyExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A policy with the same name already exists.</p>
public struct DuplicatePolicyException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicatePolicyExceptionBody: Equatable {
    public let message: String?
}

extension DuplicatePolicyExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EffectivePolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case policyContent = "PolicyContent"
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let policyContent = policyContent {
            try encodeContainer.encode(policyContent, forKey: .policyContent)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyContent)
        policyContent = policyContentDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(EffectivePolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension EffectivePolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EffectivePolicy(lastUpdatedTimestamp: \(String(describing: lastUpdatedTimestamp)), policyContent: \(String(describing: policyContent)), policyType: \(String(describing: policyType)), targetId: \(String(describing: targetId)))"}
}

/// <p>Contains rules to be applied to the affected accounts. The effective policy is the
///             aggregation of any policies the account inherits, plus any policy directly attached to
///             the account.</p>
public struct EffectivePolicy: Equatable {
    /// <p>The time of the last update to this policy.</p>
    public let lastUpdatedTimestamp: Date?
    /// <p>The text content of the policy.</p>
    public let policyContent: String?
    /// <p>The policy type.</p>
    public let policyType: EffectivePolicyType?
    /// <p>The account ID of the policy target. </p>
    public let targetId: String?

    public init (
        lastUpdatedTimestamp: Date? = nil,
        policyContent: String? = nil,
        policyType: EffectivePolicyType? = nil,
        targetId: String? = nil
    )
    {
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.policyContent = policyContent
        self.policyType = policyType
        self.targetId = targetId
    }
}

extension EffectivePolicyNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EffectivePolicyNotFoundException(message: \(String(describing: message)))"}
}

extension EffectivePolicyNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: EffectivePolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>If you ran this action on the management account, this policy type is not enabled. If
///             you ran the action on a member account, the account doesn't have an effective policy of
///             this type. Contact the administrator of your organization about attaching a policy of
///             this type to the account. </p>
public struct EffectivePolicyNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct EffectivePolicyNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension EffectivePolicyNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum EffectivePolicyType {
    case aiservicesOptOutPolicy
    case backupPolicy
    case tagPolicy
    case sdkUnknown(String)
}

extension EffectivePolicyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EffectivePolicyType] {
        return [
            .aiservicesOptOutPolicy,
            .backupPolicy,
            .tagPolicy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aiservicesOptOutPolicy: return "AISERVICES_OPT_OUT_POLICY"
        case .backupPolicy: return "BACKUP_POLICY"
        case .tagPolicy: return "TAG_POLICY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EffectivePolicyType(rawValue: rawValue) ?? EffectivePolicyType.sdkUnknown(rawValue)
    }
}

public struct EnableAWSServiceAccessInputBodyMiddleware: Middleware {
    public let id: String = "EnableAWSServiceAccessInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableAWSServiceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableAWSServiceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableAWSServiceAccessInput>
    public typealias MOutput = OperationOutput<EnableAWSServiceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableAWSServiceAccessOutputError>
}

extension EnableAWSServiceAccessInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableAWSServiceAccessInput(servicePrincipal: \(String(describing: servicePrincipal)))"}
}

extension EnableAWSServiceAccessInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

public struct EnableAWSServiceAccessInputHeadersMiddleware: Middleware {
    public let id: String = "EnableAWSServiceAccessInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableAWSServiceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableAWSServiceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableAWSServiceAccessInput>
    public typealias MOutput = OperationOutput<EnableAWSServiceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableAWSServiceAccessOutputError>
}

public struct EnableAWSServiceAccessInputQueryItemMiddleware: Middleware {
    public let id: String = "EnableAWSServiceAccessInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableAWSServiceAccessInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableAWSServiceAccessOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableAWSServiceAccessInput>
    public typealias MOutput = OperationOutput<EnableAWSServiceAccessOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableAWSServiceAccessOutputError>
}

public struct EnableAWSServiceAccessInput: Equatable {
    /// <p>The service principal name of the AWS service for which you want to enable
    ///             integration with your organization. This is typically in the form of a URL, such as
    ///                     <code>
    ///                <i>service-abbreviation</i>.amazonaws.com</code>.</p>
    public let servicePrincipal: String?

    public init (
        servicePrincipal: String? = nil
    )
    {
        self.servicePrincipal = servicePrincipal
    }
}

struct EnableAWSServiceAccessInputBody: Equatable {
    public let servicePrincipal: String?
}

extension EnableAWSServiceAccessInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension EnableAWSServiceAccessOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableAWSServiceAccessOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableAWSServiceAccessOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAWSServiceAccessOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableAWSServiceAccessOutputResponse()"}
}

extension EnableAWSServiceAccessOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct EnableAWSServiceAccessOutputResponse: Equatable {

    public init() {}
}

struct EnableAWSServiceAccessOutputResponseBody: Equatable {
}

extension EnableAWSServiceAccessOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension EnableAllFeaturesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableAllFeaturesInput()"}
}

extension EnableAllFeaturesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct EnableAllFeaturesInputHeadersMiddleware: Middleware {
    public let id: String = "EnableAllFeaturesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableAllFeaturesInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableAllFeaturesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableAllFeaturesInput>
    public typealias MOutput = OperationOutput<EnableAllFeaturesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableAllFeaturesOutputError>
}

public struct EnableAllFeaturesInputQueryItemMiddleware: Middleware {
    public let id: String = "EnableAllFeaturesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableAllFeaturesInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableAllFeaturesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableAllFeaturesInput>
    public typealias MOutput = OperationOutput<EnableAllFeaturesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableAllFeaturesOutputError>
}

public struct EnableAllFeaturesInput: Equatable {

    public init() {}
}

struct EnableAllFeaturesInputBody: Equatable {
}

extension EnableAllFeaturesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension EnableAllFeaturesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableAllFeaturesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeConstraintViolationException" : self = .handshakeConstraintViolationException(try HandshakeConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableAllFeaturesOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeConstraintViolationException(HandshakeConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAllFeaturesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableAllFeaturesOutputResponse(handshake: \(String(describing: handshake)))"}
}

extension EnableAllFeaturesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: EnableAllFeaturesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct EnableAllFeaturesOutputResponse: Equatable {
    /// <p>A structure that contains details about the handshake created to support this request
    ///             to enable all features in the organization.</p>
    public let handshake: Handshake?

    public init (
        handshake: Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct EnableAllFeaturesOutputResponseBody: Equatable {
    public let handshake: Handshake?
}

extension EnableAllFeaturesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

public struct EnablePolicyTypeInputBodyMiddleware: Middleware {
    public let id: String = "EnablePolicyTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnablePolicyTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<EnablePolicyTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnablePolicyTypeInput>
    public typealias MOutput = OperationOutput<EnablePolicyTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnablePolicyTypeOutputError>
}

extension EnablePolicyTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnablePolicyTypeInput(policyType: \(String(describing: policyType)), rootId: \(String(describing: rootId)))"}
}

extension EnablePolicyTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let rootId = rootId {
            try encodeContainer.encode(rootId, forKey: .rootId)
        }
    }
}

public struct EnablePolicyTypeInputHeadersMiddleware: Middleware {
    public let id: String = "EnablePolicyTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnablePolicyTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<EnablePolicyTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnablePolicyTypeInput>
    public typealias MOutput = OperationOutput<EnablePolicyTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnablePolicyTypeOutputError>
}

public struct EnablePolicyTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "EnablePolicyTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnablePolicyTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<EnablePolicyTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnablePolicyTypeInput>
    public typealias MOutput = OperationOutput<EnablePolicyTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnablePolicyTypeOutputError>
}

public struct EnablePolicyTypeInput: Equatable {
    /// <p>The policy type that you want to enable. You can specify one of the following
    ///             values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let policyType: PolicyType?
    /// <p>The unique identifier (ID) of the root in which you want to enable a policy type. You
    ///             can get the ID from the <a>ListRoots</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string requires "r-" followed by
    ///     from 4 to 32 lowercase letters or digits.</p>
    public let rootId: String?

    public init (
        policyType: PolicyType? = nil,
        rootId: String? = nil
    )
    {
        self.policyType = policyType
        self.rootId = rootId
    }
}

struct EnablePolicyTypeInputBody: Equatable {
    public let rootId: String?
    public let policyType: PolicyType?
}

extension EnablePolicyTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension EnablePolicyTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnablePolicyTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeAlreadyEnabledException" : self = .policyTypeAlreadyEnabledException(try PolicyTypeAlreadyEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotAvailableForOrganizationException" : self = .policyTypeNotAvailableForOrganizationException(try PolicyTypeNotAvailableForOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RootNotFoundException" : self = .rootNotFoundException(try RootNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnablePolicyTypeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyTypeAlreadyEnabledException(PolicyTypeAlreadyEnabledException)
    case policyTypeNotAvailableForOrganizationException(PolicyTypeNotAvailableForOrganizationException)
    case rootNotFoundException(RootNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnablePolicyTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnablePolicyTypeOutputResponse(root: \(String(describing: root)))"}
}

extension EnablePolicyTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: EnablePolicyTypeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.root = output.root
        } else {
            self.root = nil
        }
    }
}

public struct EnablePolicyTypeOutputResponse: Equatable {
    /// <p>A structure that shows the root with the updated list of enabled policy types.</p>
    public let root: Root?

    public init (
        root: Root? = nil
    )
    {
        self.root = root
    }
}

struct EnablePolicyTypeOutputResponseBody: Equatable {
    public let root: Root?
}

extension EnablePolicyTypeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case root = "Root"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootDecoded = try containerValues.decodeIfPresent(Root.self, forKey: .root)
        root = rootDecoded
    }
}

extension EnabledServicePrincipal: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dateEnabled = "DateEnabled"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateEnabled = dateEnabled {
            try encodeContainer.encode(dateEnabled.timeIntervalSince1970, forKey: .dateEnabled)
        }
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let dateEnabledDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dateEnabled)
        dateEnabled = dateEnabledDecoded
    }
}

extension EnabledServicePrincipal: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnabledServicePrincipal(dateEnabled: \(String(describing: dateEnabled)), servicePrincipal: \(String(describing: servicePrincipal)))"}
}

/// <p>A structure that contains details of a service principal that represents an AWS
///             service that is enabled to integrate with AWS Organizations.</p>
public struct EnabledServicePrincipal: Equatable {
    /// <p>The date that the service principal was enabled for integration with AWS Organizations.</p>
    public let dateEnabled: Date?
    /// <p>The name of the service principal. This is typically in the form of a URL, such as:
    ///                     <code>
    ///                <i>servicename</i>.amazonaws.com</code>.</p>
    public let servicePrincipal: String?

    public init (
        dateEnabled: Date? = nil,
        servicePrincipal: String? = nil
    )
    {
        self.dateEnabled = dateEnabled
        self.servicePrincipal = servicePrincipal
    }
}

extension FinalizingOrganizationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FinalizingOrganizationException(message: \(String(describing: message)))"}
}

extension FinalizingOrganizationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: FinalizingOrganizationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS Organizations couldn't perform the operation because your organization hasn't finished
///             initializing. This can take up to an hour. Try again later. If after one hour you
///             continue to receive this error, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
///                 Support</a>.</p>
public struct FinalizingOrganizationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct FinalizingOrganizationExceptionBody: Equatable {
    public let message: String?
}

extension FinalizingOrganizationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Handshake: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case arn = "Arn"
        case expirationTimestamp = "ExpirationTimestamp"
        case id = "Id"
        case parties = "Parties"
        case requestedTimestamp = "RequestedTimestamp"
        case resources = "Resources"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let expirationTimestamp = expirationTimestamp {
            try encodeContainer.encode(expirationTimestamp.timeIntervalSince1970, forKey: .expirationTimestamp)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parties = parties {
            var partiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parties)
            for handshakeparties0 in parties {
                try partiesContainer.encode(handshakeparties0)
            }
        }
        if let requestedTimestamp = requestedTimestamp {
            try encodeContainer.encode(requestedTimestamp.timeIntervalSince1970, forKey: .requestedTimestamp)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for handshakeresources0 in resources {
                try resourcesContainer.encode(handshakeresources0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let partiesContainer = try containerValues.decodeIfPresent([HandshakeParty?].self, forKey: .parties)
        var partiesDecoded0:[HandshakeParty]? = nil
        if let partiesContainer = partiesContainer {
            partiesDecoded0 = [HandshakeParty]()
            for structure0 in partiesContainer {
                if let structure0 = structure0 {
                    partiesDecoded0?.append(structure0)
                }
            }
        }
        parties = partiesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(HandshakeState.self, forKey: .state)
        state = stateDecoded
        let requestedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .requestedTimestamp)
        requestedTimestamp = requestedTimestampDecoded
        let expirationTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationTimestamp)
        expirationTimestamp = expirationTimestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(ActionType.self, forKey: .action)
        action = actionDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([HandshakeResource?].self, forKey: .resources)
        var resourcesDecoded0:[HandshakeResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [HandshakeResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension Handshake: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Handshake(action: \(String(describing: action)), arn: \(String(describing: arn)), expirationTimestamp: \(String(describing: expirationTimestamp)), id: \(String(describing: id)), parties: \(String(describing: parties)), requestedTimestamp: \(String(describing: requestedTimestamp)), resources: \(String(describing: resources)), state: \(String(describing: state)))"}
}

/// <p>Contains information that must be exchanged to securely establish a relationship
///             between two accounts (an <i>originator</i> and a
///                 <i>recipient</i>). For example, when a management account (the
///             originator) invites another account (the recipient) to join its organization, the two
///             accounts exchange information as a series of handshake requests and responses.</p>
///         <p>
///             <b>Note:</b> Handshakes that are <code>CANCELED</code>,
///                 <code>ACCEPTED</code>, or <code>DECLINED</code> show up in lists for only 30 days
///             after entering that state After that they are deleted.</p>
public struct Handshake: Equatable {
    /// <p>The type of handshake, indicating what action occurs when the recipient accepts the
    ///             handshake. The following handshake types are supported:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>INVITE</b>: This type of handshake represents a
    ///                     request to join an organization. It is always sent from the management account
    ///                     to only non-member accounts.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ENABLE_ALL_FEATURES</b>: This type of handshake
    ///                     represents a request to enable all features in an organization. It is always
    ///                     sent from the management account to only <i>invited</i> member
    ///                     accounts. Created accounts do not receive this because those accounts were
    ///                     created by the organization's management account and approval is
    ///                     inferred.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>APPROVE_ALL_FEATURES</b>: This type of handshake
    ///                     is sent from the Organizations service when all member accounts have approved the
    ///                         <code>ENABLE_ALL_FEATURES</code> invitation. It is sent only to the
    ///                     management account and signals the master that it can finalize the process to
    ///                     enable all features.</p>
    ///             </li>
    ///          </ul>
    public let action: ActionType?
    /// <p>The Amazon Resource Name (ARN) of a handshake.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the handshake expires. If the recipient of the handshake
    ///             request fails to respond before the specified date and time, the handshake becomes
    ///             inactive and is no longer valid.</p>
    public let expirationTimestamp: Date?
    /// <p>The unique identifier (ID) of a handshake. The originating account creates the ID when
    ///             it initiates the handshake.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let id: String?
    /// <p>Information about the two accounts that are participating in the handshake.</p>
    public let parties: [HandshakeParty]?
    /// <p>The date and time that the handshake request was made.</p>
    public let requestedTimestamp: Date?
    /// <p>Additional information that is needed to process the handshake.</p>
    public let resources: [HandshakeResource]?
    /// <p>The current state of the handshake. Use the state to trace the flow of the handshake
    ///             through the process from its creation to its acceptance. The meaning of each of the
    ///             valid values is as follows:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>REQUESTED</b>: This handshake was sent to
    ///                     multiple recipients (applicable to only some handshake types) and not all
    ///                     recipients have responded yet. The request stays in this state until all
    ///                     recipients respond.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>OPEN</b>: This handshake was sent to multiple
    ///                     recipients (applicable to only some policy types) and all recipients have
    ///                     responded, allowing the originator to complete the handshake action.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>CANCELED</b>: This handshake is no longer active
    ///                     because it was canceled by the originating account.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ACCEPTED</b>: This handshake is complete because
    ///                     it has been accepted by the recipient.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>DECLINED</b>: This handshake is no longer active
    ///                     because it was declined by the recipient account.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>EXPIRED</b>: This handshake is no longer active
    ///                     because the originator did not receive a response of any kind from the recipient
    ///                     before the expiration time (15 days).</p>
    ///             </li>
    ///          </ul>
    public let state: HandshakeState?

    public init (
        action: ActionType? = nil,
        arn: String? = nil,
        expirationTimestamp: Date? = nil,
        id: String? = nil,
        parties: [HandshakeParty]? = nil,
        requestedTimestamp: Date? = nil,
        resources: [HandshakeResource]? = nil,
        state: HandshakeState? = nil
    )
    {
        self.action = action
        self.arn = arn
        self.expirationTimestamp = expirationTimestamp
        self.id = id
        self.parties = parties
        self.requestedTimestamp = requestedTimestamp
        self.resources = resources
        self.state = state
    }
}

extension HandshakeAlreadyInStateException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HandshakeAlreadyInStateException(message: \(String(describing: message)))"}
}

extension HandshakeAlreadyInStateException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: HandshakeAlreadyInStateExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified handshake is already in the requested state. For example, you can't
///             accept a handshake that was already accepted.</p>
public struct HandshakeAlreadyInStateException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct HandshakeAlreadyInStateExceptionBody: Equatable {
    public let message: String?
}

extension HandshakeAlreadyInStateExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HandshakeConstraintViolationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HandshakeConstraintViolationException(message: \(String(describing: message)), reason: \(String(describing: reason)))"}
}

extension HandshakeConstraintViolationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: HandshakeConstraintViolationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation would violate the constraint identified in the reason
///             code.</p>
///         <note>
///             <p>Some of the reasons in the following list might not be applicable to this specific
///                 API or operation:</p>
///         </note>
///         <ul>
///             <li>
///                 <p>ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number
///                     of accounts in an organization. Note that deleted and closed accounts still
///                     count toward your limit.</p>
///                 <important>
///                     <p>If you get this exception immediately after creating the organization,
///                         wait one hour and try again. If after an hour it continues to fail with this
///                         error, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
///                         Support</a>.</p>
///                 </important>
///             </li>
///             <li>
///                 <p>ALREADY_IN_AN_ORGANIZATION: The handshake request is invalid because the
///                     invited account is already a member of an organization.</p>
///             </li>
///             <li>
///                 <p>HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of
///                     handshakes that you can send in one day.</p>
///             </li>
///             <li>
///                 <p>INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES: You can't issue new invitations to
///                     join an organization while it's in the process of enabling all features. You can
///                     resume inviting accounts after you finalize the process when all accounts have
///                     agreed to the change.</p>
///             </li>
///             <li>
///                 <p>ORGANIZATION_ALREADY_HAS_ALL_FEATURES: The handshake request is invalid
///                     because the organization has already enabled all features.</p>
///             </li>
///             <li>
///                 <p>ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION: The handshake request
///                     is invalid because the organization has already started the process to enable
///                     all features.</p>
///             </li>
///             <li>
///                 <p>ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD: The request failed because the
///                     account is from a different marketplace than the accounts in the organization.
///                     For example, accounts with India addresses must be associated with the AISPL
///                     marketplace. All accounts in an organization must be from the same
///                     marketplace.</p>
///             </li>
///             <li>
///                 <p>ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED: You attempted to change
///                     the membership of an account too quickly after its previous change.</p>
///             </li>
///             <li>
///                 <p>PAYMENT_INSTRUMENT_REQUIRED: You can't complete the operation with an account
///                     that doesn't have a payment instrument, such as a credit card, associated with
///                     it.</p>
///             </li>
///          </ul>
public struct HandshakeConstraintViolationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    public var reason: HandshakeConstraintViolationExceptionReason?

    public init (
        message: String? = nil,
        reason: HandshakeConstraintViolationExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct HandshakeConstraintViolationExceptionBody: Equatable {
    public let message: String?
    public let reason: HandshakeConstraintViolationExceptionReason?
}

extension HandshakeConstraintViolationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(HandshakeConstraintViolationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

public enum HandshakeConstraintViolationExceptionReason {
    case accountNumberLimitExceeded
    case alreadyInAnOrganization
    case handshakeRateLimitExceeded
    case inviteDisabledDuringEnableAllFeatures
    case organizationAlreadyHasAllFeatures
    case organizationFromDifferentSellerOfRecord
    case organizationIsAlreadyPendingAllFeaturesMigration
    case organizationMembershipChangeRateLimitExceeded
    case paymentInstrumentRequired
    case sdkUnknown(String)
}

extension HandshakeConstraintViolationExceptionReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HandshakeConstraintViolationExceptionReason] {
        return [
            .accountNumberLimitExceeded,
            .alreadyInAnOrganization,
            .handshakeRateLimitExceeded,
            .inviteDisabledDuringEnableAllFeatures,
            .organizationAlreadyHasAllFeatures,
            .organizationFromDifferentSellerOfRecord,
            .organizationIsAlreadyPendingAllFeaturesMigration,
            .organizationMembershipChangeRateLimitExceeded,
            .paymentInstrumentRequired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
        case .alreadyInAnOrganization: return "ALREADY_IN_AN_ORGANIZATION"
        case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
        case .inviteDisabledDuringEnableAllFeatures: return "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES"
        case .organizationAlreadyHasAllFeatures: return "ORGANIZATION_ALREADY_HAS_ALL_FEATURES"
        case .organizationFromDifferentSellerOfRecord: return "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD"
        case .organizationIsAlreadyPendingAllFeaturesMigration: return "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION"
        case .organizationMembershipChangeRateLimitExceeded: return "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED"
        case .paymentInstrumentRequired: return "PAYMENT_INSTRUMENT_REQUIRED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HandshakeConstraintViolationExceptionReason(rawValue: rawValue) ?? HandshakeConstraintViolationExceptionReason.sdkUnknown(rawValue)
    }
}

extension HandshakeFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionType = "ActionType"
        case parentHandshakeId = "ParentHandshakeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionType = actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let parentHandshakeId = parentHandshakeId {
            try encodeContainer.encode(parentHandshakeId, forKey: .parentHandshakeId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let parentHandshakeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentHandshakeId)
        parentHandshakeId = parentHandshakeIdDecoded
    }
}

extension HandshakeFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HandshakeFilter(actionType: \(String(describing: actionType)), parentHandshakeId: \(String(describing: parentHandshakeId)))"}
}

/// <p>Specifies the criteria that are used to select the handshakes for the
///             operation.</p>
public struct HandshakeFilter: Equatable {
    /// <p>Specifies the type of handshake action.</p>
    ///         <p>If you specify <code>ActionType</code>, you cannot also specify
    ///                 <code>ParentHandshakeId</code>.</p>
    public let actionType: ActionType?
    /// <p>Specifies the parent handshake. Only used for handshake types that are a child of
    ///             another type.</p>
    ///         <p>If you specify <code>ParentHandshakeId</code>, you cannot also specify
    ///                 <code>ActionType</code>.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let parentHandshakeId: String?

    public init (
        actionType: ActionType? = nil,
        parentHandshakeId: String? = nil
    )
    {
        self.actionType = actionType
        self.parentHandshakeId = parentHandshakeId
    }
}

extension HandshakeNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HandshakeNotFoundException(message: \(String(describing: message)))"}
}

extension HandshakeNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: HandshakeNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find a handshake with the <code>HandshakeId</code> that you specified.</p>
public struct HandshakeNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct HandshakeNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension HandshakeNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HandshakeParty: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(HandshakePartyType.self, forKey: .type)
        type = typeDecoded
    }
}

extension HandshakeParty: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HandshakeParty(id: \(String(describing: id)), type: \(String(describing: type)))"}
}

/// <p>Identifies a participant in a handshake.</p>
public struct HandshakeParty: Equatable {
    /// <p>The unique identifier (ID) for the party.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let id: String?
    /// <p>The type of party.</p>
    public let type: HandshakePartyType?

    public init (
        id: String? = nil,
        type: HandshakePartyType? = nil
    )
    {
        self.id = id
        self.type = type
    }
}

public enum HandshakePartyType {
    case account
    case email
    case organization
    case sdkUnknown(String)
}

extension HandshakePartyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HandshakePartyType] {
        return [
            .account,
            .email,
            .organization,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .account: return "ACCOUNT"
        case .email: return "EMAIL"
        case .organization: return "ORGANIZATION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HandshakePartyType(rawValue: rawValue) ?? HandshakePartyType.sdkUnknown(rawValue)
    }
}

extension HandshakeResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resources = "Resources"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for handshakeresources0 in resources {
                try resourcesContainer.encode(handshakeresources0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(HandshakeResourceType.self, forKey: .type)
        type = typeDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([HandshakeResource?].self, forKey: .resources)
        var resourcesDecoded0:[HandshakeResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [HandshakeResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension HandshakeResource: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HandshakeResource(resources: \(String(describing: resources)), type: \(String(describing: type)), value: \(String(describing: value)))"}
}

/// <p>Contains additional data that is needed to process a handshake.</p>
public struct HandshakeResource: Equatable {
    /// <p>When needed, contains an additional array of <code>HandshakeResource</code>
    ///             objects.</p>
    public let resources: [HandshakeResource]?
    /// <p>The type of information being passed, specifying how the value is to be interpreted by
    ///             the other party:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ACCOUNT</code> - Specifies an AWS account ID number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ORGANIZATION</code> - Specifies an organization ID number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>EMAIL</code> - Specifies the email address that is associated with the
    ///                     account that receives the handshake. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>OWNER_EMAIL</code> - Specifies the email address associated with the
    ///                     management account. Included as information about an organization. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>OWNER_NAME</code> - Specifies the name associated with the management
    ///                     account. Included as information about an organization. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>NOTES</code> - Additional text provided by the handshake initiator and
    ///                     intended for the recipient to read.</p>
    ///             </li>
    ///          </ul>
    public let type: HandshakeResourceType?
    /// <p>The information that is passed to the other party in the handshake. The format of the
    ///             value string must match the requirements of the specified type.</p>
    public let value: String?

    public init (
        resources: [HandshakeResource]? = nil,
        type: HandshakeResourceType? = nil,
        value: String? = nil
    )
    {
        self.resources = resources
        self.type = type
        self.value = value
    }
}

public enum HandshakeResourceType {
    case account
    case email
    case masterEmail
    case masterName
    case notes
    case organization
    case organizationFeatureSet
    case parentHandshake
    case sdkUnknown(String)
}

extension HandshakeResourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HandshakeResourceType] {
        return [
            .account,
            .email,
            .masterEmail,
            .masterName,
            .notes,
            .organization,
            .organizationFeatureSet,
            .parentHandshake,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .account: return "ACCOUNT"
        case .email: return "EMAIL"
        case .masterEmail: return "MASTER_EMAIL"
        case .masterName: return "MASTER_NAME"
        case .notes: return "NOTES"
        case .organization: return "ORGANIZATION"
        case .organizationFeatureSet: return "ORGANIZATION_FEATURE_SET"
        case .parentHandshake: return "PARENT_HANDSHAKE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HandshakeResourceType(rawValue: rawValue) ?? HandshakeResourceType.sdkUnknown(rawValue)
    }
}

public enum HandshakeState {
    case accepted
    case canceled
    case declined
    case expired
    case `open`
    case requested
    case sdkUnknown(String)
}

extension HandshakeState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HandshakeState] {
        return [
            .accepted,
            .canceled,
            .declined,
            .expired,
            .open,
            .requested,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accepted: return "ACCEPTED"
        case .canceled: return "CANCELED"
        case .declined: return "DECLINED"
        case .expired: return "EXPIRED"
        case .open: return "OPEN"
        case .requested: return "REQUESTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HandshakeState(rawValue: rawValue) ?? HandshakeState.sdkUnknown(rawValue)
    }
}

public enum IAMUserAccessToBilling {
    case allow
    case deny
    case sdkUnknown(String)
}

extension IAMUserAccessToBilling : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [IAMUserAccessToBilling] {
        return [
            .allow,
            .deny,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allow: return "ALLOW"
        case .deny: return "DENY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = IAMUserAccessToBilling(rawValue: rawValue) ?? IAMUserAccessToBilling.sdkUnknown(rawValue)
    }
}

extension InvalidHandshakeTransitionException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidHandshakeTransitionException(message: \(String(describing: message)))"}
}

extension InvalidHandshakeTransitionException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidHandshakeTransitionExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't perform the operation on the handshake in its current state. For example,
///             you can't cancel a handshake that was already accepted or accept a handshake that was
///             already declined.</p>
public struct InvalidHandshakeTransitionException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidHandshakeTransitionExceptionBody: Equatable {
    public let message: String?
}

extension InvalidHandshakeTransitionExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInputException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidInputException(message: \(String(describing: message)), reason: \(String(describing: reason)))"}
}

extension InvalidInputException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested operation failed because you provided invalid values for one or more of
///             the request parameters. This exception includes a reason that contains additional
///             information about the violated limit:</p>
///         <note>
///             <p>Some of the reasons in the following list might not be applicable to this specific
///                 API or operation.</p>
///         </note>
///         <ul>
///             <li>
///                 <p>DUPLICATE_TAG_KEY: Tag keys must be unique among the tags attached to the same
///                     entity.</p>
///             </li>
///             <li>
///                 <p>IMMUTABLE_POLICY: You specified a policy that is managed by AWS and can't be
///                     modified.</p>
///             </li>
///             <li>
///                 <p>INPUT_REQUIRED: You must include a value for all required parameters.</p>
///             </li>
///             <li>
///                 <p>INVALID_EMAIL_ADDRESS_TARGET: You specified an invalid email address for the
///                     invited account owner.</p>
///             </li>
///             <li>
///                 <p>INVALID_ENUM: You specified an invalid value.</p>
///             </li>
///             <li>
///                 <p>INVALID_ENUM_POLICY_TYPE: You specified an invalid policy type string.</p>
///             </li>
///             <li>
///                 <p>INVALID_FULL_NAME_TARGET: You specified a full name that contains invalid
///                     characters.</p>
///             </li>
///             <li>
///                 <p>INVALID_LIST_MEMBER: You provided a list to a parameter that contains at least
///                     one invalid value.</p>
///             </li>
///             <li>
///                 <p>INVALID_PAGINATION_TOKEN: Get the value for the <code>NextToken</code>
///                     parameter from the response to a previous call of the operation.</p>
///             </li>
///             <li>
///                 <p>INVALID_PARTY_TYPE_TARGET: You specified the wrong type of entity (account,
///                     organization, or email) as a party.</p>
///             </li>
///             <li>
///                 <p>INVALID_PATTERN: You provided a value that doesn't match the required
///                     pattern.</p>
///             </li>
///             <li>
///                 <p>INVALID_PATTERN_TARGET_ID: You specified a policy target ID that doesn't match
///                     the required pattern.</p>
///             </li>
///             <li>
///                 <p>INVALID_ROLE_NAME: You provided a role name that isn't valid. A role name
///                     can't begin with the reserved prefix <code>AWSServiceRoleFor</code>.</p>
///             </li>
///             <li>
///                 <p>INVALID_SYNTAX_ORGANIZATION_ARN: You specified an invalid Amazon Resource Name
///                     (ARN) for the organization.</p>
///             </li>
///             <li>
///                 <p>INVALID_SYNTAX_POLICY_ID: You specified an invalid policy ID. </p>
///             </li>
///             <li>
///                 <p>INVALID_SYSTEM_TAGS_PARAMETER: You specified a tag key that is a system tag.
///                     You can’t add, edit, or delete system tag keys because they're reserved for
///                     AWS use. System tags don’t count against your tags per resource limit.</p>
///             </li>
///             <li>
///                 <p>MAX_FILTER_LIMIT_EXCEEDED: You can specify only one filter parameter for the
///                     operation.</p>
///             </li>
///             <li>
///                 <p>MAX_LENGTH_EXCEEDED: You provided a string parameter that is longer than
///                     allowed.</p>
///             </li>
///             <li>
///                 <p>MAX_VALUE_EXCEEDED: You provided a numeric parameter that has a larger value
///                     than allowed.</p>
///             </li>
///             <li>
///                 <p>MIN_LENGTH_EXCEEDED: You provided a string parameter that is shorter than
///                     allowed.</p>
///             </li>
///             <li>
///                 <p>MIN_VALUE_EXCEEDED: You provided a numeric parameter that has a smaller value
///                     than allowed.</p>
///             </li>
///             <li>
///                 <p>MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS: You can move an account only between
///                     entities in the same root.</p>
///             </li>
///             <li>
///                 <p>TARGET_NOT_SUPPORTED: You can't perform the specified operation on that target
///                     entity.</p>
///             </li>
///             <li>
///                 <p>UNRECOGNIZED_SERVICE_PRINCIPAL: You specified a service principal that isn't
///                     recognized.</p>
///             </li>
///          </ul>
public struct InvalidInputException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    public var reason: InvalidInputExceptionReason?

    public init (
        message: String? = nil,
        reason: InvalidInputExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct InvalidInputExceptionBody: Equatable {
    public let message: String?
    public let reason: InvalidInputExceptionReason?
}

extension InvalidInputExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(InvalidInputExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

public enum InvalidInputExceptionReason {
    case duplicateTagKey
    case immutablePolicy
    case inputRequired
    case invalidEmailAddressTarget
    case invalidEnum
    case invalidEnumPolicyType
    case invalidFullNameTarget
    case invalidListMember
    case invalidPaginationToken
    case invalidPartyTypeTarget
    case invalidPattern
    case invalidPatternTargetId
    case invalidRoleName
    case invalidSyntaxOrganization
    case invalidSyntaxPolicy
    case invalidSystemTagsParameter
    case maxFilterLimitExceeded
    case maxLengthExceeded
    case maxValueExceeded
    case minLengthExceeded
    case minValueExceeded
    case movingAccountBetweenDifferentRoots
    case targetNotSupported
    case unrecognizedServicePrincipal
    case sdkUnknown(String)
}

extension InvalidInputExceptionReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InvalidInputExceptionReason] {
        return [
            .duplicateTagKey,
            .immutablePolicy,
            .inputRequired,
            .invalidEmailAddressTarget,
            .invalidEnum,
            .invalidEnumPolicyType,
            .invalidFullNameTarget,
            .invalidListMember,
            .invalidPaginationToken,
            .invalidPartyTypeTarget,
            .invalidPattern,
            .invalidPatternTargetId,
            .invalidRoleName,
            .invalidSyntaxOrganization,
            .invalidSyntaxPolicy,
            .invalidSystemTagsParameter,
            .maxFilterLimitExceeded,
            .maxLengthExceeded,
            .maxValueExceeded,
            .minLengthExceeded,
            .minValueExceeded,
            .movingAccountBetweenDifferentRoots,
            .targetNotSupported,
            .unrecognizedServicePrincipal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateTagKey: return "DUPLICATE_TAG_KEY"
        case .immutablePolicy: return "IMMUTABLE_POLICY"
        case .inputRequired: return "INPUT_REQUIRED"
        case .invalidEmailAddressTarget: return "INVALID_EMAIL_ADDRESS_TARGET"
        case .invalidEnum: return "INVALID_ENUM"
        case .invalidEnumPolicyType: return "INVALID_ENUM_POLICY_TYPE"
        case .invalidFullNameTarget: return "INVALID_FULL_NAME_TARGET"
        case .invalidListMember: return "INVALID_LIST_MEMBER"
        case .invalidPaginationToken: return "INVALID_NEXT_TOKEN"
        case .invalidPartyTypeTarget: return "INVALID_PARTY_TYPE_TARGET"
        case .invalidPattern: return "INVALID_PATTERN"
        case .invalidPatternTargetId: return "INVALID_PATTERN_TARGET_ID"
        case .invalidRoleName: return "INVALID_ROLE_NAME"
        case .invalidSyntaxOrganization: return "INVALID_SYNTAX_ORGANIZATION_ARN"
        case .invalidSyntaxPolicy: return "INVALID_SYNTAX_POLICY_ID"
        case .invalidSystemTagsParameter: return "INVALID_SYSTEM_TAGS_PARAMETER"
        case .maxFilterLimitExceeded: return "MAX_LIMIT_EXCEEDED_FILTER"
        case .maxLengthExceeded: return "MAX_LENGTH_EXCEEDED"
        case .maxValueExceeded: return "MAX_VALUE_EXCEEDED"
        case .minLengthExceeded: return "MIN_LENGTH_EXCEEDED"
        case .minValueExceeded: return "MIN_VALUE_EXCEEDED"
        case .movingAccountBetweenDifferentRoots: return "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS"
        case .targetNotSupported: return "TARGET_NOT_SUPPORTED"
        case .unrecognizedServicePrincipal: return "UNRECOGNIZED_SERVICE_PRINCIPAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InvalidInputExceptionReason(rawValue: rawValue) ?? InvalidInputExceptionReason.sdkUnknown(rawValue)
    }
}

public struct InviteAccountToOrganizationInputBodyMiddleware: Middleware {
    public let id: String = "InviteAccountToOrganizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InviteAccountToOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<InviteAccountToOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InviteAccountToOrganizationInput>
    public typealias MOutput = OperationOutput<InviteAccountToOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<InviteAccountToOrganizationOutputError>
}

extension InviteAccountToOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InviteAccountToOrganizationInput(notes: \(String(describing: notes)), tags: \(String(describing: tags)), target: \(String(describing: target)))"}
}

extension InviteAccountToOrganizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case notes = "Notes"
        case tags = "Tags"
        case target = "Target"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notes = notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }
}

public struct InviteAccountToOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "InviteAccountToOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InviteAccountToOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<InviteAccountToOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InviteAccountToOrganizationInput>
    public typealias MOutput = OperationOutput<InviteAccountToOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<InviteAccountToOrganizationOutputError>
}

public struct InviteAccountToOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "InviteAccountToOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InviteAccountToOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<InviteAccountToOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InviteAccountToOrganizationInput>
    public typealias MOutput = OperationOutput<InviteAccountToOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<InviteAccountToOrganizationOutputError>
}

public struct InviteAccountToOrganizationInput: Equatable {
    /// <p>Additional information that you want to include in the generated email to the
    ///             recipient account owner.</p>
    public let notes: String?
    /// <p>A list of tags that you want to attach to the account when it becomes a member of the
    ///             organization. For each tag in the list, you must specify both a tag key and a value. You
    ///             can set the value to an empty string, but you can't set it to <code>null</code>. For
    ///             more information about tagging, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations resources</a> in the
    ///             AWS Organizations User Guide.</p>
    ///         <important>
    ///             <p>Any tags in the request are checked for compliance with any applicable tag
    ///                 policies when the request is made. The request is rejected if the tags in the
    ///                 request don't match the requirements of the policy at that time. Tag policy
    ///                 compliance is <i>
    ///                   <b>not</b>
    ///                </i> checked
    ///                 again when the invitation is accepted and the tags are actually attached to the
    ///                 account. That means that if the tag policy changes between the invitation and the
    ///                 acceptance, then that tags could potentially be non-compliant.</p>
    ///         </important>
    ///         <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
    ///                 an account, then the entire request fails and invitations are not sent.</p>
    ///         </note>
    public let tags: [Tag]?
    /// <p>The identifier (ID) of the AWS account that you want to invite to join your
    ///             organization. This is a JSON object that contains the following elements:</p>
    ///         <p>
    ///             <code>{ "Type": "ACCOUNT", "Id": "<<i>
    ///                   <b>account id
    ///                         number</b>
    ///                </i>>" }</code>
    ///         </p>
    ///         <p>If you use the AWS CLI, you can submit this as a single string, similar to the following
    ///             example:</p>
    ///         <p>
    ///             <code>--target Id=123456789012,Type=ACCOUNT</code>
    ///         </p>
    ///         <p>If you specify <code>"Type": "ACCOUNT"</code>, you must provide the AWS account ID
    ///             number as the <code>Id</code>. If you specify <code>"Type": "EMAIL"</code>, you must
    ///             specify the email address that is associated with the account.</p>
    ///         <p>
    ///             <code>--target Id=diego@example.com,Type=EMAIL</code>
    ///         </p>
    public let target: HandshakeParty?

    public init (
        notes: String? = nil,
        tags: [Tag]? = nil,
        target: HandshakeParty? = nil
    )
    {
        self.notes = notes
        self.tags = tags
        self.target = target
    }
}

struct InviteAccountToOrganizationInputBody: Equatable {
    public let target: HandshakeParty?
    public let notes: String?
    public let tags: [Tag]?
}

extension InviteAccountToOrganizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case notes = "Notes"
        case tags = "Tags"
        case target = "Target"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(HandshakeParty.self, forKey: .target)
        target = targetDecoded
        let notesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notes)
        notes = notesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension InviteAccountToOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension InviteAccountToOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountOwnerNotVerifiedException" : self = .accountOwnerNotVerifiedException(try AccountOwnerNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateHandshakeException" : self = .duplicateHandshakeException(try DuplicateHandshakeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FinalizingOrganizationException" : self = .finalizingOrganizationException(try FinalizingOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeConstraintViolationException" : self = .handshakeConstraintViolationException(try HandshakeConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum InviteAccountToOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountOwnerNotVerifiedException(AccountOwnerNotVerifiedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicateHandshakeException(DuplicateHandshakeException)
    case finalizingOrganizationException(FinalizingOrganizationException)
    case handshakeConstraintViolationException(HandshakeConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension InviteAccountToOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InviteAccountToOrganizationOutputResponse(handshake: \(String(describing: handshake)))"}
}

extension InviteAccountToOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InviteAccountToOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct InviteAccountToOrganizationOutputResponse: Equatable {
    /// <p>A structure that contains details about the handshake that is created to support this
    ///             invitation request.</p>
    public let handshake: Handshake?

    public init (
        handshake: Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct InviteAccountToOrganizationOutputResponseBody: Equatable {
    public let handshake: Handshake?
}

extension InviteAccountToOrganizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension LeaveOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LeaveOrganizationInput()"}
}

extension LeaveOrganizationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct LeaveOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "LeaveOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<LeaveOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<LeaveOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<LeaveOrganizationInput>
    public typealias MOutput = OperationOutput<LeaveOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<LeaveOrganizationOutputError>
}

public struct LeaveOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "LeaveOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<LeaveOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<LeaveOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<LeaveOrganizationInput>
    public typealias MOutput = OperationOutput<LeaveOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<LeaveOrganizationOutputError>
}

public struct LeaveOrganizationInput: Equatable {

    public init() {}
}

struct LeaveOrganizationInputBody: Equatable {
}

extension LeaveOrganizationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension LeaveOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension LeaveOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MasterCannotLeaveOrganizationException" : self = .masterCannotLeaveOrganizationException(try MasterCannotLeaveOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum LeaveOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case masterCannotLeaveOrganizationException(MasterCannotLeaveOrganizationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension LeaveOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LeaveOrganizationOutputResponse()"}
}

extension LeaveOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct LeaveOrganizationOutputResponse: Equatable {

    public init() {}
}

struct LeaveOrganizationOutputResponseBody: Equatable {
}

extension LeaveOrganizationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct ListAWSServiceAccessForOrganizationInputBodyMiddleware: Middleware {
    public let id: String = "ListAWSServiceAccessForOrganizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAWSServiceAccessForOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAWSServiceAccessForOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAWSServiceAccessForOrganizationInput>
    public typealias MOutput = OperationOutput<ListAWSServiceAccessForOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAWSServiceAccessForOrganizationOutputError>
}

extension ListAWSServiceAccessForOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAWSServiceAccessForOrganizationInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAWSServiceAccessForOrganizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListAWSServiceAccessForOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "ListAWSServiceAccessForOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAWSServiceAccessForOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAWSServiceAccessForOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAWSServiceAccessForOrganizationInput>
    public typealias MOutput = OperationOutput<ListAWSServiceAccessForOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAWSServiceAccessForOrganizationOutputError>
}

public struct ListAWSServiceAccessForOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAWSServiceAccessForOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAWSServiceAccessForOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAWSServiceAccessForOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAWSServiceAccessForOrganizationInput>
    public typealias MOutput = OperationOutput<ListAWSServiceAccessForOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAWSServiceAccessForOrganizationOutputError>
}

public struct ListAWSServiceAccessForOrganizationInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAWSServiceAccessForOrganizationInputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListAWSServiceAccessForOrganizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAWSServiceAccessForOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAWSServiceAccessForOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAWSServiceAccessForOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAWSServiceAccessForOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAWSServiceAccessForOrganizationOutputResponse(enabledServicePrincipals: \(String(describing: enabledServicePrincipals)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAWSServiceAccessForOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListAWSServiceAccessForOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.enabledServicePrincipals = output.enabledServicePrincipals
            self.nextToken = output.nextToken
        } else {
            self.enabledServicePrincipals = nil
            self.nextToken = nil
        }
    }
}

public struct ListAWSServiceAccessForOrganizationOutputResponse: Equatable {
    /// <p>A list of the service principals for the services that are enabled to integrate with
    ///             your organization. Each principal is a structure that includes the name and the date
    ///             that it was enabled for integration with AWS Organizations.</p>
    public let enabledServicePrincipals: [EnabledServicePrincipal]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        enabledServicePrincipals: [EnabledServicePrincipal]? = nil,
        nextToken: String? = nil
    )
    {
        self.enabledServicePrincipals = enabledServicePrincipals
        self.nextToken = nextToken
    }
}

struct ListAWSServiceAccessForOrganizationOutputResponseBody: Equatable {
    public let enabledServicePrincipals: [EnabledServicePrincipal]?
    public let nextToken: String?
}

extension ListAWSServiceAccessForOrganizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case enabledServicePrincipals = "EnabledServicePrincipals"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledServicePrincipalsContainer = try containerValues.decodeIfPresent([EnabledServicePrincipal?].self, forKey: .enabledServicePrincipals)
        var enabledServicePrincipalsDecoded0:[EnabledServicePrincipal]? = nil
        if let enabledServicePrincipalsContainer = enabledServicePrincipalsContainer {
            enabledServicePrincipalsDecoded0 = [EnabledServicePrincipal]()
            for structure0 in enabledServicePrincipalsContainer {
                if let structure0 = structure0 {
                    enabledServicePrincipalsDecoded0?.append(structure0)
                }
            }
        }
        enabledServicePrincipals = enabledServicePrincipalsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListAccountsForParentInputBodyMiddleware: Middleware {
    public let id: String = "ListAccountsForParentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAccountsForParentInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAccountsForParentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAccountsForParentInput>
    public typealias MOutput = OperationOutput<ListAccountsForParentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAccountsForParentOutputError>
}

extension ListAccountsForParentInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAccountsForParentInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), parentId: \(String(describing: parentId)))"}
}

extension ListAccountsForParentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
    }
}

public struct ListAccountsForParentInputHeadersMiddleware: Middleware {
    public let id: String = "ListAccountsForParentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAccountsForParentInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAccountsForParentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAccountsForParentInput>
    public typealias MOutput = OperationOutput<ListAccountsForParentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAccountsForParentOutputError>
}

public struct ListAccountsForParentInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAccountsForParentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAccountsForParentInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAccountsForParentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAccountsForParentInput>
    public typealias MOutput = OperationOutput<ListAccountsForParentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAccountsForParentOutputError>
}

public struct ListAccountsForParentInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>The unique identifier (ID) for the parent root or organization unit (OU) whose
    ///             accounts you want to list.</p>
    public let parentId: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        parentId: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

struct ListAccountsForParentInputBody: Equatable {
    public let parentId: String?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListAccountsForParentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAccountsForParentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAccountsForParentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAccountsForParentOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAccountsForParentOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAccountsForParentOutputResponse(accounts: \(String(describing: accounts)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAccountsForParentOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListAccountsForParentOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.accounts = output.accounts
            self.nextToken = output.nextToken
        } else {
            self.accounts = nil
            self.nextToken = nil
        }
    }
}

public struct ListAccountsForParentOutputResponse: Equatable {
    /// <p>A list of the accounts in the specified root or OU.</p>
    public let accounts: [Account]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        accounts: [Account]? = nil,
        nextToken: String? = nil
    )
    {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

struct ListAccountsForParentOutputResponseBody: Equatable {
    public let accounts: [Account]?
    public let nextToken: String?
}

extension ListAccountsForParentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accounts = "Accounts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountsContainer = try containerValues.decodeIfPresent([Account?].self, forKey: .accounts)
        var accountsDecoded0:[Account]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [Account]()
            for structure0 in accountsContainer {
                if let structure0 = structure0 {
                    accountsDecoded0?.append(structure0)
                }
            }
        }
        accounts = accountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListAccountsInputBodyMiddleware: Middleware {
    public let id: String = "ListAccountsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAccountsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAccountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAccountsInput>
    public typealias MOutput = OperationOutput<ListAccountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAccountsOutputError>
}

extension ListAccountsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAccountsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAccountsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListAccountsInputHeadersMiddleware: Middleware {
    public let id: String = "ListAccountsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAccountsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAccountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAccountsInput>
    public typealias MOutput = OperationOutput<ListAccountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAccountsOutputError>
}

public struct ListAccountsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAccountsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAccountsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAccountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAccountsInput>
    public typealias MOutput = OperationOutput<ListAccountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAccountsOutputError>
}

public struct ListAccountsInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAccountsInputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListAccountsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAccountsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAccountsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAccountsOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAccountsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListAccountsOutputResponse(accounts: \(String(describing: accounts)), nextToken: \(String(describing: nextToken)))"}
}

extension ListAccountsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListAccountsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.accounts = output.accounts
            self.nextToken = output.nextToken
        } else {
            self.accounts = nil
            self.nextToken = nil
        }
    }
}

public struct ListAccountsOutputResponse: Equatable {
    /// <p>A list of objects in the organization.</p>
    public let accounts: [Account]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        accounts: [Account]? = nil,
        nextToken: String? = nil
    )
    {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

struct ListAccountsOutputResponseBody: Equatable {
    public let accounts: [Account]?
    public let nextToken: String?
}

extension ListAccountsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accounts = "Accounts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountsContainer = try containerValues.decodeIfPresent([Account?].self, forKey: .accounts)
        var accountsDecoded0:[Account]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [Account]()
            for structure0 in accountsContainer {
                if let structure0 = structure0 {
                    accountsDecoded0?.append(structure0)
                }
            }
        }
        accounts = accountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListChildrenInputBodyMiddleware: Middleware {
    public let id: String = "ListChildrenInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListChildrenInput>,
                  next: H) -> Swift.Result<OperationOutput<ListChildrenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListChildrenInput>
    public typealias MOutput = OperationOutput<ListChildrenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListChildrenOutputError>
}

extension ListChildrenInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListChildrenInput(childType: \(String(describing: childType)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), parentId: \(String(describing: parentId)))"}
}

extension ListChildrenInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childType = "ChildType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childType = childType {
            try encodeContainer.encode(childType.rawValue, forKey: .childType)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
    }
}

public struct ListChildrenInputHeadersMiddleware: Middleware {
    public let id: String = "ListChildrenInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListChildrenInput>,
                  next: H) -> Swift.Result<OperationOutput<ListChildrenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListChildrenInput>
    public typealias MOutput = OperationOutput<ListChildrenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListChildrenOutputError>
}

public struct ListChildrenInputQueryItemMiddleware: Middleware {
    public let id: String = "ListChildrenInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListChildrenInput>,
                  next: H) -> Swift.Result<OperationOutput<ListChildrenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListChildrenInput>
    public typealias MOutput = OperationOutput<ListChildrenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListChildrenOutputError>
}

public struct ListChildrenInput: Equatable {
    /// <p>Filters the output to include only the specified child type.</p>
    public let childType: ChildType?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>The unique identifier (ID) for the parent root or OU whose children you want to
    ///             list.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let parentId: String?

    public init (
        childType: ChildType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        parentId: String? = nil
    )
    {
        self.childType = childType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

struct ListChildrenInputBody: Equatable {
    public let parentId: String?
    public let childType: ChildType?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListChildrenInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case childType = "ChildType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let childTypeDecoded = try containerValues.decodeIfPresent(ChildType.self, forKey: .childType)
        childType = childTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListChildrenOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListChildrenOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListChildrenOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChildrenOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListChildrenOutputResponse(children: \(String(describing: children)), nextToken: \(String(describing: nextToken)))"}
}

extension ListChildrenOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListChildrenOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.children = output.children
            self.nextToken = output.nextToken
        } else {
            self.children = nil
            self.nextToken = nil
        }
    }
}

public struct ListChildrenOutputResponse: Equatable {
    /// <p>The list of children of the specified parent container.</p>
    public let children: [Child]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        children: [Child]? = nil,
        nextToken: String? = nil
    )
    {
        self.children = children
        self.nextToken = nextToken
    }
}

struct ListChildrenOutputResponseBody: Equatable {
    public let children: [Child]?
    public let nextToken: String?
}

extension ListChildrenOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case children = "Children"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let childrenContainer = try containerValues.decodeIfPresent([Child?].self, forKey: .children)
        var childrenDecoded0:[Child]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [Child]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListCreateAccountStatusInputBodyMiddleware: Middleware {
    public let id: String = "ListCreateAccountStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListCreateAccountStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<ListCreateAccountStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListCreateAccountStatusInput>
    public typealias MOutput = OperationOutput<ListCreateAccountStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListCreateAccountStatusOutputError>
}

extension ListCreateAccountStatusInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListCreateAccountStatusInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), states: \(String(describing: states)))"}
}

extension ListCreateAccountStatusInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case states = "States"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let states = states {
            var statesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .states)
            for createaccountstates0 in states {
                try statesContainer.encode(createaccountstates0.rawValue)
            }
        }
    }
}

public struct ListCreateAccountStatusInputHeadersMiddleware: Middleware {
    public let id: String = "ListCreateAccountStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListCreateAccountStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<ListCreateAccountStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListCreateAccountStatusInput>
    public typealias MOutput = OperationOutput<ListCreateAccountStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListCreateAccountStatusOutputError>
}

public struct ListCreateAccountStatusInputQueryItemMiddleware: Middleware {
    public let id: String = "ListCreateAccountStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListCreateAccountStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<ListCreateAccountStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListCreateAccountStatusInput>
    public typealias MOutput = OperationOutput<ListCreateAccountStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListCreateAccountStatusOutputError>
}

public struct ListCreateAccountStatusInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>A list of one or more states that you want included in the response. If this parameter
    ///             isn't present, all requests are included in the response.</p>
    public let states: [CreateAccountState]?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        states: [CreateAccountState]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.states = states
    }
}

struct ListCreateAccountStatusInputBody: Equatable {
    public let states: [CreateAccountState]?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListCreateAccountStatusInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case states = "States"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statesContainer = try containerValues.decodeIfPresent([CreateAccountState?].self, forKey: .states)
        var statesDecoded0:[CreateAccountState]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [CreateAccountState]()
            for string0 in statesContainer {
                if let string0 = string0 {
                    statesDecoded0?.append(string0)
                }
            }
        }
        states = statesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListCreateAccountStatusOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCreateAccountStatusOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCreateAccountStatusOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCreateAccountStatusOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListCreateAccountStatusOutputResponse(createAccountStatuses: \(String(describing: createAccountStatuses)), nextToken: \(String(describing: nextToken)))"}
}

extension ListCreateAccountStatusOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListCreateAccountStatusOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.createAccountStatuses = output.createAccountStatuses
            self.nextToken = output.nextToken
        } else {
            self.createAccountStatuses = nil
            self.nextToken = nil
        }
    }
}

public struct ListCreateAccountStatusOutputResponse: Equatable {
    /// <p>A list of objects with details about the requests. Certain elements, such as the
    ///             accountId number, are present in the output only after the account has been successfully
    ///             created.</p>
    public let createAccountStatuses: [CreateAccountStatus]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        createAccountStatuses: [CreateAccountStatus]? = nil,
        nextToken: String? = nil
    )
    {
        self.createAccountStatuses = createAccountStatuses
        self.nextToken = nextToken
    }
}

struct ListCreateAccountStatusOutputResponseBody: Equatable {
    public let createAccountStatuses: [CreateAccountStatus]?
    public let nextToken: String?
}

extension ListCreateAccountStatusOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createAccountStatuses = "CreateAccountStatuses"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusesContainer = try containerValues.decodeIfPresent([CreateAccountStatus?].self, forKey: .createAccountStatuses)
        var createAccountStatusesDecoded0:[CreateAccountStatus]? = nil
        if let createAccountStatusesContainer = createAccountStatusesContainer {
            createAccountStatusesDecoded0 = [CreateAccountStatus]()
            for structure0 in createAccountStatusesContainer {
                if let structure0 = structure0 {
                    createAccountStatusesDecoded0?.append(structure0)
                }
            }
        }
        createAccountStatuses = createAccountStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDelegatedAdministratorsInputBodyMiddleware: Middleware {
    public let id: String = "ListDelegatedAdministratorsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDelegatedAdministratorsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDelegatedAdministratorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDelegatedAdministratorsInput>
    public typealias MOutput = OperationOutput<ListDelegatedAdministratorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDelegatedAdministratorsOutputError>
}

extension ListDelegatedAdministratorsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDelegatedAdministratorsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), servicePrincipal: \(String(describing: servicePrincipal)))"}
}

extension ListDelegatedAdministratorsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

public struct ListDelegatedAdministratorsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDelegatedAdministratorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDelegatedAdministratorsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDelegatedAdministratorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDelegatedAdministratorsInput>
    public typealias MOutput = OperationOutput<ListDelegatedAdministratorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDelegatedAdministratorsOutputError>
}

public struct ListDelegatedAdministratorsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDelegatedAdministratorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDelegatedAdministratorsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDelegatedAdministratorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDelegatedAdministratorsInput>
    public typealias MOutput = OperationOutput<ListDelegatedAdministratorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDelegatedAdministratorsOutputError>
}

public struct ListDelegatedAdministratorsInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>Specifies a service principal name. If specified, then the operation lists the
    ///             delegated administrators only for the specified service.</p>
    ///         <p>If you don't specify a service principal, the operation lists all delegated
    ///             administrators for all services in your organization.</p>
    public let servicePrincipal: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        servicePrincipal: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.servicePrincipal = servicePrincipal
    }
}

struct ListDelegatedAdministratorsInputBody: Equatable {
    public let servicePrincipal: String?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListDelegatedAdministratorsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDelegatedAdministratorsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDelegatedAdministratorsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDelegatedAdministratorsOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDelegatedAdministratorsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDelegatedAdministratorsOutputResponse(delegatedAdministrators: \(String(describing: delegatedAdministrators)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDelegatedAdministratorsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDelegatedAdministratorsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.delegatedAdministrators = output.delegatedAdministrators
            self.nextToken = output.nextToken
        } else {
            self.delegatedAdministrators = nil
            self.nextToken = nil
        }
    }
}

public struct ListDelegatedAdministratorsOutputResponse: Equatable {
    /// <p>The list of delegated administrators in your organization.</p>
    public let delegatedAdministrators: [DelegatedAdministrator]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        delegatedAdministrators: [DelegatedAdministrator]? = nil,
        nextToken: String? = nil
    )
    {
        self.delegatedAdministrators = delegatedAdministrators
        self.nextToken = nextToken
    }
}

struct ListDelegatedAdministratorsOutputResponseBody: Equatable {
    public let delegatedAdministrators: [DelegatedAdministrator]?
    public let nextToken: String?
}

extension ListDelegatedAdministratorsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case delegatedAdministrators = "DelegatedAdministrators"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegatedAdministratorsContainer = try containerValues.decodeIfPresent([DelegatedAdministrator?].self, forKey: .delegatedAdministrators)
        var delegatedAdministratorsDecoded0:[DelegatedAdministrator]? = nil
        if let delegatedAdministratorsContainer = delegatedAdministratorsContainer {
            delegatedAdministratorsDecoded0 = [DelegatedAdministrator]()
            for structure0 in delegatedAdministratorsContainer {
                if let structure0 = structure0 {
                    delegatedAdministratorsDecoded0?.append(structure0)
                }
            }
        }
        delegatedAdministrators = delegatedAdministratorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDelegatedServicesForAccountInputBodyMiddleware: Middleware {
    public let id: String = "ListDelegatedServicesForAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDelegatedServicesForAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDelegatedServicesForAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDelegatedServicesForAccountInput>
    public typealias MOutput = OperationOutput<ListDelegatedServicesForAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDelegatedServicesForAccountOutputError>
}

extension ListDelegatedServicesForAccountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDelegatedServicesForAccountInput(accountId: \(String(describing: accountId)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDelegatedServicesForAccountInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListDelegatedServicesForAccountInputHeadersMiddleware: Middleware {
    public let id: String = "ListDelegatedServicesForAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDelegatedServicesForAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDelegatedServicesForAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDelegatedServicesForAccountInput>
    public typealias MOutput = OperationOutput<ListDelegatedServicesForAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDelegatedServicesForAccountOutputError>
}

public struct ListDelegatedServicesForAccountInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDelegatedServicesForAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDelegatedServicesForAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDelegatedServicesForAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDelegatedServicesForAccountInput>
    public typealias MOutput = OperationOutput<ListDelegatedServicesForAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDelegatedServicesForAccountOutputError>
}

public struct ListDelegatedServicesForAccountInput: Equatable {
    /// <p>The account ID number of a delegated administrator account in the organization.</p>
    public let accountId: String?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        accountId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDelegatedServicesForAccountInputBody: Equatable {
    public let accountId: String?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListDelegatedServicesForAccountInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDelegatedServicesForAccountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDelegatedServicesForAccountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotRegisteredException" : self = .accountNotRegisteredException(try AccountNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDelegatedServicesForAccountOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case accountNotRegisteredException(AccountNotRegisteredException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDelegatedServicesForAccountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDelegatedServicesForAccountOutputResponse(delegatedServices: \(String(describing: delegatedServices)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDelegatedServicesForAccountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDelegatedServicesForAccountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.delegatedServices = output.delegatedServices
            self.nextToken = output.nextToken
        } else {
            self.delegatedServices = nil
            self.nextToken = nil
        }
    }
}

public struct ListDelegatedServicesForAccountOutputResponse: Equatable {
    /// <p>The services for which the account is a delegated administrator.</p>
    public let delegatedServices: [DelegatedService]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        delegatedServices: [DelegatedService]? = nil,
        nextToken: String? = nil
    )
    {
        self.delegatedServices = delegatedServices
        self.nextToken = nextToken
    }
}

struct ListDelegatedServicesForAccountOutputResponseBody: Equatable {
    public let delegatedServices: [DelegatedService]?
    public let nextToken: String?
}

extension ListDelegatedServicesForAccountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case delegatedServices = "DelegatedServices"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegatedServicesContainer = try containerValues.decodeIfPresent([DelegatedService?].self, forKey: .delegatedServices)
        var delegatedServicesDecoded0:[DelegatedService]? = nil
        if let delegatedServicesContainer = delegatedServicesContainer {
            delegatedServicesDecoded0 = [DelegatedService]()
            for structure0 in delegatedServicesContainer {
                if let structure0 = structure0 {
                    delegatedServicesDecoded0?.append(structure0)
                }
            }
        }
        delegatedServices = delegatedServicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListHandshakesForAccountInputBodyMiddleware: Middleware {
    public let id: String = "ListHandshakesForAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListHandshakesForAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<ListHandshakesForAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListHandshakesForAccountInput>
    public typealias MOutput = OperationOutput<ListHandshakesForAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListHandshakesForAccountOutputError>
}

extension ListHandshakesForAccountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListHandshakesForAccountInput(filter: \(String(describing: filter)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListHandshakesForAccountInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListHandshakesForAccountInputHeadersMiddleware: Middleware {
    public let id: String = "ListHandshakesForAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListHandshakesForAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<ListHandshakesForAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListHandshakesForAccountInput>
    public typealias MOutput = OperationOutput<ListHandshakesForAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListHandshakesForAccountOutputError>
}

public struct ListHandshakesForAccountInputQueryItemMiddleware: Middleware {
    public let id: String = "ListHandshakesForAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListHandshakesForAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<ListHandshakesForAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListHandshakesForAccountInput>
    public typealias MOutput = OperationOutput<ListHandshakesForAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListHandshakesForAccountOutputError>
}

public struct ListHandshakesForAccountInput: Equatable {
    /// <p>Filters the handshakes that you want included in the response. The default is all
    ///             types. Use the <code>ActionType</code> element to limit the output to only a specified
    ///             type, such as <code>INVITE</code>, <code>ENABLE_ALL_FEATURES</code>, or
    ///                 <code>APPROVE_ALL_FEATURES</code>. Alternatively, for the
    ///                 <code>ENABLE_ALL_FEATURES</code> handshake that generates a separate child handshake
    ///             for each member account, you can specify <code>ParentHandshakeId</code> to see only the
    ///             handshakes that were generated by that parent request.</p>
    public let filter: HandshakeFilter?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        filter: HandshakeFilter? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListHandshakesForAccountInputBody: Equatable {
    public let filter: HandshakeFilter?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListHandshakesForAccountInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(HandshakeFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHandshakesForAccountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHandshakesForAccountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHandshakesForAccountOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHandshakesForAccountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListHandshakesForAccountOutputResponse(handshakes: \(String(describing: handshakes)), nextToken: \(String(describing: nextToken)))"}
}

extension ListHandshakesForAccountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListHandshakesForAccountOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshakes = output.handshakes
            self.nextToken = output.nextToken
        } else {
            self.handshakes = nil
            self.nextToken = nil
        }
    }
}

public struct ListHandshakesForAccountOutputResponse: Equatable {
    /// <p>A list of <a>Handshake</a> objects with details about each of the
    ///             handshakes that is associated with the specified account.</p>
    public let handshakes: [Handshake]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        handshakes: [Handshake]? = nil,
        nextToken: String? = nil
    )
    {
        self.handshakes = handshakes
        self.nextToken = nextToken
    }
}

struct ListHandshakesForAccountOutputResponseBody: Equatable {
    public let handshakes: [Handshake]?
    public let nextToken: String?
}

extension ListHandshakesForAccountOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakes = "Handshakes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakesContainer = try containerValues.decodeIfPresent([Handshake?].self, forKey: .handshakes)
        var handshakesDecoded0:[Handshake]? = nil
        if let handshakesContainer = handshakesContainer {
            handshakesDecoded0 = [Handshake]()
            for structure0 in handshakesContainer {
                if let structure0 = structure0 {
                    handshakesDecoded0?.append(structure0)
                }
            }
        }
        handshakes = handshakesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListHandshakesForOrganizationInputBodyMiddleware: Middleware {
    public let id: String = "ListHandshakesForOrganizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListHandshakesForOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<ListHandshakesForOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListHandshakesForOrganizationInput>
    public typealias MOutput = OperationOutput<ListHandshakesForOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListHandshakesForOrganizationOutputError>
}

extension ListHandshakesForOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListHandshakesForOrganizationInput(filter: \(String(describing: filter)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListHandshakesForOrganizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListHandshakesForOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "ListHandshakesForOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListHandshakesForOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<ListHandshakesForOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListHandshakesForOrganizationInput>
    public typealias MOutput = OperationOutput<ListHandshakesForOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListHandshakesForOrganizationOutputError>
}

public struct ListHandshakesForOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "ListHandshakesForOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListHandshakesForOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<ListHandshakesForOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListHandshakesForOrganizationInput>
    public typealias MOutput = OperationOutput<ListHandshakesForOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListHandshakesForOrganizationOutputError>
}

public struct ListHandshakesForOrganizationInput: Equatable {
    /// <p>A filter of the handshakes that you want included in the response. The default is all
    ///             types. Use the <code>ActionType</code> element to limit the output to only a specified
    ///             type, such as <code>INVITE</code>, <code>ENABLE-ALL-FEATURES</code>, or
    ///                 <code>APPROVE-ALL-FEATURES</code>. Alternatively, for the
    ///                 <code>ENABLE-ALL-FEATURES</code> handshake that generates a separate child handshake
    ///             for each member account, you can specify the <code>ParentHandshakeId</code> to see only
    ///             the handshakes that were generated by that parent request.</p>
    public let filter: HandshakeFilter?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        filter: HandshakeFilter? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListHandshakesForOrganizationInputBody: Equatable {
    public let filter: HandshakeFilter?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListHandshakesForOrganizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(HandshakeFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHandshakesForOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHandshakesForOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHandshakesForOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHandshakesForOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListHandshakesForOrganizationOutputResponse(handshakes: \(String(describing: handshakes)), nextToken: \(String(describing: nextToken)))"}
}

extension ListHandshakesForOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListHandshakesForOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.handshakes = output.handshakes
            self.nextToken = output.nextToken
        } else {
            self.handshakes = nil
            self.nextToken = nil
        }
    }
}

public struct ListHandshakesForOrganizationOutputResponse: Equatable {
    /// <p>A list of <a>Handshake</a> objects with details about each of the
    ///             handshakes that are associated with an organization.</p>
    public let handshakes: [Handshake]?
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?

    public init (
        handshakes: [Handshake]? = nil,
        nextToken: String? = nil
    )
    {
        self.handshakes = handshakes
        self.nextToken = nextToken
    }
}

struct ListHandshakesForOrganizationOutputResponseBody: Equatable {
    public let handshakes: [Handshake]?
    public let nextToken: String?
}

extension ListHandshakesForOrganizationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case handshakes = "Handshakes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakesContainer = try containerValues.decodeIfPresent([Handshake?].self, forKey: .handshakes)
        var handshakesDecoded0:[Handshake]? = nil
        if let handshakesContainer = handshakesContainer {
            handshakesDecoded0 = [Handshake]()
            for structure0 in handshakesContainer {
                if let structure0 = structure0 {
                    handshakesDecoded0?.append(structure0)
                }
            }
        }
        handshakes = handshakesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListOrganizationalUnitsForParentInputBodyMiddleware: Middleware {
    public let id: String = "ListOrganizationalUnitsForParentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOrganizationalUnitsForParentInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOrganizationalUnitsForParentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOrganizationalUnitsForParentInput>
    public typealias MOutput = OperationOutput<ListOrganizationalUnitsForParentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOrganizationalUnitsForParentOutputError>
}

extension ListOrganizationalUnitsForParentInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOrganizationalUnitsForParentInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), parentId: \(String(describing: parentId)))"}
}

extension ListOrganizationalUnitsForParentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
    }
}

public struct ListOrganizationalUnitsForParentInputHeadersMiddleware: Middleware {
    public let id: String = "ListOrganizationalUnitsForParentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOrganizationalUnitsForParentInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOrganizationalUnitsForParentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOrganizationalUnitsForParentInput>
    public typealias MOutput = OperationOutput<ListOrganizationalUnitsForParentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOrganizationalUnitsForParentOutputError>
}

public struct ListOrganizationalUnitsForParentInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOrganizationalUnitsForParentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOrganizationalUnitsForParentInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOrganizationalUnitsForParentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOrganizationalUnitsForParentInput>
    public typealias MOutput = OperationOutput<ListOrganizationalUnitsForParentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOrganizationalUnitsForParentOutputError>
}

public struct ListOrganizationalUnitsForParentInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>The unique identifier (ID) of the root or OU whose child OUs you want to list.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let parentId: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        parentId: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

struct ListOrganizationalUnitsForParentInputBody: Equatable {
    public let parentId: String?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListOrganizationalUnitsForParentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListOrganizationalUnitsForParentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOrganizationalUnitsForParentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOrganizationalUnitsForParentOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOrganizationalUnitsForParentOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOrganizationalUnitsForParentOutputResponse(nextToken: \(String(describing: nextToken)), organizationalUnits: \(String(describing: organizationalUnits)))"}
}

extension ListOrganizationalUnitsForParentOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListOrganizationalUnitsForParentOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.organizationalUnits = output.organizationalUnits
        } else {
            self.nextToken = nil
            self.organizationalUnits = nil
        }
    }
}

public struct ListOrganizationalUnitsForParentOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>A list of the OUs in the specified root or parent OU.</p>
    public let organizationalUnits: [OrganizationalUnit]?

    public init (
        nextToken: String? = nil,
        organizationalUnits: [OrganizationalUnit]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationalUnits = organizationalUnits
    }
}

struct ListOrganizationalUnitsForParentOutputResponseBody: Equatable {
    public let organizationalUnits: [OrganizationalUnit]?
    public let nextToken: String?
}

extension ListOrganizationalUnitsForParentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case organizationalUnits = "OrganizationalUnits"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitsContainer = try containerValues.decodeIfPresent([OrganizationalUnit?].self, forKey: .organizationalUnits)
        var organizationalUnitsDecoded0:[OrganizationalUnit]? = nil
        if let organizationalUnitsContainer = organizationalUnitsContainer {
            organizationalUnitsDecoded0 = [OrganizationalUnit]()
            for structure0 in organizationalUnitsContainer {
                if let structure0 = structure0 {
                    organizationalUnitsDecoded0?.append(structure0)
                }
            }
        }
        organizationalUnits = organizationalUnitsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListParentsInputBodyMiddleware: Middleware {
    public let id: String = "ListParentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListParentsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListParentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListParentsInput>
    public typealias MOutput = OperationOutput<ListParentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListParentsOutputError>
}

extension ListParentsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListParentsInput(childId: \(String(describing: childId)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListParentsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childId = "ChildId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childId = childId {
            try encodeContainer.encode(childId, forKey: .childId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListParentsInputHeadersMiddleware: Middleware {
    public let id: String = "ListParentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListParentsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListParentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListParentsInput>
    public typealias MOutput = OperationOutput<ListParentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListParentsOutputError>
}

public struct ListParentsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListParentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListParentsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListParentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListParentsInput>
    public typealias MOutput = OperationOutput<ListParentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListParentsOutputError>
}

public struct ListParentsInput: Equatable {
    /// <p>The unique identifier (ID) of the OU or account whose parent containers you want to
    ///             list. Don't specify a root.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a child ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Account</b> - A string that consists of exactly 12 digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with
    ///           "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that
    ///           contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional
    ///           lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let childId: String?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        childId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.childId = childId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListParentsInputBody: Equatable {
    public let childId: String?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListParentsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case childId = "ChildId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let childIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .childId)
        childId = childIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListParentsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListParentsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ChildNotFoundException" : self = .childNotFoundException(try ChildNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListParentsOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case childNotFoundException(ChildNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListParentsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListParentsOutputResponse(nextToken: \(String(describing: nextToken)), parents: \(String(describing: parents)))"}
}

extension ListParentsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListParentsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.parents = output.parents
        } else {
            self.nextToken = nil
            self.parents = nil
        }
    }
}

public struct ListParentsOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>A list of parents for the specified child account or OU.</p>
    public let parents: [Parent]?

    public init (
        nextToken: String? = nil,
        parents: [Parent]? = nil
    )
    {
        self.nextToken = nextToken
        self.parents = parents
    }
}

struct ListParentsOutputResponseBody: Equatable {
    public let parents: [Parent]?
    public let nextToken: String?
}

extension ListParentsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case parents = "Parents"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentsContainer = try containerValues.decodeIfPresent([Parent?].self, forKey: .parents)
        var parentsDecoded0:[Parent]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [Parent]()
            for structure0 in parentsContainer {
                if let structure0 = structure0 {
                    parentsDecoded0?.append(structure0)
                }
            }
        }
        parents = parentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListPoliciesForTargetInputBodyMiddleware: Middleware {
    public let id: String = "ListPoliciesForTargetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPoliciesForTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPoliciesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPoliciesForTargetInput>
    public typealias MOutput = OperationOutput<ListPoliciesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPoliciesForTargetOutputError>
}

extension ListPoliciesForTargetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListPoliciesForTargetInput(filter: \(String(describing: filter)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), targetId: \(String(describing: targetId)))"}
}

extension ListPoliciesForTargetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter.rawValue, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

public struct ListPoliciesForTargetInputHeadersMiddleware: Middleware {
    public let id: String = "ListPoliciesForTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPoliciesForTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPoliciesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPoliciesForTargetInput>
    public typealias MOutput = OperationOutput<ListPoliciesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPoliciesForTargetOutputError>
}

public struct ListPoliciesForTargetInputQueryItemMiddleware: Middleware {
    public let id: String = "ListPoliciesForTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPoliciesForTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPoliciesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPoliciesForTargetInput>
    public typealias MOutput = OperationOutput<ListPoliciesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPoliciesForTargetOutputError>
}

public struct ListPoliciesForTargetInput: Equatable {
    /// <p>The type of policy that you want to include in the returned list. You must specify one
    ///             of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let filter: PolicyType?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>The unique identifier (ID) of the root, organizational unit, or account whose policies
    ///             you want to list.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Account</b> - A string that consists of exactly 12 digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let targetId: String?

    public init (
        filter: PolicyType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        targetId: String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.targetId = targetId
    }
}

struct ListPoliciesForTargetInputBody: Equatable {
    public let targetId: String?
    public let filter: PolicyType?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListPoliciesForTargetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case targetId = "TargetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let filterDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPoliciesForTargetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPoliciesForTargetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPoliciesForTargetOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesForTargetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListPoliciesForTargetOutputResponse(nextToken: \(String(describing: nextToken)), policies: \(String(describing: policies)))"}
}

extension ListPoliciesForTargetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListPoliciesForTargetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.policies = output.policies
        } else {
            self.nextToken = nil
            self.policies = nil
        }
    }
}

public struct ListPoliciesForTargetOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>The list of policies that match the criteria in the request.</p>
    public let policies: [PolicySummary]?

    public init (
        nextToken: String? = nil,
        policies: [PolicySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

struct ListPoliciesForTargetOutputResponseBody: Equatable {
    public let policies: [PolicySummary]?
    public let nextToken: String?
}

extension ListPoliciesForTargetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case policies = "Policies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([PolicySummary?].self, forKey: .policies)
        var policiesDecoded0:[PolicySummary]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [PolicySummary]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListPoliciesInputBodyMiddleware: Middleware {
    public let id: String = "ListPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPoliciesInput>
    public typealias MOutput = OperationOutput<ListPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPoliciesOutputError>
}

extension ListPoliciesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListPoliciesInput(filter: \(String(describing: filter)), maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListPoliciesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter.rawValue, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListPoliciesInputHeadersMiddleware: Middleware {
    public let id: String = "ListPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPoliciesInput>
    public typealias MOutput = OperationOutput<ListPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPoliciesOutputError>
}

public struct ListPoliciesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPoliciesInput>
    public typealias MOutput = OperationOutput<ListPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPoliciesOutputError>
}

public struct ListPoliciesInput: Equatable {
    /// <p>Specifies the type of policy that you want to include in the response. You must
    ///             specify one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let filter: PolicyType?
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        filter: PolicyType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPoliciesInputBody: Equatable {
    public let filter: PolicyType?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListPoliciesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPoliciesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPoliciesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPoliciesOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListPoliciesOutputResponse(nextToken: \(String(describing: nextToken)), policies: \(String(describing: policies)))"}
}

extension ListPoliciesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.policies = output.policies
        } else {
            self.nextToken = nil
            self.policies = nil
        }
    }
}

public struct ListPoliciesOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>A list of policies that match the filter criteria in the request. The output list
    ///             doesn't include the policy contents. To see the content for a policy, see <a>DescribePolicy</a>.</p>
    public let policies: [PolicySummary]?

    public init (
        nextToken: String? = nil,
        policies: [PolicySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

struct ListPoliciesOutputResponseBody: Equatable {
    public let policies: [PolicySummary]?
    public let nextToken: String?
}

extension ListPoliciesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case policies = "Policies"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([PolicySummary?].self, forKey: .policies)
        var policiesDecoded0:[PolicySummary]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [PolicySummary]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListRootsInputBodyMiddleware: Middleware {
    public let id: String = "ListRootsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListRootsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListRootsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListRootsInput>
    public typealias MOutput = OperationOutput<ListRootsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListRootsOutputError>
}

extension ListRootsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListRootsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListRootsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListRootsInputHeadersMiddleware: Middleware {
    public let id: String = "ListRootsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListRootsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListRootsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListRootsInput>
    public typealias MOutput = OperationOutput<ListRootsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListRootsOutputError>
}

public struct ListRootsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListRootsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListRootsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListRootsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListRootsInput>
    public typealias MOutput = OperationOutput<ListRootsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListRootsOutputError>
}

public struct ListRootsInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRootsInputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListRootsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListRootsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRootsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRootsOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRootsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListRootsOutputResponse(nextToken: \(String(describing: nextToken)), roots: \(String(describing: roots)))"}
}

extension ListRootsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListRootsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.roots = output.roots
        } else {
            self.nextToken = nil
            self.roots = nil
        }
    }
}

public struct ListRootsOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>A list of roots that are defined in an organization.</p>
    public let roots: [Root]?

    public init (
        nextToken: String? = nil,
        roots: [Root]? = nil
    )
    {
        self.nextToken = nextToken
        self.roots = roots
    }
}

struct ListRootsOutputResponseBody: Equatable {
    public let roots: [Root]?
    public let nextToken: String?
}

extension ListRootsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case roots = "Roots"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootsContainer = try containerValues.decodeIfPresent([Root?].self, forKey: .roots)
        var rootsDecoded0:[Root]? = nil
        if let rootsContainer = rootsContainer {
            rootsDecoded0 = [Root]()
            for structure0 in rootsContainer {
                if let structure0 = structure0 {
                    rootsDecoded0?.append(structure0)
                }
            }
        }
        roots = rootsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(nextToken: \(String(describing: nextToken)), resourceId: \(String(describing: resourceId)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>The ID of the resource with the tags to list.</p>
    ///         <p>You can specify any of the following taggable resources.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>AWS account – specify the account ID number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organizational unit  – specify the OU ID that begins with <code>ou-</code> and
    ///                     looks similar to: <code>ou-<i>1a2b-34uvwxyz</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Root – specify the root ID that begins with <code>r-</code> and looks similar
    ///                     to: <code>r-<i>1a2b</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Policy – specify the policy ID that begins with <code>p-</code> andlooks
    ///                     similar to: <code>p-<i>12abcdefg3</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let resourceId: String?

    public init (
        nextToken: String? = nil,
        resourceId: String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceId = resourceId
    }
}

struct ListTagsForResourceInputBody: Equatable {
    public let resourceId: String?
    public let nextToken: String?
}

extension ListTagsForResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(nextToken: \(String(describing: nextToken)), tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>The tags that are assigned to the resource.</p>
    public let tags: [Tag]?

    public init (
        nextToken: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [Tag]?
    public let nextToken: String?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTargetsForPolicyInputBodyMiddleware: Middleware {
    public let id: String = "ListTargetsForPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTargetsForPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTargetsForPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTargetsForPolicyInput>
    public typealias MOutput = OperationOutput<ListTargetsForPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTargetsForPolicyOutputError>
}

extension ListTargetsForPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTargetsForPolicyInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), policyId: \(String(describing: policyId)))"}
}

extension ListTargetsForPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

public struct ListTargetsForPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "ListTargetsForPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTargetsForPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTargetsForPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTargetsForPolicyInput>
    public typealias MOutput = OperationOutput<ListTargetsForPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTargetsForPolicyOutputError>
}

public struct ListTargetsForPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTargetsForPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTargetsForPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTargetsForPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTargetsForPolicyInput>
    public typealias MOutput = OperationOutput<ListTargetsForPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTargetsForPolicyOutputError>
}

public struct ListTargetsForPolicyInput: Equatable {
    /// <p>The total number of results that you want included on each page of the
    ///     response. If you do not include this parameter, it defaults to a value that is specific to the
    ///     operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
    ///     response element is present and has a value (is not null). Include that value as the
    ///     <code>NextToken</code> request parameter in the next call to the operation to get the next part
    ///     of the results. Note that Organizations might return fewer results than the maximum even when there are
    ///     more results available. You should check <code>NextToken</code> after every operation to ensure
    ///     that you receive all of the results.</p>
    public let maxResults: Int?
    /// <p>The parameter for receiving additional results if you receive a
    ///     <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
    ///     indicates that more output is available. Set this parameter to the value of the previous
    ///     call's <code>NextToken</code> response to indicate where the output should continue
    ///     from.</p>
    public let nextToken: String?
    /// <p>The unique identifier (ID) of the policy whose attachments you want to know.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let policyId: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        policyId: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyId = policyId
    }
}

struct ListTargetsForPolicyInputBody: Equatable {
    public let policyId: String?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListTargetsForPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyId = "PolicyId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTargetsForPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTargetsForPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTargetsForPolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTargetsForPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTargetsForPolicyOutputResponse(nextToken: \(String(describing: nextToken)), targets: \(String(describing: targets)))"}
}

extension ListTargetsForPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTargetsForPolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.targets = output.targets
        } else {
            self.nextToken = nil
            self.targets = nil
        }
    }
}

public struct ListTargetsForPolicyOutputResponse: Equatable {
    /// <p>If present, indicates that more output is available than is
    ///     included in the current response. Use this value in the <code>NextToken</code> request parameter
    ///     in a subsequent call to the operation to get the next part of the output. You should repeat this
    ///     until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    public let nextToken: String?
    /// <p>A list of structures, each of which contains details about one of the entities to
    ///             which the specified policy is attached.</p>
    public let targets: [PolicyTargetSummary]?

    public init (
        nextToken: String? = nil,
        targets: [PolicyTargetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.targets = targets
    }
}

struct ListTargetsForPolicyOutputResponseBody: Equatable {
    public let targets: [PolicyTargetSummary]?
    public let nextToken: String?
}

extension ListTargetsForPolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case targets = "Targets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([PolicyTargetSummary?].self, forKey: .targets)
        var targetsDecoded0:[PolicyTargetSummary]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [PolicyTargetSummary]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension MalformedPolicyDocumentException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MalformedPolicyDocumentException(message: \(String(describing: message)))"}
}

extension MalformedPolicyDocumentException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: MalformedPolicyDocumentExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The provided policy document doesn't meet the requirements of the specified policy
///             type. For example, the syntax might be incorrect. For details about service control
///             policy syntax, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html">Service Control Policy
///                 Syntax</a> in the <i>AWS Organizations User Guide.</i>
///          </p>
public struct MalformedPolicyDocumentException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct MalformedPolicyDocumentExceptionBody: Equatable {
    public let message: String?
}

extension MalformedPolicyDocumentExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MasterCannotLeaveOrganizationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MasterCannotLeaveOrganizationException(message: \(String(describing: message)))"}
}

extension MasterCannotLeaveOrganizationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: MasterCannotLeaveOrganizationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't remove a management account from an organization. If you want the management
///             account to become a member account in another organization, you must first delete the
///             current organization of the management account.</p>
public struct MasterCannotLeaveOrganizationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct MasterCannotLeaveOrganizationExceptionBody: Equatable {
    public let message: String?
}

extension MasterCannotLeaveOrganizationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct MoveAccountInputBodyMiddleware: Middleware {
    public let id: String = "MoveAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<MoveAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<MoveAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<MoveAccountInput>
    public typealias MOutput = OperationOutput<MoveAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<MoveAccountOutputError>
}

extension MoveAccountInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MoveAccountInput(accountId: \(String(describing: accountId)), destinationParentId: \(String(describing: destinationParentId)), sourceParentId: \(String(describing: sourceParentId)))"}
}

extension MoveAccountInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case destinationParentId = "DestinationParentId"
        case sourceParentId = "SourceParentId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let destinationParentId = destinationParentId {
            try encodeContainer.encode(destinationParentId, forKey: .destinationParentId)
        }
        if let sourceParentId = sourceParentId {
            try encodeContainer.encode(sourceParentId, forKey: .sourceParentId)
        }
    }
}

public struct MoveAccountInputHeadersMiddleware: Middleware {
    public let id: String = "MoveAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<MoveAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<MoveAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<MoveAccountInput>
    public typealias MOutput = OperationOutput<MoveAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<MoveAccountOutputError>
}

public struct MoveAccountInputQueryItemMiddleware: Middleware {
    public let id: String = "MoveAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<MoveAccountInput>,
                  next: H) -> Swift.Result<OperationOutput<MoveAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<MoveAccountInput>
    public typealias MOutput = OperationOutput<MoveAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<MoveAccountOutputError>
}

public struct MoveAccountInput: Equatable {
    /// <p>The unique identifier (ID) of the account that you want to move.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
    ///     digits.</p>
    public let accountId: String?
    /// <p>The unique identifier (ID) of the root or organizational unit that you want to move
    ///             the account to.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let destinationParentId: String?
    /// <p>The unique identifier (ID) of the root or organizational unit that you want to move
    ///             the account from.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let sourceParentId: String?

    public init (
        accountId: String? = nil,
        destinationParentId: String? = nil,
        sourceParentId: String? = nil
    )
    {
        self.accountId = accountId
        self.destinationParentId = destinationParentId
        self.sourceParentId = sourceParentId
    }
}

struct MoveAccountInputBody: Equatable {
    public let accountId: String?
    public let sourceParentId: String?
    public let destinationParentId: String?
}

extension MoveAccountInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case destinationParentId = "DestinationParentId"
        case sourceParentId = "SourceParentId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let sourceParentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceParentId)
        sourceParentId = sourceParentIdDecoded
        let destinationParentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationParentId)
        destinationParentId = destinationParentIdDecoded
    }
}

extension MoveAccountOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension MoveAccountOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DestinationParentNotFoundException" : self = .destinationParentNotFoundException(try DestinationParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateAccountException" : self = .duplicateAccountException(try DuplicateAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SourceParentNotFoundException" : self = .sourceParentNotFoundException(try SourceParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum MoveAccountOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case destinationParentNotFoundException(DestinationParentNotFoundException)
    case duplicateAccountException(DuplicateAccountException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case sourceParentNotFoundException(SourceParentNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension MoveAccountOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MoveAccountOutputResponse()"}
}

extension MoveAccountOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct MoveAccountOutputResponse: Equatable {

    public init() {}
}

struct MoveAccountOutputResponseBody: Equatable {
}

extension MoveAccountOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Organization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case availablePolicyTypes = "AvailablePolicyTypes"
        case featureSet = "FeatureSet"
        case id = "Id"
        case masterAccountArn = "MasterAccountArn"
        case masterAccountEmail = "MasterAccountEmail"
        case masterAccountId = "MasterAccountId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availablePolicyTypes = availablePolicyTypes {
            var availablePolicyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availablePolicyTypes)
            for policytypes0 in availablePolicyTypes {
                try availablePolicyTypesContainer.encode(policytypes0)
            }
        }
        if let featureSet = featureSet {
            try encodeContainer.encode(featureSet.rawValue, forKey: .featureSet)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let masterAccountArn = masterAccountArn {
            try encodeContainer.encode(masterAccountArn, forKey: .masterAccountArn)
        }
        if let masterAccountEmail = masterAccountEmail {
            try encodeContainer.encode(masterAccountEmail, forKey: .masterAccountEmail)
        }
        if let masterAccountId = masterAccountId {
            try encodeContainer.encode(masterAccountId, forKey: .masterAccountId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let featureSetDecoded = try containerValues.decodeIfPresent(OrganizationFeatureSet.self, forKey: .featureSet)
        featureSet = featureSetDecoded
        let masterAccountArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterAccountArn)
        masterAccountArn = masterAccountArnDecoded
        let masterAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterAccountId)
        masterAccountId = masterAccountIdDecoded
        let masterAccountEmailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterAccountEmail)
        masterAccountEmail = masterAccountEmailDecoded
        let availablePolicyTypesContainer = try containerValues.decodeIfPresent([PolicyTypeSummary?].self, forKey: .availablePolicyTypes)
        var availablePolicyTypesDecoded0:[PolicyTypeSummary]? = nil
        if let availablePolicyTypesContainer = availablePolicyTypesContainer {
            availablePolicyTypesDecoded0 = [PolicyTypeSummary]()
            for structure0 in availablePolicyTypesContainer {
                if let structure0 = structure0 {
                    availablePolicyTypesDecoded0?.append(structure0)
                }
            }
        }
        availablePolicyTypes = availablePolicyTypesDecoded0
    }
}

extension Organization: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Organization(arn: \(String(describing: arn)), availablePolicyTypes: \(String(describing: availablePolicyTypes)), featureSet: \(String(describing: featureSet)), id: \(String(describing: id)), masterAccountArn: \(String(describing: masterAccountArn)), masterAccountEmail: \(String(describing: masterAccountEmail)), masterAccountId: \(String(describing: masterAccountId)))"}
}

/// <p>Contains details about an organization. An organization is a collection of accounts
///             that are centrally managed together using consolidated billing, organized hierarchically
///             with organizational units (OUs), and controlled with policies .</p>
public struct Organization: Equatable {
    /// <p>The Amazon Resource Name (ARN) of an organization.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <important>
    ///             <p>Do not use. This field is deprecated and doesn't provide complete information
    ///                 about the policies in your organization.</p>
    ///         </important>
    ///         <p>To determine the policies that are enabled and available for use in your organization,
    ///             use the <a>ListRoots</a> operation instead.</p>
    public let availablePolicyTypes: [PolicyTypeSummary]?
    /// <p>Specifies the functionality that currently is available to the organization. If set to
    ///             "ALL", then all features are enabled and policies can be applied to accounts in the
    ///             organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing
    ///             functionality is available. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features
    ///                 in Your Organization</a> in the <i>AWS Organizations User Guide</i>.</p>
    public let featureSet: OrganizationFeatureSet?
    /// <p>The unique identifier (ID) of an organization.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organization ID string requires "o-"
    ///     followed by from 10 to 32 lowercase letters or digits.</p>
    public let id: String?
    /// <p>The Amazon Resource Name (ARN) of the account that is designated as the management
    ///             account for the organization.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let masterAccountArn: String?
    /// <p>The email address that is associated with the AWS account that is designated as the
    ///             management account for the organization.</p>
    public let masterAccountEmail: String?
    /// <p>The unique identifier (ID) of the management account of an organization.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
    ///     digits.</p>
    public let masterAccountId: String?

    public init (
        arn: String? = nil,
        availablePolicyTypes: [PolicyTypeSummary]? = nil,
        featureSet: OrganizationFeatureSet? = nil,
        id: String? = nil,
        masterAccountArn: String? = nil,
        masterAccountEmail: String? = nil,
        masterAccountId: String? = nil
    )
    {
        self.arn = arn
        self.availablePolicyTypes = availablePolicyTypes
        self.featureSet = featureSet
        self.id = id
        self.masterAccountArn = masterAccountArn
        self.masterAccountEmail = masterAccountEmail
        self.masterAccountId = masterAccountId
    }
}

public enum OrganizationFeatureSet {
    case all
    case consolidatedBilling
    case sdkUnknown(String)
}

extension OrganizationFeatureSet : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OrganizationFeatureSet] {
        return [
            .all,
            .consolidatedBilling,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .consolidatedBilling: return "CONSOLIDATED_BILLING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OrganizationFeatureSet(rawValue: rawValue) ?? OrganizationFeatureSet.sdkUnknown(rawValue)
    }
}

extension OrganizationNotEmptyException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OrganizationNotEmptyException(message: \(String(describing: message)))"}
}

extension OrganizationNotEmptyException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OrganizationNotEmptyExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The organization isn't empty. To delete an organization, you must first remove all
///             accounts except the management account, delete all OUs, and delete all policies.</p>
public struct OrganizationNotEmptyException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationNotEmptyExceptionBody: Equatable {
    public let message: String?
}

extension OrganizationNotEmptyExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationalUnit: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension OrganizationalUnit: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OrganizationalUnit(arn: \(String(describing: arn)), id: \(String(describing: id)), name: \(String(describing: name)))"}
}

/// <p>Contains details about an organizational unit (OU). An OU is a container of AWS
///             accounts within a root of an organization. Policies that are attached to an OU apply to
///             all accounts contained in that OU and in any child OUs.</p>
public struct OrganizationalUnit: Equatable {
    /// <p>The Amazon Resource Name (ARN) of this OU.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>The unique identifier (ID) associated with this OU.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
    ///     "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
    ///     OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
    ///     or digits.</p>
    public let id: String?
    /// <p>The friendly name of this OU.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?

    public init (
        arn: String? = nil,
        id: String? = nil,
        name: String? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.name = name
    }
}

extension OrganizationalUnitNotEmptyException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OrganizationalUnitNotEmptyException(message: \(String(describing: message)))"}
}

extension OrganizationalUnitNotEmptyException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OrganizationalUnitNotEmptyExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified OU is not empty. Move all accounts to another root or to other OUs,
///             remove all child OUs, and try the operation again.</p>
public struct OrganizationalUnitNotEmptyException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationalUnitNotEmptyExceptionBody: Equatable {
    public let message: String?
}

extension OrganizationalUnitNotEmptyExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationalUnitNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OrganizationalUnitNotFoundException(message: \(String(describing: message)))"}
}

extension OrganizationalUnitNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OrganizationalUnitNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find an OU with the <code>OrganizationalUnitId</code> that you
///             specified.</p>
public struct OrganizationalUnitNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationalUnitNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension OrganizationalUnitNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Parent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ParentType.self, forKey: .type)
        type = typeDecoded
    }
}

extension Parent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Parent(id: \(String(describing: id)), type: \(String(describing: type)))"}
}

/// <p>Contains information about either a root or an organizational unit (OU) that can
///             contain OUs or accounts in an organization.</p>
public struct Parent: Equatable {
    /// <p>The unique identifier (ID) of the parent entity.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let id: String?
    /// <p>The type of the parent entity.</p>
    public let type: ParentType?

    public init (
        id: String? = nil,
        type: ParentType? = nil
    )
    {
        self.id = id
        self.type = type
    }
}

extension ParentNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ParentNotFoundException(message: \(String(describing: message)))"}
}

extension ParentNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ParentNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find a root or OU with the <code>ParentId</code> that you specified.</p>
public struct ParentNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ParentNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension ParentNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ParentType {
    case organizationalUnit
    case root
    case sdkUnknown(String)
}

extension ParentType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ParentType] {
        return [
            .organizationalUnit,
            .root,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
        case .root: return "ROOT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ParentType(rawValue: rawValue) ?? ParentType.sdkUnknown(rawValue)
    }
}

extension Policy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
        case policySummary = "PolicySummary"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let policySummary = policySummary {
            try encodeContainer.encode(policySummary, forKey: .policySummary)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policySummaryDecoded = try containerValues.decodeIfPresent(PolicySummary.self, forKey: .policySummary)
        policySummary = policySummaryDecoded
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
    }
}

extension Policy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Policy(content: \(String(describing: content)), policySummary: \(String(describing: policySummary)))"}
}

/// <p>Contains rules to be applied to the affected accounts. Policies can be attached
///             directly to accounts, or to roots and OUs to affect all accounts in those
///             hierarchies.</p>
public struct Policy: Equatable {
    /// <p>The text content of the policy.</p>
    public let content: String?
    /// <p>A structure that contains additional details about the policy.</p>
    public let policySummary: PolicySummary?

    public init (
        content: String? = nil,
        policySummary: PolicySummary? = nil
    )
    {
        self.content = content
        self.policySummary = policySummary
    }
}

extension PolicyChangesInProgressException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyChangesInProgressException(message: \(String(describing: message)))"}
}

extension PolicyChangesInProgressException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyChangesInProgressExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Changes to the effective policy are in progress, and its contents can't be returned.
///             Try the operation again later. </p>
public struct PolicyChangesInProgressException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyChangesInProgressExceptionBody: Equatable {
    public let message: String?
}

extension PolicyChangesInProgressExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyInUseException(message: \(String(describing: message)))"}
}

extension PolicyInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The policy is attached to one or more entities. You must detach it from all roots,
///             OUs, and accounts before performing this operation.</p>
public struct PolicyInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyInUseExceptionBody: Equatable {
    public let message: String?
}

extension PolicyInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyNotAttachedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyNotAttachedException(message: \(String(describing: message)))"}
}

extension PolicyNotAttachedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyNotAttachedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The policy isn't attached to the specified target in the specified root.</p>
public struct PolicyNotAttachedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyNotAttachedExceptionBody: Equatable {
    public let message: String?
}

extension PolicyNotAttachedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyNotFoundException(message: \(String(describing: message)))"}
}

extension PolicyNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find a policy with the <code>PolicyId</code> that you specified.</p>
public struct PolicyNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension PolicyNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicySummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case awsManaged = "AwsManaged"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if awsManaged != false {
            try encodeContainer.encode(awsManaged, forKey: .awsManaged)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .type)
        type = typeDecoded
        let awsManagedDecoded = try containerValues.decode(Bool.self, forKey: .awsManaged)
        awsManaged = awsManagedDecoded
    }
}

extension PolicySummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicySummary(arn: \(String(describing: arn)), awsManaged: \(String(describing: awsManaged)), description: \(String(describing: description)), id: \(String(describing: id)), name: \(String(describing: name)), type: \(String(describing: type)))"}
}

/// <p>Contains information about a policy, but does not include the content. To see the
///             content of a policy, see <a>DescribePolicy</a>.</p>
public struct PolicySummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>A boolean value that indicates whether the specified policy is an AWS managed
    ///             policy. If true, then you can attach the policy to roots, OUs, or accounts, but you
    ///             cannot edit it.</p>
    public let awsManaged: Bool
    /// <p>The description of the policy.</p>
    public let description: String?
    /// <p>The unique identifier (ID) of the policy.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let id: String?
    /// <p>The friendly name of the policy.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>The type of policy.</p>
    public let type: PolicyType?

    public init (
        arn: String? = nil,
        awsManaged: Bool = false,
        description: String? = nil,
        id: String? = nil,
        name: String? = nil,
        type: PolicyType? = nil
    )
    {
        self.arn = arn
        self.awsManaged = awsManaged
        self.description = description
        self.id = id
        self.name = name
        self.type = type
    }
}

extension PolicyTargetSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case name = "Name"
        case targetId = "TargetId"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TargetType.self, forKey: .type)
        type = typeDecoded
    }
}

extension PolicyTargetSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyTargetSummary(arn: \(String(describing: arn)), name: \(String(describing: name)), targetId: \(String(describing: targetId)), type: \(String(describing: type)))"}
}

/// <p>Contains information about a root, OU, or account that a policy is attached to.</p>
public struct PolicyTargetSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the policy target.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>The friendly name of the policy target.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>The unique identifier (ID) of the policy target.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
    ///     following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
    ///           digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Account</b> - A string that consists of exactly 12 digits.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
    ///           lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
    ///           "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
    ///             </li>
    ///          </ul>
    public let targetId: String?
    /// <p>The type of the policy target.</p>
    public let type: TargetType?

    public init (
        arn: String? = nil,
        name: String? = nil,
        targetId: String? = nil,
        type: TargetType? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.targetId = targetId
        self.type = type
    }
}

public enum PolicyType {
    case aiservicesOptOutPolicy
    case backupPolicy
    case serviceControlPolicy
    case tagPolicy
    case sdkUnknown(String)
}

extension PolicyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PolicyType] {
        return [
            .aiservicesOptOutPolicy,
            .backupPolicy,
            .serviceControlPolicy,
            .tagPolicy,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aiservicesOptOutPolicy: return "AISERVICES_OPT_OUT_POLICY"
        case .backupPolicy: return "BACKUP_POLICY"
        case .serviceControlPolicy: return "SERVICE_CONTROL_POLICY"
        case .tagPolicy: return "TAG_POLICY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
    }
}

extension PolicyTypeAlreadyEnabledException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyTypeAlreadyEnabledException(message: \(String(describing: message)))"}
}

extension PolicyTypeAlreadyEnabledException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyTypeAlreadyEnabledExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified policy type is already enabled in the specified root.</p>
public struct PolicyTypeAlreadyEnabledException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyTypeAlreadyEnabledExceptionBody: Equatable {
    public let message: String?
}

extension PolicyTypeAlreadyEnabledExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyTypeNotAvailableForOrganizationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyTypeNotAvailableForOrganizationException(message: \(String(describing: message)))"}
}

extension PolicyTypeNotAvailableForOrganizationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyTypeNotAvailableForOrganizationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't use the specified policy type with the feature set currently enabled for
///             this organization. For example, you can enable SCPs only after you enable all features
///             in the organization. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html#enable_policies_on_root">Managing
///                 AWS Organizations Policies</a>in the <i>AWS Organizations User Guide.</i>
///          </p>
public struct PolicyTypeNotAvailableForOrganizationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyTypeNotAvailableForOrganizationExceptionBody: Equatable {
    public let message: String?
}

extension PolicyTypeNotAvailableForOrganizationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyTypeNotEnabledException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyTypeNotEnabledException(message: \(String(describing: message)))"}
}

extension PolicyTypeNotEnabledException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PolicyTypeNotEnabledExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified policy type isn't currently enabled in this root. You can't attach
///             policies of the specified type to entities in a root until you enable that type in the
///             root. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features
///                 in Your Organization</a> in the <i>AWS Organizations User Guide.</i>
///          </p>
public struct PolicyTypeNotEnabledException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyTypeNotEnabledExceptionBody: Equatable {
    public let message: String?
}

extension PolicyTypeNotEnabledExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum PolicyTypeStatus {
    case enabled
    case pendingDisable
    case pendingEnable
    case sdkUnknown(String)
}

extension PolicyTypeStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PolicyTypeStatus] {
        return [
            .enabled,
            .pendingDisable,
            .pendingEnable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .enabled: return "ENABLED"
        case .pendingDisable: return "PENDING_DISABLE"
        case .pendingEnable: return "PENDING_ENABLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PolicyTypeStatus(rawValue: rawValue) ?? PolicyTypeStatus.sdkUnknown(rawValue)
    }
}

extension PolicyTypeSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PolicyType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PolicyTypeStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension PolicyTypeSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PolicyTypeSummary(status: \(String(describing: status)), type: \(String(describing: type)))"}
}

/// <p>Contains information about a policy type and its status in the associated root.</p>
public struct PolicyTypeSummary: Equatable {
    /// <p>The status of the policy type as it relates to the associated root. To attach a policy
    ///             of the specified type to a root or to an OU or account in that root, it must be
    ///             available in the organization and enabled for that root.</p>
    public let status: PolicyTypeStatus?
    /// <p>The name of the policy type.</p>
    public let type: PolicyType?

    public init (
        status: PolicyTypeStatus? = nil,
        type: PolicyType? = nil
    )
    {
        self.status = status
        self.type = type
    }
}

public struct RegisterDelegatedAdministratorInputBodyMiddleware: Middleware {
    public let id: String = "RegisterDelegatedAdministratorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterDelegatedAdministratorInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterDelegatedAdministratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterDelegatedAdministratorInput>
    public typealias MOutput = OperationOutput<RegisterDelegatedAdministratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterDelegatedAdministratorOutputError>
}

extension RegisterDelegatedAdministratorInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterDelegatedAdministratorInput(accountId: \(String(describing: accountId)), servicePrincipal: \(String(describing: servicePrincipal)))"}
}

extension RegisterDelegatedAdministratorInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let servicePrincipal = servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

public struct RegisterDelegatedAdministratorInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterDelegatedAdministratorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterDelegatedAdministratorInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterDelegatedAdministratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterDelegatedAdministratorInput>
    public typealias MOutput = OperationOutput<RegisterDelegatedAdministratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterDelegatedAdministratorOutputError>
}

public struct RegisterDelegatedAdministratorInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterDelegatedAdministratorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterDelegatedAdministratorInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterDelegatedAdministratorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterDelegatedAdministratorInput>
    public typealias MOutput = OperationOutput<RegisterDelegatedAdministratorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterDelegatedAdministratorOutputError>
}

public struct RegisterDelegatedAdministratorInput: Equatable {
    /// <p>The account ID number of the member account in the organization to register as a
    ///             delegated administrator.</p>
    public let accountId: String?
    /// <p>The service principal of the AWS service for which you want to make the member
    ///             account a delegated administrator.</p>
    public let servicePrincipal: String?

    public init (
        accountId: String? = nil,
        servicePrincipal: String? = nil
    )
    {
        self.accountId = accountId
        self.servicePrincipal = servicePrincipal
    }
}

struct RegisterDelegatedAdministratorInputBody: Equatable {
    public let accountId: String?
    public let servicePrincipal: String?
}

extension RegisterDelegatedAdministratorInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension RegisterDelegatedAdministratorOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterDelegatedAdministratorOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountAlreadyRegisteredException" : self = .accountAlreadyRegisteredException(try AccountAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterDelegatedAdministratorOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountAlreadyRegisteredException(AccountAlreadyRegisteredException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterDelegatedAdministratorOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterDelegatedAdministratorOutputResponse()"}
}

extension RegisterDelegatedAdministratorOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RegisterDelegatedAdministratorOutputResponse: Equatable {

    public init() {}
}

struct RegisterDelegatedAdministratorOutputResponseBody: Equatable {
}

extension RegisterDelegatedAdministratorOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RemoveAccountFromOrganizationInputBodyMiddleware: Middleware {
    public let id: String = "RemoveAccountFromOrganizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveAccountFromOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveAccountFromOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveAccountFromOrganizationInput>
    public typealias MOutput = OperationOutput<RemoveAccountFromOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveAccountFromOrganizationOutputError>
}

extension RemoveAccountFromOrganizationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveAccountFromOrganizationInput(accountId: \(String(describing: accountId)))"}
}

extension RemoveAccountFromOrganizationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
    }
}

public struct RemoveAccountFromOrganizationInputHeadersMiddleware: Middleware {
    public let id: String = "RemoveAccountFromOrganizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveAccountFromOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveAccountFromOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveAccountFromOrganizationInput>
    public typealias MOutput = OperationOutput<RemoveAccountFromOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveAccountFromOrganizationOutputError>
}

public struct RemoveAccountFromOrganizationInputQueryItemMiddleware: Middleware {
    public let id: String = "RemoveAccountFromOrganizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveAccountFromOrganizationInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveAccountFromOrganizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveAccountFromOrganizationInput>
    public typealias MOutput = OperationOutput<RemoveAccountFromOrganizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveAccountFromOrganizationOutputError>
}

public struct RemoveAccountFromOrganizationInput: Equatable {
    /// <p>The unique identifier (ID) of the member account that you want to remove from the
    ///             organization.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
    ///     digits.</p>
    public let accountId: String?

    public init (
        accountId: String? = nil
    )
    {
        self.accountId = accountId
    }
}

struct RemoveAccountFromOrganizationInputBody: Equatable {
    public let accountId: String?
}

extension RemoveAccountFromOrganizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension RemoveAccountFromOrganizationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveAccountFromOrganizationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MasterCannotLeaveOrganizationException" : self = .masterCannotLeaveOrganizationException(try MasterCannotLeaveOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveAccountFromOrganizationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case masterCannotLeaveOrganizationException(MasterCannotLeaveOrganizationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveAccountFromOrganizationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveAccountFromOrganizationOutputResponse()"}
}

extension RemoveAccountFromOrganizationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RemoveAccountFromOrganizationOutputResponse: Equatable {

    public init() {}
}

struct RemoveAccountFromOrganizationOutputResponseBody: Equatable {
}

extension RemoveAccountFromOrganizationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Root: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case policyTypes = "PolicyTypes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyTypes = policyTypes {
            var policyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyTypes)
            for policytypes0 in policyTypes {
                try policyTypesContainer.encode(policytypes0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let policyTypesContainer = try containerValues.decodeIfPresent([PolicyTypeSummary?].self, forKey: .policyTypes)
        var policyTypesDecoded0:[PolicyTypeSummary]? = nil
        if let policyTypesContainer = policyTypesContainer {
            policyTypesDecoded0 = [PolicyTypeSummary]()
            for structure0 in policyTypesContainer {
                if let structure0 = structure0 {
                    policyTypesDecoded0?.append(structure0)
                }
            }
        }
        policyTypes = policyTypesDecoded0
    }
}

extension Root: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Root(arn: \(String(describing: arn)), id: \(String(describing: id)), name: \(String(describing: name)), policyTypes: \(String(describing: policyTypes)))"}
}

/// <p>Contains details about a root. A root is a top-level parent node in the hierarchy of
///             an organization that can contain organizational units (OUs) and accounts.
///             The root contains every AWS account in the
///             organization.</p>
public struct Root: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the root.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>The unique identifier (ID) for the root.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string requires "r-" followed by
    ///     from 4 to 32 lowercase letters or digits.</p>
    public let id: String?
    /// <p>The friendly name of the root.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>The types of policies that are currently enabled for the root and therefore can be
    ///             attached to the root or to its OUs or accounts.</p>
    ///         <note>
    ///             <p>Even if a policy type is shown as available in the organization, you can
    ///                 separately enable and disable them at the root level by using <a>EnablePolicyType</a> and <a>DisablePolicyType</a>. Use <a>DescribeOrganization</a> to see the availability of the policy types in
    ///                 that organization.</p>
    ///         </note>
    public let policyTypes: [PolicyTypeSummary]?

    public init (
        arn: String? = nil,
        id: String? = nil,
        name: String? = nil,
        policyTypes: [PolicyTypeSummary]? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.name = name
        self.policyTypes = policyTypes
    }
}

extension RootNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RootNotFoundException(message: \(String(describing: message)))"}
}

extension RootNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RootNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find a root with the <code>RootId</code> that you specified.</p>
public struct RootNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct RootNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension RootNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ServiceException(message: \(String(describing: message)))"}
}

extension ServiceException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ServiceExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>AWS Organizations can't complete your request because of an internal service error. Try again
///             later.</p>
public struct ServiceException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceExceptionBody: Equatable {
    public let message: String?
}

extension ServiceExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SourceParentNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SourceParentNotFoundException(message: \(String(describing: message)))"}
}

extension SourceParentNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: SourceParentNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find a source root or OU with the <code>ParentId</code> that you
///             specified.</p>
public struct SourceParentNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct SourceParentNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension SourceParentNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>A custom key-value pair associated with a resource within your organization.</p>
///         <p>You can attach tags to any of the following organization resources.</p>
///         <ul>
///             <li>
///                 <p>AWS account</p>
///             </li>
///             <li>
///                 <p>Organizational unit (OU)</p>
///             </li>
///             <li>
///                 <p>Organization root</p>
///             </li>
///             <li>
///                 <p>Policy</p>
///             </li>
///          </ul>
public struct Tag: Equatable {
    /// <p>The key identifier, or name, of the tag.</p>
    public let key: String?
    /// <p>The string value that's associated with the key of the tag. You can set the value of a
    ///             tag to an empty string, but you can't set the value of a tag to null.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceId: \(String(describing: resourceId)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p>The ID of the resource to add a tag to.</p>
    public let resourceId: String?
    /// <p>A list of tags to add to the specified resource.</p>
    ///         <p>You can specify any of the following taggable resources.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>AWS account – specify the account ID number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organizational unit  – specify the OU ID that begins with <code>ou-</code> and
    ///                     looks similar to: <code>ou-<i>1a2b-34uvwxyz</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Root – specify the root ID that begins with <code>r-</code> and looks similar
    ///                     to: <code>r-<i>1a2b</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Policy – specify the policy ID that begins with <code>p-</code> andlooks
    ///                     similar to: <code>p-<i>12abcdefg3</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <p>For each tag in the list, you must specify both a tag key and a value. You can set the
    ///             value to an empty string, but you can't set it to <code>null</code>.</p>
    ///         <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
    ///                 an account user, then the entire request fails and the account is not
    ///                 created.</p>
    ///         </note>
    public let tags: [Tag]?

    public init (
        resourceId: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let resourceId: String?
    public let tags: [Tag]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TargetNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetNotFoundException(message: \(String(describing: message)))"}
}

extension TargetNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TargetNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>We can't find a root, OU, account, or policy with the <code>TargetId</code> that you
///             specified.</p>
public struct TargetNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TargetNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension TargetNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum TargetType {
    case account
    case organizationalUnit
    case root
    case sdkUnknown(String)
}

extension TargetType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetType] {
        return [
            .account,
            .organizationalUnit,
            .root,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .account: return "ACCOUNT"
        case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
        case .root: return "ROOT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetType(rawValue: rawValue) ?? TargetType.sdkUnknown(rawValue)
    }
}

extension TooManyRequestsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TooManyRequestsException(message: \(String(describing: message)), type: \(String(describing: type)))"}
}

extension TooManyRequestsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.type = output.type
        } else {
            self.message = nil
            self.type = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You have sent too many requests in too short a period of time. The quota helps protect
///             against denial-of-service attacks. Try again later.</p>
///         <p>For information about quotas that affect AWS Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_limits.html">Quotas for AWS Organizations</a>in the
///                 <i>AWS Organizations User Guide.</i>
///          </p>
public struct TooManyRequestsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    public var type: String?

    public init (
        message: String? = nil,
        type: String? = nil
    )
    {
        self.message = message
        self.type = type
    }
}

struct TooManyRequestsExceptionBody: Equatable {
    public let type: String?
    public let message: String?
}

extension TooManyRequestsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedAPIEndpointException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnsupportedAPIEndpointException(message: \(String(describing: message)))"}
}

extension UnsupportedAPIEndpointException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnsupportedAPIEndpointExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This action isn't available in the current AWS Region.</p>
public struct UnsupportedAPIEndpointException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedAPIEndpointExceptionBody: Equatable {
    public let message: String?
}

extension UnsupportedAPIEndpointExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: Middleware {
    public let id: String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceId: \(String(describing: resourceId)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeys0 in tagKeys {
                try tagKeysContainer.encode(tagkeys0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p>The ID of the resource to remove a tag from.</p>
    ///         <p>You can specify any of the following taggable resources.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>AWS account – specify the account ID number.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organizational unit  – specify the OU ID that begins with <code>ou-</code> and
    ///                     looks similar to: <code>ou-<i>1a2b-34uvwxyz</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Root – specify the root ID that begins with <code>r-</code> and looks similar
    ///                     to: <code>r-<i>1a2b</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>Policy – specify the policy ID that begins with <code>p-</code> andlooks
    ///                     similar to: <code>p-<i>12abcdefg3</i>
    ///                   </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let resourceId: String?
    /// <p>The list of keys for tags to remove from the specified resource.</p>
    public let tagKeys: [String]?

    public init (
        resourceId: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
    public let resourceId: String?
    public let tagKeys: [String]?
}

extension UntagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateOrganizationalUnitInputBodyMiddleware: Middleware {
    public let id: String = "UpdateOrganizationalUnitInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<UpdateOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateOrganizationalUnitOutputError>
}

extension UpdateOrganizationalUnitInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateOrganizationalUnitInput(name: \(String(describing: name)), organizationalUnitId: \(String(describing: organizationalUnitId)))"}
}

extension UpdateOrganizationalUnitInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let organizationalUnitId = organizationalUnitId {
            try encodeContainer.encode(organizationalUnitId, forKey: .organizationalUnitId)
        }
    }
}

public struct UpdateOrganizationalUnitInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateOrganizationalUnitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<UpdateOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateOrganizationalUnitOutputError>
}

public struct UpdateOrganizationalUnitInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateOrganizationalUnitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateOrganizationalUnitInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateOrganizationalUnitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateOrganizationalUnitInput>
    public typealias MOutput = OperationOutput<UpdateOrganizationalUnitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateOrganizationalUnitOutputError>
}

public struct UpdateOrganizationalUnitInput: Equatable {
    /// <p>The new name that you want to assign to the OU.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>The unique identifier (ID) of the OU that you want to rename. You can get the ID from
    ///             the <a>ListOrganizationalUnitsForParent</a> operation.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
    ///     "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
    ///     OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
    ///     or digits.</p>
    public let organizationalUnitId: String?

    public init (
        name: String? = nil,
        organizationalUnitId: String? = nil
    )
    {
        self.name = name
        self.organizationalUnitId = organizationalUnitId
    }
}

struct UpdateOrganizationalUnitInputBody: Equatable {
    public let organizationalUnitId: String?
    public let name: String?
}

extension UpdateOrganizationalUnitInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateOrganizationalUnitOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateOrganizationalUnitOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateOrganizationalUnitException" : self = .duplicateOrganizationalUnitException(try DuplicateOrganizationalUnitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotFoundException" : self = .organizationalUnitNotFoundException(try OrganizationalUnitNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateOrganizationalUnitOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case duplicateOrganizationalUnitException(DuplicateOrganizationalUnitException)
    case invalidInputException(InvalidInputException)
    case organizationalUnitNotFoundException(OrganizationalUnitNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateOrganizationalUnitOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateOrganizationalUnitOutputResponse(organizationalUnit: \(String(describing: organizationalUnit)))"}
}

extension UpdateOrganizationalUnitOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateOrganizationalUnitOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.organizationalUnit = output.organizationalUnit
        } else {
            self.organizationalUnit = nil
        }
    }
}

public struct UpdateOrganizationalUnitOutputResponse: Equatable {
    /// <p>A structure that contains the details about the specified OU, including its new
    ///             name.</p>
    public let organizationalUnit: OrganizationalUnit?

    public init (
        organizationalUnit: OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

struct UpdateOrganizationalUnitOutputResponseBody: Equatable {
    public let organizationalUnit: OrganizationalUnit?
}

extension UpdateOrganizationalUnitOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case organizationalUnit = "OrganizationalUnit"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(OrganizationalUnit.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
    }
}

public struct UpdatePolicyInputBodyMiddleware: Middleware {
    public let id: String = "UpdatePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePolicyInput>
    public typealias MOutput = OperationOutput<UpdatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePolicyOutputError>
}

extension UpdatePolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdatePolicyInput(content: \(String(describing: content)), description: \(String(describing: description)), name: \(String(describing: name)), policyId: \(String(describing: policyId)))"}
}

extension UpdatePolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

public struct UpdatePolicyInputHeadersMiddleware: Middleware {
    public let id: String = "UpdatePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePolicyInput>
    public typealias MOutput = OperationOutput<UpdatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePolicyOutputError>
}

public struct UpdatePolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdatePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePolicyInput>
    public typealias MOutput = OperationOutput<UpdatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePolicyOutputError>
}

public struct UpdatePolicyInput: Equatable {
    /// <p>If provided, the new content for the policy. The text must be correctly formatted JSON
    ///             that complies with the syntax for the policy's type. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html">Service
    ///                 Control Policy Syntax</a> in the <i>AWS Organizations User Guide.</i>
    ///          </p>
    public let content: String?
    /// <p>If provided, the new description for the policy.</p>
    public let description: String?
    /// <p>If provided, the new name for the policy.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
    ///     that is used to validate this parameter is a string of any of the characters in the ASCII
    ///     character range.</p>
    public let name: String?
    /// <p>The unique identifier (ID) of the policy that you want to update.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
    ///     by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
    public let policyId: String?

    public init (
        content: String? = nil,
        description: String? = nil,
        name: String? = nil,
        policyId: String? = nil
    )
    {
        self.content = content
        self.description = description
        self.name = name
        self.policyId = policyId
    }
}

struct UpdatePolicyInputBody: Equatable {
    public let policyId: String?
    public let name: String?
    public let description: String?
    public let content: String?
}

extension UpdatePolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case policyId = "PolicyId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
    }
}

extension UpdatePolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatePolicyException" : self = .duplicatePolicyException(try DuplicatePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocumentException" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdatePolicyOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicatePolicyException(DuplicatePolicyException)
    case invalidInputException(InvalidInputException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdatePolicyOutputResponse(policy: \(String(describing: policy)))"}
}

extension UpdatePolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdatePolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct UpdatePolicyOutputResponse: Equatable {
    /// <p>A structure that contains details about the updated policy, showing the requested
    ///             changes.</p>
    public let policy: Policy?

    public init (
        policy: Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct UpdatePolicyOutputResponseBody: Equatable {
    public let policy: Policy?
}

extension UpdatePolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}
