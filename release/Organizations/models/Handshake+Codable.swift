// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Handshake: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case arn = "Arn"
        case expirationTimestamp = "ExpirationTimestamp"
        case id = "Id"
        case parties = "Parties"
        case requestedTimestamp = "RequestedTimestamp"
        case resources = "Resources"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let expirationTimestamp = expirationTimestamp {
            try encodeContainer.encode(expirationTimestamp.timeIntervalSince1970, forKey: .expirationTimestamp)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parties = parties {
            var partiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parties)
            for handshakeparties0 in parties {
                try partiesContainer.encode(handshakeparties0)
            }
        }
        if let requestedTimestamp = requestedTimestamp {
            try encodeContainer.encode(requestedTimestamp.timeIntervalSince1970, forKey: .requestedTimestamp)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for handshakeresources0 in resources {
                try resourcesContainer.encode(handshakeresources0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let partiesContainer = try containerValues.decodeIfPresent([HandshakeParty].self, forKey: .parties)
        var partiesDecoded0:[HandshakeParty]? = nil
        if let partiesContainer = partiesContainer {
            partiesDecoded0 = [HandshakeParty]()
            for structure0 in partiesContainer {
                partiesDecoded0?.append(structure0)
            }
        }
        parties = partiesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(HandshakeState.self, forKey: .state)
        state = stateDecoded
        let requestedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .requestedTimestamp)
        requestedTimestamp = requestedTimestampDecoded
        let expirationTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationTimestamp)
        expirationTimestamp = expirationTimestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(ActionType.self, forKey: .action)
        action = actionDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([HandshakeResource].self, forKey: .resources)
        var resourcesDecoded0:[HandshakeResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [HandshakeResource]()
            for structure0 in resourcesContainer {
                resourcesDecoded0?.append(structure0)
            }
        }
        resources = resourcesDecoded0
    }
}
