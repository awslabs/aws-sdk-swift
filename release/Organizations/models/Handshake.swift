// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains information that must be exchanged to securely establish a relationship
///             between two accounts (an <i>originator</i> and a
///                 <i>recipient</i>). For example, when a management account (the
///             originator) invites another account (the recipient) to join its organization, the two
///             accounts exchange information as a series of handshake requests and responses.</p>
///         <p>
///             <b>Note:</b> Handshakes that are <code>CANCELED</code>,
///                 <code>ACCEPTED</code>, or <code>DECLINED</code> show up in lists for only 30 days
///             after entering that state After that they are deleted.</p>
public struct Handshake: Equatable {
    /// <p>The type of handshake, indicating what action occurs when the recipient accepts the
    ///             handshake. The following handshake types are supported:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>INVITE</b>: This type of handshake represents a
    ///                     request to join an organization. It is always sent from the management account
    ///                     to only non-member accounts.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ENABLE_ALL_FEATURES</b>: This type of handshake
    ///                     represents a request to enable all features in an organization. It is always
    ///                     sent from the management account to only <i>invited</i> member
    ///                     accounts. Created accounts do not receive this because those accounts were
    ///                     created by the organization's management account and approval is
    ///                     inferred.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>APPROVE_ALL_FEATURES</b>: This type of handshake
    ///                     is sent from the Organizations service when all member accounts have approved the
    ///                         <code>ENABLE_ALL_FEATURES</code> invitation. It is sent only to the
    ///                     management account and signals the master that it can finalize the process to
    ///                     enable all features.</p>
    ///             </li>
    ///          </ul>
    public let action: ActionType?
    /// <p>The Amazon Resource Name (ARN) of a handshake.</p>
    ///         <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN
    ///     Formats Supported by Organizations</a> in the <i>AWS Service Authorization Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the handshake expires. If the recipient of the handshake
    ///             request fails to respond before the specified date and time, the handshake becomes
    ///             inactive and is no longer valid.</p>
    public let expirationTimestamp: Date?
    /// <p>The unique identifier (ID) of a handshake. The originating account creates the ID when
    ///             it initiates the handshake.</p>
    ///         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
    ///     followed by from 8 to 32 lowercase letters or digits.</p>
    public let id: String?
    /// <p>Information about the two accounts that are participating in the handshake.</p>
    public let parties: [HandshakeParty]?
    /// <p>The date and time that the handshake request was made.</p>
    public let requestedTimestamp: Date?
    /// <p>Additional information that is needed to process the handshake.</p>
    public let resources: [HandshakeResource]?
    /// <p>The current state of the handshake. Use the state to trace the flow of the handshake
    ///             through the process from its creation to its acceptance. The meaning of each of the
    ///             valid values is as follows:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>REQUESTED</b>: This handshake was sent to
    ///                     multiple recipients (applicable to only some handshake types) and not all
    ///                     recipients have responded yet. The request stays in this state until all
    ///                     recipients respond.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>OPEN</b>: This handshake was sent to multiple
    ///                     recipients (applicable to only some policy types) and all recipients have
    ///                     responded, allowing the originator to complete the handshake action.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>CANCELED</b>: This handshake is no longer active
    ///                     because it was canceled by the originating account.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>ACCEPTED</b>: This handshake is complete because
    ///                     it has been accepted by the recipient.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>DECLINED</b>: This handshake is no longer active
    ///                     because it was declined by the recipient account.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>EXPIRED</b>: This handshake is no longer active
    ///                     because the originator did not receive a response of any kind from the recipient
    ///                     before the expiration time (15 days).</p>
    ///             </li>
    ///          </ul>
    public let state: HandshakeState?

    public init (
        action: ActionType? = nil,
        arn: String? = nil,
        expirationTimestamp: Date? = nil,
        id: String? = nil,
        parties: [HandshakeParty]? = nil,
        requestedTimestamp: Date? = nil,
        resources: [HandshakeResource]? = nil,
        state: HandshakeState? = nil
    )
    {
        self.action = action
        self.arn = arn
        self.expirationTimestamp = expirationTimestamp
        self.id = id
        self.parties = parties
        self.requestedTimestamp = requestedTimestamp
        self.resources = resources
        self.state = state
    }
}
