// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Root: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case policyTypes = "PolicyTypes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyTypes = policyTypes {
            var policyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyTypes)
            for policytypes0 in policyTypes {
                try policyTypesContainer.encode(policytypes0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let policyTypesContainer = try containerValues.decodeIfPresent([PolicyTypeSummary].self, forKey: .policyTypes)
        var policyTypesDecoded0:[PolicyTypeSummary]? = nil
        if let policyTypesContainer = policyTypesContainer {
            policyTypesDecoded0 = [PolicyTypeSummary]()
            for structure0 in policyTypesContainer {
                policyTypesDecoded0?.append(structure0)
            }
        }
        policyTypes = policyTypesDecoded0
    }
}
