// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum InvalidInputExceptionReason {
    case duplicateTagKey
    case immutablePolicy
    case inputRequired
    case invalidEmailAddressTarget
    case invalidEnum
    case invalidEnumPolicyType
    case invalidFullNameTarget
    case invalidListMember
    case invalidPaginationToken
    case invalidPartyTypeTarget
    case invalidPattern
    case invalidPatternTargetId
    case invalidRoleName
    case invalidSyntaxOrganization
    case invalidSyntaxPolicy
    case invalidSystemTagsParameter
    case maxFilterLimitExceeded
    case maxLengthExceeded
    case maxValueExceeded
    case minLengthExceeded
    case minValueExceeded
    case movingAccountBetweenDifferentRoots
    case targetNotSupported
    case unrecognizedServicePrincipal
    case sdkUnknown(String)
}

extension InvalidInputExceptionReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InvalidInputExceptionReason] {
        return [
            .duplicateTagKey,
            .immutablePolicy,
            .inputRequired,
            .invalidEmailAddressTarget,
            .invalidEnum,
            .invalidEnumPolicyType,
            .invalidFullNameTarget,
            .invalidListMember,
            .invalidPaginationToken,
            .invalidPartyTypeTarget,
            .invalidPattern,
            .invalidPatternTargetId,
            .invalidRoleName,
            .invalidSyntaxOrganization,
            .invalidSyntaxPolicy,
            .invalidSystemTagsParameter,
            .maxFilterLimitExceeded,
            .maxLengthExceeded,
            .maxValueExceeded,
            .minLengthExceeded,
            .minValueExceeded,
            .movingAccountBetweenDifferentRoots,
            .targetNotSupported,
            .unrecognizedServicePrincipal,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .duplicateTagKey: return "DUPLICATE_TAG_KEY"
        case .immutablePolicy: return "IMMUTABLE_POLICY"
        case .inputRequired: return "INPUT_REQUIRED"
        case .invalidEmailAddressTarget: return "INVALID_EMAIL_ADDRESS_TARGET"
        case .invalidEnum: return "INVALID_ENUM"
        case .invalidEnumPolicyType: return "INVALID_ENUM_POLICY_TYPE"
        case .invalidFullNameTarget: return "INVALID_FULL_NAME_TARGET"
        case .invalidListMember: return "INVALID_LIST_MEMBER"
        case .invalidPaginationToken: return "INVALID_NEXT_TOKEN"
        case .invalidPartyTypeTarget: return "INVALID_PARTY_TYPE_TARGET"
        case .invalidPattern: return "INVALID_PATTERN"
        case .invalidPatternTargetId: return "INVALID_PATTERN_TARGET_ID"
        case .invalidRoleName: return "INVALID_ROLE_NAME"
        case .invalidSyntaxOrganization: return "INVALID_SYNTAX_ORGANIZATION_ARN"
        case .invalidSyntaxPolicy: return "INVALID_SYNTAX_POLICY_ID"
        case .invalidSystemTagsParameter: return "INVALID_SYSTEM_TAGS_PARAMETER"
        case .maxFilterLimitExceeded: return "MAX_LIMIT_EXCEEDED_FILTER"
        case .maxLengthExceeded: return "MAX_LENGTH_EXCEEDED"
        case .maxValueExceeded: return "MAX_VALUE_EXCEEDED"
        case .minLengthExceeded: return "MIN_LENGTH_EXCEEDED"
        case .minValueExceeded: return "MIN_VALUE_EXCEEDED"
        case .movingAccountBetweenDifferentRoots: return "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS"
        case .targetNotSupported: return "TARGET_NOT_SUPPORTED"
        case .unrecognizedServicePrincipal: return "UNRECOGNIZED_SERVICE_PRINCIPAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InvalidInputExceptionReason(rawValue: rawValue) ?? InvalidInputExceptionReason.sdkUnknown(rawValue)
    }
}
