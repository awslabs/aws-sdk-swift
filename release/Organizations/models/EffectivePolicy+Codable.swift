// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EffectivePolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case policyContent = "PolicyContent"
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let policyContent = policyContent {
            try encodeContainer.encode(policyContent, forKey: .policyContent)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyContent)
        policyContent = policyContentDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(EffectivePolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}
