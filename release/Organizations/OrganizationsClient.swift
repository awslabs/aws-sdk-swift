// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class OrganizationsClient {
    let client: SdkHttpClient
    let config: OrganizationsClientConfiguration
    let serviceName = "Organizations"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: OrganizationsClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class OrganizationsClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> OrganizationsClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try OrganizationsClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension OrganizationsClient: OrganizationsClientProtocol {
    /// <p>Sends a response to the originator of a handshake agreeing to the action proposed by
    ///             the handshake request.</p>
    ///         <p>This operation can be called only by the following principals when they also have the
    ///             relevant IAM permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>Invitation to join</b> or <b>Approve all features request</b> handshakes: only a principal from
    ///                     the member account.</p>
    ///                 <p>The user who calls the API for an invitation to join must have the
    ///                         <code>organizations:AcceptHandshake</code> permission. If you enabled all
    ///                     features in the organization, the user must also have the
    ///                         <code>iam:CreateServiceLinkedRole</code> permission so that AWS Organizations can
    ///                     create the required service-linked role named <code>AWSServiceRoleForOrganizations</code>. For
    ///                     more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles">AWS Organizations and Service-Linked Roles</a> in the
    ///                         <i>AWS Organizations User Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Enable all features final confirmation</b>
    ///                     handshake: only a principal from the management account.</p>
    ///                 <p>For more information about invitations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html">Inviting an AWS Account to Join Your Organization</a> in the
    ///                         <i>AWS Organizations User Guide.</i> For more information about requests to
    ///                     enable all features in the organization, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in
    ///                     the <i>AWS Organizations User Guide.</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <p>After you accept a handshake, it continues to appear in the results of relevant APIs
    ///             for only 30 days. After that, it's deleted.</p>
    public func acceptHandshake(input: AcceptHandshakeInput, completion: @escaping (SdkResult<AcceptHandshakeOutputResponse, AcceptHandshakeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "acceptHandshake")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AcceptHandshakeInput, AcceptHandshakeOutputResponse, AcceptHandshakeOutputError>(id: "acceptHandshake")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AcceptHandshakeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AcceptHandshakeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AcceptHandshakeInput, AcceptHandshakeOutputResponse, AcceptHandshakeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AcceptHandshakeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AcceptHandshakeInput, AcceptHandshakeOutputResponse, AcceptHandshakeOutputError>(xAmzTarget: "AWSOrganizationsV20161128.AcceptHandshake"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Attaches a policy to a root, an organizational unit (OU), or an individual account.
    ///             How the policy affects accounts depends on the type of policy. Refer to the
    ///                 <i>AWS Organizations User Guide</i> for information about each policy type:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func attachPolicy(input: AttachPolicyInput, completion: @escaping (SdkResult<AttachPolicyOutputResponse, AttachPolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "attachPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AttachPolicyInput, AttachPolicyOutputResponse, AttachPolicyOutputError>(id: "attachPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AttachPolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AttachPolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AttachPolicyInput, AttachPolicyOutputResponse, AttachPolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AttachPolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AttachPolicyInput, AttachPolicyOutputResponse, AttachPolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.AttachPolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Cancels a handshake. Canceling a handshake sets the handshake state to
    ///                 <code>CANCELED</code>.</p>
    ///         <p>This operation can be called only from the account that originated the handshake. The recipient of the handshake can't cancel it, but can use <a>DeclineHandshake</a> instead. After a handshake is canceled, the recipient
    ///             can no longer respond to that handshake.</p>
    ///         <p>After you cancel a handshake, it continues to appear in the results of relevant APIs
    ///             for only 30 days. After that, it's deleted.</p>
    public func cancelHandshake(input: CancelHandshakeInput, completion: @escaping (SdkResult<CancelHandshakeOutputResponse, CancelHandshakeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "cancelHandshake")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CancelHandshakeInput, CancelHandshakeOutputResponse, CancelHandshakeOutputError>(id: "cancelHandshake")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CancelHandshakeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CancelHandshakeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CancelHandshakeInput, CancelHandshakeOutputResponse, CancelHandshakeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CancelHandshakeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CancelHandshakeInput, CancelHandshakeOutputResponse, CancelHandshakeOutputError>(xAmzTarget: "AWSOrganizationsV20161128.CancelHandshake"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an AWS account that is automatically a member of the organization whose
    ///             credentials made the request. This is an asynchronous request that AWS performs in the
    ///             background. Because <code>CreateAccount</code> operates asynchronously, it can return a
    ///             successful completion message even though account initialization might still be in
    ///             progress. You might need to wait a few minutes before you can successfully access the
    ///             account. To check the status of the request, do one of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Use the <code>Id</code> member of the <code>CreateAccountStatus</code>
    ///                     response element from this operation to provide as a parameter to the <a>DescribeCreateAccountStatus</a> operation.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Check the AWS CloudTrail log for the <code>CreateAccountResult</code> event. For
    ///                     information on using AWS CloudTrail with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration">Logging and monitoring in AWS Organizations</a> in the
    ///                         <i>AWS Organizations User Guide.</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <p>The user who calls the API to create an account must have the
    ///                 <code>organizations:CreateAccount</code> permission. If you enabled all features in
    ///             the organization, AWS Organizations creates the required service-linked role named
    ///                 <code>AWSServiceRoleForOrganizations</code>. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS Organizations and Service-Linked Roles</a> in the
    ///                 <i>AWS Organizations User Guide</i>.</p>
    ///         <p>If the request includes tags, then the requester must have the
    ///                 <code>organizations:TagResource</code> permission.</p>
    ///         <p>AWS Organizations preconfigures the new member account with a role (named
    ///                 <code>OrganizationAccountAccessRole</code> by default) that grants users in the
    ///             management account administrator permissions in the new member account. Principals in
    ///             the management account can assume the role. AWS Organizations clones the company name and address
    ///             information for the new account from the organization's management account.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    ///         <p>For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
    ///                 an AWS Account in Your Organization</a> in the
    ///                 <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <important>
    ///             <ul>
    ///                <li>
    ///                     <p>When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required for the account to operate as
    ///                         a standalone account, such as a payment method and signing the end user
    ///                         license agreement (EULA) is <i>not</i> automatically
    ///                         collected. If you must remove an account from your organization later, you
    ///                         can do so only after you provide the missing information. Follow the steps
    ///                         at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization as a member account</a> in the
    ///                             <i>AWS Organizations User Guide</i>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you get an exception that indicates that you exceeded your account
    ///                         limits for the organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you get an exception that indicates that the operation failed because
    ///                         your organization is still initializing, wait one hour and then try again.
    ///                         If the error persists, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
    ///                             Support</a>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>Using <code>CreateAccount</code> to create multiple temporary accounts
    ///                         isn't recommended. You can only close an account from the Billing and Cost
    ///                         Management Console, and you must be signed in as the root user. For
    ///                         information on the requirements and process for closing an account, see
    ///                             <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing an
    ///                             AWS Account</a> in the
    ///                         <i>AWS Organizations User Guide</i>.</p>
    ///                 </li>
    ///             </ul>
    ///         </important>
    ///         <note>
    ///             <p>When you create a member account with this operation, you can choose whether to
    ///                 create the account with the <b>IAM User and Role Access to
    ///                     Billing Information</b> switch enabled. If you enable it, IAM users and
    ///                 roles that have appropriate permissions can view billing information for the
    ///                 account. If you disable it, only the account root user can access billing
    ///                 information. For information about how to disable this switch for an account, see
    ///                     <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
    ///                     Access to Your Billing Information and Tools</a>.</p>
    ///         </note>
    public func createAccount(input: CreateAccountInput, completion: @escaping (SdkResult<CreateAccountOutputResponse, CreateAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAccountInput, CreateAccountOutputResponse, CreateAccountOutputError>(id: "createAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAccountInput, CreateAccountOutputResponse, CreateAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateAccountInput, CreateAccountOutputResponse, CreateAccountOutputError>(xAmzTarget: "AWSOrganizationsV20161128.CreateAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This action is available if all of the following are true:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>You're authorized to create accounts in the AWS GovCloud (US) Region. For
    ///                     more information on the AWS GovCloud (US) Region, see the <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html">
    ///                      <i>AWS GovCloud User Guide</i>.</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>You already have an account in the AWS GovCloud (US) Region that is paired
    ///                     with a management account of an organization in the commercial Region.</p>
    ///             </li>
    ///             <li>
    ///                 <p>You call this action from the management account of your organization in the
    ///                     commercial Region.</p>
    ///             </li>
    ///             <li>
    ///                 <p>You have the <code>organizations:CreateGovCloudAccount</code> permission.
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>AWS Organizations automatically creates the required service-linked role named
    ///                 <code>AWSServiceRoleForOrganizations</code>. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS Organizations and Service-Linked Roles</a> in the
    ///                 <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>AWS automatically enables AWS CloudTrail for AWS GovCloud (US) accounts, but you should also
    ///             do the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Verify that AWS CloudTrail is enabled to store logs.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Create an S3 bucket for AWS CloudTrail log storage.</p>
    ///                 <p>For more information, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html">Verifying AWS CloudTrail Is
    ///                         Enabled</a> in the <i>AWS GovCloud User Guide</i>.
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>If the request includes tags, then the requester must have the
    ///                 <code>organizations:TagResource</code> permission. The tags are attached to the
    ///             commercial account associated with the GovCloud account, rather than the GovCloud
    ///             account itself. To add tags to the GovCloud account, call the <a>TagResource</a> operation in the GovCloud Region after the new GovCloud
    ///             account exists.</p>
    ///         <p>You call this action from the management account of your organization in the
    ///             commercial Region to create a standalone AWS account in the AWS GovCloud (US)
    ///             Region. After the account is created, the management account of an organization in the
    ///             AWS GovCloud (US) Region can invite it to that organization. For more information on
    ///             inviting standalone accounts in the AWS GovCloud (US) to join an organization, see
    ///                 <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations</a> in
    ///             the <i>AWS GovCloud User Guide.</i>
    ///          </p>
    ///         <p>Calling <code>CreateGovCloudAccount</code> is an asynchronous request that AWS
    ///             performs in the background. Because <code>CreateGovCloudAccount</code> operates
    ///             asynchronously, it can return a successful completion message even though account
    ///             initialization might still be in progress. You might need to wait a few minutes before
    ///             you can successfully access the account. To check the status of the request, do one of
    ///             the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Use the <code>OperationId</code> response element from this operation to
    ///                     provide as a parameter to the <a>DescribeCreateAccountStatus</a>
    ///                     operation.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Check the AWS CloudTrail log for the <code>CreateAccountResult</code> event. For
    ///                     information on using AWS CloudTrail with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html">Monitoring the Activity in Your
    ///                         Organization</a> in the <i>AWS Organizations User Guide.</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <p></p>
    ///         <p>When you call the <code>CreateGovCloudAccount</code> action, you create two accounts:
    ///             a standalone account in the AWS GovCloud (US) Region and an associated account in the
    ///             commercial Region for billing and support purposes. The account in the commercial Region
    ///             is automatically a member of the organization whose credentials made the request. Both
    ///             accounts are associated with the same email address.</p>
    ///         <p>A role is created in the new account in the commercial Region that allows the
    ///             management account in the organization in the commercial Region to assume it. An AWS
    ///             GovCloud (US) account is then created and associated with the commercial account that
    ///             you just created. A role is also created in the new AWS GovCloud (US) account that can
    ///             be assumed by the AWS GovCloud (US) account that is associated with the management
    ///             account of the commercial organization. For more information and to view a diagram that
    ///             explains how account access works, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations</a> in the
    ///                 <i>AWS GovCloud User Guide.</i>
    ///          </p>
    ///
    ///
    ///         <p>For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
    ///                 an AWS Account in Your Organization</a> in the
    ///                 <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <important>
    ///             <ul>
    ///                <li>
    ///                     <p>When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required for the account to operate as
    ///                         a standalone account is <i>not</i> automatically collected.
    ///                         This includes a payment method and signing the end user license agreement
    ///                         (EULA). If you must remove an account from your organization later, you can
    ///                         do so only after you provide the missing information. Follow the steps at
    ///                             <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization as a member account</a> in the
    ///                             <i>AWS Organizations User Guide.</i>
    ///                   </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you get an exception that indicates that you exceeded your account
    ///                         limits for the organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you get an exception that indicates that the operation failed because
    ///                         your organization is still initializing, wait one hour and then try again.
    ///                         If the error persists, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
    ///                             Support</a>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>Using <code>CreateGovCloudAccount</code> to create multiple temporary
    ///                         accounts isn't recommended. You can only close an account from the AWS
    ///                         Billing and Cost Management console, and you must be signed in as the root
    ///                         user. For information on the requirements and process for closing an
    ///                         account, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing an AWS Account</a> in the
    ///                             <i>AWS Organizations User Guide</i>.</p>
    ///                 </li>
    ///             </ul>
    ///         </important>
    ///         <note>
    ///             <p>When you create a member account with this operation, you can choose whether to
    ///                 create the account with the <b>IAM User and Role Access to
    ///                     Billing Information</b> switch enabled. If you enable it, IAM users and
    ///                 roles that have appropriate permissions can view billing information for the
    ///                 account. If you disable it, only the account root user can access billing
    ///                 information. For information about how to disable this switch for an account, see
    ///                     <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
    ///                     Access to Your Billing Information and Tools</a>.</p>
    ///         </note>
    public func createGovCloudAccount(input: CreateGovCloudAccountInput, completion: @escaping (SdkResult<CreateGovCloudAccountOutputResponse, CreateGovCloudAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createGovCloudAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateGovCloudAccountInput, CreateGovCloudAccountOutputResponse, CreateGovCloudAccountOutputError>(id: "createGovCloudAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateGovCloudAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateGovCloudAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateGovCloudAccountInput, CreateGovCloudAccountOutputResponse, CreateGovCloudAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateGovCloudAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateGovCloudAccountInput, CreateGovCloudAccountOutputResponse, CreateGovCloudAccountOutputError>(xAmzTarget: "AWSOrganizationsV20161128.CreateGovCloudAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an AWS organization. The account whose user is calling the
    ///                 <code>CreateOrganization</code> operation automatically becomes the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">management account</a> of the new organization.</p>
    ///         <p>This operation must be called using credentials from the account that is to become the
    ///             new organization's management account. The principal must also have the relevant IAM
    ///             permissions.</p>
    ///         <p>By default (or if you set the <code>FeatureSet</code> parameter to <code>ALL</code>),
    ///             the new organization is created with all features enabled and service control policies
    ///             automatically enabled in the root. If you instead choose to create the organization
    ///             supporting only the consolidated billing features by setting the <code>FeatureSet</code>
    ///             parameter to <code>CONSOLIDATED_BILLING"</code>, no policy types are enabled by default,
    ///             and you can't use organization policies</p>
    public func createOrganization(input: CreateOrganizationInput, completion: @escaping (SdkResult<CreateOrganizationOutputResponse, CreateOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateOrganizationInput, CreateOrganizationOutputResponse, CreateOrganizationOutputError>(id: "createOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateOrganizationInput, CreateOrganizationOutputResponse, CreateOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateOrganizationInput, CreateOrganizationOutputResponse, CreateOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.CreateOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an organizational unit (OU) within a root or parent OU. An OU is a container
    ///             for accounts that enables you to organize your accounts to apply policies according to
    ///             your business requirements. The number of levels deep that you can nest OUs is dependent
    ///             upon the policy types enabled for that root. For service control policies, the limit is
    ///             five.</p>
    ///         <p>For more information about OUs, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing Organizational Units</a> in the
    ///                 <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>If the request includes tags, then the requester must have the
    ///                 <code>organizations:TagResource</code> permission.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func createOrganizationalUnit(input: CreateOrganizationalUnitInput, completion: @escaping (SdkResult<CreateOrganizationalUnitOutputResponse, CreateOrganizationalUnitOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createOrganizationalUnit")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateOrganizationalUnitInput, CreateOrganizationalUnitOutputResponse, CreateOrganizationalUnitOutputError>(id: "createOrganizationalUnit")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateOrganizationalUnitInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateOrganizationalUnitInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateOrganizationalUnitInput, CreateOrganizationalUnitOutputResponse, CreateOrganizationalUnitOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateOrganizationalUnitInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateOrganizationalUnitInput, CreateOrganizationalUnitOutputResponse, CreateOrganizationalUnitOutputError>(xAmzTarget: "AWSOrganizationsV20161128.CreateOrganizationalUnit"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a policy of a specified type that you can attach to a root, an organizational
    ///             unit (OU), or an individual AWS account.</p>
    ///         <p>For more information about policies and their use, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html">Managing
    ///                 Organization Policies</a>.</p>
    ///         <p>If the request includes tags, then the requester must have the
    ///                 <code>organizations:TagResource</code> permission.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func createPolicy(input: CreatePolicyInput, completion: @escaping (SdkResult<CreatePolicyOutputResponse, CreatePolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreatePolicyInput, CreatePolicyOutputResponse, CreatePolicyOutputError>(id: "createPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreatePolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreatePolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreatePolicyInput, CreatePolicyOutputResponse, CreatePolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreatePolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreatePolicyInput, CreatePolicyOutputResponse, CreatePolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.CreatePolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Declines a handshake request. This sets the handshake state to <code>DECLINED</code>
    ///             and effectively deactivates the request.</p>
    ///         <p>This operation can be called only from the account that received the handshake. The originator of the handshake can use <a>CancelHandshake</a>
    ///             instead. The originator can't reactivate a declined request, but can reinitiate the
    ///             process with a new handshake request.</p>
    ///         <p>After you decline a handshake, it continues to appear in the results of relevant APIs
    ///             for only 30 days. After that, it's deleted.</p>
    public func declineHandshake(input: DeclineHandshakeInput, completion: @escaping (SdkResult<DeclineHandshakeOutputResponse, DeclineHandshakeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "declineHandshake")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeclineHandshakeInput, DeclineHandshakeOutputResponse, DeclineHandshakeOutputError>(id: "declineHandshake")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeclineHandshakeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeclineHandshakeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeclineHandshakeInput, DeclineHandshakeOutputResponse, DeclineHandshakeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeclineHandshakeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeclineHandshakeInput, DeclineHandshakeOutputResponse, DeclineHandshakeOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DeclineHandshake"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the organization. You can delete an organization only by using credentials
    ///             from the management account. The organization must be empty of member accounts.</p>
    public func deleteOrganization(input: DeleteOrganizationInput, completion: @escaping (SdkResult<DeleteOrganizationOutputResponse, DeleteOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteOrganizationInput, DeleteOrganizationOutputResponse, DeleteOrganizationOutputError>(id: "deleteOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteOrganizationInput, DeleteOrganizationOutputResponse, DeleteOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteOrganizationInput, DeleteOrganizationOutputResponse, DeleteOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DeleteOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an organizational unit (OU) from a root or another OU. You must first remove
    ///             all accounts and child OUs from the OU that you want to delete.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func deleteOrganizationalUnit(input: DeleteOrganizationalUnitInput, completion: @escaping (SdkResult<DeleteOrganizationalUnitOutputResponse, DeleteOrganizationalUnitOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteOrganizationalUnit")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteOrganizationalUnitInput, DeleteOrganizationalUnitOutputResponse, DeleteOrganizationalUnitOutputError>(id: "deleteOrganizationalUnit")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteOrganizationalUnitInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteOrganizationalUnitInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteOrganizationalUnitInput, DeleteOrganizationalUnitOutputResponse, DeleteOrganizationalUnitOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteOrganizationalUnitInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteOrganizationalUnitInput, DeleteOrganizationalUnitOutputResponse, DeleteOrganizationalUnitOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DeleteOrganizationalUnit"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified policy from your organization. Before you perform this
    ///             operation, you must first detach the policy from all organizational units (OUs), roots,
    ///             and accounts.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func deletePolicy(input: DeletePolicyInput, completion: @escaping (SdkResult<DeletePolicyOutputResponse, DeletePolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeletePolicyInput, DeletePolicyOutputResponse, DeletePolicyOutputError>(id: "deletePolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeletePolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeletePolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeletePolicyInput, DeletePolicyOutputResponse, DeletePolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeletePolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeletePolicyInput, DeletePolicyOutputResponse, DeletePolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DeletePolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes the specified member AWS account as a delegated administrator for the
    ///             specified AWS service.</p>
    ///         <important>
    ///             <p>Deregistering a delegated administrator can have unintended impacts on the
    ///                 functionality of the enabled AWS service. See the documentation for the enabled
    ///                 service before you deregister a delegated administrator so that you understand any
    ///                 potential impacts.</p>
    ///         </important>
    ///         <p>You can run this action only for AWS services that support this
    ///     feature. For a current list of services that support it, see the column <i>Supports
    ///     Delegated Administrator</i> in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS Services that you can use with
    ///     AWS Organizations</a> in the <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func deregisterDelegatedAdministrator(input: DeregisterDelegatedAdministratorInput, completion: @escaping (SdkResult<DeregisterDelegatedAdministratorOutputResponse, DeregisterDelegatedAdministratorOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterDelegatedAdministrator")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterDelegatedAdministratorInput, DeregisterDelegatedAdministratorOutputResponse, DeregisterDelegatedAdministratorOutputError>(id: "deregisterDelegatedAdministrator")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterDelegatedAdministratorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterDelegatedAdministratorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterDelegatedAdministratorInput, DeregisterDelegatedAdministratorOutputResponse, DeregisterDelegatedAdministratorOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeregisterDelegatedAdministratorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeregisterDelegatedAdministratorInput, DeregisterDelegatedAdministratorOutputResponse, DeregisterDelegatedAdministratorOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DeregisterDelegatedAdministrator"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves AWS Organizations-related information about the specified account.</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func describeAccount(input: DescribeAccountInput, completion: @escaping (SdkResult<DescribeAccountOutputResponse, DescribeAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAccountInput, DescribeAccountOutputResponse, DescribeAccountOutputError>(id: "describeAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAccountInput, DescribeAccountOutputResponse, DescribeAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeAccountInput, DescribeAccountOutputResponse, DescribeAccountOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribeAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the current status of an asynchronous request to create an account.</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func describeCreateAccountStatus(input: DescribeCreateAccountStatusInput, completion: @escaping (SdkResult<DescribeCreateAccountStatusOutputResponse, DescribeCreateAccountStatusOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeCreateAccountStatus")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeCreateAccountStatusInput, DescribeCreateAccountStatusOutputResponse, DescribeCreateAccountStatusOutputError>(id: "describeCreateAccountStatus")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeCreateAccountStatusInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeCreateAccountStatusInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeCreateAccountStatusInput, DescribeCreateAccountStatusOutputResponse, DescribeCreateAccountStatusOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeCreateAccountStatusInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeCreateAccountStatusInput, DescribeCreateAccountStatusOutputResponse, DescribeCreateAccountStatusOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribeCreateAccountStatus"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the contents of the effective policy for specified policy type and account.
    ///             The effective policy is the aggregation of any policies of the specified type that the
    ///             account inherits, plus any policy of that type that is directly attached to the
    ///             account.</p>
    ///         <p>This operation applies only to policy types <i>other</i> than service
    ///             control policies (SCPs).</p>
    ///         <p>For more information about policy inheritance, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html">How Policy Inheritance
    ///                 Works</a> in the <i>AWS Organizations User Guide</i>.</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func describeEffectivePolicy(input: DescribeEffectivePolicyInput, completion: @escaping (SdkResult<DescribeEffectivePolicyOutputResponse, DescribeEffectivePolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEffectivePolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEffectivePolicyInput, DescribeEffectivePolicyOutputResponse, DescribeEffectivePolicyOutputError>(id: "describeEffectivePolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEffectivePolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEffectivePolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEffectivePolicyInput, DescribeEffectivePolicyOutputResponse, DescribeEffectivePolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEffectivePolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEffectivePolicyInput, DescribeEffectivePolicyOutputResponse, DescribeEffectivePolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribeEffectivePolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves information about a previously requested handshake. The handshake ID comes
    ///             from the response to the original <a>InviteAccountToOrganization</a>
    ///             operation that generated the handshake.</p>
    ///         <p>You can access handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
    ///                 <code>CANCELED</code> for only 30 days after they change to that state. They're then
    ///             deleted and no longer accessible.</p>
    ///         <p>This operation can be called from any account in the organization.</p>
    public func describeHandshake(input: DescribeHandshakeInput, completion: @escaping (SdkResult<DescribeHandshakeOutputResponse, DescribeHandshakeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeHandshake")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeHandshakeInput, DescribeHandshakeOutputResponse, DescribeHandshakeOutputError>(id: "describeHandshake")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeHandshakeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeHandshakeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeHandshakeInput, DescribeHandshakeOutputResponse, DescribeHandshakeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeHandshakeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeHandshakeInput, DescribeHandshakeOutputResponse, DescribeHandshakeOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribeHandshake"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves information about the organization that the user's account belongs
    ///             to.</p>
    ///         <p>This operation can be called from any account in the organization.</p>
    ///         <note>
    ///             <p>Even if a policy type is shown as available in the organization, you can disable
    ///                 it separately at the root level with <a>DisablePolicyType</a>. Use <a>ListRoots</a> to see the status of policy types for a specified
    ///                 root.</p>
    ///         </note>
    public func describeOrganization(input: DescribeOrganizationInput, completion: @escaping (SdkResult<DescribeOrganizationOutputResponse, DescribeOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeOrganizationInput, DescribeOrganizationOutputResponse, DescribeOrganizationOutputError>(id: "describeOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeOrganizationInput, DescribeOrganizationOutputResponse, DescribeOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeOrganizationInput, DescribeOrganizationOutputResponse, DescribeOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribeOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves information about an organizational unit (OU).</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func describeOrganizationalUnit(input: DescribeOrganizationalUnitInput, completion: @escaping (SdkResult<DescribeOrganizationalUnitOutputResponse, DescribeOrganizationalUnitOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeOrganizationalUnit")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeOrganizationalUnitInput, DescribeOrganizationalUnitOutputResponse, DescribeOrganizationalUnitOutputError>(id: "describeOrganizationalUnit")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationalUnitInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationalUnitInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeOrganizationalUnitInput, DescribeOrganizationalUnitOutputResponse, DescribeOrganizationalUnitOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeOrganizationalUnitInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeOrganizationalUnitInput, DescribeOrganizationalUnitOutputResponse, DescribeOrganizationalUnitOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribeOrganizationalUnit"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves information about a policy.</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func describePolicy(input: DescribePolicyInput, completion: @escaping (SdkResult<DescribePolicyOutputResponse, DescribePolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describePolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribePolicyInput, DescribePolicyOutputResponse, DescribePolicyOutputError>(id: "describePolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribePolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribePolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribePolicyInput, DescribePolicyOutputResponse, DescribePolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribePolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribePolicyInput, DescribePolicyOutputResponse, DescribePolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DescribePolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Detaches a policy from a target root, organizational unit (OU), or account.</p>
    ///         <important>
    ///             <p>If the policy being detached is a service control policy (SCP), the changes to
    ///                 permissions for AWS Identity and Access Management (IAM) users and roles in affected accounts are
    ///                 immediate.</p>
    ///         </important>
    ///         <p>Every root, OU, and account must have at least one SCP attached. If you want to
    ///             replace the default <code>FullAWSAccess</code> policy with an SCP that limits the
    ///             permissions that can be delegated, you must attach the replacement SCP before you can
    ///             remove the default SCP. This is the authorization strategy of an "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_allowlist">allow list</a>". If you instead attach a second SCP and
    ///             leave the <code>FullAWSAccess</code> SCP still attached, and specify <code>"Effect":
    ///                 "Deny"</code> in the second SCP to override the <code>"Effect": "Allow"</code> in
    ///             the <code>FullAWSAccess</code> policy (or any other attached SCP), you're using the
    ///             authorization strategy of a "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_denylist">deny list</a>".</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func detachPolicy(input: DetachPolicyInput, completion: @escaping (SdkResult<DetachPolicyOutputResponse, DetachPolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "detachPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DetachPolicyInput, DetachPolicyOutputResponse, DetachPolicyOutputError>(id: "detachPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DetachPolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DetachPolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DetachPolicyInput, DetachPolicyOutputResponse, DetachPolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DetachPolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DetachPolicyInput, DetachPolicyOutputResponse, DetachPolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DetachPolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables the integration of an AWS service (the service that is specified by
    ///                 <code>ServicePrincipal</code>) with AWS Organizations. When you disable integration, the
    ///             specified service no longer can create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked role</a> in
    ///                 <i>new</i> accounts in your organization. This means the service can't
    ///             perform operations on your behalf on any new accounts in your organization. The service
    ///             can still perform operations in older accounts until the service completes its clean-up
    ///             from AWS Organizations.</p>
    ///         <important>
    ///             <p>We <b>
    ///                   <i>strongly recommend</i>
    ///                </b> that
    ///                 you don't use this command to disable integration between AWS Organizations and the specified
    ///                 AWS service. Instead, use the console or commands that are provided by the
    ///                 specified service. This lets the trusted service perform any required initialization
    ///                 when enabling trusted access, such as creating any required resources and any
    ///                 required clean up of resources when disabling trusted access. </p>
    ///             <p>For information about how to disable trusted service access to your organization
    ///                 using the trusted service, see the <b>Learn more</b> link
    ///                 under the <b>Supports Trusted Access</b> column at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS services that you can use with AWS Organizations</a>. on this page.</p>
    ///             <p>If you disable access by using this command, it causes the following actions to
    ///                 occur:</p>
    ///             <ul>
    ///                <li>
    ///                     <p>The service can no longer create a service-linked role in the accounts in
    ///                         your organization. This means that the service can't perform operations on
    ///                         your behalf on any new accounts in your organization. The service can still
    ///                         perform operations in older accounts until the service completes its
    ///                         clean-up from AWS Organizations. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>The service can no longer perform tasks in the member accounts in the
    ///                         organization, unless those operations are explicitly permitted by the IAM
    ///                         policies that are attached to your roles. This includes any data aggregation
    ///                         from the member accounts to the management account, or to a delegated
    ///                         administrator account, where relevant.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>Some services detect this and clean up any remaining data or resources
    ///                         related to the integration, while other services stop accessing the
    ///                         organization but leave any historical data and configuration in place to
    ///                         support a possible re-enabling of the integration.</p>
    ///                 </li>
    ///             </ul>
    ///             <p>Using the other service's console or commands to disable the integration ensures
    ///                 that the other service is aware that it can clean up any resources that are required
    ///                 only for the integration. How the service cleans up its resources in the
    ///                 organization's accounts depends on that service. For more information, see the
    ///                 documentation for the other AWS service. </p>
    ///         </important>
    ///         <p>After you perform the <code>DisableAWSServiceAccess</code> operation, the specified
    ///             service can no longer perform operations in your organization's accounts </p>
    ///         <p>For more information about integrating other services with AWS Organizations, including the
    ///             list of services that work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
    ///                 AWS Services</a> in the <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func disableAWSServiceAccess(input: DisableAWSServiceAccessInput, completion: @escaping (SdkResult<DisableAWSServiceAccessOutputResponse, DisableAWSServiceAccessOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableAWSServiceAccess")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableAWSServiceAccessInput, DisableAWSServiceAccessOutputResponse, DisableAWSServiceAccessOutputError>(id: "disableAWSServiceAccess")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableAWSServiceAccessInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableAWSServiceAccessInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableAWSServiceAccessInput, DisableAWSServiceAccessOutputResponse, DisableAWSServiceAccessOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisableAWSServiceAccessInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisableAWSServiceAccessInput, DisableAWSServiceAccessOutputResponse, DisableAWSServiceAccessOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DisableAWSServiceAccess"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables an organizational policy type in a root. A policy of a certain type can be
    ///             attached to entities in a root only if that type is enabled in the root. After you
    ///             perform this operation, you no longer can attach policies of the specified type to that
    ///             root or to any organizational unit (OU) or account in that root. You can undo this by
    ///             using the <a>EnablePolicyType</a> operation.</p>
    ///         <p>This is an asynchronous request that AWS performs in the background. If you disable
    ///             a policy type for a root, it still appears enabled for the organization if <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features</a> are enabled for the organization. AWS recommends that you
    ///             first use <a>ListRoots</a> to see the status of policy types for a specified
    ///             root, and then use this operation.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    ///         <p> To view the status of available policy types in the organization, use <a>DescribeOrganization</a>.</p>
    public func disablePolicyType(input: DisablePolicyTypeInput, completion: @escaping (SdkResult<DisablePolicyTypeOutputResponse, DisablePolicyTypeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disablePolicyType")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisablePolicyTypeInput, DisablePolicyTypeOutputResponse, DisablePolicyTypeOutputError>(id: "disablePolicyType")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisablePolicyTypeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisablePolicyTypeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisablePolicyTypeInput, DisablePolicyTypeOutputResponse, DisablePolicyTypeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisablePolicyTypeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisablePolicyTypeInput, DisablePolicyTypeOutputResponse, DisablePolicyTypeOutputError>(xAmzTarget: "AWSOrganizationsV20161128.DisablePolicyType"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables the integration of an AWS service (the service that is specified by
    ///                 <code>ServicePrincipal</code>) with AWS Organizations. When you enable integration, you allow
    ///             the specified service to create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked role</a> in
    ///             all the accounts in your organization. This allows the service to perform operations on
    ///             your behalf in your organization and its accounts.</p>
    ///         <important>
    ///             <p>We recommend that you enable integration between AWS Organizations and the specified AWS
    ///                 service by using the console or commands that are provided by the specified service.
    ///                 Doing so ensures that the service is aware that it can create the resources that are
    ///                 required for the integration. How the service creates those resources in the
    ///                 organization's accounts depends on that service. For more information, see the
    ///                 documentation for the other AWS service.</p>
    ///         </important>
    ///         <p>For more information about enabling services to integrate with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
    ///                 AWS Services</a> in the <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>This operation can be called only from the organization's management account and only
    ///             if the organization has <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">enabled all
    ///                 features</a>.</p>
    public func enableAWSServiceAccess(input: EnableAWSServiceAccessInput, completion: @escaping (SdkResult<EnableAWSServiceAccessOutputResponse, EnableAWSServiceAccessOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableAWSServiceAccess")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableAWSServiceAccessInput, EnableAWSServiceAccessOutputResponse, EnableAWSServiceAccessOutputError>(id: "enableAWSServiceAccess")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableAWSServiceAccessInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableAWSServiceAccessInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableAWSServiceAccessInput, EnableAWSServiceAccessOutputResponse, EnableAWSServiceAccessOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: EnableAWSServiceAccessInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<EnableAWSServiceAccessInput, EnableAWSServiceAccessOutputResponse, EnableAWSServiceAccessOutputError>(xAmzTarget: "AWSOrganizationsV20161128.EnableAWSServiceAccess"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables all features in an organization. This enables the use of organization policies
    ///             that can restrict the services and actions that can be called in each account. Until you
    ///             enable all features, you have access only to consolidated billing, and you can't use any
    ///             of the advanced account administration features that AWS Organizations supports. For more
    ///             information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in the
    ///                 <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <important>
    ///             <p>This operation is required only for organizations that were created explicitly
    ///                 with only the consolidated billing features enabled. Calling this operation sends a
    ///                 handshake to every invited account in the organization. The feature set change can
    ///                 be finalized and the additional features enabled only after all administrators in
    ///                 the invited accounts approve the change by accepting the handshake.</p>
    ///         </important>
    ///         <p>After you enable all features, you can separately enable or disable individual policy
    ///             types in a root using <a>EnablePolicyType</a> and <a>DisablePolicyType</a>. To see the status of policy types in a root, use
    ///                 <a>ListRoots</a>.</p>
    ///         <p>After all invited member accounts accept the handshake, you finalize the feature set
    ///             change by accepting the handshake that contains <code>"Action":
    ///                 "ENABLE_ALL_FEATURES"</code>. This completes the change.</p>
    ///         <p>After you enable all features in your organization, the management account in the
    ///             organization can apply policies on all member accounts. These policies can restrict what
    ///             users and even administrators in those accounts can do. The management account can apply
    ///             policies that prevent accounts from leaving the organization. Ensure that your account
    ///             administrators are aware of this.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func enableAllFeatures(input: EnableAllFeaturesInput, completion: @escaping (SdkResult<EnableAllFeaturesOutputResponse, EnableAllFeaturesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableAllFeatures")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableAllFeaturesInput, EnableAllFeaturesOutputResponse, EnableAllFeaturesOutputError>(id: "enableAllFeatures")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableAllFeaturesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableAllFeaturesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableAllFeaturesInput, EnableAllFeaturesOutputResponse, EnableAllFeaturesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<EnableAllFeaturesInput, EnableAllFeaturesOutputResponse, EnableAllFeaturesOutputError>(xAmzTarget: "AWSOrganizationsV20161128.EnableAllFeatures"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables a policy type in a root. After you enable a policy type in a root, you can
    ///             attach policies of that type to the root, any organizational unit (OU), or account in
    ///             that root. You can undo this by using the <a>DisablePolicyType</a>
    ///             operation.</p>
    ///         <p>This is an asynchronous request that AWS performs in the background. AWS
    ///             recommends that you first use <a>ListRoots</a> to see the status of policy
    ///             types for a specified root, and then use this operation.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    ///         <p>You can enable a policy type in a root only if that policy type is available in the
    ///             organization. To view the status of available policy types in the organization, use
    ///                 <a>DescribeOrganization</a>.</p>
    public func enablePolicyType(input: EnablePolicyTypeInput, completion: @escaping (SdkResult<EnablePolicyTypeOutputResponse, EnablePolicyTypeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enablePolicyType")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnablePolicyTypeInput, EnablePolicyTypeOutputResponse, EnablePolicyTypeOutputError>(id: "enablePolicyType")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnablePolicyTypeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnablePolicyTypeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnablePolicyTypeInput, EnablePolicyTypeOutputResponse, EnablePolicyTypeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: EnablePolicyTypeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<EnablePolicyTypeInput, EnablePolicyTypeOutputResponse, EnablePolicyTypeOutputError>(xAmzTarget: "AWSOrganizationsV20161128.EnablePolicyType"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sends an invitation to another account to join your organization as a member account.
    ///             AWS Organizations sends email on your behalf to the email address that is associated with the
    ///             other account's owner. The invitation is implemented as a <a>Handshake</a>
    ///             whose details are in the response.</p>
    ///         <important>
    ///             <ul>
    ///                <li>
    ///                     <p>You can invite AWS accounts only from the same seller as the management
    ///                         account. For example, if your organization's management account was created
    ///                         by Amazon Internet Services Pvt. Ltd (AISPL), an AWS seller in India, you
    ///                         can invite only other AISPL accounts to your organization. You can't combine
    ///                         accounts from AISPL and AWS or from any other AWS seller. For more
    ///                         information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html">Consolidated
    ///                             Billing in India</a>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you receive an exception that indicates that you exceeded your account
    ///                         limits for the organization or that the operation failed because your
    ///                         organization is still initializing, wait one hour and then try again. If the
    ///                         error persists after an hour, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </important>
    ///         <p>If the request includes tags, then the requester must have the
    ///                 <code>organizations:TagResource</code> permission.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func inviteAccountToOrganization(input: InviteAccountToOrganizationInput, completion: @escaping (SdkResult<InviteAccountToOrganizationOutputResponse, InviteAccountToOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "inviteAccountToOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<InviteAccountToOrganizationInput, InviteAccountToOrganizationOutputResponse, InviteAccountToOrganizationOutputError>(id: "inviteAccountToOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: InviteAccountToOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: InviteAccountToOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<InviteAccountToOrganizationInput, InviteAccountToOrganizationOutputResponse, InviteAccountToOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: InviteAccountToOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<InviteAccountToOrganizationInput, InviteAccountToOrganizationOutputResponse, InviteAccountToOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.InviteAccountToOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a member account from its parent organization. This version of the operation
    ///             is performed by the account that wants to leave. To remove a member account as a user in
    ///             the management account, use <a>RemoveAccountFromOrganization</a>
    ///             instead.</p>
    ///         <p>This operation can be called only from a member account in the organization.</p>
    ///         <important>
    ///             <ul>
    ///                <li>
    ///                     <p>The management account in an organization with all features enabled can
    ///                         set service control policies (SCPs) that can restrict what administrators of
    ///                         member accounts can do. This includes preventing them from successfully
    ///                         calling <code>LeaveOrganization</code> and leaving the organization.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>You can leave an organization as a member account only if the account is
    ///                         configured with the information required to operate as a standalone account.
    ///                         When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required of standalone accounts is
    ///                             <i>not</i> automatically collected. For each account that
    ///                         you want to make standalone, you must perform the following steps. If any of
    ///                         the steps are already completed for this account, that step doesn't
    ///                         appear.</p>
    ///                     <ul>
    ///                      <li>
    ///                             <p>Choose a support plan</p>
    ///                         </li>
    ///                      <li>
    ///                             <p>Provide and verify the required contact information</p>
    ///                         </li>
    ///                      <li>
    ///                             <p>Provide a current payment method</p>
    ///                         </li>
    ///                   </ul>
    ///                     <p>AWS uses the payment method to charge for any billable (not free tier)
    ///                         AWS activity that occurs while the account isn't attached to an
    ///                         organization. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization when all required account information has not
    ///                             yet been provided</a> in the
    ///                         <i>AWS Organizations User Guide.</i>
    ///                   </p>
    ///                 </li>
    ///                <li>
    ///                     <p>The account that you want to leave must not be a delegated administrator
    ///                         account for any AWS service enabled for your organization. If the account
    ///                         is a delegated administrator, you must first change the delegated
    ///                         administrator account to another account that is remaining in the
    ///                         organization.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>You can leave an organization only after you enable IAM user access to
    ///                         billing in your account. For more information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating Access to the Billing and Cost Management Console</a> in
    ///                         the <i>AWS Billing and Cost Management User Guide.</i>
    ///                   </p>
    ///                 </li>
    ///                <li>
    ///                     <p>After the account leaves the organization, all tags that were attached to
    ///                         the account object in the organization are deleted. AWS accounts outside
    ///                         of an organization do not support tags.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>A newly created account has a waiting period before it can be removed from
    ///                         its organization. If you get an error that indicates that a wait period is
    ///                         required, then try again in a few days.</p>
    ///                 </li>
    ///             </ul>
    ///         </important>
    public func leaveOrganization(input: LeaveOrganizationInput, completion: @escaping (SdkResult<LeaveOrganizationOutputResponse, LeaveOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "leaveOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<LeaveOrganizationInput, LeaveOrganizationOutputResponse, LeaveOrganizationOutputError>(id: "leaveOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: LeaveOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: LeaveOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<LeaveOrganizationInput, LeaveOrganizationOutputResponse, LeaveOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<LeaveOrganizationInput, LeaveOrganizationOutputResponse, LeaveOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.LeaveOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of the AWS services that you enabled to integrate with your
    ///             organization. After a service on this list creates the resources that it requires for
    ///             the integration, it can perform operations on your organization and its accounts.</p>
    ///         <p>For more information about integrating other services with AWS Organizations, including the
    ///             list of services that currently work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
    ///                 AWS Services</a> in the <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listAWSServiceAccessForOrganization(input: ListAWSServiceAccessForOrganizationInput, completion: @escaping (SdkResult<ListAWSServiceAccessForOrganizationOutputResponse, ListAWSServiceAccessForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAWSServiceAccessForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAWSServiceAccessForOrganizationInput, ListAWSServiceAccessForOrganizationOutputResponse, ListAWSServiceAccessForOrganizationOutputError>(id: "listAWSServiceAccessForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAWSServiceAccessForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAWSServiceAccessForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAWSServiceAccessForOrganizationInput, ListAWSServiceAccessForOrganizationOutputResponse, ListAWSServiceAccessForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListAWSServiceAccessForOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListAWSServiceAccessForOrganizationInput, ListAWSServiceAccessForOrganizationOutputResponse, ListAWSServiceAccessForOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListAWSServiceAccessForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the accounts in the organization. To request only the accounts in a
    ///             specified root or organizational unit (OU), use the <a>ListAccountsForParent</a> operation instead.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listAccounts(input: ListAccountsInput, completion: @escaping (SdkResult<ListAccountsOutputResponse, ListAccountsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAccounts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAccountsInput, ListAccountsOutputResponse, ListAccountsOutputError>(id: "listAccounts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAccountsInput, ListAccountsOutputResponse, ListAccountsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListAccountsInput, ListAccountsOutputResponse, ListAccountsOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListAccounts"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the accounts in an organization that are contained by the specified target root
    ///             or organizational unit (OU). If you specify the root, you get a list of all the accounts
    ///             that aren't in any OU. If you specify an OU, you get a list of all the accounts in only
    ///             that OU and not in any child OUs. To get a list of all accounts in the organization, use
    ///             the <a>ListAccounts</a> operation.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listAccountsForParent(input: ListAccountsForParentInput, completion: @escaping (SdkResult<ListAccountsForParentOutputResponse, ListAccountsForParentOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAccountsForParent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAccountsForParentInput, ListAccountsForParentOutputResponse, ListAccountsForParentOutputError>(id: "listAccountsForParent")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsForParentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsForParentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAccountsForParentInput, ListAccountsForParentOutputResponse, ListAccountsForParentOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsForParentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListAccountsForParentInput, ListAccountsForParentOutputResponse, ListAccountsForParentOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListAccountsForParent"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all of the organizational units (OUs) or accounts that are contained in the
    ///             specified parent OU or root. This operation, along with <a>ListParents</a>
    ///             enables you to traverse the tree structure that makes up this root.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listChildren(input: ListChildrenInput, completion: @escaping (SdkResult<ListChildrenOutputResponse, ListChildrenOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChildren")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChildrenInput, ListChildrenOutputResponse, ListChildrenOutputError>(id: "listChildren")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChildrenInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChildrenInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChildrenInput, ListChildrenOutputResponse, ListChildrenOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListChildrenInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListChildrenInput, ListChildrenOutputResponse, ListChildrenOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListChildren"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the account creation requests that match the specified status that is currently
    ///             being tracked for the organization.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listCreateAccountStatus(input: ListCreateAccountStatusInput, completion: @escaping (SdkResult<ListCreateAccountStatusOutputResponse, ListCreateAccountStatusOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listCreateAccountStatus")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListCreateAccountStatusInput, ListCreateAccountStatusOutputResponse, ListCreateAccountStatusOutputError>(id: "listCreateAccountStatus")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListCreateAccountStatusInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListCreateAccountStatusInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListCreateAccountStatusInput, ListCreateAccountStatusOutputResponse, ListCreateAccountStatusOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListCreateAccountStatusInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListCreateAccountStatusInput, ListCreateAccountStatusOutputResponse, ListCreateAccountStatusOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListCreateAccountStatus"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the AWS accounts that are designated as delegated administrators in this
    ///             organization.</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listDelegatedAdministrators(input: ListDelegatedAdministratorsInput, completion: @escaping (SdkResult<ListDelegatedAdministratorsOutputResponse, ListDelegatedAdministratorsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDelegatedAdministrators")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDelegatedAdministratorsInput, ListDelegatedAdministratorsOutputResponse, ListDelegatedAdministratorsOutputError>(id: "listDelegatedAdministrators")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDelegatedAdministratorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDelegatedAdministratorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDelegatedAdministratorsInput, ListDelegatedAdministratorsOutputResponse, ListDelegatedAdministratorsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDelegatedAdministratorsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDelegatedAdministratorsInput, ListDelegatedAdministratorsOutputResponse, ListDelegatedAdministratorsOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListDelegatedAdministrators"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List the AWS services for which the specified account is a delegated
    ///             administrator.</p>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listDelegatedServicesForAccount(input: ListDelegatedServicesForAccountInput, completion: @escaping (SdkResult<ListDelegatedServicesForAccountOutputResponse, ListDelegatedServicesForAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDelegatedServicesForAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDelegatedServicesForAccountInput, ListDelegatedServicesForAccountOutputResponse, ListDelegatedServicesForAccountOutputError>(id: "listDelegatedServicesForAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDelegatedServicesForAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDelegatedServicesForAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDelegatedServicesForAccountInput, ListDelegatedServicesForAccountOutputResponse, ListDelegatedServicesForAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDelegatedServicesForAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDelegatedServicesForAccountInput, ListDelegatedServicesForAccountOutputResponse, ListDelegatedServicesForAccountOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListDelegatedServicesForAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the current handshakes that are associated with the account of the requesting
    ///             user.</p>
    ///         <p>Handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
    ///                 <code>CANCELED</code> appear in the results of this API for only 30 days after
    ///             changing to that state. After that, they're deleted and no longer accessible.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called from any account in the organization.</p>
    public func listHandshakesForAccount(input: ListHandshakesForAccountInput, completion: @escaping (SdkResult<ListHandshakesForAccountOutputResponse, ListHandshakesForAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listHandshakesForAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListHandshakesForAccountInput, ListHandshakesForAccountOutputResponse, ListHandshakesForAccountOutputError>(id: "listHandshakesForAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListHandshakesForAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListHandshakesForAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListHandshakesForAccountInput, ListHandshakesForAccountOutputResponse, ListHandshakesForAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListHandshakesForAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListHandshakesForAccountInput, ListHandshakesForAccountOutputResponse, ListHandshakesForAccountOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListHandshakesForAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the handshakes that are associated with the organization that the requesting
    ///             user is part of. The <code>ListHandshakesForOrganization</code> operation returns a list
    ///             of handshake structures. Each structure contains details and status about a
    ///             handshake.</p>
    ///         <p>Handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
    ///                 <code>CANCELED</code> appear in the results of this API for only 30 days after
    ///             changing to that state. After that, they're deleted and no longer accessible.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listHandshakesForOrganization(input: ListHandshakesForOrganizationInput, completion: @escaping (SdkResult<ListHandshakesForOrganizationOutputResponse, ListHandshakesForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listHandshakesForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListHandshakesForOrganizationInput, ListHandshakesForOrganizationOutputResponse, ListHandshakesForOrganizationOutputError>(id: "listHandshakesForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListHandshakesForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListHandshakesForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListHandshakesForOrganizationInput, ListHandshakesForOrganizationOutputResponse, ListHandshakesForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListHandshakesForOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListHandshakesForOrganizationInput, ListHandshakesForOrganizationOutputResponse, ListHandshakesForOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListHandshakesForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the organizational units (OUs) in a parent organizational unit or root.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listOrganizationalUnitsForParent(input: ListOrganizationalUnitsForParentInput, completion: @escaping (SdkResult<ListOrganizationalUnitsForParentOutputResponse, ListOrganizationalUnitsForParentOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listOrganizationalUnitsForParent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListOrganizationalUnitsForParentInput, ListOrganizationalUnitsForParentOutputResponse, ListOrganizationalUnitsForParentOutputError>(id: "listOrganizationalUnitsForParent")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationalUnitsForParentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationalUnitsForParentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListOrganizationalUnitsForParentInput, ListOrganizationalUnitsForParentOutputResponse, ListOrganizationalUnitsForParentOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListOrganizationalUnitsForParentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListOrganizationalUnitsForParentInput, ListOrganizationalUnitsForParentOutputResponse, ListOrganizationalUnitsForParentOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListOrganizationalUnitsForParent"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the root or organizational units (OUs) that serve as the immediate parent of the
    ///             specified child OU or account. This operation, along with <a>ListChildren</a>
    ///             enables you to traverse the tree structure that makes up this root.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    ///         <note>
    ///             <p>In the current release, a child can have only a single parent.</p>
    ///         </note>
    public func listParents(input: ListParentsInput, completion: @escaping (SdkResult<ListParentsOutputResponse, ListParentsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listParents")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListParentsInput, ListParentsOutputResponse, ListParentsOutputError>(id: "listParents")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListParentsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListParentsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListParentsInput, ListParentsOutputResponse, ListParentsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListParentsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListParentsInput, ListParentsOutputResponse, ListParentsOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListParents"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the list of all policies in an organization of a specified type.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listPolicies(input: ListPoliciesInput, completion: @escaping (SdkResult<ListPoliciesOutputResponse, ListPoliciesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPolicies")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPoliciesInput, ListPoliciesOutputResponse, ListPoliciesOutputError>(id: "listPolicies")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPoliciesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPoliciesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPoliciesInput, ListPoliciesOutputResponse, ListPoliciesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListPoliciesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListPoliciesInput, ListPoliciesOutputResponse, ListPoliciesOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListPolicies"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the policies that are directly attached to the specified target root,
    ///             organizational unit (OU), or account. You must specify the policy type that you want
    ///             included in the returned list.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listPoliciesForTarget(input: ListPoliciesForTargetInput, completion: @escaping (SdkResult<ListPoliciesForTargetOutputResponse, ListPoliciesForTargetOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPoliciesForTarget")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPoliciesForTargetInput, ListPoliciesForTargetOutputResponse, ListPoliciesForTargetOutputError>(id: "listPoliciesForTarget")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPoliciesForTargetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPoliciesForTargetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPoliciesForTargetInput, ListPoliciesForTargetOutputResponse, ListPoliciesForTargetOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListPoliciesForTargetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListPoliciesForTargetInput, ListPoliciesForTargetOutputResponse, ListPoliciesForTargetOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListPoliciesForTarget"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the roots that are defined in the current organization.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    ///         <note>
    ///             <p>Policy types can be enabled and disabled in roots. This is distinct from whether
    ///                 they're available in the organization. When you enable all features, you make policy
    ///                 types available for use in that organization. Individual policy types can then be
    ///                 enabled and disabled in a root. To see the availability of a policy type in an
    ///                 organization, use <a>DescribeOrganization</a>.</p>
    ///         </note>
    public func listRoots(input: ListRootsInput, completion: @escaping (SdkResult<ListRootsOutputResponse, ListRootsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listRoots")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListRootsInput, ListRootsOutputResponse, ListRootsOutputError>(id: "listRoots")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListRootsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListRootsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListRootsInput, ListRootsOutputResponse, ListRootsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListRootsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListRootsInput, ListRootsOutputResponse, ListRootsOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListRoots"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists tags that are attached to the specified resource.</p>
    ///         <p>You can attach tags to the following resources in AWS Organizations.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>AWS account</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organization root</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organizational unit (OU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>Policy (any type)</p>
    ///             </li>
    ///          </ul>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListTagsForResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the roots, organizational units (OUs), and accounts that the specified
    ///             policy is attached to.</p>
    ///         <note>
    ///             <p>Always check the <code>NextToken</code> response parameter
    /// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
    /// occasionally return an empty set of results even when there are more results available. The
    /// <code>NextToken</code> response parameter value is <code>null</code>
    ///                <i>only</i>
    /// when there are no more results to display.</p>
    ///          </note>
    ///         <p>This operation can be called only from the organization's
    /// management account or by a member account that is a delegated administrator for an AWS service.</p>
    public func listTargetsForPolicy(input: ListTargetsForPolicyInput, completion: @escaping (SdkResult<ListTargetsForPolicyOutputResponse, ListTargetsForPolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTargetsForPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTargetsForPolicyInput, ListTargetsForPolicyOutputResponse, ListTargetsForPolicyOutputError>(id: "listTargetsForPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTargetsForPolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTargetsForPolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTargetsForPolicyInput, ListTargetsForPolicyOutputResponse, ListTargetsForPolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListTargetsForPolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListTargetsForPolicyInput, ListTargetsForPolicyOutputResponse, ListTargetsForPolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.ListTargetsForPolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Moves an account from its current source parent root or organizational unit (OU) to
    ///             the specified destination parent root or OU.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func moveAccount(input: MoveAccountInput, completion: @escaping (SdkResult<MoveAccountOutputResponse, MoveAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "moveAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<MoveAccountInput, MoveAccountOutputResponse, MoveAccountOutputError>(id: "moveAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: MoveAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: MoveAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<MoveAccountInput, MoveAccountOutputResponse, MoveAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: MoveAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<MoveAccountInput, MoveAccountOutputResponse, MoveAccountOutputError>(xAmzTarget: "AWSOrganizationsV20161128.MoveAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables the specified member account to administer the Organizations features of the specified
    ///             AWS service. It grants read-only access to AWS Organizations service data. The account still
    ///             requires IAM permissions to access and administer the AWS service.</p>
    ///         <p>You can run this action only for AWS services that support this
    ///     feature. For a current list of services that support it, see the column <i>Supports
    ///     Delegated Administrator</i> in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS Services that you can use with
    ///     AWS Organizations</a> in the <i>AWS Organizations User Guide.</i>
    ///          </p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func registerDelegatedAdministrator(input: RegisterDelegatedAdministratorInput, completion: @escaping (SdkResult<RegisterDelegatedAdministratorOutputResponse, RegisterDelegatedAdministratorOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerDelegatedAdministrator")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterDelegatedAdministratorInput, RegisterDelegatedAdministratorOutputResponse, RegisterDelegatedAdministratorOutputError>(id: "registerDelegatedAdministrator")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterDelegatedAdministratorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterDelegatedAdministratorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterDelegatedAdministratorInput, RegisterDelegatedAdministratorOutputResponse, RegisterDelegatedAdministratorOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterDelegatedAdministratorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterDelegatedAdministratorInput, RegisterDelegatedAdministratorOutputResponse, RegisterDelegatedAdministratorOutputError>(xAmzTarget: "AWSOrganizationsV20161128.RegisterDelegatedAdministrator"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes the specified account from the organization.</p>
    ///         <p>The removed account becomes a standalone account that isn't a member of any
    ///             organization. It's no longer subject to any policies and is responsible for its own bill
    ///             payments. The organization's management account is no longer charged for any expenses
    ///             accrued by the member account after it's removed from the organization.</p>
    ///         <p>This operation can be called only from the organization's management account. Member accounts can remove themselves with <a>LeaveOrganization</a> instead.</p>
    ///         <important>
    ///             <ul>
    ///                <li>
    ///                     <p>You can remove an account from your organization only if the account is
    ///                         configured with the information required to operate as a standalone account.
    ///                         When you create an account in an organization using the AWS Organizations console,
    ///                         API, or CLI commands, the information required of standalone accounts is
    ///                             <i>not</i> automatically collected. For an account that
    ///                         you want to make standalone, you must choose a support plan, provide and
    ///                         verify the required contact information, and provide a current payment
    ///                         method. AWS uses the payment method to charge for any billable (not free
    ///                         tier) AWS activity that occurs while the account isn't attached to an
    ///                         organization. To remove an account that doesn't yet have this information,
    ///                         you must sign in as the member account and follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization when all required account information has not
    ///                             yet been provided</a> in the
    ///                         <i>AWS Organizations User Guide.</i>
    ///                   </p>
    ///                 </li>
    ///                <li>
    ///                     <p>The account that you want to leave must not be a delegated administrator
    ///                         account for any AWS service enabled for your organization. If the account
    ///                         is a delegated administrator, you must first change the delegated
    ///                         administrator account to another account that is remaining in the
    ///                         organization.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>After the account leaves the organization, all tags that were attached to
    ///                         the account object in the organization are deleted. AWS accounts outside
    ///                         of an organization do not support tags.</p>
    ///                 </li>
    ///             </ul>
    ///         </important>
    public func removeAccountFromOrganization(input: RemoveAccountFromOrganizationInput, completion: @escaping (SdkResult<RemoveAccountFromOrganizationOutputResponse, RemoveAccountFromOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "removeAccountFromOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RemoveAccountFromOrganizationInput, RemoveAccountFromOrganizationOutputResponse, RemoveAccountFromOrganizationOutputError>(id: "removeAccountFromOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RemoveAccountFromOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RemoveAccountFromOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RemoveAccountFromOrganizationInput, RemoveAccountFromOrganizationOutputResponse, RemoveAccountFromOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RemoveAccountFromOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RemoveAccountFromOrganizationInput, RemoveAccountFromOrganizationOutputResponse, RemoveAccountFromOrganizationOutputError>(xAmzTarget: "AWSOrganizationsV20161128.RemoveAccountFromOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds one or more tags to the specified resource.</p>
    ///         <p>Currently, you can attach tags to the following resources in AWS Organizations.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>AWS account</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organization root</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organizational unit (OU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>Policy (any type)</p>
    ///             </li>
    ///          </ul>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(xAmzTarget: "AWSOrganizationsV20161128.TagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes any tags with the specified keys from the specified resource.</p>
    ///         <p>You can attach tags to the following resources in AWS Organizations.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>AWS account</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organization root</p>
    ///             </li>
    ///             <li>
    ///                 <p>Organizational unit (OU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>Policy (any type)</p>
    ///             </li>
    ///          </ul>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(xAmzTarget: "AWSOrganizationsV20161128.UntagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Renames the specified organizational unit (OU). The ID and ARN don't change. The child
    ///             OUs and accounts remain in place, and any attached policies of the OU remain
    ///             attached.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func updateOrganizationalUnit(input: UpdateOrganizationalUnitInput, completion: @escaping (SdkResult<UpdateOrganizationalUnitOutputResponse, UpdateOrganizationalUnitOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateOrganizationalUnit")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateOrganizationalUnitInput, UpdateOrganizationalUnitOutputResponse, UpdateOrganizationalUnitOutputError>(id: "updateOrganizationalUnit")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationalUnitInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationalUnitInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateOrganizationalUnitInput, UpdateOrganizationalUnitOutputResponse, UpdateOrganizationalUnitOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateOrganizationalUnitInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateOrganizationalUnitInput, UpdateOrganizationalUnitOutputResponse, UpdateOrganizationalUnitOutputError>(xAmzTarget: "AWSOrganizationsV20161128.UpdateOrganizationalUnit"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an existing policy with a new name, description, or content. If you don't
    ///             supply any parameter, that value remains unchanged. You can't change a policy's
    ///             type.</p>
    ///         <p>This operation can be called only from the organization's management account.</p>
    public func updatePolicy(input: UpdatePolicyInput, completion: @escaping (SdkResult<UpdatePolicyOutputResponse, UpdatePolicyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "organizations.\(config.region).amazonaws.com")
                      .withSigningName(value: "organizations")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdatePolicyInput, UpdatePolicyOutputResponse, UpdatePolicyOutputError>(id: "updatePolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdatePolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdatePolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdatePolicyInput, UpdatePolicyOutputResponse, UpdatePolicyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdatePolicyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdatePolicyInput, UpdatePolicyOutputResponse, UpdatePolicyOutputError>(xAmzTarget: "AWSOrganizationsV20161128.UpdatePolicy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
