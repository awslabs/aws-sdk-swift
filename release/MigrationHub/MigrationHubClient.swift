// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class MigrationHubClient {
    let client: SdkHttpClient
    let config: MigrationHubClientConfiguration
    let serviceName = "Migration Hub"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: MigrationHubClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class MigrationHubClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> MigrationHubClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try MigrationHubClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension MigrationHubClient: MigrationHubClientProtocol {
    /// <p>Associates a created artifact of an AWS cloud resource, the target receiving the
    ///          migration, with the migration task performed by a migration tool. This API has the
    ///          following traits:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Migration tools can call the <code>AssociateCreatedArtifact</code> operation to
    ///                indicate which AWS artifact is associated with a migration task.</p>
    ///             </li>
    ///             <li>
    ///                <p>The created artifact name must be provided in ARN (Amazon Resource Name) format
    ///                which will contain information about type and region; for example:
    ///                   <code>arn:aws:ec2:us-east-1:488216288981:image/ami-6d0ba87b</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Examples of the AWS resource behind the created artifact are, AMI's, EC2 instance,
    ///                or DMS endpoint, etc.</p>
    ///             </li>
    ///          </ul>
    public func associateCreatedArtifact(input: AssociateCreatedArtifactInput, completion: @escaping (SdkResult<AssociateCreatedArtifactOutput, AssociateCreatedArtifactOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateCreatedArtifact")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateCreatedArtifactInput, AssociateCreatedArtifactOutput, AssociateCreatedArtifactOutputError>(id: "associateCreatedArtifact")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateCreatedArtifactInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateCreatedArtifactInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateCreatedArtifactInput, AssociateCreatedArtifactOutput, AssociateCreatedArtifactOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateCreatedArtifactInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AssociateCreatedArtifactInput, AssociateCreatedArtifactOutput, AssociateCreatedArtifactOutputError>(xAmzTarget: "AWSMigrationHub.AssociateCreatedArtifact"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates a discovered resource ID from Application Discovery Service with a migration
    ///          task.</p>
    public func associateDiscoveredResource(input: AssociateDiscoveredResourceInput, completion: @escaping (SdkResult<AssociateDiscoveredResourceOutput, AssociateDiscoveredResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateDiscoveredResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateDiscoveredResourceInput, AssociateDiscoveredResourceOutput, AssociateDiscoveredResourceOutputError>(id: "associateDiscoveredResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateDiscoveredResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateDiscoveredResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateDiscoveredResourceInput, AssociateDiscoveredResourceOutput, AssociateDiscoveredResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateDiscoveredResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AssociateDiscoveredResourceInput, AssociateDiscoveredResourceOutput, AssociateDiscoveredResourceOutputError>(xAmzTarget: "AWSMigrationHub.AssociateDiscoveredResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a progress update stream which is an AWS resource used for access control as
    ///          well as a namespace for migration task names that is implicitly linked to your AWS account.
    ///          It must uniquely identify the migration tool as it is used for all updates made by the
    ///          tool; however, it does not need to be unique for each AWS account because it is scoped to
    ///          the AWS account.</p>
    public func createProgressUpdateStream(input: CreateProgressUpdateStreamInput, completion: @escaping (SdkResult<CreateProgressUpdateStreamOutput, CreateProgressUpdateStreamOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createProgressUpdateStream")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateProgressUpdateStreamInput, CreateProgressUpdateStreamOutput, CreateProgressUpdateStreamOutputError>(id: "createProgressUpdateStream")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateProgressUpdateStreamInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateProgressUpdateStreamInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateProgressUpdateStreamInput, CreateProgressUpdateStreamOutput, CreateProgressUpdateStreamOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateProgressUpdateStreamInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateProgressUpdateStreamInput, CreateProgressUpdateStreamOutput, CreateProgressUpdateStreamOutputError>(xAmzTarget: "AWSMigrationHub.CreateProgressUpdateStream"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a progress update stream, including all of its tasks, which was previously
    ///          created as an AWS resource used for access control. This API has the following
    ///          traits:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The only parameter needed for <code>DeleteProgressUpdateStream</code> is the
    ///                stream name (same as a <code>CreateProgressUpdateStream</code> call).</p>
    ///             </li>
    ///             <li>
    ///                <p>The call will return, and a background process will asynchronously delete the
    ///                stream and all of its resources (tasks, associated resources, resource attributes,
    ///                created artifacts).</p>
    ///             </li>
    ///             <li>
    ///                <p>If the stream takes time to be deleted, it might still show up on a
    ///                   <code>ListProgressUpdateStreams</code> call.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreateProgressUpdateStream</code>, <code>ImportMigrationTask</code>,
    ///                   <code>NotifyMigrationTaskState</code>, and all Associate[*] APIs related to the
    ///                tasks belonging to the stream will throw "InvalidInputException" if the stream of the
    ///                same name is in the process of being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>Once the stream and all of its resources are deleted,
    ///                   <code>CreateProgressUpdateStream</code> for a stream of the same name will
    ///                succeed, and that stream will be an entirely new logical resource (without any
    ///                resources associated with the old stream).</p>
    ///             </li>
    ///          </ul>
    public func deleteProgressUpdateStream(input: DeleteProgressUpdateStreamInput, completion: @escaping (SdkResult<DeleteProgressUpdateStreamOutput, DeleteProgressUpdateStreamOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteProgressUpdateStream")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteProgressUpdateStreamInput, DeleteProgressUpdateStreamOutput, DeleteProgressUpdateStreamOutputError>(id: "deleteProgressUpdateStream")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteProgressUpdateStreamInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteProgressUpdateStreamInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteProgressUpdateStreamInput, DeleteProgressUpdateStreamOutput, DeleteProgressUpdateStreamOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteProgressUpdateStreamInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteProgressUpdateStreamInput, DeleteProgressUpdateStreamOutput, DeleteProgressUpdateStreamOutputError>(xAmzTarget: "AWSMigrationHub.DeleteProgressUpdateStream"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the migration status of an application.</p>
    public func describeApplicationState(input: DescribeApplicationStateInput, completion: @escaping (SdkResult<DescribeApplicationStateOutput, DescribeApplicationStateOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeApplicationState")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeApplicationStateInput, DescribeApplicationStateOutput, DescribeApplicationStateOutputError>(id: "describeApplicationState")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeApplicationStateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeApplicationStateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeApplicationStateInput, DescribeApplicationStateOutput, DescribeApplicationStateOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeApplicationStateInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeApplicationStateInput, DescribeApplicationStateOutput, DescribeApplicationStateOutputError>(xAmzTarget: "AWSMigrationHub.DescribeApplicationState"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves a list of all attributes associated with a specific migration task.</p>
    public func describeMigrationTask(input: DescribeMigrationTaskInput, completion: @escaping (SdkResult<DescribeMigrationTaskOutput, DescribeMigrationTaskOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeMigrationTask")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeMigrationTaskInput, DescribeMigrationTaskOutput, DescribeMigrationTaskOutputError>(id: "describeMigrationTask")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeMigrationTaskInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeMigrationTaskInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeMigrationTaskInput, DescribeMigrationTaskOutput, DescribeMigrationTaskOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeMigrationTaskInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeMigrationTaskInput, DescribeMigrationTaskOutput, DescribeMigrationTaskOutputError>(xAmzTarget: "AWSMigrationHub.DescribeMigrationTask"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates a created artifact of an AWS resource with a migration task performed by a
    ///          migration tool that was previously associated. This API has the following traits:</p>
    ///          <ul>
    ///             <li>
    ///                <p>A migration user can call the <code>DisassociateCreatedArtifacts</code> operation
    ///                to disassociate a created AWS Artifact from a migration task.</p>
    ///             </li>
    ///             <li>
    ///                <p>The created artifact name must be provided in ARN (Amazon Resource Name) format
    ///                which will contain information about type and region; for example:
    ///                   <code>arn:aws:ec2:us-east-1:488216288981:image/ami-6d0ba87b</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Examples of the AWS resource behind the created artifact are, AMI's, EC2 instance,
    ///                or RDS instance, etc.</p>
    ///             </li>
    ///          </ul>
    public func disassociateCreatedArtifact(input: DisassociateCreatedArtifactInput, completion: @escaping (SdkResult<DisassociateCreatedArtifactOutput, DisassociateCreatedArtifactOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateCreatedArtifact")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateCreatedArtifactInput, DisassociateCreatedArtifactOutput, DisassociateCreatedArtifactOutputError>(id: "disassociateCreatedArtifact")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateCreatedArtifactInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateCreatedArtifactInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateCreatedArtifactInput, DisassociateCreatedArtifactOutput, DisassociateCreatedArtifactOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateCreatedArtifactInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisassociateCreatedArtifactInput, DisassociateCreatedArtifactOutput, DisassociateCreatedArtifactOutputError>(xAmzTarget: "AWSMigrationHub.DisassociateCreatedArtifact"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociate an Application Discovery Service discovered resource from a migration
    ///          task.</p>
    public func disassociateDiscoveredResource(input: DisassociateDiscoveredResourceInput, completion: @escaping (SdkResult<DisassociateDiscoveredResourceOutput, DisassociateDiscoveredResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateDiscoveredResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateDiscoveredResourceInput, DisassociateDiscoveredResourceOutput, DisassociateDiscoveredResourceOutputError>(id: "disassociateDiscoveredResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateDiscoveredResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateDiscoveredResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateDiscoveredResourceInput, DisassociateDiscoveredResourceOutput, DisassociateDiscoveredResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateDiscoveredResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisassociateDiscoveredResourceInput, DisassociateDiscoveredResourceOutput, DisassociateDiscoveredResourceOutputError>(xAmzTarget: "AWSMigrationHub.DisassociateDiscoveredResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers a new migration task which represents a server, database, etc., being migrated
    ///          to AWS by a migration tool.</p>
    ///          <p>This API is a prerequisite to calling the <code>NotifyMigrationTaskState</code> API as
    ///          the migration tool must first register the migration task with Migration Hub.</p>
    public func importMigrationTask(input: ImportMigrationTaskInput, completion: @escaping (SdkResult<ImportMigrationTaskOutput, ImportMigrationTaskOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "importMigrationTask")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ImportMigrationTaskInput, ImportMigrationTaskOutput, ImportMigrationTaskOutputError>(id: "importMigrationTask")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ImportMigrationTaskInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ImportMigrationTaskInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ImportMigrationTaskInput, ImportMigrationTaskOutput, ImportMigrationTaskOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ImportMigrationTaskInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ImportMigrationTaskInput, ImportMigrationTaskOutput, ImportMigrationTaskOutputError>(xAmzTarget: "AWSMigrationHub.ImportMigrationTask"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the migration statuses for your applications. If you use the optional
    ///             <code>ApplicationIds</code> parameter, only the migration statuses for those
    ///          applications will be returned.</p>
    public func listApplicationStates(input: ListApplicationStatesInput, completion: @escaping (SdkResult<ListApplicationStatesOutput, ListApplicationStatesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listApplicationStates")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListApplicationStatesInput, ListApplicationStatesOutput, ListApplicationStatesOutputError>(id: "listApplicationStates")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListApplicationStatesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListApplicationStatesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListApplicationStatesInput, ListApplicationStatesOutput, ListApplicationStatesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListApplicationStatesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListApplicationStatesInput, ListApplicationStatesOutput, ListApplicationStatesOutputError>(xAmzTarget: "AWSMigrationHub.ListApplicationStates"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the created artifacts attached to a given migration task in an update stream. This
    ///          API has the following traits:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Gets the list of the created artifacts while
    ///                migration is taking place.</p>
    ///             </li>
    ///             <li>
    ///                <p>Shows the artifacts created by the migration tool that was associated by the
    ///                   <code>AssociateCreatedArtifact</code> API. </p>
    ///             </li>
    ///             <li>
    ///                <p>Lists created artifacts in a paginated interface. </p>
    ///             </li>
    ///          </ul>
    public func listCreatedArtifacts(input: ListCreatedArtifactsInput, completion: @escaping (SdkResult<ListCreatedArtifactsOutput, ListCreatedArtifactsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listCreatedArtifacts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListCreatedArtifactsInput, ListCreatedArtifactsOutput, ListCreatedArtifactsOutputError>(id: "listCreatedArtifacts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListCreatedArtifactsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListCreatedArtifactsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListCreatedArtifactsInput, ListCreatedArtifactsOutput, ListCreatedArtifactsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListCreatedArtifactsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListCreatedArtifactsInput, ListCreatedArtifactsOutput, ListCreatedArtifactsOutputError>(xAmzTarget: "AWSMigrationHub.ListCreatedArtifacts"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists discovered resources associated with the given <code>MigrationTask</code>.</p>
    public func listDiscoveredResources(input: ListDiscoveredResourcesInput, completion: @escaping (SdkResult<ListDiscoveredResourcesOutput, ListDiscoveredResourcesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDiscoveredResources")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput, ListDiscoveredResourcesOutputError>(id: "listDiscoveredResources")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDiscoveredResourcesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDiscoveredResourcesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput, ListDiscoveredResourcesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDiscoveredResourcesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput, ListDiscoveredResourcesOutputError>(xAmzTarget: "AWSMigrationHub.ListDiscoveredResources"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all, or filtered by resource name, migration tasks associated with the user
    ///          account making this call. This API has the following traits:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Can show a summary list of the most recent migration tasks.</p>
    ///             </li>
    ///             <li>
    ///                <p>Can show a summary list of migration tasks associated with a given discovered
    ///                resource.</p>
    ///             </li>
    ///             <li>
    ///                <p>Lists migration tasks in a paginated interface.</p>
    ///             </li>
    ///          </ul>
    public func listMigrationTasks(input: ListMigrationTasksInput, completion: @escaping (SdkResult<ListMigrationTasksOutput, ListMigrationTasksOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listMigrationTasks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListMigrationTasksInput, ListMigrationTasksOutput, ListMigrationTasksOutputError>(id: "listMigrationTasks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListMigrationTasksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListMigrationTasksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListMigrationTasksInput, ListMigrationTasksOutput, ListMigrationTasksOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListMigrationTasksInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListMigrationTasksInput, ListMigrationTasksOutput, ListMigrationTasksOutputError>(xAmzTarget: "AWSMigrationHub.ListMigrationTasks"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists progress update streams associated with the user account making this call.</p>
    public func listProgressUpdateStreams(input: ListProgressUpdateStreamsInput, completion: @escaping (SdkResult<ListProgressUpdateStreamsOutput, ListProgressUpdateStreamsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listProgressUpdateStreams")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutput, ListProgressUpdateStreamsOutputError>(id: "listProgressUpdateStreams")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListProgressUpdateStreamsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListProgressUpdateStreamsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutput, ListProgressUpdateStreamsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListProgressUpdateStreamsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutput, ListProgressUpdateStreamsOutputError>(xAmzTarget: "AWSMigrationHub.ListProgressUpdateStreams"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sets the migration state of an application. For a given application identified by the
    ///          value passed to <code>ApplicationId</code>, its status is set or updated by passing one of
    ///          three values to <code>Status</code>: <code>NOT_STARTED | IN_PROGRESS |
    ///          COMPLETED</code>.</p>
    public func notifyApplicationState(input: NotifyApplicationStateInput, completion: @escaping (SdkResult<NotifyApplicationStateOutput, NotifyApplicationStateOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "notifyApplicationState")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<NotifyApplicationStateInput, NotifyApplicationStateOutput, NotifyApplicationStateOutputError>(id: "notifyApplicationState")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: NotifyApplicationStateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: NotifyApplicationStateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<NotifyApplicationStateInput, NotifyApplicationStateOutput, NotifyApplicationStateOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: NotifyApplicationStateInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<NotifyApplicationStateInput, NotifyApplicationStateOutput, NotifyApplicationStateOutputError>(xAmzTarget: "AWSMigrationHub.NotifyApplicationState"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Notifies Migration Hub of the current status, progress, or other detail regarding a
    ///          migration task. This API has the following traits:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Migration tools will call the <code>NotifyMigrationTaskState</code> API to share
    ///                the latest progress and status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MigrationTaskName</code> is used for addressing updates to the correct
    ///                target.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ProgressUpdateStream</code> is used for access control and to provide a
    ///                namespace for each migration tool.</p>
    ///             </li>
    ///          </ul>
    public func notifyMigrationTaskState(input: NotifyMigrationTaskStateInput, completion: @escaping (SdkResult<NotifyMigrationTaskStateOutput, NotifyMigrationTaskStateOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "notifyMigrationTaskState")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<NotifyMigrationTaskStateInput, NotifyMigrationTaskStateOutput, NotifyMigrationTaskStateOutputError>(id: "notifyMigrationTaskState")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: NotifyMigrationTaskStateInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: NotifyMigrationTaskStateInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<NotifyMigrationTaskStateInput, NotifyMigrationTaskStateOutput, NotifyMigrationTaskStateOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: NotifyMigrationTaskStateInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<NotifyMigrationTaskStateInput, NotifyMigrationTaskStateOutput, NotifyMigrationTaskStateOutputError>(xAmzTarget: "AWSMigrationHub.NotifyMigrationTaskState"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides identifying details of the resource being migrated so that it can be associated
    ///          in the Application Discovery Service repository. This association occurs asynchronously
    ///          after <code>PutResourceAttributes</code> returns.</p>
    ///          <important>
    ///             <ul>
    ///                <li>
    ///                   <p>Keep in mind that subsequent calls to PutResourceAttributes will override
    ///                   previously stored attributes. For example, if it is first called with a MAC
    ///                   address, but later, it is desired to <i>add</i> an IP address, it
    ///                   will then be required to call it with <i>both</i> the IP and MAC
    ///                   addresses to prevent overriding the MAC address.</p>
    ///                </li>
    ///                <li>
    ///                   <p>Note the instructions regarding the special use case of the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#migrationhub-PutResourceAttributes-request-ResourceAttributeList">
    ///                         <code>ResourceAttributeList</code>
    ///                      </a> parameter when specifying any
    ///                   "VM" related value.</p>
    ///                </li>
    ///             </ul>
    ///          </important>
    ///
    ///          <note>
    ///             <p>Because this is an asynchronous call, it will always return 200, whether an
    ///             association occurs or not. To confirm if an association was found based on the provided
    ///             details, call <code>ListDiscoveredResources</code>.</p>
    ///          </note>
    public func putResourceAttributes(input: PutResourceAttributesInput, completion: @escaping (SdkResult<PutResourceAttributesOutput, PutResourceAttributesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putResourceAttributes")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "mgh.\(config.region).amazonaws.com")
                      .withSigningName(value: "mgh")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutResourceAttributesInput, PutResourceAttributesOutput, PutResourceAttributesOutputError>(id: "putResourceAttributes")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutResourceAttributesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutResourceAttributesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutResourceAttributesInput, PutResourceAttributesOutput, PutResourceAttributesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: PutResourceAttributesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<PutResourceAttributesInput, PutResourceAttributesOutput, PutResourceAttributesOutputError>(xAmzTarget: "AWSMigrationHub.PutResourceAttributes"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
