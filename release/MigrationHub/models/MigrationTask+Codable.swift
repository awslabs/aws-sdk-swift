// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case migrationTaskName = "MigrationTaskName"
        case progressUpdateStream = "ProgressUpdateStream"
        case resourceAttributeList = "ResourceAttributeList"
        case task = "Task"
        case updateDateTime = "UpdateDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let migrationTaskName = migrationTaskName {
            try encodeContainer.encode(migrationTaskName, forKey: .migrationTaskName)
        }
        if let progressUpdateStream = progressUpdateStream {
            try encodeContainer.encode(progressUpdateStream, forKey: .progressUpdateStream)
        }
        if let resourceAttributeList = resourceAttributeList {
            var resourceAttributeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAttributeList)
            for latestresourceattributelist0 in resourceAttributeList {
                try resourceAttributeListContainer.encode(latestresourceattributelist0)
            }
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let updateDateTime = updateDateTime {
            try encodeContainer.encode(updateDateTime.timeIntervalSince1970, forKey: .updateDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let progressUpdateStreamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .progressUpdateStream)
        progressUpdateStream = progressUpdateStreamDecoded
        let migrationTaskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .migrationTaskName)
        migrationTaskName = migrationTaskNameDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Task.self, forKey: .task)
        task = taskDecoded
        let updateDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updateDateTime)
        updateDateTime = updateDateTimeDecoded
        let resourceAttributeListContainer = try containerValues.decodeIfPresent([ResourceAttribute].self, forKey: .resourceAttributeList)
        var resourceAttributeListDecoded0:[ResourceAttribute]? = nil
        if let resourceAttributeListContainer = resourceAttributeListContainer {
            resourceAttributeListDecoded0 = [ResourceAttribute]()
            for structure0 in resourceAttributeListContainer {
                resourceAttributeListDecoded0?.append(structure0)
            }
        }
        resourceAttributeList = resourceAttributeListDecoded0
    }
}
