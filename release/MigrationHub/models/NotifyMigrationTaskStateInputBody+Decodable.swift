// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct NotifyMigrationTaskStateInputBody: Equatable {
    public let progressUpdateStream: String?
    public let migrationTaskName: String?
    public let task: Task?
    public let updateDateTime: Date?
    public let nextUpdateSeconds: Int
    public let dryRun: Bool
}

extension NotifyMigrationTaskStateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dryRun = "DryRun"
        case migrationTaskName = "MigrationTaskName"
        case nextUpdateSeconds = "NextUpdateSeconds"
        case progressUpdateStream = "ProgressUpdateStream"
        case task = "Task"
        case updateDateTime = "UpdateDateTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let progressUpdateStreamDecoded = try containerValues.decodeIfPresent(String.self, forKey: .progressUpdateStream)
        progressUpdateStream = progressUpdateStreamDecoded
        let migrationTaskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .migrationTaskName)
        migrationTaskName = migrationTaskNameDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Task.self, forKey: .task)
        task = taskDecoded
        let updateDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updateDateTime)
        updateDateTime = updateDateTimeDecoded
        let nextUpdateSecondsDecoded = try containerValues.decode(Int.self, forKey: .nextUpdateSeconds)
        nextUpdateSeconds = nextUpdateSecondsDecoded
        let dryRunDecoded = try containerValues.decode(Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
