// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotifyMigrationTaskStateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dryRun = "DryRun"
        case migrationTaskName = "MigrationTaskName"
        case nextUpdateSeconds = "NextUpdateSeconds"
        case progressUpdateStream = "ProgressUpdateStream"
        case task = "Task"
        case updateDateTime = "UpdateDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dryRun != false {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let migrationTaskName = migrationTaskName {
            try encodeContainer.encode(migrationTaskName, forKey: .migrationTaskName)
        }
        if nextUpdateSeconds != 0 {
            try encodeContainer.encode(nextUpdateSeconds, forKey: .nextUpdateSeconds)
        }
        if let progressUpdateStream = progressUpdateStream {
            try encodeContainer.encode(progressUpdateStream, forKey: .progressUpdateStream)
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let updateDateTime = updateDateTime {
            try encodeContainer.encode(updateDateTime.timeIntervalSince1970, forKey: .updateDateTime)
        }
    }
}
