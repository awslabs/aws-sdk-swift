// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A complex type that identifies the namespaces that you want to list. You can choose to list public or private
///    namespaces.</p>
public struct NamespaceFilter: Equatable {
    /// <p>The operator that you want to use to determine whether <code>ListNamespaces</code> returns a namespace. Valid
    ///    values for <code>condition</code> include:</p>
    ///          <dl>
    ///             <dt>EQ</dt>
    ///             <dd>
    ///                <p>When you specify <code>EQ</code> for the condition, you can choose to list only public namespaces or private
    ///       namespaces, but not both. <code>EQ</code> is the default condition and can be omitted.</p>
    ///             </dd>
    ///             <dt>IN</dt>
    ///             <dd>
    ///                <p>When you specify <code>IN</code> for the condition, you can choose to list public namespaces, private
    ///       namespaces, or both. </p>
    ///             </dd>
    ///             <dt>BETWEEN</dt>
    ///             <dd>
    ///                <p> Not applicable</p>
    ///             </dd>
    ///          </dl>
    public let condition: FilterCondition?
    /// <p>Specify <code>TYPE</code>.</p>
    public let name: NamespaceFilterName?
    /// <p>If you specify <code>EQ</code> for <code>Condition</code>, specify either <code>DNS_PUBLIC</code> or
    ///     <code>DNS_PRIVATE</code>.</p>
    ///          <p>If you specify <code>IN</code> for <code>Condition</code>, you can specify <code>DNS_PUBLIC</code>,
    ///     <code>DNS_PRIVATE</code>, or both.</p>
    public let values: [String]?

    public init (
        condition: FilterCondition? = nil,
        name: NamespaceFilterName? = nil,
        values: [String]? = nil
    )
    {
        self.condition = condition
        self.name = name
        self.values = values
    }
}
