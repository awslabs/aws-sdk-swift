// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DiscoverInstancesInput: Equatable {
    /// <p>The health status of the instances that you want to discover. This parameter is ignored for services that don't
    ///    have a health check configured, and
    ///    all
    ///    instances are returned.</p>
    ///          <dl>
    ///             <dt>HEALTHY</dt>
    ///             <dd>
    ///                <p>Returns healthy instances.</p>
    ///             </dd>
    ///             <dt>UNHEALTHY</dt>
    ///             <dd>
    ///                <p>Returns unhealthy instances.</p>
    ///             </dd>
    ///             <dt>ALL</dt>
    ///             <dd>
    ///                <p>Returns all instances.</p>
    ///             </dd>
    ///             <dt>HEALTHY_OR_ELSE_ALL</dt>
    ///             <dd>
    ///                <p>Returns healthy instances, unless none are reporting a healthy state. In that case, return all instances.
    ///       This is also called failing open.</p>
    ///             </dd>
    ///          </dl>
    public let healthStatus: HealthStatusFilter?
    /// <p>The maximum number of instances that you want AWS Cloud Map to return in the response to a
    ///     <code>DiscoverInstances</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up
    ///    to 100 instances.</p>
    public let maxResults: Int?
    /// <p>The <code>HttpName</code> name of the namespace. It's found in the <code>HttpProperties</code> member of the
    ///     <code>Properties</code> member of the namespace.</p>
    public let namespaceName: String?
    /// <p>Opportunistic filters to scope the results based on custom attributes. If there are instances that match both
    ///    the filters specified in both the <code>QueryParameters</code> parameter and this parameter, all of these instances
    ///    are returned. Otherwise, the filters are ignored, and only instances that match the filters that are specified in the
    ///     <code>QueryParameters</code> parameter are returned.</p>
    public let optionalParameters: [String:String]?
    /// <p>Filters to scope the results based on custom attributes for the instance (for example, <code>{version=v1,
    ///     az=1a}</code>). Only instances that match all the specified key-value pairs are returned.</p>
    public let queryParameters: [String:String]?
    /// <p>The name of the service that you specified when you registered the instance.</p>
    public let serviceName: String?

    public init (
        healthStatus: HealthStatusFilter? = nil,
        maxResults: Int? = nil,
        namespaceName: String? = nil,
        optionalParameters: [String:String]? = nil,
        queryParameters: [String:String]? = nil,
        serviceName: String? = nil
    )
    {
        self.healthStatus = healthStatus
        self.maxResults = maxResults
        self.namespaceName = namespaceName
        self.optionalParameters = optionalParameters
        self.queryParameters = queryParameters
        self.serviceName = serviceName
    }
}
