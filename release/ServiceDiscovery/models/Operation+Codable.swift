// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Operation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createDate = "CreateDate"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case id = "Id"
        case status = "Status"
        case targets = "Targets"
        case type = "Type"
        case updateDate = "UpdateDate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .targets)
            for (dictKey0, operationtargetsmap0) in targets {
                try targetsContainer.encode(operationtargetsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateDate = updateDate {
            try encodeContainer.encode(updateDate.timeIntervalSince1970, forKey: .updateDate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OperationType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OperationStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createDate)
        createDate = createDateDecoded
        let updateDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updateDate)
        updateDate = updateDateDecoded
        let targetsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .targets)
        var targetsDecoded0: [String:String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String:String]()
            for (key0, resourceid0) in targetsContainer {
                targetsDecoded0?[key0] = resourceid0
            }
        }
        targets = targetsDecoded0
    }
}
