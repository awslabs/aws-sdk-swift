// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNamespacesInputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
    public let filters: [NamespaceFilter]?
}

extension ListNamespacesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([NamespaceFilter].self, forKey: .filters)
        var filtersDecoded0:[NamespaceFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [NamespaceFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
    }
}
