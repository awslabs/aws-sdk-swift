// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNamespacesOutputBody: Equatable {
    public let namespaces: [NamespaceSummary]?
    public let nextToken: String?
}

extension ListNamespacesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case namespaces = "Namespaces"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespacesContainer = try containerValues.decodeIfPresent([NamespaceSummary].self, forKey: .namespaces)
        var namespacesDecoded0:[NamespaceSummary]? = nil
        if let namespacesContainer = namespacesContainer {
            namespacesDecoded0 = [NamespaceSummary]()
            for structure0 in namespacesContainer {
                namespacesDecoded0?.append(structure0)
            }
        }
        namespaces = namespacesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
