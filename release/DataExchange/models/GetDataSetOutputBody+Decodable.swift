// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDataSetOutputBody: Equatable {
    public let arn: String?
    public let assetType: AssetType?
    public let createdAt: Date?
    public let description: String?
    public let id: String?
    public let name: String?
    public let origin: Origin?
    public let originDetails: OriginDetails?
    public let sourceId: String?
    public let tags: [String:String]?
    public let updatedAt: Date?
}

extension GetDataSetOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case assetType = "AssetType"
        case createdAt = "CreatedAt"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case origin = "Origin"
        case originDetails = "OriginDetails"
        case sourceId = "SourceId"
        case tags = "Tags"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let assetTypeDecoded = try containerValues.decodeIfPresent(AssetType.self, forKey: .assetType)
        assetType = assetTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let originDecoded = try containerValues.decodeIfPresent(Origin.self, forKey: .origin)
        origin = originDecoded
        let originDetailsDecoded = try containerValues.decodeIfPresent(OriginDetails.self, forKey: .originDetails)
        originDetails = originDetailsDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
