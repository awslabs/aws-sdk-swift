// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum `Type` {
    case exportAssetsToS3
    case exportAssetToSignedUrl
    case exportRevisionsToS3
    case importAssetsFromS3
    case importAssetFromSignedUrl
    case sdkUnknown(String)
}

extension `Type` : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [`Type`] {
        return [
            .exportAssetsToS3,
            .exportAssetToSignedUrl,
            .exportRevisionsToS3,
            .importAssetsFromS3,
            .importAssetFromSignedUrl,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exportAssetsToS3: return "EXPORT_ASSETS_TO_S3"
        case .exportAssetToSignedUrl: return "EXPORT_ASSET_TO_SIGNED_URL"
        case .exportRevisionsToS3: return "EXPORT_REVISIONS_TO_S3"
        case .importAssetsFromS3: return "IMPORT_ASSETS_FROM_S3"
        case .importAssetFromSignedUrl: return "IMPORT_ASSET_FROM_SIGNED_URL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = `Type`(rawValue: rawValue) ?? `Type`.sdkUnknown(rawValue)
    }
}
