// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Code {
    case accessDeniedException
    case internalServerException
    case malwareDetected
    case malwareScanEncryptedFile
    case resourceNotFoundException
    case serviceQuotaExceededException
    case validationException
    case sdkUnknown(String)
}

extension Code : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Code] {
        return [
            .accessDeniedException,
            .internalServerException,
            .malwareDetected,
            .malwareScanEncryptedFile,
            .resourceNotFoundException,
            .serviceQuotaExceededException,
            .validationException,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDeniedException: return "ACCESS_DENIED_EXCEPTION"
        case .internalServerException: return "INTERNAL_SERVER_EXCEPTION"
        case .malwareDetected: return "MALWARE_DETECTED"
        case .malwareScanEncryptedFile: return "MALWARE_SCAN_ENCRYPTED_FILE"
        case .resourceNotFoundException: return "RESOURCE_NOT_FOUND_EXCEPTION"
        case .serviceQuotaExceededException: return "SERVICE_QUOTA_EXCEEDED_EXCEPTION"
        case .validationException: return "VALIDATION_EXCEPTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Code(rawValue: rawValue) ?? Code.sdkUnknown(rawValue)
    }
}
