// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeObjectsInputBody: Equatable {
    public let pipelineId: String?
    public let objectIds: [String]?
    public let evaluateExpressions: Bool
    public let marker: String?
}

extension DescribeObjectsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case evaluateExpressions
        case marker
        case objectIds
        case pipelineId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let objectIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .objectIds)
        var objectIdsDecoded0:[String]? = nil
        if let objectIdsContainer = objectIdsContainer {
            objectIdsDecoded0 = [String]()
            for string0 in objectIdsContainer {
                objectIdsDecoded0?.append(string0)
            }
        }
        objectIds = objectIdsDecoded0
        let evaluateExpressionsDecoded = try containerValues.decode(Bool.self, forKey: .evaluateExpressions)
        evaluateExpressions = evaluateExpressionsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
