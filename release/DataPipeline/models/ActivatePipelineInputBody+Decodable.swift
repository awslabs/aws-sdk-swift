// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ActivatePipelineInputBody: Equatable {
    public let pipelineId: String?
    public let parameterValues: [ParameterValue]?
    public let startTimestamp: Date?
}

extension ActivatePipelineInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case parameterValues
        case pipelineId
        case startTimestamp
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let parameterValuesContainer = try containerValues.decodeIfPresent([ParameterValue].self, forKey: .parameterValues)
        var parameterValuesDecoded0:[ParameterValue]? = nil
        if let parameterValuesContainer = parameterValuesContainer {
            parameterValuesDecoded0 = [ParameterValue]()
            for structure0 in parameterValuesContainer {
                parameterValuesDecoded0?.append(structure0)
            }
        }
        parameterValues = parameterValuesDecoded0
        let startTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
    }
}
