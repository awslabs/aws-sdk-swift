// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineObject: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fields
        case id
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fields)
            for fieldlist0 in fields {
                try fieldsContainer.encode(fieldlist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([Field].self, forKey: .fields)
        var fieldsDecoded0:[Field]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [Field]()
            for structure0 in fieldsContainer {
                fieldsDecoded0?.append(structure0)
            }
        }
        fields = fieldsDecoded0
    }
}
