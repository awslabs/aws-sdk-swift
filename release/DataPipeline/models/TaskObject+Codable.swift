// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaskObject: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attemptId
        case objects
        case pipelineId
        case taskId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attemptId = attemptId {
            try encodeContainer.encode(attemptId, forKey: .attemptId)
        }
        if let objects = objects {
            var objectsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .objects)
            for (dictKey0, pipelineobjectmap0) in objects {
                try objectsContainer.encode(pipelineobjectmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let pipelineIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let attemptIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attemptId)
        attemptId = attemptIdDecoded
        let objectsContainer = try containerValues.decodeIfPresent([String:PipelineObject].self, forKey: .objects)
        var objectsDecoded0: [String:PipelineObject]? = nil
        if let objectsContainer = objectsContainer {
            objectsDecoded0 = [String:PipelineObject]()
            for (key0, pipelineobject0) in objectsContainer {
                objectsDecoded0?[key0] = pipelineobject0
            }
        }
        objects = objectsDecoded0
    }
}
