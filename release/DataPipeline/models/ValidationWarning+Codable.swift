// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValidationWarning: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id
        case warnings
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let warnings = warnings {
            var warningsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .warnings)
            for validationmessages0 in warnings {
                try warningsContainer.encode(validationmessages0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let warningsContainer = try containerValues.decodeIfPresent([String].self, forKey: .warnings)
        var warningsDecoded0:[String]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [String]()
            for string0 in warningsContainer {
                warningsDecoded0?.append(string0)
            }
        }
        warnings = warningsDecoded0
    }
}
