// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValidationError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errors
        case id
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errors = errors {
            var errorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errors)
            for validationmessages0 in errors {
                try errorsContainer.encode(validationmessages0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let errorsContainer = try containerValues.decodeIfPresent([String].self, forKey: .errors)
        var errorsDecoded0:[String]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [String]()
            for string0 in errorsContainer {
                errorsDecoded0?.append(string0)
            }
        }
        errors = errorsDecoded0
    }
}
