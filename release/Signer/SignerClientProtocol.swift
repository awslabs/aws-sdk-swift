// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS Signer is a fully managed code signing service to help you ensure the trust and
/// 			integrity of your code. </p>
/// 		       <p>AWS Signer supports the following applications:</p>
///
/// 		       <p>With <i>code signing for AWS Lambda</i>, you can sign AWS Lambda
/// 			deployment packages. Integrated support is provided for Amazon S3, Amazon CloudWatch,
/// 			and AWS CloudTrail. In order to sign code, you create a signing profile and then use
/// 			Signer to sign Lambda zip files in S3. </p>
/// 		
/// 		       <p>With <i>code signing for IoT</i>, you can sign code for any IoT device that is
/// 			supported by AWS. IoT code signing is available for <a href="http://docs.aws.amazon.com/freertos/latest/userguide/">Amazon FreeRTOS</a> and <a href="http://docs.aws.amazon.com/iot/latest/developerguide/">AWS IoT Device Management</a>, and is
/// 			integrated with <a href="http://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager (ACM)</a>. In order to sign
/// 			code, you import a third-party code signing certificate using ACM, and use that to
/// 			sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p>
/// 		       <p>For more information about AWS Signer, see the <a href="http://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html">AWS Signer Developer Guide</a>.</p>
/// 		
/// 		       <p></p>
public protocol SignerClientProtocol {
    /// <p>Adds cross-account permissions to a signing profile.</p>
    func addProfilePermission(input: AddProfilePermissionInput, completion: @escaping (SdkResult<AddProfilePermissionOutputResponse, AddProfilePermissionOutputError>) -> Void)
    /// <p>Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>.
    /// 			A canceled profile is still viewable with the <code>ListSigningProfiles</code>
    /// 			operation, but it cannot perform new signing jobs, and is deleted two years after
    /// 			cancelation.</p>
    func cancelSigningProfile(input: CancelSigningProfileInput, completion: @escaping (SdkResult<CancelSigningProfileOutputResponse, CancelSigningProfileOutputError>) -> Void)
    /// <p>Returns information about a specific code signing job. You specify the job by using
    /// 			the <code>jobId</code> value that is returned by the <a>StartSigningJob</a>
    /// 			operation. </p>
    func describeSigningJob(input: DescribeSigningJobInput, completion: @escaping (SdkResult<DescribeSigningJobOutputResponse, DescribeSigningJobOutputError>) -> Void)
    /// <p>Returns information on a specific signing platform.</p>
    func getSigningPlatform(input: GetSigningPlatformInput, completion: @escaping (SdkResult<GetSigningPlatformOutputResponse, GetSigningPlatformOutputError>) -> Void)
    /// <p>Returns information on a specific signing profile.</p>
    func getSigningProfile(input: GetSigningProfileInput, completion: @escaping (SdkResult<GetSigningProfileOutputResponse, GetSigningProfileOutputError>) -> Void)
    /// <p>Lists the cross-account permissions associated with a signing profile.</p>
    func listProfilePermissions(input: ListProfilePermissionsInput, completion: @escaping (SdkResult<ListProfilePermissionsOutputResponse, ListProfilePermissionsOutputError>) -> Void)
    /// <p>Lists all your signing jobs. You can use the <code>maxResults</code> parameter to
    /// 			limit the number of signing jobs that are returned in the response. If additional jobs
    /// 			remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in
    /// 			subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can
    /// 			continue calling <code>ListSigningJobs</code> with your <code>maxResults</code>
    /// 			parameter and with new values that code signing returns in the <code>nextToken</code>
    /// 			parameter until all of your signing jobs have been returned. </p>
    func listSigningJobs(input: ListSigningJobsInput, completion: @escaping (SdkResult<ListSigningJobsOutputResponse, ListSigningJobsOutputError>) -> Void)
    /// <p>Lists all signing platforms available in code signing that match the request parameters. If
    /// 			additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use
    /// 			this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining
    /// 			values. You can continue calling <code>ListSigningJobs</code> with your
    /// 				<code>maxResults</code> parameter and with new values that code signing returns in the
    /// 				<code>nextToken</code> parameter until all of your signing jobs have been
    /// 			returned.</p>
    func listSigningPlatforms(input: ListSigningPlatformsInput, completion: @escaping (SdkResult<ListSigningPlatformsOutputResponse, ListSigningPlatformsOutputError>) -> Void)
    /// <p>Lists all available signing profiles in your AWS account. Returns only profiles with
    /// 			an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is
    /// 			set to <code>true</code>. If additional jobs remain to be listed, code signing returns a
    /// 				<code>nextToken</code> value. Use this value in subsequent calls to
    /// 				<code>ListSigningJobs</code> to fetch the remaining values. You can continue calling
    /// 				<code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with
    /// 			new values that code signing returns in the <code>nextToken</code> parameter until all of your
    /// 			signing jobs have been returned.</p>
    func listSigningProfiles(input: ListSigningProfilesInput, completion: @escaping (SdkResult<ListSigningProfilesOutputResponse, ListSigningProfilesOutputError>) -> Void)
    /// <p>Returns a list of the tags associated with a signing profile resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Creates a signing profile. A signing profile is a code signing template that can be used to
    /// 			carry out a pre-defined signing job. For more information, see <a href="http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html">http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html</a>
    ///          </p>
    func putSigningProfile(input: PutSigningProfileInput, completion: @escaping (SdkResult<PutSigningProfileOutputResponse, PutSigningProfileOutputError>) -> Void)
    /// <p>Removes cross-account permissions from a signing profile.</p>
    func removeProfilePermission(input: RemoveProfilePermissionInput, completion: @escaping (SdkResult<RemoveProfilePermissionOutputResponse, RemoveProfilePermissionOutputError>) -> Void)
    /// <p>Changes the state of a signing job to REVOKED. This indicates that the signature is no
    /// 			longer valid.</p>
    func revokeSignature(input: RevokeSignatureInput, completion: @escaping (SdkResult<RevokeSignatureOutputResponse, RevokeSignatureOutputError>) -> Void)
    /// <p>Changes the state of a signing profile to REVOKED. This indicates that signatures
    /// 			generated using the signing profile after an effective start date are no longer
    /// 			valid.</p>
    func revokeSigningProfile(input: RevokeSigningProfileInput, completion: @escaping (SdkResult<RevokeSigningProfileOutputResponse, RevokeSigningProfileOutputError>) -> Void)
    /// <p>Initiates a signing job to be performed on the code provided. Signing jobs are
    /// 			viewable by the <code>ListSigningJobs</code> operation for two years after they are
    /// 			performed. Note the following requirements: </p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p> You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Create a Bucket</a> in the
    /// 						<i>Amazon S3 Getting Started Guide</i>. </p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>Your S3 source bucket must be version enabled.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>You must create an S3 destination bucket. Code signing uses your S3 destination
    /// 					bucket to write your signed code.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>You specify the name of the source and destination buckets when calling the
    /// 						<code>StartSigningJob</code> operation.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>You must also specify a request token that identifies your request to
    /// 					code signing.</p>
    /// 			         </li>
    ///          </ul>
    /// 		       <p>You can call the <a>DescribeSigningJob</a> and the <a>ListSigningJobs</a> actions after you call
    /// 			<code>StartSigningJob</code>.</p>
    /// 		       <p>For a Java example that shows how to use this action, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/">http://docs.aws.amazon.com/acm/latest/userguide/</a>
    ///          </p>
    func startSigningJob(input: StartSigningJobInput, completion: @escaping (SdkResult<StartSigningJobOutputResponse, StartSigningJobOutputError>) -> Void)
    /// <p>Adds one or more tags to a signing profile. Tags are labels that you can use to
    /// 			identify and organize your AWS resources. Each tag consists of a key and an optional
    /// 			value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify
    /// 			the tag, use a key-value pair.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes one or more tags from a signing profile. To remove the tags, specify a list of
    /// 			tag keys.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
}
