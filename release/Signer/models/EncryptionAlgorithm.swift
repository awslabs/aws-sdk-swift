// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EncryptionAlgorithm {
    case ecdsa
    case rsa
    case sdkUnknown(String)
}

extension EncryptionAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EncryptionAlgorithm] {
        return [
            .ecdsa,
            .rsa,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ecdsa: return "ECDSA"
        case .rsa: return "RSA"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EncryptionAlgorithm(rawValue: rawValue) ?? EncryptionAlgorithm.sdkUnknown(rawValue)
    }
}
