// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SigningImageFormat: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultFormat
        case supportedFormats
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultFormat = defaultFormat {
            try encodeContainer.encode(defaultFormat.rawValue, forKey: .defaultFormat)
        }
        if let supportedFormats = supportedFormats {
            var supportedFormatsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedFormats)
            for imageformats0 in supportedFormats {
                try supportedFormatsContainer.encode(imageformats0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let supportedFormatsContainer = try containerValues.decodeIfPresent([ImageFormat].self, forKey: .supportedFormats)
        var supportedFormatsDecoded0:[ImageFormat]? = nil
        if let supportedFormatsContainer = supportedFormatsContainer {
            supportedFormatsDecoded0 = [ImageFormat]()
            for string0 in supportedFormatsContainer {
                supportedFormatsDecoded0?.append(string0)
            }
        }
        supportedFormats = supportedFormatsDecoded0
        let defaultFormatDecoded = try containerValues.decodeIfPresent(ImageFormat.self, forKey: .defaultFormat)
        defaultFormat = defaultFormatDecoded
    }
}
