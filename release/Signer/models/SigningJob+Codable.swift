// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SigningJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case isRevoked
        case jobId
        case jobInvoker
        case jobOwner
        case platformDisplayName
        case platformId
        case profileName
        case profileVersion
        case signatureExpiresAt
        case signedObject
        case signingMaterial
        case source
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if isRevoked != false {
            try encodeContainer.encode(isRevoked, forKey: .isRevoked)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobInvoker = jobInvoker {
            try encodeContainer.encode(jobInvoker, forKey: .jobInvoker)
        }
        if let jobOwner = jobOwner {
            try encodeContainer.encode(jobOwner, forKey: .jobOwner)
        }
        if let platformDisplayName = platformDisplayName {
            try encodeContainer.encode(platformDisplayName, forKey: .platformDisplayName)
        }
        if let platformId = platformId {
            try encodeContainer.encode(platformId, forKey: .platformId)
        }
        if let profileName = profileName {
            try encodeContainer.encode(profileName, forKey: .profileName)
        }
        if let profileVersion = profileVersion {
            try encodeContainer.encode(profileVersion, forKey: .profileVersion)
        }
        if let signatureExpiresAt = signatureExpiresAt {
            try encodeContainer.encode(signatureExpiresAt.timeIntervalSince1970, forKey: .signatureExpiresAt)
        }
        if let signedObject = signedObject {
            try encodeContainer.encode(signedObject, forKey: .signedObject)
        }
        if let signingMaterial = signingMaterial {
            try encodeContainer.encode(signingMaterial, forKey: .signingMaterial)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Source.self, forKey: .source)
        source = sourceDecoded
        let signedObjectDecoded = try containerValues.decodeIfPresent(SignedObject.self, forKey: .signedObject)
        signedObject = signedObjectDecoded
        let signingMaterialDecoded = try containerValues.decodeIfPresent(SigningMaterial.self, forKey: .signingMaterial)
        signingMaterial = signingMaterialDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SigningStatus.self, forKey: .status)
        status = statusDecoded
        let isRevokedDecoded = try containerValues.decode(Bool.self, forKey: .isRevoked)
        isRevoked = isRevokedDecoded
        let profileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let profileVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileVersion)
        profileVersion = profileVersionDecoded
        let platformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let platformDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformDisplayName)
        platformDisplayName = platformDisplayNameDecoded
        let signatureExpiresAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .signatureExpiresAt)
        signatureExpiresAt = signatureExpiresAtDecoded
        let jobOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobOwner)
        jobOwner = jobOwnerDecoded
        let jobInvokerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobInvoker)
        jobInvoker = jobInvokerDecoded
    }
}
