// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSigningJobOutputBody: Equatable {
    public let jobId: String?
    public let source: Source?
    public let signingMaterial: SigningMaterial?
    public let platformId: String?
    public let platformDisplayName: String?
    public let profileName: String?
    public let profileVersion: String?
    public let overrides: SigningPlatformOverrides?
    public let signingParameters: [String:String]?
    public let createdAt: Date?
    public let completedAt: Date?
    public let signatureExpiresAt: Date?
    public let requestedBy: String?
    public let status: SigningStatus?
    public let statusReason: String?
    public let revocationRecord: SigningJobRevocationRecord?
    public let signedObject: SignedObject?
    public let jobOwner: String?
    public let jobInvoker: String?
}

extension DescribeSigningJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case completedAt
        case createdAt
        case jobId
        case jobInvoker
        case jobOwner
        case overrides
        case platformDisplayName
        case platformId
        case profileName
        case profileVersion
        case requestedBy
        case revocationRecord
        case signatureExpiresAt
        case signedObject
        case signingMaterial
        case signingParameters
        case source
        case status
        case statusReason
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Source.self, forKey: .source)
        source = sourceDecoded
        let signingMaterialDecoded = try containerValues.decodeIfPresent(SigningMaterial.self, forKey: .signingMaterial)
        signingMaterial = signingMaterialDecoded
        let platformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let platformDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformDisplayName)
        platformDisplayName = platformDisplayNameDecoded
        let profileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let profileVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileVersion)
        profileVersion = profileVersionDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(SigningPlatformOverrides.self, forKey: .overrides)
        overrides = overridesDecoded
        let signingParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .signingParameters)
        var signingParametersDecoded0: [String:String]? = nil
        if let signingParametersContainer = signingParametersContainer {
            signingParametersDecoded0 = [String:String]()
            for (key0, signingparametervalue0) in signingParametersContainer {
                signingParametersDecoded0?[key0] = signingparametervalue0
            }
        }
        signingParameters = signingParametersDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let completedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completedAt)
        completedAt = completedAtDecoded
        let signatureExpiresAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .signatureExpiresAt)
        signatureExpiresAt = signatureExpiresAtDecoded
        let requestedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestedBy)
        requestedBy = requestedByDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SigningStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let revocationRecordDecoded = try containerValues.decodeIfPresent(SigningJobRevocationRecord.self, forKey: .revocationRecord)
        revocationRecord = revocationRecordDecoded
        let signedObjectDecoded = try containerValues.decodeIfPresent(SignedObject.self, forKey: .signedObject)
        signedObject = signedObjectDecoded
        let jobOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobOwner)
        jobOwner = jobOwnerDecoded
        let jobInvokerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobInvoker)
        jobInvoker = jobInvokerDecoded
    }
}
