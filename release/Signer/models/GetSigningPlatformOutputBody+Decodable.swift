// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSigningPlatformOutputBody: Equatable {
    public let platformId: String?
    public let displayName: String?
    public let partner: String?
    public let target: String?
    public let category: Category?
    public let signingConfiguration: SigningConfiguration?
    public let signingImageFormat: SigningImageFormat?
    public let maxSizeInMB: Int
    public let revocationSupported: Bool
}

extension GetSigningPlatformOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case category
        case displayName
        case maxSizeInMB
        case partner
        case platformId
        case revocationSupported
        case signingConfiguration
        case signingImageFormat
        case target
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let partnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partner)
        partner = partnerDecoded
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(Category.self, forKey: .category)
        category = categoryDecoded
        let signingConfigurationDecoded = try containerValues.decodeIfPresent(SigningConfiguration.self, forKey: .signingConfiguration)
        signingConfiguration = signingConfigurationDecoded
        let signingImageFormatDecoded = try containerValues.decodeIfPresent(SigningImageFormat.self, forKey: .signingImageFormat)
        signingImageFormat = signingImageFormatDecoded
        let maxSizeInMBDecoded = try containerValues.decode(Int.self, forKey: .maxSizeInMB)
        maxSizeInMB = maxSizeInMBDecoded
        let revocationSupportedDecoded = try containerValues.decode(Bool.self, forKey: .revocationSupported)
        revocationSupported = revocationSupportedDecoded
    }
}
