// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetSigningPlatformOutput: Equatable {
    /// <p>The category type of the target signing platform.</p>
    public let category: Category?
    /// <p>The display name of the target signing platform.</p>
    public let displayName: String?
    /// <p>The maximum size (in MB) of the payload that can be signed by the target
    /// 			platform.</p>
    public let maxSizeInMB: Int
    /// <p>A list of partner entities that use the target signing platform.</p>
    public let partner: String?
    /// <p>The ID of the target signing platform.</p>
    public let platformId: String?
    /// <p>A flag indicating whether signatures generated for the signing platform can be
    /// 			revoked.</p>
    public let revocationSupported: Bool
    /// <p>A list of configurations applied to the target platform at signing.</p>
    public let signingConfiguration: SigningConfiguration?
    /// <p>The format of the target platform's signing image.</p>
    public let signingImageFormat: SigningImageFormat?
    /// <p>The validation template that is used by the target signing platform.</p>
    public let target: String?

    public init (
        category: Category? = nil,
        displayName: String? = nil,
        maxSizeInMB: Int = 0,
        partner: String? = nil,
        platformId: String? = nil,
        revocationSupported: Bool = false,
        signingConfiguration: SigningConfiguration? = nil,
        signingImageFormat: SigningImageFormat? = nil,
        target: String? = nil
    )
    {
        self.category = category
        self.displayName = displayName
        self.maxSizeInMB = maxSizeInMB
        self.partner = partner
        self.platformId = platformId
        self.revocationSupported = revocationSupported
        self.signingConfiguration = signingConfiguration
        self.signingImageFormat = signingImageFormat
        self.target = target
    }
}
