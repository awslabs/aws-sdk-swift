// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSigningProfileOutputBody: Equatable {
    public let profileName: String?
    public let profileVersion: String?
    public let profileVersionArn: String?
    public let revocationRecord: SigningProfileRevocationRecord?
    public let signingMaterial: SigningMaterial?
    public let platformId: String?
    public let platformDisplayName: String?
    public let signatureValidityPeriod: SignatureValidityPeriod?
    public let overrides: SigningPlatformOverrides?
    public let signingParameters: [String:String]?
    public let status: SigningProfileStatus?
    public let statusReason: String?
    public let arn: String?
    public let tags: [String:String]?
}

extension GetSigningProfileOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case overrides
        case platformDisplayName
        case platformId
        case profileName
        case profileVersion
        case profileVersionArn
        case revocationRecord
        case signatureValidityPeriod
        case signingMaterial
        case signingParameters
        case status
        case statusReason
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let profileVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileVersion)
        profileVersion = profileVersionDecoded
        let profileVersionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileVersionArn)
        profileVersionArn = profileVersionArnDecoded
        let revocationRecordDecoded = try containerValues.decodeIfPresent(SigningProfileRevocationRecord.self, forKey: .revocationRecord)
        revocationRecord = revocationRecordDecoded
        let signingMaterialDecoded = try containerValues.decodeIfPresent(SigningMaterial.self, forKey: .signingMaterial)
        signingMaterial = signingMaterialDecoded
        let platformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let platformDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformDisplayName)
        platformDisplayName = platformDisplayNameDecoded
        let signatureValidityPeriodDecoded = try containerValues.decodeIfPresent(SignatureValidityPeriod.self, forKey: .signatureValidityPeriod)
        signatureValidityPeriod = signatureValidityPeriodDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(SigningPlatformOverrides.self, forKey: .overrides)
        overrides = overridesDecoded
        let signingParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .signingParameters)
        var signingParametersDecoded0: [String:String]? = nil
        if let signingParametersContainer = signingParametersContainer {
            signingParametersDecoded0 = [String:String]()
            for (key0, signingparametervalue0) in signingParametersContainer {
                signingParametersDecoded0?[key0] = signingparametervalue0
            }
        }
        signingParameters = signingParametersDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(SigningProfileStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
