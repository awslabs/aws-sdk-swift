// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListSigningJobsInput: Equatable {
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    public let isRevoked: Bool
    /// <p>Filters results to return only signing jobs initiated by a specified IAM
    /// 			entity.</p>
    public let jobInvoker: String?
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter
    /// 			when paginating results. If additional items exist beyond the number you specify, the
    /// 				<code>nextToken</code> element is set in the response. Use the
    /// 				<code>nextToken</code> value in a subsequent request to retrieve additional items.
    /// 		</p>
    public let maxResults: Int?
    /// <p>String for specifying the next set of paginated results to return. After you receive a
    /// 			response with truncated results, use this parameter in a subsequent request. Set it to
    /// 			the value of <code>nextToken</code> from the response that you just received.</p>
    public let nextToken: String?
    /// <p>The ID of microcontroller platform that you specified for the distribution of your
    /// 			code image.</p>
    public let platformId: String?
    /// <p>The IAM principal that requested the signing job.</p>
    public let requestedBy: String?
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified
    /// 			timestamp.</p>
    public let signatureExpiresAfter: Date?
    /// <p>Filters results to return only signing jobs with signatures expiring before a
    /// 			specified timestamp.</p>
    public let signatureExpiresBefore: Date?
    /// <p>A status value with which to filter your results.</p>
    public let status: SigningStatus?

    public init (
        isRevoked: Bool = false,
        jobInvoker: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        platformId: String? = nil,
        requestedBy: String? = nil,
        signatureExpiresAfter: Date? = nil,
        signatureExpiresBefore: Date? = nil,
        status: SigningStatus? = nil
    )
    {
        self.isRevoked = isRevoked
        self.jobInvoker = jobInvoker
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.platformId = platformId
        self.requestedBy = requestedBy
        self.signatureExpiresAfter = signatureExpiresAfter
        self.signatureExpiresBefore = signatureExpiresBefore
        self.status = status
    }
}
