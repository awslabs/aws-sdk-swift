// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SigningProfile: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case platformDisplayName
        case platformId
        case profileName
        case profileVersion
        case profileVersionArn
        case signatureValidityPeriod
        case signingMaterial
        case signingParameters
        case status
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let platformDisplayName = platformDisplayName {
            try encodeContainer.encode(platformDisplayName, forKey: .platformDisplayName)
        }
        if let platformId = platformId {
            try encodeContainer.encode(platformId, forKey: .platformId)
        }
        if let profileName = profileName {
            try encodeContainer.encode(profileName, forKey: .profileName)
        }
        if let profileVersion = profileVersion {
            try encodeContainer.encode(profileVersion, forKey: .profileVersion)
        }
        if let profileVersionArn = profileVersionArn {
            try encodeContainer.encode(profileVersionArn, forKey: .profileVersionArn)
        }
        if let signatureValidityPeriod = signatureValidityPeriod {
            try encodeContainer.encode(signatureValidityPeriod, forKey: .signatureValidityPeriod)
        }
        if let signingMaterial = signingMaterial {
            try encodeContainer.encode(signingMaterial, forKey: .signingMaterial)
        }
        if let signingParameters = signingParameters {
            var signingParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .signingParameters)
            for (dictKey0, signingparameters0) in signingParameters {
                try signingParametersContainer.encode(signingparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let profileVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileVersion)
        profileVersion = profileVersionDecoded
        let profileVersionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profileVersionArn)
        profileVersionArn = profileVersionArnDecoded
        let signingMaterialDecoded = try containerValues.decodeIfPresent(SigningMaterial.self, forKey: .signingMaterial)
        signingMaterial = signingMaterialDecoded
        let signatureValidityPeriodDecoded = try containerValues.decodeIfPresent(SignatureValidityPeriod.self, forKey: .signatureValidityPeriod)
        signatureValidityPeriod = signatureValidityPeriodDecoded
        let platformIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let platformDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformDisplayName)
        platformDisplayName = platformDisplayNameDecoded
        let signingParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .signingParameters)
        var signingParametersDecoded0: [String:String]? = nil
        if let signingParametersContainer = signingParametersContainer {
            signingParametersDecoded0 = [String:String]()
            for (key0, signingparametervalue0) in signingParametersContainer {
                signingParametersDecoded0?[key0] = signingparametervalue0
            }
        }
        signingParameters = signingParametersDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(SigningProfileStatus.self, forKey: .status)
        status = statusDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
