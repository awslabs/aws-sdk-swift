// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListSigningJobsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListSigningJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListSigningJobsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListSigningJobsOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        let isRevokedQueryItem = URLQueryItem(name: "isRevoked".urlPercentEncoding(), value: String(input.operationInput.isRevoked).urlPercentEncoding())
        input.builder.withQueryItem(isRevokedQueryItem)
        if let requestedBy = input.operationInput.requestedBy {
            let requestedByQueryItem = URLQueryItem(name: "requestedBy".urlPercentEncoding(), value: String(requestedBy).urlPercentEncoding())
            input.builder.withQueryItem(requestedByQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let signatureExpiresBefore = input.operationInput.signatureExpiresBefore {
            let signatureExpiresBeforeQueryItem = URLQueryItem(name: "signatureExpiresBefore".urlPercentEncoding(), value: String(signatureExpiresBefore.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(signatureExpiresBeforeQueryItem)
        }
        if let jobInvoker = input.operationInput.jobInvoker {
            let jobInvokerQueryItem = URLQueryItem(name: "jobInvoker".urlPercentEncoding(), value: String(jobInvoker).urlPercentEncoding())
            input.builder.withQueryItem(jobInvokerQueryItem)
        }
        if let platformId = input.operationInput.platformId {
            let platformIdQueryItem = URLQueryItem(name: "platformId".urlPercentEncoding(), value: String(platformId).urlPercentEncoding())
            input.builder.withQueryItem(platformIdQueryItem)
        }
        if let signatureExpiresAfter = input.operationInput.signatureExpiresAfter {
            let signatureExpiresAfterQueryItem = URLQueryItem(name: "signatureExpiresAfter".urlPercentEncoding(), value: String(signatureExpiresAfter.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(signatureExpiresAfterQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = URLQueryItem(name: "status".urlPercentEncoding(), value: String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListSigningJobsInput>
    public typealias MOutput = OperationOutput<ListSigningJobsOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<ListSigningJobsOutputError>
}
