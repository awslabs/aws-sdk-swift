// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserPendingChanges: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case consoleAccess = "consoleAccess"
        case groups = "groups"
        case pendingChange = "pendingChange"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if consoleAccess != false {
            try encodeContainer.encode(consoleAccess, forKey: .consoleAccess)
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for __listof__string0 in groups {
                try groupsContainer.encode(__listof__string0)
            }
        }
        if let pendingChange = pendingChange {
            try encodeContainer.encode(pendingChange.rawValue, forKey: .pendingChange)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consoleAccessDecoded = try containerValues.decode(Bool.self, forKey: .consoleAccess)
        consoleAccess = consoleAccessDecoded
        let groupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .groups)
        var groupsDecoded0:[String]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [String]()
            for string0 in groupsContainer {
                groupsDecoded0?.append(string0)
            }
        }
        groups = groupsDecoded0
        let pendingChangeDecoded = try containerValues.decodeIfPresent(ChangeType.self, forKey: .pendingChange)
        pendingChange = pendingChangeDecoded
    }
}
