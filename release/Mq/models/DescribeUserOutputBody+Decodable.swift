// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeUserOutputBody: Equatable {
    public let brokerId: String?
    public let consoleAccess: Bool
    public let groups: [String]?
    public let pending: UserPendingChanges?
    public let username: String?
}

extension DescribeUserOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case brokerId = "brokerId"
        case consoleAccess = "consoleAccess"
        case groups = "groups"
        case pending = "pending"
        case username = "username"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let consoleAccessDecoded = try containerValues.decode(Bool.self, forKey: .consoleAccess)
        consoleAccess = consoleAccessDecoded
        let groupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .groups)
        var groupsDecoded0:[String]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [String]()
            for string0 in groupsContainer {
                groupsDecoded0?.append(string0)
            }
        }
        groups = groupsDecoded0
        let pendingDecoded = try containerValues.decodeIfPresent(UserPendingChanges.self, forKey: .pending)
        pending = pendingDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
    }
}
