// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateBrokerOutputBody: Equatable {
    public let authenticationStrategy: AuthenticationStrategy?
    public let autoMinorVersionUpgrade: Bool
    public let brokerId: String?
    public let configuration: ConfigurationId?
    public let engineVersion: String?
    public let hostInstanceType: String?
    public let ldapServerMetadata: LdapServerMetadataOutput?
    public let logs: Logs?
    public let securityGroups: [String]?
}

extension UpdateBrokerOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authenticationStrategy = "authenticationStrategy"
        case autoMinorVersionUpgrade = "autoMinorVersionUpgrade"
        case brokerId = "brokerId"
        case configuration = "configuration"
        case engineVersion = "engineVersion"
        case hostInstanceType = "hostInstanceType"
        case ldapServerMetadata = "ldapServerMetadata"
        case logs = "logs"
        case securityGroups = "securityGroups"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationStrategyDecoded = try containerValues.decodeIfPresent(AuthenticationStrategy.self, forKey: .authenticationStrategy)
        authenticationStrategy = authenticationStrategyDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let brokerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(ConfigurationId.self, forKey: .configuration)
        configuration = configurationDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let hostInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostInstanceType)
        hostInstanceType = hostInstanceTypeDecoded
        let ldapServerMetadataDecoded = try containerValues.decodeIfPresent(LdapServerMetadataOutput.self, forKey: .ldapServerMetadata)
        ldapServerMetadata = ldapServerMetadataDecoded
        let logsDecoded = try containerValues.decodeIfPresent(Logs.self, forKey: .logs)
        logs = logsDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                securityGroupsDecoded0?.append(string0)
            }
        }
        securityGroups = securityGroupsDecoded0
    }
}
