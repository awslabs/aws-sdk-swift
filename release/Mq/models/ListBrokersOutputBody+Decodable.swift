// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBrokersOutputBody: Equatable {
    public let brokerSummaries: [BrokerSummary]?
    public let nextToken: String?
}

extension ListBrokersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case brokerSummaries = "brokerSummaries"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerSummariesContainer = try containerValues.decodeIfPresent([BrokerSummary].self, forKey: .brokerSummaries)
        var brokerSummariesDecoded0:[BrokerSummary]? = nil
        if let brokerSummariesContainer = brokerSummariesContainer {
            brokerSummariesDecoded0 = [BrokerSummary]()
            for structure0 in brokerSummariesContainer {
                brokerSummariesDecoded0?.append(structure0)
            }
        }
        brokerSummaries = brokerSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
