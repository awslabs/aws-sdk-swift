// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Configurations: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case current = "current"
        case history = "history"
        case pending = "pending"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let current = current {
            try encodeContainer.encode(current, forKey: .current)
        }
        if let history = history {
            var historyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .history)
            for __listofconfigurationid0 in history {
                try historyContainer.encode(__listofconfigurationid0)
            }
        }
        if let pending = pending {
            try encodeContainer.encode(pending, forKey: .pending)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentDecoded = try containerValues.decodeIfPresent(ConfigurationId.self, forKey: .current)
        current = currentDecoded
        let historyContainer = try containerValues.decodeIfPresent([ConfigurationId].self, forKey: .history)
        var historyDecoded0:[ConfigurationId]? = nil
        if let historyContainer = historyContainer {
            historyDecoded0 = [ConfigurationId]()
            for structure0 in historyContainer {
                historyDecoded0?.append(structure0)
            }
        }
        history = historyDecoded0
        let pendingDecoded = try containerValues.decodeIfPresent(ConfigurationId.self, forKey: .pending)
        pending = pendingDecoded
    }
}
