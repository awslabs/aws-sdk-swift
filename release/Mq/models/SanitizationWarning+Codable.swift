// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SanitizationWarning: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "attributeName"
        case elementName = "elementName"
        case reason = "reason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let elementName = elementName {
            try encodeContainer.encode(elementName, forKey: .elementName)
        }
        if let reason = reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let elementNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elementName)
        elementName = elementNameDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SanitizationWarningReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}
