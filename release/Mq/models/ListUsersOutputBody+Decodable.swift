// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUsersOutputBody: Equatable {
    public let brokerId: String?
    public let maxResults: Int
    public let nextToken: String?
    public let users: [UserSummary]?
}

extension ListUsersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case brokerId = "brokerId"
        case maxResults = "maxResults"
        case nextToken = "nextToken"
        case users = "users"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let usersContainer = try containerValues.decodeIfPresent([UserSummary].self, forKey: .users)
        var usersDecoded0:[UserSummary]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [UserSummary]()
            for structure0 in usersContainer {
                usersDecoded0?.append(structure0)
            }
        }
        users = usersDecoded0
    }
}
