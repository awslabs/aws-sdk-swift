// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BrokerInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case consoleURL = "consoleURL"
        case endpoints = "endpoints"
        case ipAddress = "ipAddress"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consoleURL = consoleURL {
            try encodeContainer.encode(consoleURL, forKey: .consoleURL)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpoints)
            for __listof__string0 in endpoints {
                try endpointsContainer.encode(__listof__string0)
            }
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consoleURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .consoleURL)
        consoleURL = consoleURLDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([String].self, forKey: .endpoints)
        var endpointsDecoded0:[String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [String]()
            for string0 in endpointsContainer {
                endpointsDecoded0?.append(string0)
            }
        }
        endpoints = endpointsDecoded0
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
    }
}
