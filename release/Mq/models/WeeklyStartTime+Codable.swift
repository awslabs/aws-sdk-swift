// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WeeklyStartTime: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dayOfWeek = "dayOfWeek"
        case timeOfDay = "timeOfDay"
        case timeZone = "timeZone"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dayOfWeek = dayOfWeek {
            try encodeContainer.encode(dayOfWeek.rawValue, forKey: .dayOfWeek)
        }
        if let timeOfDay = timeOfDay {
            try encodeContainer.encode(timeOfDay, forKey: .timeOfDay)
        }
        if let timeZone = timeZone {
            try encodeContainer.encode(timeZone, forKey: .timeZone)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dayOfWeekDecoded = try containerValues.decodeIfPresent(DayOfWeek.self, forKey: .dayOfWeek)
        dayOfWeek = dayOfWeekDecoded
        let timeOfDayDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeOfDay)
        timeOfDay = timeOfDayDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}
