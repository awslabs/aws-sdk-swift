// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeBrokerOutputBody: Equatable {
    public let authenticationStrategy: AuthenticationStrategy?
    public let autoMinorVersionUpgrade: Bool
    public let brokerArn: String?
    public let brokerId: String?
    public let brokerInstances: [BrokerInstance]?
    public let brokerName: String?
    public let brokerState: BrokerState?
    public let configurations: Configurations?
    public let created: Date?
    public let deploymentMode: DeploymentMode?
    public let encryptionOptions: EncryptionOptions?
    public let engineType: EngineType?
    public let engineVersion: String?
    public let hostInstanceType: String?
    public let ldapServerMetadata: LdapServerMetadataOutput?
    public let logs: LogsSummary?
    public let maintenanceWindowStartTime: WeeklyStartTime?
    public let pendingAuthenticationStrategy: AuthenticationStrategy?
    public let pendingEngineVersion: String?
    public let pendingHostInstanceType: String?
    public let pendingLdapServerMetadata: LdapServerMetadataOutput?
    public let pendingSecurityGroups: [String]?
    public let publiclyAccessible: Bool
    public let securityGroups: [String]?
    public let storageType: BrokerStorageType?
    public let subnetIds: [String]?
    public let tags: [String:String]?
    public let users: [UserSummary]?
}

extension DescribeBrokerOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authenticationStrategy = "authenticationStrategy"
        case autoMinorVersionUpgrade = "autoMinorVersionUpgrade"
        case brokerArn = "brokerArn"
        case brokerId = "brokerId"
        case brokerInstances = "brokerInstances"
        case brokerName = "brokerName"
        case brokerState = "brokerState"
        case configurations = "configurations"
        case created = "created"
        case deploymentMode = "deploymentMode"
        case encryptionOptions = "encryptionOptions"
        case engineType = "engineType"
        case engineVersion = "engineVersion"
        case hostInstanceType = "hostInstanceType"
        case ldapServerMetadata = "ldapServerMetadata"
        case logs = "logs"
        case maintenanceWindowStartTime = "maintenanceWindowStartTime"
        case pendingAuthenticationStrategy = "pendingAuthenticationStrategy"
        case pendingEngineVersion = "pendingEngineVersion"
        case pendingHostInstanceType = "pendingHostInstanceType"
        case pendingLdapServerMetadata = "pendingLdapServerMetadata"
        case pendingSecurityGroups = "pendingSecurityGroups"
        case publiclyAccessible = "publiclyAccessible"
        case securityGroups = "securityGroups"
        case storageType = "storageType"
        case subnetIds = "subnetIds"
        case tags = "tags"
        case users = "users"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationStrategyDecoded = try containerValues.decodeIfPresent(AuthenticationStrategy.self, forKey: .authenticationStrategy)
        authenticationStrategy = authenticationStrategyDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let brokerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerArn)
        brokerArn = brokerArnDecoded
        let brokerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let brokerInstancesContainer = try containerValues.decodeIfPresent([BrokerInstance].self, forKey: .brokerInstances)
        var brokerInstancesDecoded0:[BrokerInstance]? = nil
        if let brokerInstancesContainer = brokerInstancesContainer {
            brokerInstancesDecoded0 = [BrokerInstance]()
            for structure0 in brokerInstancesContainer {
                brokerInstancesDecoded0?.append(structure0)
            }
        }
        brokerInstances = brokerInstancesDecoded0
        let brokerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerName)
        brokerName = brokerNameDecoded
        let brokerStateDecoded = try containerValues.decodeIfPresent(BrokerState.self, forKey: .brokerState)
        brokerState = brokerStateDecoded
        let configurationsDecoded = try containerValues.decodeIfPresent(Configurations.self, forKey: .configurations)
        configurations = configurationsDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .created)
        created = createdDecoded
        let deploymentModeDecoded = try containerValues.decodeIfPresent(DeploymentMode.self, forKey: .deploymentMode)
        deploymentMode = deploymentModeDecoded
        let encryptionOptionsDecoded = try containerValues.decodeIfPresent(EncryptionOptions.self, forKey: .encryptionOptions)
        encryptionOptions = encryptionOptionsDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let hostInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostInstanceType)
        hostInstanceType = hostInstanceTypeDecoded
        let ldapServerMetadataDecoded = try containerValues.decodeIfPresent(LdapServerMetadataOutput.self, forKey: .ldapServerMetadata)
        ldapServerMetadata = ldapServerMetadataDecoded
        let logsDecoded = try containerValues.decodeIfPresent(LogsSummary.self, forKey: .logs)
        logs = logsDecoded
        let maintenanceWindowStartTimeDecoded = try containerValues.decodeIfPresent(WeeklyStartTime.self, forKey: .maintenanceWindowStartTime)
        maintenanceWindowStartTime = maintenanceWindowStartTimeDecoded
        let pendingAuthenticationStrategyDecoded = try containerValues.decodeIfPresent(AuthenticationStrategy.self, forKey: .pendingAuthenticationStrategy)
        pendingAuthenticationStrategy = pendingAuthenticationStrategyDecoded
        let pendingEngineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pendingEngineVersion)
        pendingEngineVersion = pendingEngineVersionDecoded
        let pendingHostInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pendingHostInstanceType)
        pendingHostInstanceType = pendingHostInstanceTypeDecoded
        let pendingLdapServerMetadataDecoded = try containerValues.decodeIfPresent(LdapServerMetadataOutput.self, forKey: .pendingLdapServerMetadata)
        pendingLdapServerMetadata = pendingLdapServerMetadataDecoded
        let pendingSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .pendingSecurityGroups)
        var pendingSecurityGroupsDecoded0:[String]? = nil
        if let pendingSecurityGroupsContainer = pendingSecurityGroupsContainer {
            pendingSecurityGroupsDecoded0 = [String]()
            for string0 in pendingSecurityGroupsContainer {
                pendingSecurityGroupsDecoded0?.append(string0)
            }
        }
        pendingSecurityGroups = pendingSecurityGroupsDecoded0
        let publiclyAccessibleDecoded = try containerValues.decode(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                securityGroupsDecoded0?.append(string0)
            }
        }
        securityGroups = securityGroupsDecoded0
        let storageTypeDecoded = try containerValues.decodeIfPresent(BrokerStorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let usersContainer = try containerValues.decodeIfPresent([UserSummary].self, forKey: .users)
        var usersDecoded0:[UserSummary]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [UserSummary]()
            for structure0 in usersContainer {
                usersDecoded0?.append(structure0)
            }
        }
        users = usersDecoded0
    }
}
