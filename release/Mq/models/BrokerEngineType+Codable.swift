// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BrokerEngineType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case engineType = "engineType"
        case engineVersions = "engineVersions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engineType = engineType {
            try encodeContainer.encode(engineType.rawValue, forKey: .engineType)
        }
        if let engineVersions = engineVersions {
            var engineVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .engineVersions)
            for __listofengineversion0 in engineVersions {
                try engineVersionsContainer.encode(__listofengineversion0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineTypeDecoded = try containerValues.decodeIfPresent(EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let engineVersionsContainer = try containerValues.decodeIfPresent([EngineVersion].self, forKey: .engineVersions)
        var engineVersionsDecoded0:[EngineVersion]? = nil
        if let engineVersionsContainer = engineVersionsContainer {
            engineVersionsDecoded0 = [EngineVersion]()
            for structure0 in engineVersionsContainer {
                engineVersionsDecoded0?.append(structure0)
            }
        }
        engineVersions = engineVersionsDecoded0
    }
}
