// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LdapServerMetadataInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hosts = "hosts"
        case roleBase = "roleBase"
        case roleName = "roleName"
        case roleSearchMatching = "roleSearchMatching"
        case roleSearchSubtree = "roleSearchSubtree"
        case serviceAccountPassword = "serviceAccountPassword"
        case serviceAccountUsername = "serviceAccountUsername"
        case userBase = "userBase"
        case userRoleName = "userRoleName"
        case userSearchMatching = "userSearchMatching"
        case userSearchSubtree = "userSearchSubtree"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hosts = hosts {
            var hostsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hosts)
            for __listof__string0 in hosts {
                try hostsContainer.encode(__listof__string0)
            }
        }
        if let roleBase = roleBase {
            try encodeContainer.encode(roleBase, forKey: .roleBase)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let roleSearchMatching = roleSearchMatching {
            try encodeContainer.encode(roleSearchMatching, forKey: .roleSearchMatching)
        }
        if roleSearchSubtree != false {
            try encodeContainer.encode(roleSearchSubtree, forKey: .roleSearchSubtree)
        }
        if let serviceAccountPassword = serviceAccountPassword {
            try encodeContainer.encode(serviceAccountPassword, forKey: .serviceAccountPassword)
        }
        if let serviceAccountUsername = serviceAccountUsername {
            try encodeContainer.encode(serviceAccountUsername, forKey: .serviceAccountUsername)
        }
        if let userBase = userBase {
            try encodeContainer.encode(userBase, forKey: .userBase)
        }
        if let userRoleName = userRoleName {
            try encodeContainer.encode(userRoleName, forKey: .userRoleName)
        }
        if let userSearchMatching = userSearchMatching {
            try encodeContainer.encode(userSearchMatching, forKey: .userSearchMatching)
        }
        if userSearchSubtree != false {
            try encodeContainer.encode(userSearchSubtree, forKey: .userSearchSubtree)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostsContainer = try containerValues.decodeIfPresent([String].self, forKey: .hosts)
        var hostsDecoded0:[String]? = nil
        if let hostsContainer = hostsContainer {
            hostsDecoded0 = [String]()
            for string0 in hostsContainer {
                hostsDecoded0?.append(string0)
            }
        }
        hosts = hostsDecoded0
        let roleBaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleBase)
        roleBase = roleBaseDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let roleSearchMatchingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleSearchMatching)
        roleSearchMatching = roleSearchMatchingDecoded
        let roleSearchSubtreeDecoded = try containerValues.decode(Bool.self, forKey: .roleSearchSubtree)
        roleSearchSubtree = roleSearchSubtreeDecoded
        let serviceAccountPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountPassword)
        serviceAccountPassword = serviceAccountPasswordDecoded
        let serviceAccountUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountUsername)
        serviceAccountUsername = serviceAccountUsernameDecoded
        let userBaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userBase)
        userBase = userBaseDecoded
        let userRoleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userRoleName)
        userRoleName = userRoleNameDecoded
        let userSearchMatchingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userSearchMatching)
        userSearchMatching = userSearchMatchingDecoded
        let userSearchSubtreeDecoded = try containerValues.decode(Bool.self, forKey: .userSearchSubtree)
        userSearchSubtree = userSearchSubtreeDecoded
    }
}
