// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBrokerInputBody: Equatable {
    public let authenticationStrategy: AuthenticationStrategy?
    public let autoMinorVersionUpgrade: Bool
    public let brokerName: String?
    public let configuration: ConfigurationId?
    public let creatorRequestId: String?
    public let deploymentMode: DeploymentMode?
    public let encryptionOptions: EncryptionOptions?
    public let engineType: EngineType?
    public let engineVersion: String?
    public let hostInstanceType: String?
    public let ldapServerMetadata: LdapServerMetadataInput?
    public let logs: Logs?
    public let maintenanceWindowStartTime: WeeklyStartTime?
    public let publiclyAccessible: Bool
    public let securityGroups: [String]?
    public let storageType: BrokerStorageType?
    public let subnetIds: [String]?
    public let tags: [String:String]?
    public let users: [User]?
}

extension CreateBrokerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authenticationStrategy = "authenticationStrategy"
        case autoMinorVersionUpgrade = "autoMinorVersionUpgrade"
        case brokerName = "brokerName"
        case configuration = "configuration"
        case creatorRequestId = "creatorRequestId"
        case deploymentMode = "deploymentMode"
        case encryptionOptions = "encryptionOptions"
        case engineType = "engineType"
        case engineVersion = "engineVersion"
        case hostInstanceType = "hostInstanceType"
        case ldapServerMetadata = "ldapServerMetadata"
        case logs = "logs"
        case maintenanceWindowStartTime = "maintenanceWindowStartTime"
        case publiclyAccessible = "publiclyAccessible"
        case securityGroups = "securityGroups"
        case storageType = "storageType"
        case subnetIds = "subnetIds"
        case tags = "tags"
        case users = "users"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationStrategyDecoded = try containerValues.decodeIfPresent(AuthenticationStrategy.self, forKey: .authenticationStrategy)
        authenticationStrategy = authenticationStrategyDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let brokerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .brokerName)
        brokerName = brokerNameDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(ConfigurationId.self, forKey: .configuration)
        configuration = configurationDecoded
        let creatorRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorRequestId)
        creatorRequestId = creatorRequestIdDecoded
        let deploymentModeDecoded = try containerValues.decodeIfPresent(DeploymentMode.self, forKey: .deploymentMode)
        deploymentMode = deploymentModeDecoded
        let encryptionOptionsDecoded = try containerValues.decodeIfPresent(EncryptionOptions.self, forKey: .encryptionOptions)
        encryptionOptions = encryptionOptionsDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let hostInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostInstanceType)
        hostInstanceType = hostInstanceTypeDecoded
        let ldapServerMetadataDecoded = try containerValues.decodeIfPresent(LdapServerMetadataInput.self, forKey: .ldapServerMetadata)
        ldapServerMetadata = ldapServerMetadataDecoded
        let logsDecoded = try containerValues.decodeIfPresent(Logs.self, forKey: .logs)
        logs = logsDecoded
        let maintenanceWindowStartTimeDecoded = try containerValues.decodeIfPresent(WeeklyStartTime.self, forKey: .maintenanceWindowStartTime)
        maintenanceWindowStartTime = maintenanceWindowStartTimeDecoded
        let publiclyAccessibleDecoded = try containerValues.decode(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                securityGroupsDecoded0?.append(string0)
            }
        }
        securityGroups = securityGroupsDecoded0
        let storageTypeDecoded = try containerValues.decodeIfPresent(BrokerStorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let usersContainer = try containerValues.decodeIfPresent([User].self, forKey: .users)
        var usersDecoded0:[User]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [User]()
            for structure0 in usersContainer {
                usersDecoded0?.append(structure0)
            }
        }
        users = usersDecoded0
    }
}
