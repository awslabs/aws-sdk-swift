// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeBrokerOutput: Equatable {
    /// The authentication strategy used to secure the broker.
    public let authenticationStrategy: AuthenticationStrategy?
    /// Required. Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions. The automatic upgrades occur during the maintenance window of the broker or after a manual broker reboot.
    public let autoMinorVersionUpgrade: Bool
    /// The Amazon Resource Name (ARN) of the broker.
    public let brokerArn: String?
    /// The unique ID that Amazon MQ generates for the broker.
    public let brokerId: String?
    /// A list of information about allocated brokers.
    public let brokerInstances: [BrokerInstance]?
    /// The name of the broker. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain whitespaces, brackets, wildcard characters, or special characters.
    public let brokerName: String?
    /// The status of the broker.
    public let brokerState: BrokerState?
    /// The list of all revisions for the specified configuration.
    public let configurations: Configurations?
    /// The time when the broker was created.
    public let created: Date?
    /// Required. The deployment mode of the broker.
    public let deploymentMode: DeploymentMode?
    /// Encryption options for the broker.
    public let encryptionOptions: EncryptionOptions?
    /// Required. The type of broker engine. Note: Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
    public let engineType: EngineType?
    /// The version of the broker engine. For a list of supported engine versions, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
    public let engineVersion: String?
    /// The broker's instance type.
    public let hostInstanceType: String?
    /// The metadata of the LDAP server used to authenticate and authorize connections to the broker.
    public let ldapServerMetadata: LdapServerMetadataOutput?
    /// The list of information about logs currently enabled and pending to be deployed for the specified broker.
    public let logs: LogsSummary?
    /// The parameters that determine the WeeklyStartTime.
    public let maintenanceWindowStartTime: WeeklyStartTime?
    /// The authentication strategy that will be applied when the broker is rebooted.
    public let pendingAuthenticationStrategy: AuthenticationStrategy?
    /// The version of the broker engine to upgrade to. For a list of supported engine versions, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
    public let pendingEngineVersion: String?
    /// The host instance type of the broker to upgrade to. For a list of supported instance types, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide//broker.html#broker-instance-types
    public let pendingHostInstanceType: String?
    /// The metadata of the LDAP server that will be used to authenticate and authorize connections to the broker once it is rebooted.
    public let pendingLdapServerMetadata: LdapServerMetadataOutput?
    /// The list of pending security groups to authorize connections to brokers.
    public let pendingSecurityGroups: [String]?
    /// Required. Enables connections from applications outside of the VPC that hosts the broker's subnets.
    public let publiclyAccessible: Bool
    /// The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.
    public let securityGroups: [String]?
    /// The broker's storage type.
    public let storageType: BrokerStorageType?
    /// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
    public let subnetIds: [String]?
    /// The list of all tags associated with this broker.
    public let tags: [String:String]?
    /// The list of all broker usernames for the specified broker.
    public let users: [UserSummary]?

    public init (
        authenticationStrategy: AuthenticationStrategy? = nil,
        autoMinorVersionUpgrade: Bool = false,
        brokerArn: String? = nil,
        brokerId: String? = nil,
        brokerInstances: [BrokerInstance]? = nil,
        brokerName: String? = nil,
        brokerState: BrokerState? = nil,
        configurations: Configurations? = nil,
        created: Date? = nil,
        deploymentMode: DeploymentMode? = nil,
        encryptionOptions: EncryptionOptions? = nil,
        engineType: EngineType? = nil,
        engineVersion: String? = nil,
        hostInstanceType: String? = nil,
        ldapServerMetadata: LdapServerMetadataOutput? = nil,
        logs: LogsSummary? = nil,
        maintenanceWindowStartTime: WeeklyStartTime? = nil,
        pendingAuthenticationStrategy: AuthenticationStrategy? = nil,
        pendingEngineVersion: String? = nil,
        pendingHostInstanceType: String? = nil,
        pendingLdapServerMetadata: LdapServerMetadataOutput? = nil,
        pendingSecurityGroups: [String]? = nil,
        publiclyAccessible: Bool = false,
        securityGroups: [String]? = nil,
        storageType: BrokerStorageType? = nil,
        subnetIds: [String]? = nil,
        tags: [String:String]? = nil,
        users: [UserSummary]? = nil
    )
    {
        self.authenticationStrategy = authenticationStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.brokerArn = brokerArn
        self.brokerId = brokerId
        self.brokerInstances = brokerInstances
        self.brokerName = brokerName
        self.brokerState = brokerState
        self.configurations = configurations
        self.created = created
        self.deploymentMode = deploymentMode
        self.encryptionOptions = encryptionOptions
        self.engineType = engineType
        self.engineVersion = engineVersion
        self.hostInstanceType = hostInstanceType
        self.ldapServerMetadata = ldapServerMetadata
        self.logs = logs
        self.maintenanceWindowStartTime = maintenanceWindowStartTime
        self.pendingAuthenticationStrategy = pendingAuthenticationStrategy
        self.pendingEngineVersion = pendingEngineVersion
        self.pendingHostInstanceType = pendingHostInstanceType
        self.pendingLdapServerMetadata = pendingLdapServerMetadata
        self.pendingSecurityGroups = pendingSecurityGroups
        self.publiclyAccessible = publiclyAccessible
        self.securityGroups = securityGroups
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.users = users
    }
}
