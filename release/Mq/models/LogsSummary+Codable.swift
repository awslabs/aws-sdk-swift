// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogsSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audit = "audit"
        case auditLogGroup = "auditLogGroup"
        case general = "general"
        case generalLogGroup = "generalLogGroup"
        case pending = "pending"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if audit != false {
            try encodeContainer.encode(audit, forKey: .audit)
        }
        if let auditLogGroup = auditLogGroup {
            try encodeContainer.encode(auditLogGroup, forKey: .auditLogGroup)
        }
        if general != false {
            try encodeContainer.encode(general, forKey: .general)
        }
        if let generalLogGroup = generalLogGroup {
            try encodeContainer.encode(generalLogGroup, forKey: .generalLogGroup)
        }
        if let pending = pending {
            try encodeContainer.encode(pending, forKey: .pending)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let auditDecoded = try containerValues.decode(Bool.self, forKey: .audit)
        audit = auditDecoded
        let auditLogGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .auditLogGroup)
        auditLogGroup = auditLogGroupDecoded
        let generalDecoded = try containerValues.decode(Bool.self, forKey: .general)
        general = generalDecoded
        let generalLogGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .generalLogGroup)
        generalLogGroup = generalLogGroupDecoded
        let pendingDecoded = try containerValues.decodeIfPresent(PendingLogs.self, forKey: .pending)
        pending = pendingDecoded
    }
}
