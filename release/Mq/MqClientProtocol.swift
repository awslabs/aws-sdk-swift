// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
public protocol MqClientProtocol {
    /// Creates a broker. Note: This API is asynchronous.
    func createBroker(input: CreateBrokerInput, completion: @escaping (SdkResult<CreateBrokerOutput, CreateBrokerOutputError>) -> Void)
    /// Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
    func createConfiguration(input: CreateConfigurationInput, completion: @escaping (SdkResult<CreateConfigurationOutput, CreateConfigurationOutputError>) -> Void)
    /// Add a tag to a resource.
    func createTags(input: CreateTagsInput, completion: @escaping (SdkResult<CreateTagsOutput, CreateTagsOutputError>) -> Void)
    /// Creates an ActiveMQ user.
    func createUser(input: CreateUserInput, completion: @escaping (SdkResult<CreateUserOutput, CreateUserOutputError>) -> Void)
    /// Deletes a broker. Note: This API is asynchronous.
    func deleteBroker(input: DeleteBrokerInput, completion: @escaping (SdkResult<DeleteBrokerOutput, DeleteBrokerOutputError>) -> Void)
    /// Removes a tag from a resource.
    func deleteTags(input: DeleteTagsInput, completion: @escaping (SdkResult<DeleteTagsOutput, DeleteTagsOutputError>) -> Void)
    /// Deletes an ActiveMQ user.
    func deleteUser(input: DeleteUserInput, completion: @escaping (SdkResult<DeleteUserOutput, DeleteUserOutputError>) -> Void)
    /// Returns information about the specified broker.
    func describeBroker(input: DescribeBrokerInput, completion: @escaping (SdkResult<DescribeBrokerOutput, DescribeBrokerOutputError>) -> Void)
    /// Describe available engine types and versions.
    func describeBrokerEngineTypes(input: DescribeBrokerEngineTypesInput, completion: @escaping (SdkResult<DescribeBrokerEngineTypesOutput, DescribeBrokerEngineTypesOutputError>) -> Void)
    /// Describe available broker instance options.
    func describeBrokerInstanceOptions(input: DescribeBrokerInstanceOptionsInput, completion: @escaping (SdkResult<DescribeBrokerInstanceOptionsOutput, DescribeBrokerInstanceOptionsOutputError>) -> Void)
    /// Returns information about the specified configuration.
    func describeConfiguration(input: DescribeConfigurationInput, completion: @escaping (SdkResult<DescribeConfigurationOutput, DescribeConfigurationOutputError>) -> Void)
    /// Returns the specified configuration revision for the specified configuration.
    func describeConfigurationRevision(input: DescribeConfigurationRevisionInput, completion: @escaping (SdkResult<DescribeConfigurationRevisionOutput, DescribeConfigurationRevisionOutputError>) -> Void)
    /// Returns information about an ActiveMQ user.
    func describeUser(input: DescribeUserInput, completion: @escaping (SdkResult<DescribeUserOutput, DescribeUserOutputError>) -> Void)
    /// Returns a list of all brokers.
    func listBrokers(input: ListBrokersInput, completion: @escaping (SdkResult<ListBrokersOutput, ListBrokersOutputError>) -> Void)
    /// Returns a list of all revisions for the specified configuration.
    func listConfigurationRevisions(input: ListConfigurationRevisionsInput, completion: @escaping (SdkResult<ListConfigurationRevisionsOutput, ListConfigurationRevisionsOutputError>) -> Void)
    /// Returns a list of all configurations.
    func listConfigurations(input: ListConfigurationsInput, completion: @escaping (SdkResult<ListConfigurationsOutput, ListConfigurationsOutputError>) -> Void)
    /// Lists tags for a resource.
    func listTags(input: ListTagsInput, completion: @escaping (SdkResult<ListTagsOutput, ListTagsOutputError>) -> Void)
    /// Returns a list of all ActiveMQ users.
    func listUsers(input: ListUsersInput, completion: @escaping (SdkResult<ListUsersOutput, ListUsersOutputError>) -> Void)
    /// Reboots a broker. Note: This API is asynchronous.
    func rebootBroker(input: RebootBrokerInput, completion: @escaping (SdkResult<RebootBrokerOutput, RebootBrokerOutputError>) -> Void)
    /// Adds a pending configuration change to a broker.
    func updateBroker(input: UpdateBrokerInput, completion: @escaping (SdkResult<UpdateBrokerOutput, UpdateBrokerOutputError>) -> Void)
    /// Updates the specified configuration.
    func updateConfiguration(input: UpdateConfigurationInput, completion: @escaping (SdkResult<UpdateConfigurationOutput, UpdateConfigurationOutputError>) -> Void)
    /// Updates the information for an ActiveMQ user.
    func updateUser(input: UpdateUserInput, completion: @escaping (SdkResult<UpdateUserOutput, UpdateUserOutputError>) -> Void)
}
