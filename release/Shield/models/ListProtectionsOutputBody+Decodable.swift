// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProtectionsOutputBody: Equatable {
    public let protections: [Protection]?
    public let nextToken: String?
}

extension ListProtectionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case protections = "Protections"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectionsContainer = try containerValues.decodeIfPresent([Protection].self, forKey: .protections)
        var protectionsDecoded0:[Protection]? = nil
        if let protectionsContainer = protectionsContainer {
            protectionsDecoded0 = [Protection]()
            for structure0 in protectionsContainer {
                protectionsDecoded0?.append(structure0)
            }
        }
        protections = protectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
