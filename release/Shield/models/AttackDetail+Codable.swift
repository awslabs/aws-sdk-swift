// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AttackDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attackCounters = "AttackCounters"
        case attackId = "AttackId"
        case attackProperties = "AttackProperties"
        case endTime = "EndTime"
        case mitigations = "Mitigations"
        case resourceArn = "ResourceArn"
        case startTime = "StartTime"
        case subResources = "SubResources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attackCounters = attackCounters {
            var attackCountersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attackCounters)
            for summarizedcounterlist0 in attackCounters {
                try attackCountersContainer.encode(summarizedcounterlist0)
            }
        }
        if let attackId = attackId {
            try encodeContainer.encode(attackId, forKey: .attackId)
        }
        if let attackProperties = attackProperties {
            var attackPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attackProperties)
            for attackproperties0 in attackProperties {
                try attackPropertiesContainer.encode(attackproperties0)
            }
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let mitigations = mitigations {
            var mitigationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mitigations)
            for mitigationlist0 in mitigations {
                try mitigationsContainer.encode(mitigationlist0)
            }
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let subResources = subResources {
            var subResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subResources)
            for subresourcesummarylist0 in subResources {
                try subResourcesContainer.encode(subresourcesummarylist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attackId)
        attackId = attackIdDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let subResourcesContainer = try containerValues.decodeIfPresent([SubResourceSummary].self, forKey: .subResources)
        var subResourcesDecoded0:[SubResourceSummary]? = nil
        if let subResourcesContainer = subResourcesContainer {
            subResourcesDecoded0 = [SubResourceSummary]()
            for structure0 in subResourcesContainer {
                subResourcesDecoded0?.append(structure0)
            }
        }
        subResources = subResourcesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let attackCountersContainer = try containerValues.decodeIfPresent([SummarizedCounter].self, forKey: .attackCounters)
        var attackCountersDecoded0:[SummarizedCounter]? = nil
        if let attackCountersContainer = attackCountersContainer {
            attackCountersDecoded0 = [SummarizedCounter]()
            for structure0 in attackCountersContainer {
                attackCountersDecoded0?.append(structure0)
            }
        }
        attackCounters = attackCountersDecoded0
        let attackPropertiesContainer = try containerValues.decodeIfPresent([AttackProperty].self, forKey: .attackProperties)
        var attackPropertiesDecoded0:[AttackProperty]? = nil
        if let attackPropertiesContainer = attackPropertiesContainer {
            attackPropertiesDecoded0 = [AttackProperty]()
            for structure0 in attackPropertiesContainer {
                attackPropertiesDecoded0?.append(structure0)
            }
        }
        attackProperties = attackPropertiesDecoded0
        let mitigationsContainer = try containerValues.decodeIfPresent([Mitigation].self, forKey: .mitigations)
        var mitigationsDecoded0:[Mitigation]? = nil
        if let mitigationsContainer = mitigationsContainer {
            mitigationsDecoded0 = [Mitigation]()
            for structure0 in mitigationsContainer {
                mitigationsDecoded0?.append(structure0)
            }
        }
        mitigations = mitigationsDecoded0
    }
}
