// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SummarizedAttackVector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case vectorCounters = "VectorCounters"
        case vectorType = "VectorType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vectorCounters = vectorCounters {
            var vectorCountersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vectorCounters)
            for summarizedcounterlist0 in vectorCounters {
                try vectorCountersContainer.encode(summarizedcounterlist0)
            }
        }
        if let vectorType = vectorType {
            try encodeContainer.encode(vectorType, forKey: .vectorType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vectorTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vectorType)
        vectorType = vectorTypeDecoded
        let vectorCountersContainer = try containerValues.decodeIfPresent([SummarizedCounter].self, forKey: .vectorCounters)
        var vectorCountersDecoded0:[SummarizedCounter]? = nil
        if let vectorCountersContainer = vectorCountersContainer {
            vectorCountersDecoded0 = [SummarizedCounter]()
            for structure0 in vectorCountersContainer {
                vectorCountersDecoded0?.append(structure0)
            }
        }
        vectorCounters = vectorCountersDecoded0
    }
}
