// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SummarizedCounter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case average = "Average"
        case max = "Max"
        case n = "N"
        case name = "Name"
        case sum = "Sum"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if average != 0.0 {
            try encodeContainer.encode(average, forKey: .average)
        }
        if max != 0.0 {
            try encodeContainer.encode(max, forKey: .max)
        }
        if n != 0 {
            try encodeContainer.encode(n, forKey: .n)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if sum != 0.0 {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let maxDecoded = try containerValues.decode(Double.self, forKey: .max)
        max = maxDecoded
        let averageDecoded = try containerValues.decode(Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decode(Double.self, forKey: .sum)
        sum = sumDecoded
        let nDecoded = try containerValues.decode(Int.self, forKey: .n)
        n = nDecoded
        let unitDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unit)
        unit = unitDecoded
    }
}
