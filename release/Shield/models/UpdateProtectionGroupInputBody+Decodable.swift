// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateProtectionGroupInputBody: Equatable {
    public let protectionGroupId: String?
    public let aggregation: ProtectionGroupAggregation?
    public let pattern: ProtectionGroupPattern?
    public let resourceType: ProtectedResourceType?
    public let members: [String]?
}

extension UpdateProtectionGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aggregation = "Aggregation"
        case members = "Members"
        case pattern = "Pattern"
        case protectionGroupId = "ProtectionGroupId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectionGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protectionGroupId)
        protectionGroupId = protectionGroupIdDecoded
        let aggregationDecoded = try containerValues.decodeIfPresent(ProtectionGroupAggregation.self, forKey: .aggregation)
        aggregation = aggregationDecoded
        let patternDecoded = try containerValues.decodeIfPresent(ProtectionGroupPattern.self, forKey: .pattern)
        pattern = patternDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ProtectedResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let membersContainer = try containerValues.decodeIfPresent([String].self, forKey: .members)
        var membersDecoded0:[String]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [String]()
            for string0 in membersContainer {
                membersDecoded0?.append(string0)
            }
        }
        members = membersDecoded0
    }
}
