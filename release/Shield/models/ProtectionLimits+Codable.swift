// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProtectionLimits: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case protectedResourceTypeLimits = "ProtectedResourceTypeLimits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let protectedResourceTypeLimits = protectedResourceTypeLimits {
            var protectedResourceTypeLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protectedResourceTypeLimits)
            for limits0 in protectedResourceTypeLimits {
                try protectedResourceTypeLimitsContainer.encode(limits0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectedResourceTypeLimitsContainer = try containerValues.decodeIfPresent([Limit].self, forKey: .protectedResourceTypeLimits)
        var protectedResourceTypeLimitsDecoded0:[Limit]? = nil
        if let protectedResourceTypeLimitsContainer = protectedResourceTypeLimitsContainer {
            protectedResourceTypeLimitsDecoded0 = [Limit]()
            for structure0 in protectedResourceTypeLimitsContainer {
                protectedResourceTypeLimitsDecoded0?.append(structure0)
            }
        }
        protectedResourceTypeLimits = protectedResourceTypeLimitsDecoded0
    }
}
