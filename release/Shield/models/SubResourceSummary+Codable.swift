// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubResourceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attackVectors = "AttackVectors"
        case counters = "Counters"
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attackVectors = attackVectors {
            var attackVectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attackVectors)
            for summarizedattackvectorlist0 in attackVectors {
                try attackVectorsContainer.encode(summarizedattackvectorlist0)
            }
        }
        if let counters = counters {
            var countersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .counters)
            for summarizedcounterlist0 in counters {
                try countersContainer.encode(summarizedcounterlist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SubResourceType.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let attackVectorsContainer = try containerValues.decodeIfPresent([SummarizedAttackVector].self, forKey: .attackVectors)
        var attackVectorsDecoded0:[SummarizedAttackVector]? = nil
        if let attackVectorsContainer = attackVectorsContainer {
            attackVectorsDecoded0 = [SummarizedAttackVector]()
            for structure0 in attackVectorsContainer {
                attackVectorsDecoded0?.append(structure0)
            }
        }
        attackVectors = attackVectorsDecoded0
        let countersContainer = try containerValues.decodeIfPresent([SummarizedCounter].self, forKey: .counters)
        var countersDecoded0:[SummarizedCounter]? = nil
        if let countersContainer = countersContainer {
            countersDecoded0 = [SummarizedCounter]()
            for structure0 in countersContainer {
                countersDecoded0?.append(structure0)
            }
        }
        counters = countersDecoded0
    }
}
