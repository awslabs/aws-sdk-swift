// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchExecuteStatementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case database
        case parameterSets
        case resourceArn
        case schema
        case secretArn
        case sql
        case transactionId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let parameterSets = parameterSets {
            var parameterSetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterSets)
            for sqlparametersets0 in parameterSets {
                var sqlparametersets0Container = parameterSetsContainer.nestedUnkeyedContainer()
                if let sqlparametersets0 = sqlparametersets0 {
                    for sqlparameterslist1 in sqlparametersets0 {
                        try sqlparametersets0Container.encode(sqlparameterslist1)
                    }
                }
            }
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let schema = schema {
            try encodeContainer.encode(schema, forKey: .schema)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let sql = sql {
            try encodeContainer.encode(sql, forKey: .sql)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}
