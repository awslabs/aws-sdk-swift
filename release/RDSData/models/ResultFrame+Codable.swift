// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResultFrame: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case records
        case resultSetMetadata
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for records0 in records {
                try recordsContainer.encode(records0)
            }
        }
        if let resultSetMetadata = resultSetMetadata {
            try encodeContainer.encode(resultSetMetadata, forKey: .resultSetMetadata)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultSetMetadataDecoded = try containerValues.decodeIfPresent(ResultSetMetadata.self, forKey: .resultSetMetadata)
        resultSetMetadata = resultSetMetadataDecoded
        let recordsContainer = try containerValues.decodeIfPresent([Record].self, forKey: .records)
        var recordsDecoded0:[Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [Record]()
            for structure0 in recordsContainer {
                recordsDecoded0?.append(structure0)
            }
        }
        records = recordsDecoded0
    }
}
