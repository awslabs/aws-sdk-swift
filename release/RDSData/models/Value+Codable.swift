// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Value: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arrayValues
        case bigIntValue
        case bitValue
        case blobValue
        case doubleValue
        case intValue
        case isNull
        case realValue
        case sdkUnknown
        case stringValue
        case structValue
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .arrayValues(arrayValues):
                if let arrayValues = arrayValues {
                    var arrayValuesContainer = container.nestedUnkeyedContainer(forKey: .arrayValues)
                    for arrayvaluelist0 in arrayValues {
                        try arrayValuesContainer.encode(arrayvaluelist0)
                    }
                }
            case let .bigIntValue(bigIntValue):
                if let bigIntValue = bigIntValue {
                    try container.encode(bigIntValue, forKey: .bigIntValue)
                }
            case let .bitValue(bitValue):
                if let bitValue = bitValue {
                    try container.encode(bitValue, forKey: .bitValue)
                }
            case let .blobValue(blobValue):
                if let blobValue = blobValue {
                    try container.encode(blobValue.base64EncodedString(), forKey: .blobValue)
                }
            case let .doubleValue(doubleValue):
                if let doubleValue = doubleValue {
                    try container.encode(doubleValue, forKey: .doubleValue)
                }
            case let .intValue(intValue):
                if let intValue = intValue {
                    try container.encode(intValue, forKey: .intValue)
                }
            case let .isNull(isNull):
                if let isNull = isNull {
                    try container.encode(isNull, forKey: .isNull)
                }
            case let .realValue(realValue):
                if let realValue = realValue {
                    try container.encode(realValue, forKey: .realValue)
                }
            case let .stringValue(stringValue):
                if let stringValue = stringValue {
                    try container.encode(stringValue, forKey: .stringValue)
                }
            case let .structValue(structValue):
                if let structValue = structValue {
                    try container.encode(structValue, forKey: .structValue)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let isNullDecoded = try values.decodeIfPresent(Bool.self, forKey: .isNull)
        if let isNull = isNullDecoded {
            self = .isNull(isNull)
            return
        }
        let bitValueDecoded = try values.decodeIfPresent(Bool.self, forKey: .bitValue)
        if let bitValue = bitValueDecoded {
            self = .bitValue(bitValue)
            return
        }
        let bigIntValueDecoded = try values.decodeIfPresent(Int.self, forKey: .bigIntValue)
        if let bigIntValue = bigIntValueDecoded {
            self = .bigIntValue(bigIntValue)
            return
        }
        let intValueDecoded = try values.decodeIfPresent(Int.self, forKey: .intValue)
        if let intValue = intValueDecoded {
            self = .intValue(intValue)
            return
        }
        let doubleValueDecoded = try values.decodeIfPresent(Double.self, forKey: .doubleValue)
        if let doubleValue = doubleValueDecoded {
            self = .doubleValue(doubleValue)
            return
        }
        let realValueDecoded = try values.decodeIfPresent(Float.self, forKey: .realValue)
        if let realValue = realValueDecoded {
            self = .realValue(realValue)
            return
        }
        let stringValueDecoded = try values.decodeIfPresent(String.self, forKey: .stringValue)
        if let stringValue = stringValueDecoded {
            self = .stringValue(stringValue)
            return
        }
        let blobValueDecoded = try values.decodeIfPresent(Data.self, forKey: .blobValue)
        if let blobValue = blobValueDecoded {
            self = .blobValue(blobValue)
            return
        }
        let arrayValuesContainer = try values.decodeIfPresent([Value].self, forKey: .arrayValues)
        var arrayValuesDecoded0:[Value]? = nil
        if let arrayValuesContainer = arrayValuesContainer {
            arrayValuesDecoded0 = [Value]()
            for union0 in arrayValuesContainer {
                arrayValuesDecoded0?.append(union0)
            }
        }
        if let arrayValues = arrayValuesDecoded0 {
            self = .arrayValues(arrayValues)
            return
        }
        let structValueDecoded = try values.decodeIfPresent(StructValue.self, forKey: .structValue)
        if let structValue = structValueDecoded {
            self = .structValue(structValue)
            return
        }
        self = .sdkUnknown("")
    }
}
