// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchExecuteStatementInputBody: Equatable {
    public let resourceArn: String?
    public let secretArn: String?
    public let sql: String?
    public let database: String?
    public let schema: String?
    public let parameterSets: [[SqlParameter]?]?
    public let transactionId: String?
}

extension BatchExecuteStatementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case database
        case parameterSets
        case resourceArn
        case schema
        case secretArn
        case sql
        case transactionId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let sqlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sql)
        sql = sqlDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .database)
        database = databaseDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schema)
        schema = schemaDecoded
        let parameterSetsContainer = try containerValues.decodeIfPresent([[SqlParameter]?].self, forKey: .parameterSets)
        var parameterSetsDecoded0:[[SqlParameter]?]? = nil
        if let parameterSetsContainer = parameterSetsContainer {
            parameterSetsDecoded0 = [[SqlParameter]?]()
            for list0 in parameterSetsContainer {
                var list0Decoded0 = [SqlParameter]()
                if let list0 = list0 {
                    for structure1 in list0 {
                        list0Decoded0.append(structure1)
                    }
                }
                parameterSetsDecoded0?.append(list0Decoded0)
            }
        }
        parameterSets = parameterSetsDecoded0
        let transactionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
    }
}
