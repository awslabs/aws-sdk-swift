// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ArrayValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arrayValues
        case booleanValues
        case doubleValues
        case longValues
        case sdkUnknown
        case stringValues
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .arrayValues(arrayValues):
                if let arrayValues = arrayValues {
                    var arrayValuesContainer = container.nestedUnkeyedContainer(forKey: .arrayValues)
                    for arrayofarray0 in arrayValues {
                        try arrayValuesContainer.encode(arrayofarray0)
                    }
                }
            case let .booleanValues(booleanValues):
                if let booleanValues = booleanValues {
                    var booleanValuesContainer = container.nestedUnkeyedContainer(forKey: .booleanValues)
                    for booleanarray0 in booleanValues {
                        try booleanValuesContainer.encode(booleanarray0)
                    }
                }
            case let .doubleValues(doubleValues):
                if let doubleValues = doubleValues {
                    var doubleValuesContainer = container.nestedUnkeyedContainer(forKey: .doubleValues)
                    for doublearray0 in doubleValues {
                        try doubleValuesContainer.encode(doublearray0)
                    }
                }
            case let .longValues(longValues):
                if let longValues = longValues {
                    var longValuesContainer = container.nestedUnkeyedContainer(forKey: .longValues)
                    for longarray0 in longValues {
                        try longValuesContainer.encode(longarray0)
                    }
                }
            case let .stringValues(stringValues):
                if let stringValues = stringValues {
                    var stringValuesContainer = container.nestedUnkeyedContainer(forKey: .stringValues)
                    for stringarray0 in stringValues {
                        try stringValuesContainer.encode(stringarray0)
                    }
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let booleanValuesContainer = try values.decodeIfPresent([Bool].self, forKey: .booleanValues)
        var booleanValuesDecoded0:[Bool]? = nil
        if let booleanValuesContainer = booleanValuesContainer {
            booleanValuesDecoded0 = [Bool]()
            for boolean0 in booleanValuesContainer {
                booleanValuesDecoded0?.append(boolean0)
            }
        }
        if let booleanValues = booleanValuesDecoded0 {
            self = .booleanValues(booleanValues)
            return
        }
        let longValuesContainer = try values.decodeIfPresent([Int].self, forKey: .longValues)
        var longValuesDecoded0:[Int]? = nil
        if let longValuesContainer = longValuesContainer {
            longValuesDecoded0 = [Int]()
            for long0 in longValuesContainer {
                longValuesDecoded0?.append(long0)
            }
        }
        if let longValues = longValuesDecoded0 {
            self = .longValues(longValues)
            return
        }
        let doubleValuesContainer = try values.decodeIfPresent([Double].self, forKey: .doubleValues)
        var doubleValuesDecoded0:[Double]? = nil
        if let doubleValuesContainer = doubleValuesContainer {
            doubleValuesDecoded0 = [Double]()
            for double0 in doubleValuesContainer {
                doubleValuesDecoded0?.append(double0)
            }
        }
        if let doubleValues = doubleValuesDecoded0 {
            self = .doubleValues(doubleValues)
            return
        }
        let stringValuesContainer = try values.decodeIfPresent([String].self, forKey: .stringValues)
        var stringValuesDecoded0:[String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [String]()
            for string0 in stringValuesContainer {
                stringValuesDecoded0?.append(string0)
            }
        }
        if let stringValues = stringValuesDecoded0 {
            self = .stringValues(stringValues)
            return
        }
        let arrayValuesContainer = try values.decodeIfPresent([ArrayValue].self, forKey: .arrayValues)
        var arrayValuesDecoded0:[ArrayValue]? = nil
        if let arrayValuesContainer = arrayValuesContainer {
            arrayValuesDecoded0 = [ArrayValue]()
            for union0 in arrayValuesContainer {
                arrayValuesDecoded0?.append(union0)
            }
        }
        if let arrayValues = arrayValuesDecoded0 {
            self = .arrayValues(arrayValues)
            return
        }
        self = .sdkUnknown("")
    }
}
