// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ColumnMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arrayBaseColumnType
        case isAutoIncrement
        case isCaseSensitive
        case isCurrency
        case isSigned
        case label
        case name
        case nullable
        case precision
        case scale
        case schemaName
        case tableName
        case type
        case typeName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if arrayBaseColumnType != 0 {
            try encodeContainer.encode(arrayBaseColumnType, forKey: .arrayBaseColumnType)
        }
        if isAutoIncrement != false {
            try encodeContainer.encode(isAutoIncrement, forKey: .isAutoIncrement)
        }
        if isCaseSensitive != false {
            try encodeContainer.encode(isCaseSensitive, forKey: .isCaseSensitive)
        }
        if isCurrency != false {
            try encodeContainer.encode(isCurrency, forKey: .isCurrency)
        }
        if isSigned != false {
            try encodeContainer.encode(isSigned, forKey: .isSigned)
        }
        if let label = label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if nullable != 0 {
            try encodeContainer.encode(nullable, forKey: .nullable)
        }
        if precision != 0 {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if scale != 0 {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let schemaName = schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if type != 0 {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let typeName = typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decode(Int.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let labelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .label)
        label = labelDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let isAutoIncrementDecoded = try containerValues.decode(Bool.self, forKey: .isAutoIncrement)
        isAutoIncrement = isAutoIncrementDecoded
        let isSignedDecoded = try containerValues.decode(Bool.self, forKey: .isSigned)
        isSigned = isSignedDecoded
        let isCurrencyDecoded = try containerValues.decode(Bool.self, forKey: .isCurrency)
        isCurrency = isCurrencyDecoded
        let isCaseSensitiveDecoded = try containerValues.decode(Bool.self, forKey: .isCaseSensitive)
        isCaseSensitive = isCaseSensitiveDecoded
        let nullableDecoded = try containerValues.decode(Int.self, forKey: .nullable)
        nullable = nullableDecoded
        let precisionDecoded = try containerValues.decode(Int.self, forKey: .precision)
        precision = precisionDecoded
        let scaleDecoded = try containerValues.decode(Int.self, forKey: .scale)
        scale = scaleDecoded
        let arrayBaseColumnTypeDecoded = try containerValues.decode(Int.self, forKey: .arrayBaseColumnType)
        arrayBaseColumnType = arrayBaseColumnTypeDecoded
    }
}
