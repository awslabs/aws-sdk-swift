// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResultSetMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case columnCount
        case columnMetadata
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if columnCount != 0 {
            try encodeContainer.encode(columnCount, forKey: .columnCount)
        }
        if let columnMetadata = columnMetadata {
            var columnMetadataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnMetadata)
            for metadata0 in columnMetadata {
                try columnMetadataContainer.encode(metadata0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnCountDecoded = try containerValues.decode(Int.self, forKey: .columnCount)
        columnCount = columnCountDecoded
        let columnMetadataContainer = try containerValues.decodeIfPresent([ColumnMetadata].self, forKey: .columnMetadata)
        var columnMetadataDecoded0:[ColumnMetadata]? = nil
        if let columnMetadataContainer = columnMetadataContainer {
            columnMetadataDecoded0 = [ColumnMetadata]()
            for structure0 in columnMetadataContainer {
                columnMetadataDecoded0?.append(structure0)
            }
        }
        columnMetadata = columnMetadataDecoded0
    }
}
