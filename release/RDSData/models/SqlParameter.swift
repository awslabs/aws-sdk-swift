// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A parameter used in a SQL statement.</p>
public struct SqlParameter: Equatable {
    /// <p>The name of the parameter.</p>
    public let name: String?
    /// <p>A hint that specifies the correct object type for data type mapping. Possible values
    ///             are as follows:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DATE</code> - The corresponding <code>String</code> parameter value is sent as an object
    ///               of <code>DATE</code> type to the database. The accepted format is <code>YYYY-MM-DD</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DECIMAL</code> - The corresponding <code>String</code> parameter value is sent as an object
    ///                     of <code>DECIMAL</code> type to the database.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>JSON</code> - The corresponding <code>String</code> parameter value is sent as an
    ///            object of <code>JSON</code> type to the database.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>TIME</code> - The corresponding <code>String</code> parameter value is sent as an object
    ///                     of <code>TIME</code> type to the database. The accepted format is <code>HH:MM:SS[.FFF]</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TIMESTAMP</code> - The corresponding <code>String</code> parameter value is sent as an object
    ///               of <code>TIMESTAMP</code> type to the database. The accepted format is <code>YYYY-MM-DD HH:MM:SS[.FFF]</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UUID</code> - The corresponding <code>String</code> parameter value is sent as an object of
    ///              <code>UUID</code> type to the database.
    ///           </p>
    ///             </li>
    ///          </ul>
    public let typeHint: TypeHint?
    /// <p>The value of the parameter.</p>
    public let value: Field?

    public init (
        name: String? = nil,
        typeHint: TypeHint? = nil,
        value: Field? = nil
    )
    {
        self.name = name
        self.typeHint = typeHint
        self.value = value
    }
}
