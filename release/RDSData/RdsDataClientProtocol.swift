// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>Amazon RDS Data Service</fullname>
///         <p>Amazon RDS provides an HTTP endpoint to run SQL statements on an Amazon Aurora
///             Serverless DB cluster. To run these statements, you work with the Data Service
///             API.</p>
///         <p>For more information about the Data Service API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora
///                 Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
public protocol RdsDataClientProtocol {
    /// <p>Runs a batch SQL statement over an array of data.</p>
    ///         <p>You can run bulk update and insert operations for multiple records using a DML
    ///             statement with different parameter sets. Bulk operations can provide a significant
    ///             performance improvement over individual insert and update operations.</p>
    ///         <important>
    ///             <p>If a call isn't part of a transaction because it doesn't include the
    ///                     <code>transactionID</code> parameter, changes that result from the call are
    ///                 committed automatically.</p>
    ///         </important>
    func batchExecuteStatement(input: BatchExecuteStatementInput, completion: @escaping (SdkResult<BatchExecuteStatementOutputResponse, BatchExecuteStatementOutputError>) -> Void)
    /// <p>Starts a SQL transaction.</p>
    ///
    ///         <important>
    ///             <p>A transaction can run for a maximum of 24 hours. A transaction is terminated and
    ///                 rolled back automatically after 24 hours.</p>
    ///             <p>A transaction times out if no calls use its transaction ID in three minutes.
    ///                 If a transaction times out before it's committed, it's rolled back
    ///                 automatically.</p>
    ///             <p>DDL statements inside a transaction cause an implicit commit. We recommend
    ///                 that you run each DDL statement in a separate <code>ExecuteStatement</code> call with
    ///                 <code>continueAfterTimeout</code> enabled.</p>
    ///         </important>
    func beginTransaction(input: BeginTransactionInput, completion: @escaping (SdkResult<BeginTransactionOutputResponse, BeginTransactionOutputError>) -> Void)
    /// <p>Ends a SQL transaction started with the <code>BeginTransaction</code> operation and
    ///             commits the changes.</p>
    func commitTransaction(input: CommitTransactionInput, completion: @escaping (SdkResult<CommitTransactionOutputResponse, CommitTransactionOutputError>) -> Void)
    /// <p>Runs one or more SQL statements.</p>
    ///         <important>
    ///             <p>This operation is deprecated. Use the <code>BatchExecuteStatement</code> or
    ///                     <code>ExecuteStatement</code> operation.</p>
    ///         </important>
    @available(*, deprecated, message: "The ExecuteSql API is deprecated, please use the ExecuteStatement API. API deprecated since 2019-03-21")
    func executeSql(input: ExecuteSqlInput, completion: @escaping (SdkResult<ExecuteSqlOutputResponse, ExecuteSqlOutputError>) -> Void)
    /// <p>Runs a SQL statement against a database.</p>
    ///         <important>
    ///             <p>If a call isn't part of a transaction because it doesn't include the
    ///                     <code>transactionID</code> parameter, changes that result from the call are
    ///                 committed automatically.</p>
    ///         </important>
    ///         <p>The response size limit is 1 MB. If the call returns more than 1 MB of response data, the call is terminated.</p>
    func executeStatement(input: ExecuteStatementInput, completion: @escaping (SdkResult<ExecuteStatementOutputResponse, ExecuteStatementOutputError>) -> Void)
    /// <p>Performs a rollback of a transaction. Rolling back a transaction cancels its changes.</p>
    func rollbackTransaction(input: RollbackTransactionInput, completion: @escaping (SdkResult<RollbackTransactionOutputResponse, RollbackTransactionOutputError>) -> Void)
}
