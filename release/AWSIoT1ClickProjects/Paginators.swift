// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListPlacementsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListPlacementsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListPlacementsOutputResponse`
extension Iot1ClickProjectsClient {
    public func listPlacementsPaginated(input: ListPlacementsInput) -> ClientRuntime.PaginatorSequence<ListPlacementsInput, ListPlacementsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPlacementsInput, ListPlacementsOutputResponse>(input: input, inputKey: \ListPlacementsInput.nextToken, outputKey: \ListPlacementsOutputResponse.nextToken, paginationFunction: self.listPlacements(input:))
    }
}

extension ListPlacementsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPlacementsInput {
        return ListPlacementsInput(
            maxResults: self.maxResults,
            nextToken: token,
            projectName: self.projectName
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listPlacementsPaginated`
/// to access the nested member `[Iot1ClickProjectsClientTypes.PlacementSummary]`
/// - Returns: `[Iot1ClickProjectsClientTypes.PlacementSummary]`
extension PaginatorSequence where Input == ListPlacementsInput, Output == ListPlacementsOutputResponse {
    public func placements() async throws -> [Iot1ClickProjectsClientTypes.PlacementSummary] {
        return try await self.asyncCompactMap { item in item.placements }
    }
}

/// Paginate over `[ListProjectsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListProjectsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListProjectsOutputResponse`
extension Iot1ClickProjectsClient {
    public func listProjectsPaginated(input: ListProjectsInput) -> ClientRuntime.PaginatorSequence<ListProjectsInput, ListProjectsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListProjectsInput, ListProjectsOutputResponse>(input: input, inputKey: \ListProjectsInput.nextToken, outputKey: \ListProjectsOutputResponse.nextToken, paginationFunction: self.listProjects(input:))
    }
}

extension ListProjectsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProjectsInput {
        return ListProjectsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listProjectsPaginated`
/// to access the nested member `[Iot1ClickProjectsClientTypes.ProjectSummary]`
/// - Returns: `[Iot1ClickProjectsClientTypes.ProjectSummary]`
extension PaginatorSequence where Input == ListProjectsInput, Output == ListProjectsOutputResponse {
    public func projects() async throws -> [Iot1ClickProjectsClientTypes.ProjectSummary] {
        return try await self.asyncCompactMap { item in item.projects }
    }
}
