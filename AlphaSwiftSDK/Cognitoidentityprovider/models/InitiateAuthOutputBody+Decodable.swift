// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct InitiateAuthOutputBody: Equatable {
    public let challengeName: ChallengeNameType?
    public let session: String?
    public let challengeParameters: [String:String]?
    public let authenticationResult: AuthenticationResultType?
}

extension InitiateAuthOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authenticationResult = "AuthenticationResult"
        case challengeName = "ChallengeName"
        case challengeParameters = "ChallengeParameters"
        case session = "Session"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .session)
        session = sessionDecoded
        let challengeParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .challengeParameters)
        var challengeParametersDecoded0: [String:String]? = nil
        if let challengeParametersContainer = challengeParametersContainer {
            challengeParametersDecoded0 = [String:String]()
            for (key0, stringtype0) in challengeParametersContainer {
                challengeParametersDecoded0?[key0] = stringtype0
            }
        }
        challengeParameters = challengeParametersDecoded0
        let authenticationResultDecoded = try containerValues.decodeIfPresent(AuthenticationResultType.self, forKey: .authenticationResult)
        authenticationResult = authenticationResultDecoded
    }
}
