// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProviderUserIdentifierType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case providerAttributeName = "ProviderAttributeName"
        case providerAttributeValue = "ProviderAttributeValue"
        case providerName = "ProviderName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let providerAttributeName = providerAttributeName {
            try encodeContainer.encode(providerAttributeName, forKey: .providerAttributeName)
        }
        if let providerAttributeValue = providerAttributeValue {
            try encodeContainer.encode(providerAttributeValue, forKey: .providerAttributeValue)
        }
        if let providerName = providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerAttributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerAttributeName)
        providerAttributeName = providerAttributeNameDecoded
        let providerAttributeValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerAttributeValue)
        providerAttributeValue = providerAttributeValueDecoded
    }
}
