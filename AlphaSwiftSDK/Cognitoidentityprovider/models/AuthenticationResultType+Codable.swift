// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuthenticationResultType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessToken = "AccessToken"
        case expiresIn = "ExpiresIn"
        case idToken = "IdToken"
        case newDeviceMetadata = "NewDeviceMetadata"
        case refreshToken = "RefreshToken"
        case tokenType = "TokenType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if expiresIn != 0 {
            try encodeContainer.encode(expiresIn, forKey: .expiresIn)
        }
        if let idToken = idToken {
            try encodeContainer.encode(idToken, forKey: .idToken)
        }
        if let newDeviceMetadata = newDeviceMetadata {
            try encodeContainer.encode(newDeviceMetadata, forKey: .newDeviceMetadata)
        }
        if let refreshToken = refreshToken {
            try encodeContainer.encode(refreshToken, forKey: .refreshToken)
        }
        if let tokenType = tokenType {
            try encodeContainer.encode(tokenType, forKey: .tokenType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let expiresInDecoded = try containerValues.decode(Int.self, forKey: .expiresIn)
        expiresIn = expiresInDecoded
        let tokenTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenType)
        tokenType = tokenTypeDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
        let idTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idToken)
        idToken = idTokenDecoded
        let newDeviceMetadataDecoded = try containerValues.decodeIfPresent(NewDeviceMetadataType.self, forKey: .newDeviceMetadata)
        newDeviceMetadata = newDeviceMetadataDecoded
    }
}
