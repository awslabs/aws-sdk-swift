// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CompromisedCredentialsRiskConfigurationType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case eventFilter = "EventFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let eventFilter = eventFilter {
            var eventFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventFilter)
            for eventfilterstype0 in eventFilter {
                try eventFilterContainer.encode(eventfilterstype0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventFilterContainer = try containerValues.decodeIfPresent([EventFilterType].self, forKey: .eventFilter)
        var eventFilterDecoded0:[EventFilterType]? = nil
        if let eventFilterContainer = eventFilterContainer {
            eventFilterDecoded0 = [EventFilterType]()
            for string0 in eventFilterContainer {
                eventFilterDecoded0?.append(string0)
            }
        }
        eventFilter = eventFilterDecoded0
        let actionsDecoded = try containerValues.decodeIfPresent(CompromisedCredentialsActionsType.self, forKey: .actions)
        actions = actionsDecoded
    }
}
