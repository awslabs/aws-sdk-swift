// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AdminGetUserOutputBody: Equatable {
    public let username: String?
    public let userAttributes: [AttributeType]?
    public let userCreateDate: Date?
    public let userLastModifiedDate: Date?
    public let enabled: Bool
    public let userStatus: UserStatusType?
    public let mFAOptions: [MFAOptionType]?
    public let preferredMfaSetting: String?
    public let userMFASettingList: [String]?
}

extension AdminGetUserOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case enabled = "Enabled"
        case mFAOptions = "MFAOptions"
        case preferredMfaSetting = "PreferredMfaSetting"
        case userAttributes = "UserAttributes"
        case userCreateDate = "UserCreateDate"
        case userLastModifiedDate = "UserLastModifiedDate"
        case userMFASettingList = "UserMFASettingList"
        case userStatus = "UserStatus"
        case username = "Username"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([AttributeType].self, forKey: .userAttributes)
        var userAttributesDecoded0:[AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [AttributeType]()
            for structure0 in userAttributesContainer {
                userAttributesDecoded0?.append(structure0)
            }
        }
        userAttributes = userAttributesDecoded0
        let userCreateDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .userCreateDate)
        userCreateDate = userCreateDateDecoded
        let userLastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .userLastModifiedDate)
        userLastModifiedDate = userLastModifiedDateDecoded
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let userStatusDecoded = try containerValues.decodeIfPresent(UserStatusType.self, forKey: .userStatus)
        userStatus = userStatusDecoded
        let mFAOptionsContainer = try containerValues.decodeIfPresent([MFAOptionType].self, forKey: .mFAOptions)
        var mFAOptionsDecoded0:[MFAOptionType]? = nil
        if let mFAOptionsContainer = mFAOptionsContainer {
            mFAOptionsDecoded0 = [MFAOptionType]()
            for structure0 in mFAOptionsContainer {
                mFAOptionsDecoded0?.append(structure0)
            }
        }
        mFAOptions = mFAOptionsDecoded0
        let preferredMfaSettingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMfaSetting)
        preferredMfaSetting = preferredMfaSettingDecoded
        let userMFASettingListContainer = try containerValues.decodeIfPresent([String].self, forKey: .userMFASettingList)
        var userMFASettingListDecoded0:[String]? = nil
        if let userMFASettingListContainer = userMFASettingListContainer {
            userMFASettingListDecoded0 = [String]()
            for string0 in userMFASettingListContainer {
                userMFASettingListDecoded0?.append(string0)
            }
        }
        userMFASettingList = userMFASettingListDecoded0
    }
}
