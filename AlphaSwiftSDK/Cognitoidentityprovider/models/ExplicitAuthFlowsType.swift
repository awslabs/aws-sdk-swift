// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ExplicitAuthFlowsType {
    case adminNoSrpAuth
    case allowAdminUserPasswordAuth
    case allowCustomAuth
    case allowRefreshTokenAuth
    case allowUserPasswordAuth
    case allowUserSrpAuth
    case customAuthFlowOnly
    case userPasswordAuth
    case sdkUnknown(String)
}

extension ExplicitAuthFlowsType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExplicitAuthFlowsType] {
        return [
            .adminNoSrpAuth,
            .allowAdminUserPasswordAuth,
            .allowCustomAuth,
            .allowRefreshTokenAuth,
            .allowUserPasswordAuth,
            .allowUserSrpAuth,
            .customAuthFlowOnly,
            .userPasswordAuth,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
        case .allowAdminUserPasswordAuth: return "ALLOW_ADMIN_USER_PASSWORD_AUTH"
        case .allowCustomAuth: return "ALLOW_CUSTOM_AUTH"
        case .allowRefreshTokenAuth: return "ALLOW_REFRESH_TOKEN_AUTH"
        case .allowUserPasswordAuth: return "ALLOW_USER_PASSWORD_AUTH"
        case .allowUserSrpAuth: return "ALLOW_USER_SRP_AUTH"
        case .customAuthFlowOnly: return "CUSTOM_AUTH_FLOW_ONLY"
        case .userPasswordAuth: return "USER_PASSWORD_AUTH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExplicitAuthFlowsType(rawValue: rawValue) ?? ExplicitAuthFlowsType.sdkUnknown(rawValue)
    }
}
