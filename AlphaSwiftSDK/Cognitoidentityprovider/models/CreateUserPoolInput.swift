// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the request to create a user pool.</p>
public struct CreateUserPoolInput: Equatable {
    /**
     <p>Use this setting to define which verified available method a user can use to recover
                 their password when they call <code>ForgotPassword</code>. It allows you to define a
                 preferred method when a user has more than one method available. With this setting, SMS
                 does not qualify for a valid password recovery mechanism if the user also has SMS MFA
                 enabled. In the absence of this setting, Cognito uses the legacy behavior to determine
                 the recovery method where SMS is preferred over email.</p>
     */
    public let accountRecoverySetting: AccountRecoverySettingType?
    /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
    public let adminCreateUserConfig: AdminCreateUserConfigType?
    /**
     <p>Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or
                     <b>preferred_username</b>.</p>
     */
    public let aliasAttributes: [AliasAttributeType]?
    /// <p>The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.</p>
    public let autoVerifiedAttributes: [VerifiedAttributeType]?
    /// <p>The device configuration.</p>
    public let deviceConfiguration: DeviceConfigurationType?
    /// <p>The email configuration.</p>
    public let emailConfiguration: EmailConfigurationType?
    /// <p>A string representing the email verification message. EmailVerificationMessage is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
    public let emailVerificationMessage: String?
    /// <p>A string representing the email verification subject.  EmailVerificationSubject is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
    public let emailVerificationSubject: String?
    /**
     <p>The Lambda trigger configuration information for the new user pool.</p>
             <note>
                 <p>In a push model, event sources (such as Amazon S3 and custom applications) need
                     permission to invoke a function. So you will need to make an extra call to add
                     permission for these event sources to invoke your Lambda function.</p>
                 <p></p>
                 <p>For more information on using the Lambda API to add permission, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html">
                         AddPermission </a>. </p>
                 <p>For adding permission using the AWS CLI, see <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html"> add-permission
                     </a>.</p>
             </note>
     */
    public let lambdaConfig: LambdaConfigType?
    /// <p>Specifies MFA configuration details.</p>
    public let mfaConfiguration: UserPoolMfaType?
    /// <p>The policies associated with the new user pool.</p>
    public let policies: UserPoolPolicyType?
    /// <p>A string used to name the user pool.</p>
    public let poolName: String?
    /**
     <p>An array of schema attributes for the new user pool. These attributes can be standard
                 or custom attributes.</p>
     */
    public let schema: [SchemaAttributeType]?
    /// <p>A string representing the SMS authentication message.</p>
    public let smsAuthenticationMessage: String?
    /// <p>The SMS configuration.</p>
    public let smsConfiguration: SmsConfigurationType?
    /// <p>A string representing the SMS verification message.</p>
    public let smsVerificationMessage: String?
    /**
     <p>Used to enable advanced security risk detection. Set the key
                     <code>AdvancedSecurityMode</code> to the value "AUDIT".</p>
     */
    public let userPoolAddOns: UserPoolAddOnsType?
    /**
     <p>The tag keys and values to assign to the user pool. A tag is a label that you can use
                 to categorize and manage user pools in different ways, such as by purpose, owner,
                 environment, or other criteria.</p>
     */
    public let userPoolTags: [String:String]?
    /**
     <p>Specifies whether email addresses or phone numbers can be specified as usernames when
                 a user signs up.</p>
     */
    public let usernameAttributes: [UsernameAttributeType]?
    /**
     <p>You can choose to set case sensitivity on the username input for the selected sign-in
                 option. For example, when this is set to <code>False</code>, users will be able to sign
                 in using either "username" or "Username". This configuration is immutable once it has
                 been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
     */
    public let usernameConfiguration: UsernameConfigurationType?
    /**
     <p>The template for the verification message that the user sees when the app requests
                 permission to access the user's information.</p>
     */
    public let verificationMessageTemplate: VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: AccountRecoverySettingType? = nil,
        adminCreateUserConfig: AdminCreateUserConfigType? = nil,
        aliasAttributes: [AliasAttributeType]? = nil,
        autoVerifiedAttributes: [VerifiedAttributeType]? = nil,
        deviceConfiguration: DeviceConfigurationType? = nil,
        emailConfiguration: EmailConfigurationType? = nil,
        emailVerificationMessage: String? = nil,
        emailVerificationSubject: String? = nil,
        lambdaConfig: LambdaConfigType? = nil,
        mfaConfiguration: UserPoolMfaType? = nil,
        policies: UserPoolPolicyType? = nil,
        poolName: String? = nil,
        schema: [SchemaAttributeType]? = nil,
        smsAuthenticationMessage: String? = nil,
        smsConfiguration: SmsConfigurationType? = nil,
        smsVerificationMessage: String? = nil,
        userPoolAddOns: UserPoolAddOnsType? = nil,
        userPoolTags: [String:String]? = nil,
        usernameAttributes: [UsernameAttributeType]? = nil,
        usernameConfiguration: UsernameConfigurationType? = nil,
        verificationMessageTemplate: VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.aliasAttributes = aliasAttributes
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.poolName = poolName
        self.schema = schema
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userPoolAddOns = userPoolAddOns
        self.userPoolTags = userPoolTags
        self.usernameAttributes = usernameAttributes
        self.usernameConfiguration = usernameConfiguration
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}
