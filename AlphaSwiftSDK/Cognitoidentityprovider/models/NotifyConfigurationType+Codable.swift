// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotifyConfigurationType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockEmail = "BlockEmail"
        case from = "From"
        case mfaEmail = "MfaEmail"
        case noActionEmail = "NoActionEmail"
        case replyTo = "ReplyTo"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockEmail = blockEmail {
            try encodeContainer.encode(blockEmail, forKey: .blockEmail)
        }
        if let from = from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let mfaEmail = mfaEmail {
            try encodeContainer.encode(mfaEmail, forKey: .mfaEmail)
        }
        if let noActionEmail = noActionEmail {
            try encodeContainer.encode(noActionEmail, forKey: .noActionEmail)
        }
        if let replyTo = replyTo {
            try encodeContainer.encode(replyTo, forKey: .replyTo)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromDecoded = try containerValues.decodeIfPresent(String.self, forKey: .from)
        from = fromDecoded
        let replyToDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replyTo)
        replyTo = replyToDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let blockEmailDecoded = try containerValues.decodeIfPresent(NotifyEmailType.self, forKey: .blockEmail)
        blockEmail = blockEmailDecoded
        let noActionEmailDecoded = try containerValues.decodeIfPresent(NotifyEmailType.self, forKey: .noActionEmail)
        noActionEmail = noActionEmailDecoded
        let mfaEmailDecoded = try containerValues.decodeIfPresent(NotifyEmailType.self, forKey: .mfaEmail)
        mfaEmail = mfaEmailDecoded
    }
}
