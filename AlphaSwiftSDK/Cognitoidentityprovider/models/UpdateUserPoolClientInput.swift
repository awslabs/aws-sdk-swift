// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the request to update the user pool client.</p>
public struct UpdateUserPoolClientInput: Equatable {
    /// <p>The time limit, after which the access token is no longer valid and cannot be used.</p>
    public let accessTokenValidity: Int?
    /**
     <p>The allowed OAuth flows.</p>
             <p>Set to <code>code</code> to initiate a code grant flow, which provides an
                 authorization code as the response. This code can be exchanged for access tokens with
                 the token endpoint.</p>
             <p>Set to <code>implicit</code> to specify that the client should get the access token
                 (and, optionally, ID token, based on scopes) directly.</p>
             <p>Set to <code>client_credentials</code> to specify that the client should get the
                 access token (and, optionally, ID token, based on scopes) from the token endpoint using
                 a combination of client and client_secret.</p>
     */
    public let allowedOAuthFlows: [OAuthFlowType]?
    /**
     <p>Set to true if the client is allowed to follow the OAuth protocol when interacting
                 with Cognito user pools.</p>
     */
    public let allowedOAuthFlowsUserPoolClient: Bool
    /**
     <p>The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>,
                     <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values
                 provided by AWS are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created
                 in Resource Servers are also supported.</p>
     */
    public let allowedOAuthScopes: [String]?
    /**
     <p>The Amazon Pinpoint analytics configuration for collecting metrics for this user
                 pool.</p>
             <note>
                 <p>In regions where Pinpoint is not available, Cognito User Pools only supports sending events to Amazon Pinpoint projects in us-east-1.
                     In regions where Pinpoint is available, Cognito User Pools will
                     support sending events to Amazon Pinpoint projects within that same region.
                 </p>
             </note>
     */
    public let analyticsConfiguration: AnalyticsConfigurationType?
    /**
     <p>A list of allowed redirect (callback) URLs for the identity providers.</p>
             <p>A redirect URI must:</p>
             <ul>
                 <li>
                     <p>Be an absolute URI.</p>
                 </li>
                 <li>
                     <p>Be registered with the authorization server.</p>
                 </li>
                 <li>
                     <p>Not include a fragment component.</p>
                 </li>
              </ul>
             <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                     Redirection Endpoint</a>.</p>
             <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing
                 purposes only.</p>
             <p>App callback URLs such as myapp://example are also supported.</p>
     */
    public let callbackURLs: [String]?
    /// <p>The ID of the client associated with the user pool.</p>
    public let clientId: String?
    /// <p>The client name from the update user pool client request.</p>
    public let clientName: String?
    /**
     <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
             <p>A redirect URI must:</p>
             <ul>
                 <li>
                     <p>Be an absolute URI.</p>
                 </li>
                 <li>
                     <p>Be registered with the authorization server.</p>
                 </li>
                 <li>
                     <p>Not include a fragment component.</p>
                 </li>
              </ul>
             <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                     Redirection Endpoint</a>.</p>
             <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing
                 purposes only.</p>
             <p>App callback URLs such as myapp://example are also supported.</p>
     */
    public let defaultRedirectURI: String?
    /**
     <p>The authentication flows that are supported by the user pool clients. Flow names
                 without the <code>ALLOW_</code> prefix are deprecated in favor of new names with the
                     <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix cannot
                 be used along with values without <code>ALLOW_</code> prefix.</p>
             <p>Valid values include:</p>
             <ul>
                 <li>
                     <p>
                       <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
                         authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
                         the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow,
                         Cognito receives the password in the request instead of using the SRP (Secure
                         Remote Password protocol) protocol to verify passwords.</p>
                 </li>
                 <li>
                     <p>
                       <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
                         authentication.</p>
                 </li>
                 <li>
                     <p>
                       <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
                         authentication. In this flow, Cognito receives the password in the request
                         instead of using the SRP protocol to verify passwords.</p>
                 </li>
                 <li>
                     <p>
                       <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP based authentication.</p>
                 </li>
                 <li>
                     <p>
                       <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
                         tokens.</p>
                 </li>
              </ul>
     */
    public let explicitAuthFlows: [ExplicitAuthFlowsType]?
    /// <p>The time limit, after which the ID token is no longer valid and cannot be used.</p>
    public let idTokenValidity: Int?
    /// <p>A list of allowed logout URLs for the identity providers.</p>
    public let logoutURLs: [String]?
    /**
     <p>Use this setting to choose which errors and responses are returned by Cognito APIs
                 during authentication, account confirmation, and password recovery when the user does
                 not exist in the user pool. When set to <code>ENABLED</code> and the user does not
                 exist, authentication returns an error indicating either the username or password was
                 incorrect, and account confirmation and password recovery return a response indicating a
                 code was sent to a simulated destination. When set to <code>LEGACY</code>, those APIs
                 will return a <code>UserNotFoundException</code> exception if the user does not exist in
                 the user pool.</p>
             <p>Valid values include:</p>
             <ul>
                 <li>
                     <p>
                       <code>ENABLED</code> - This prevents user existence-related errors.</p>
                 </li>
                 <li>
                     <p>
                       <code>LEGACY</code> - This represents the old behavior of Cognito where user
                         existence related errors are not prevented.</p>
                 </li>
              </ul>

             <note>
                 <p>After February 15th 2020, the value of <code>PreventUserExistenceErrors</code>
                     will default to <code>ENABLED</code> for newly created user pool clients if no value
                     is provided.</p>
             </note>
     */
    public let preventUserExistenceErrors: PreventUserExistenceErrorTypes?
    /// <p>The read-only attributes of the user pool.</p>
    public let readAttributes: [String]?
    /**
     <p>The time limit, in days, after which the refresh token is no longer valid and cannot
                 be used.</p>
     */
    public let refreshTokenValidity: Int
    /**
     <p>A list of provider names for the identity providers that are supported on this
                 client.</p>
     */
    public let supportedIdentityProviders: [String]?
    /// <p>The units in which the validity times are represented in. Default for RefreshToken is days, and default for ID and access tokens are hours.</p>
    public let tokenValidityUnits: TokenValidityUnitsType?
    /**
     <p>The user pool ID for the user pool where you want to update the user pool
                 client.</p>
     */
    public let userPoolId: String?
    /// <p>The writeable attributes of the user pool.</p>
    public let writeAttributes: [String]?

    public init (
        accessTokenValidity: Int? = nil,
        allowedOAuthFlows: [OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Bool = false,
        allowedOAuthScopes: [String]? = nil,
        analyticsConfiguration: AnalyticsConfigurationType? = nil,
        callbackURLs: [String]? = nil,
        clientId: String? = nil,
        clientName: String? = nil,
        defaultRedirectURI: String? = nil,
        explicitAuthFlows: [ExplicitAuthFlowsType]? = nil,
        idTokenValidity: Int? = nil,
        logoutURLs: [String]? = nil,
        preventUserExistenceErrors: PreventUserExistenceErrorTypes? = nil,
        readAttributes: [String]? = nil,
        refreshTokenValidity: Int = 0,
        supportedIdentityProviders: [String]? = nil,
        tokenValidityUnits: TokenValidityUnitsType? = nil,
        userPoolId: String? = nil,
        writeAttributes: [String]? = nil
    )
    {
        self.accessTokenValidity = accessTokenValidity
        self.allowedOAuthFlows = allowedOAuthFlows
        self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
        self.allowedOAuthScopes = allowedOAuthScopes
        self.analyticsConfiguration = analyticsConfiguration
        self.callbackURLs = callbackURLs
        self.clientId = clientId
        self.clientName = clientName
        self.defaultRedirectURI = defaultRedirectURI
        self.explicitAuthFlows = explicitAuthFlows
        self.idTokenValidity = idTokenValidity
        self.logoutURLs = logoutURLs
        self.preventUserExistenceErrors = preventUserExistenceErrors
        self.readAttributes = readAttributes
        self.refreshTokenValidity = refreshTokenValidity
        self.supportedIdentityProviders = supportedIdentityProviders
        self.tokenValidityUnits = tokenValidityUnits
        self.userPoolId = userPoolId
        self.writeAttributes = writeAttributes
    }
}
