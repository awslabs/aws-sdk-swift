// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The request to respond to an authentication challenge.</p>
public struct RespondToAuthChallengeInput: Equatable {
    /**
     <p>The Amazon Pinpoint analytics metadata for collecting metrics for
                     <code>RespondToAuthChallenge</code> calls.</p>
     */
    public let analyticsMetadata: AnalyticsMetadataType?
    /**
     <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
             <p>
                 <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>
     */
    public let challengeName: ChallengeNameType?
    /**
     <p>The challenge responses. These are inputs corresponding to the value of
                     <code>ChallengeName</code>, for example:</p>
             <note>
                 <p>
                    <code>SECRET_HASH</code> (if app client is configured with client secret) applies
                     to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).</p>
             </note>
             <ul>
                 <li>
                     <p>
                       <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.</p>
                 </li>
                 <li>
                     <p>
                       <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
                             <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
                             <code>USERNAME</code>.</p>
                 </li>
                 <li>
                     <p>
                       <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
                         required attributes, <code>USERNAME</code>. </p>
                 </li>
                 <li>
                     <p>
                       <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
                             <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.</p>
                 </li>
                 <li>
                     <p>
                       <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
                             <code>DEVICE_KEY</code>, <code>SRP_A</code> (and
                         <code>SECRET_HASH</code>).</p>
                 </li>
                 <li>
                     <p>
                       <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
                             <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.</p>
                 </li>
              </ul>
     */
    public let challengeResponses: [String:String]?
    /// <p>The app client ID.</p>
    public let clientId: String?
    /**
     <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                 that this action triggers. </p>
             <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
                 When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any functions
                 that are assigned to the following triggers: <i>post authentication</i>,
                     <i>pre token generation</i>, <i>define auth
                     challenge</i>, <i>create auth challenge</i>, and
                     <i>verify auth challenge</i>. When Amazon Cognito invokes any of these
                 functions, it passes a JSON payload, which the function receives as input. This payload
                 contains a <code>clientMetadata</code> attribute, which provides the data that you
                 assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your
                 function code in AWS Lambda, you can process the <code>clientMetadata</code> value to
                 enhance your workflow for your specific needs.</p>
             <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
                     <i>Amazon Cognito Developer Guide</i>.</p>
             <note>
                 <p>Take the following limitations into consideration when you use the ClientMetadata
                     parameter:</p>
                 <ul>
                    <li>
                         <p>Amazon Cognito does not store the ClientMetadata value. This data is
                             available only to AWS Lambda triggers that are assigned to a user pool to
                             support custom workflows. If your user pool configuration does not include
                             triggers, the ClientMetadata parameter serves no purpose.</p>
                     </li>
                    <li>
                         <p>Amazon Cognito does not validate the ClientMetadata value.</p>
                     </li>
                    <li>
                         <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
                             it to provide sensitive information.</p>
                     </li>
                 </ul>
             </note>
     */
    public let clientMetadata: [String:String]?
    /**
     <p>The session which should be passed both ways in challenge-response calls to the
                 service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call
                 determines that the caller needs to go through another challenge, they return a session
                 with other challenge parameters. This session should be passed as it is to the next
                     <code>RespondToAuthChallenge</code> API call.</p>
     */
    public let session: String?
    /**
     <p>Contextual data such as the user's device fingerprint, IP address, or location used
                 for evaluating the risk of an unexpected event by Amazon Cognito advanced
                 security.</p>
     */
    public let userContextData: UserContextDataType?

    public init (
        analyticsMetadata: AnalyticsMetadataType? = nil,
        challengeName: ChallengeNameType? = nil,
        challengeResponses: [String:String]? = nil,
        clientId: String? = nil,
        clientMetadata: [String:String]? = nil,
        session: String? = nil,
        userContextData: UserContextDataType? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.challengeName = challengeName
        self.challengeResponses = challengeResponses
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.session = session
        self.userContextData = userContextData
    }
}
