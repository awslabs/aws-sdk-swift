// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateUserPoolInputBody: Equatable {
    public let userPoolId: String?
    public let policies: UserPoolPolicyType?
    public let lambdaConfig: LambdaConfigType?
    public let autoVerifiedAttributes: [VerifiedAttributeType]?
    public let smsVerificationMessage: String?
    public let emailVerificationMessage: String?
    public let emailVerificationSubject: String?
    public let verificationMessageTemplate: VerificationMessageTemplateType?
    public let smsAuthenticationMessage: String?
    public let mfaConfiguration: UserPoolMfaType?
    public let deviceConfiguration: DeviceConfigurationType?
    public let emailConfiguration: EmailConfigurationType?
    public let smsConfiguration: SmsConfigurationType?
    public let userPoolTags: [String:String]?
    public let adminCreateUserConfig: AdminCreateUserConfigType?
    public let userPoolAddOns: UserPoolAddOnsType?
    public let accountRecoverySetting: AccountRecoverySettingType?
}

extension UpdateUserPoolInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolId = "UserPoolId"
        case userPoolTags = "UserPoolTags"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(UserPoolPolicyType.self, forKey: .policies)
        policies = policiesDecoded
        let lambdaConfigDecoded = try containerValues.decodeIfPresent(LambdaConfigType.self, forKey: .lambdaConfig)
        lambdaConfig = lambdaConfigDecoded
        let autoVerifiedAttributesContainer = try containerValues.decodeIfPresent([VerifiedAttributeType].self, forKey: .autoVerifiedAttributes)
        var autoVerifiedAttributesDecoded0:[VerifiedAttributeType]? = nil
        if let autoVerifiedAttributesContainer = autoVerifiedAttributesContainer {
            autoVerifiedAttributesDecoded0 = [VerifiedAttributeType]()
            for string0 in autoVerifiedAttributesContainer {
                autoVerifiedAttributesDecoded0?.append(string0)
            }
        }
        autoVerifiedAttributes = autoVerifiedAttributesDecoded0
        let smsVerificationMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .smsVerificationMessage)
        smsVerificationMessage = smsVerificationMessageDecoded
        let emailVerificationMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailVerificationMessage)
        emailVerificationMessage = emailVerificationMessageDecoded
        let emailVerificationSubjectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailVerificationSubject)
        emailVerificationSubject = emailVerificationSubjectDecoded
        let verificationMessageTemplateDecoded = try containerValues.decodeIfPresent(VerificationMessageTemplateType.self, forKey: .verificationMessageTemplate)
        verificationMessageTemplate = verificationMessageTemplateDecoded
        let smsAuthenticationMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .smsAuthenticationMessage)
        smsAuthenticationMessage = smsAuthenticationMessageDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(DeviceConfigurationType.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let emailConfigurationDecoded = try containerValues.decodeIfPresent(EmailConfigurationType.self, forKey: .emailConfiguration)
        emailConfiguration = emailConfigurationDecoded
        let smsConfigurationDecoded = try containerValues.decodeIfPresent(SmsConfigurationType.self, forKey: .smsConfiguration)
        smsConfiguration = smsConfigurationDecoded
        let userPoolTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .userPoolTags)
        var userPoolTagsDecoded0: [String:String]? = nil
        if let userPoolTagsContainer = userPoolTagsContainer {
            userPoolTagsDecoded0 = [String:String]()
            for (key0, tagvaluetype0) in userPoolTagsContainer {
                userPoolTagsDecoded0?[key0] = tagvaluetype0
            }
        }
        userPoolTags = userPoolTagsDecoded0
        let adminCreateUserConfigDecoded = try containerValues.decodeIfPresent(AdminCreateUserConfigType.self, forKey: .adminCreateUserConfig)
        adminCreateUserConfig = adminCreateUserConfigDecoded
        let userPoolAddOnsDecoded = try containerValues.decodeIfPresent(UserPoolAddOnsType.self, forKey: .userPoolAddOns)
        userPoolAddOns = userPoolAddOnsDecoded
        let accountRecoverySettingDecoded = try containerValues.decodeIfPresent(AccountRecoverySettingType.self, forKey: .accountRecoverySetting)
        accountRecoverySetting = accountRecoverySettingDecoded
    }
}
