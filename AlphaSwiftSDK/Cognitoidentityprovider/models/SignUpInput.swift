// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the request to register a user.</p>
public struct SignUpInput: Equatable {
    /**
     <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code>
                 calls.</p>
     */
    public let analyticsMetadata: AnalyticsMetadataType?
    /// <p>The ID of the client associated with the user pool.</p>
    public let clientId: String?
    /**
     <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                 that this action triggers. </p>
             <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
                 When you use the SignUp API action, Amazon Cognito invokes any functions that are
                 assigned to the following triggers: <i>pre sign-up</i>, <i>custom
                     message</i>, and <i>post confirmation</i>. When Amazon Cognito
                 invokes any of these functions, it passes a JSON payload, which the function receives as
                 input. This payload contains a <code>clientMetadata</code> attribute, which provides the
                 data that you assigned to the ClientMetadata parameter in your SignUp request. In your
                 function code in AWS Lambda, you can process the <code>clientMetadata</code> value to
                 enhance your workflow for your specific needs.</p>
             <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
                     <i>Amazon Cognito Developer Guide</i>.</p>
             <note>
                 <p>Take the following limitations into consideration when you use the ClientMetadata
                     parameter:</p>
                 <ul>
                    <li>
                         <p>Amazon Cognito does not store the ClientMetadata value. This data is
                             available only to AWS Lambda triggers that are assigned to a user pool to
                             support custom workflows. If your user pool configuration does not include
                             triggers, the ClientMetadata parameter serves no purpose.</p>
                     </li>
                    <li>
                         <p>Amazon Cognito does not validate the ClientMetadata value.</p>
                     </li>
                    <li>
                         <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
                             it to provide sensitive information.</p>
                     </li>
                 </ul>
             </note>
     */
    public let clientMetadata: [String:String]?
    /// <p>The password of the user you wish to register.</p>
    public let password: String?
    /**
     <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
                 user pool client and username plus the client ID in the message.</p>
     */
    public let secretHash: String?
    /**
     <p>An array of name-value pairs representing user attributes.</p>
             <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                 attribute name.</p>
     */
    public let userAttributes: [AttributeType]?
    /**
     <p>Contextual data such as the user's device fingerprint, IP address, or location used
                 for evaluating the risk of an unexpected event by Amazon Cognito advanced
                 security.</p>
     */
    public let userContextData: UserContextDataType?
    /// <p>The user name of the user you wish to register.</p>
    public let username: String?
    /// <p>The validation data in the request to register a user.</p>
    public let validationData: [AttributeType]?

    public init (
        analyticsMetadata: AnalyticsMetadataType? = nil,
        clientId: String? = nil,
        clientMetadata: [String:String]? = nil,
        password: String? = nil,
        secretHash: String? = nil,
        userAttributes: [AttributeType]? = nil,
        userContextData: UserContextDataType? = nil,
        username: String? = nil,
        validationData: [AttributeType]? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.password = password
        self.secretHash = secretHash
        self.userAttributes = userAttributes
        self.userContextData = userContextData
        self.username = username
        self.validationData = validationData
    }
}
