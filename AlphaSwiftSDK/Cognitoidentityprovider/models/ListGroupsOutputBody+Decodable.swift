// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListGroupsOutputBody: Equatable {
    public let groups: [GroupType]?
    public let nextToken: String?
}

extension ListGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case groups = "Groups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsContainer = try containerValues.decodeIfPresent([GroupType].self, forKey: .groups)
        var groupsDecoded0:[GroupType]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [GroupType]()
            for structure0 in groupsContainer {
                groupsDecoded0?.append(structure0)
            }
        }
        groups = groupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
