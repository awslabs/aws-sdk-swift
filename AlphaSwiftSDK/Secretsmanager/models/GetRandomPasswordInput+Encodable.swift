// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetRandomPasswordInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case excludeCharacters = "ExcludeCharacters"
        case excludeLowercase = "ExcludeLowercase"
        case excludeNumbers = "ExcludeNumbers"
        case excludePunctuation = "ExcludePunctuation"
        case excludeUppercase = "ExcludeUppercase"
        case includeSpace = "IncludeSpace"
        case passwordLength = "PasswordLength"
        case requireEachIncludedType = "RequireEachIncludedType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludeCharacters = excludeCharacters {
            try encodeContainer.encode(excludeCharacters, forKey: .excludeCharacters)
        }
        if excludeLowercase != false {
            try encodeContainer.encode(excludeLowercase, forKey: .excludeLowercase)
        }
        if excludeNumbers != false {
            try encodeContainer.encode(excludeNumbers, forKey: .excludeNumbers)
        }
        if excludePunctuation != false {
            try encodeContainer.encode(excludePunctuation, forKey: .excludePunctuation)
        }
        if excludeUppercase != false {
            try encodeContainer.encode(excludeUppercase, forKey: .excludeUppercase)
        }
        if includeSpace != false {
            try encodeContainer.encode(includeSpace, forKey: .includeSpace)
        }
        if passwordLength != 0 {
            try encodeContainer.encode(passwordLength, forKey: .passwordLength)
        }
        if requireEachIncludedType != false {
            try encodeContainer.encode(requireEachIncludedType, forKey: .requireEachIncludedType)
        }
    }
}
