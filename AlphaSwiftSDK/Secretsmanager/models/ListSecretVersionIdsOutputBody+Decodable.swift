// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSecretVersionIdsOutputBody: Equatable {
    public let versions: [SecretVersionsListEntry]?
    public let nextToken: String?
    public let aRN: String?
    public let name: String?
}

extension ListSecretVersionIdsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case name = "Name"
        case nextToken = "NextToken"
        case versions = "Versions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionsContainer = try containerValues.decodeIfPresent([SecretVersionsListEntry].self, forKey: .versions)
        var versionsDecoded0:[SecretVersionsListEntry]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [SecretVersionsListEntry]()
            for structure0 in versionsContainer {
                versionsDecoded0?.append(structure0)
            }
        }
        versions = versionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}
