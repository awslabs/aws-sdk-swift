// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeSecretOutput: Equatable {
    /// <p>The ARN of the secret.</p>
    public let aRN: String?
    /// <p>The date that the secret was created.</p>
    public let createdDate: Date?
    /**
     <p>This value exists if the secret is scheduled for deletion. Some time after the specified
           date and time, Secrets Manager deletes the secret and all of its versions.</p>
              <p>If a secret is scheduled for deletion, then its details, including the encrypted secret
           information, is not accessible. To cancel a scheduled deletion and restore access, use <a>RestoreSecret</a>.</p>
     */
    public let deletedDate: Date?
    /// <p>The user-provided description of the secret.</p>
    public let description: String?
    /**
     <p>The ARN or alias of the AWS KMS customer master key (CMK) that's used to encrypt the
             <code>SecretString</code> or <code>SecretBinary</code> fields in each version of the secret.
           If you don't provide a key, then Secrets Manager defaults to encrypting the secret fields with the
           default AWS KMS CMK (the one named <code>awssecretsmanager</code>) for this account.</p>
     */
    public let kmsKeyId: String?
    /**
     <p>The last date that this secret was accessed. This value is truncated to midnight of the
           date and therefore shows only the date, not the time.</p>
     */
    public let lastAccessedDate: Date?
    /// <p>The last date and time that this secret was modified in any way.</p>
    public let lastChangedDate: Date?
    /**
     <p>The most recent date and time that the Secrets Manager rotation process was successfully
           completed. This value is null if the secret has never rotated.</p>
     */
    public let lastRotatedDate: Date?
    /// <p>The user-provided friendly name of the secret.</p>
    public let name: String?
    /// <p>Returns the name of the service that created this secret.</p>
    public let owningService: String?
    /**
     <p>Specifies whether automatic rotation is enabled for this secret.</p>
              <p>To enable rotation, use <a>RotateSecret</a> with
             <code>AutomaticallyRotateAfterDays</code> set to a value greater than 0. To disable
           rotation, use <a>CancelRotateSecret</a>.</p>
     */
    public let rotationEnabled: Bool
    /**
     <p>The ARN of a Lambda function that's invoked by Secrets Manager to rotate the
           secret either automatically per the schedule or manually by a call to
             <code>RotateSecret</code>.</p>
     */
    public let rotationLambdaARN: String?
    /// <p>A structure that contains the rotation configuration for this secret.</p>
    public let rotationRules: RotationRulesType?
    /**
     <p>The list of user-defined tags that are associated with the secret. To add tags to a
           secret, use <a>TagResource</a>. To remove tags, use <a>UntagResource</a>.</p>
     */
    public let tags: [Tag]?
    /**
     <p>A list of all of the currently assigned <code>VersionStage</code> staging labels and the
             <code>VersionId</code> that each is attached to. Staging labels are used to keep track of
           the different versions during the rotation process.</p>
              <note>
                 <p>A version that does not have any staging labels attached is considered deprecated and
             subject to deletion. Such versions are not included in this list.</p>
              </note>
     */
    public let versionIdsToStages: [String:[String]?]?

    public init (
        aRN: String? = nil,
        createdDate: Date? = nil,
        deletedDate: Date? = nil,
        description: String? = nil,
        kmsKeyId: String? = nil,
        lastAccessedDate: Date? = nil,
        lastChangedDate: Date? = nil,
        lastRotatedDate: Date? = nil,
        name: String? = nil,
        owningService: String? = nil,
        rotationEnabled: Bool = false,
        rotationLambdaARN: String? = nil,
        rotationRules: RotationRulesType? = nil,
        tags: [Tag]? = nil,
        versionIdsToStages: [String:[String]?]? = nil
    )
    {
        self.aRN = aRN
        self.createdDate = createdDate
        self.deletedDate = deletedDate
        self.description = description
        self.kmsKeyId = kmsKeyId
        self.lastAccessedDate = lastAccessedDate
        self.lastChangedDate = lastChangedDate
        self.lastRotatedDate = lastRotatedDate
        self.name = name
        self.owningService = owningService
        self.rotationEnabled = rotationEnabled
        self.rotationLambdaARN = rotationLambdaARN
        self.rotationRules = rotationRules
        self.tags = tags
        self.versionIdsToStages = versionIdsToStages
    }
}
