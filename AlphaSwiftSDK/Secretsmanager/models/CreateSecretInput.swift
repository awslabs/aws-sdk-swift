// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateSecretInput: Equatable {
    /**
     <p>(Optional) If you include <code>SecretString</code> or <code>SecretBinary</code>, then an
           initial version is created as part of the secret, and this parameter specifies a unique
           identifier for the new version. </p>
              <note>
                 <p>If you use the AWS CLI or one of the AWS SDK to call this operation, then you can
             leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it
             as the value for this parameter in the request. If you don't use the SDK and instead
             generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a
               <code>ClientRequestToken</code> yourself for the new version and include the value in the
             request.</p>
              </note>
              <p>This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental
           creation of duplicate versions if there are failures and retries during a rotation. We
           recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value to
           ensure uniqueness of your versions within the specified secret. </p>
              <ul>
                 <li>
                    <p>If the <code>ClientRequestToken</code> value isn't already associated with a version
               of the secret then a new version of the secret is created. </p>
                 </li>
                 <li>
                    <p>If a version with this value already exists and the version <code>SecretString</code>
               and <code>SecretBinary</code> values are the same as those in the request, then the
               request is ignored.</p>
                 </li>
                 <li>
                    <p>If a version with this value already exists and that version's
                 <code>SecretString</code> and <code>SecretBinary</code> values are different from those
               in the request then the request fails because you cannot modify an existing version.
               Instead, use <a>PutSecretValue</a> to create a new version.</p>
                 </li>
              </ul>
              <p>This value becomes the <code>VersionId</code> of the new version.</p>
     */
    public var clientRequestToken: String?
    /// <p>(Optional) Specifies a user-provided description of the secret.</p>
    public let description: String?
    /**
     <p>(Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) to
           be used to encrypt the <code>SecretString</code> or <code>SecretBinary</code> values in the
           versions stored in this secret.</p>
              <p>You can specify any of the supported ways to identify a AWS KMS key ID. If you need to
           reference a CMK in a different account, you can use only the key ARN or the alias ARN.</p>
              <p>If you don't specify this value, then Secrets Manager defaults to using the AWS account's
           default CMK (the one named <code>aws/secretsmanager</code>). If a AWS KMS CMK with that name doesn't yet
           exist, then Secrets Manager creates it for you automatically the first time it needs to encrypt a
           version's <code>SecretString</code> or <code>SecretBinary</code> fields.</p>
              <important>
                 <p>You can use the account default CMK to encrypt and decrypt only if you call this
             operation using credentials from the same account that owns the secret. If the secret
             resides in a different account, then you must create a custom CMK and specify the ARN in
             this field. </p>
              </important>
     */
    public let kmsKeyId: String?
    /**
     <p>Specifies the friendly name of the new secret.</p>
              <p>The secret name must be ASCII letters, digits, or the following characters :
           /_+=.@-</p>
              <note>
                 <p>Do not end your secret name with a hyphen followed by six characters. If you do so, you
             risk confusion and unexpected results when searching for a secret by partial ARN. Secrets Manager
             automatically adds a hyphen and six random characters at the end of the ARN.</p>
              </note>
     */
    public let name: String?
    /**
     <p>(Optional) Specifies binary data that you want to encrypt and store in the new version of
           the secret. To use this parameter in the command-line tools, we recommend that you store your
           binary data in a file and then use the appropriate technique for your tool to pass the
           contents of the file as a parameter.</p>
              <p>Either <code>SecretString</code> or <code>SecretBinary</code> must have a value, but not
           both. They cannot both be empty.</p>
              <p>This parameter is not available using the Secrets Manager console. It can be accessed only by
           using the AWS CLI or one of the AWS SDKs.</p>
     */
    public let secretBinary: Data?
    /**
     <p>(Optional) Specifies text data that you want to encrypt and store in this new version of
           the secret.</p>
              <p>Either <code>SecretString</code> or <code>SecretBinary</code> must have a value, but not
           both. They cannot both be empty.</p>
              <p>If you create a secret by using the Secrets Manager console then Secrets Manager puts the protected
           secret text in only the <code>SecretString</code> parameter. The Secrets Manager console stores the
           information as a JSON structure of key/value pairs that the Lambda rotation function knows how
           to parse.</p>
              <p>For storing multiple values, we recommend that you use a JSON text string argument and
           specify key/value pairs. For information on how to format a JSON parameter for the various
           command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using JSON for
             Parameters</a> in the <i>AWS CLI User Guide</i>. For example:</p>
              <p>
                 <code>{"username":"bob","password":"abc123xyz456"}</code>
              </p>
              <p>If your command-line tool or SDK requires quotation marks around the parameter, you should
           use single quotes to avoid confusion with the double quotes required in the JSON text. </p>
     */
    public let secretString: String?
    /**
     <p>(Optional) Specifies a list of user-defined tags that are attached to the secret. Each tag
           is a "Key" and "Value" pair of strings. This operation only appends tags to the existing list
           of tags. To remove tags, you must use <a>UntagResource</a>.</p>
              <important>
                 <ul>
                    <li>
                       <p>Secrets Manager tag key names are case sensitive. A tag with the key "ABC" is a different tag
                 from one with key "abc".</p>
                    </li>
                    <li>
                       <p>If you check tags in IAM policy <code>Condition</code> elements as part of your
                 security strategy, then adding or removing a tag can change permissions. If the
                 successful completion of this operation would result in you losing your permissions for
                 this secret, then this operation is blocked and returns an <code>Access Denied</code>
                 error.</p>
                    </li>
                 </ul>
              </important>
              <p>This parameter requires a JSON text string argument. For information on how to format a
           JSON parameter for the various command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using JSON for
             Parameters</a> in the <i>AWS CLI User Guide</i>. For example:</p>
              <p>
                 <code>[{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]</code>
              </p>
              <p>If your command-line tool or SDK requires quotation marks around the parameter, you should
           use single quotes to avoid confusion with the double quotes required in the JSON text. </p>
                 <p>The following basic restrictions apply to tags:</p>
             <ul>
                 <li>
                    <p>Maximum number of tags per secret—50</p>
                 </li>
                 <li>
                    <p>Maximum key length—127 Unicode characters in UTF-8</p>
                 </li>
                 <li>
                    <p>Maximum value length—255 Unicode characters in UTF-8</p>
                 </li>
                 <li>
                    <p>Tag keys and values are case sensitive.</p>
                 </li>
                 <li>
                    <p>Do not use the <code>aws:</code> prefix in your tag names or values because AWS reserves it
                 for AWS use. You can't edit or delete tag names or values with this
                   prefix. Tags with this prefix do not count against your tags per secret limit.</p>
                 </li>
                 <li>
                    <p>If you use your tagging schema across multiple services and resources,
                   remember other services might have restrictions on allowed characters. Generally
                   allowed characters: letters, spaces, and numbers representable in UTF-8, plus the
                   following special characters: + - = . _ : / @.</p>
                 </li>
              </ul>
     */
    public let tags: [Tag]?

    public init (
        clientRequestToken: String? = nil,
        description: String? = nil,
        kmsKeyId: String? = nil,
        name: String? = nil,
        secretBinary: Data? = nil,
        secretString: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.secretBinary = secretBinary
        self.secretString = secretString
        self.tags = tags
    }
}
