// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetSecretValueOutput: Equatable {
    /// <p>The ARN of the secret.</p>
    public let aRN: String?
    /// <p>The date and time that this version of the secret was created.</p>
    public let createdDate: Date?
    /// <p>The friendly name of the secret.</p>
    public let name: String?
    /**
     <p>The decrypted part of the protected secret information that was originally provided as
           binary data in the form of a byte array. The response parameter represents the binary data as
           a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a>
           string.</p>
              <p>This parameter is not used if the secret is created by the Secrets Manager console.</p>
              <p>If you store custom information in this field of the secret, then you must code your
           Lambda rotation function to parse and interpret whatever you store in the
             <code>SecretString</code> or <code>SecretBinary</code> fields.</p>
     */
    public let secretBinary: Data?
    /**
     <p>The decrypted part of the protected secret information that was originally provided as a
           string.</p>
              <p>If you create this secret by using the Secrets Manager console then only the
             <code>SecretString</code> parameter contains data. Secrets Manager stores the information as a
           JSON structure of key/value pairs that the Lambda rotation function knows how to parse.</p>
              <p>If you store custom information in the secret by using the <a>CreateSecret</a>,
             <a>UpdateSecret</a>, or <a>PutSecretValue</a> API operations instead
           of the Secrets Manager console, or by using the <b>Other secret type</b> in
           the console, then you must code your Lambda rotation function to parse and interpret those
           values.</p>
     */
    public let secretString: String?
    /// <p>The unique identifier of this version of the secret.</p>
    public let versionId: String?
    /**
     <p>A list of all of the staging labels currently attached to this version of the
           secret.</p>
     */
    public let versionStages: [String]?

    public init (
        aRN: String? = nil,
        createdDate: Date? = nil,
        name: String? = nil,
        secretBinary: Data? = nil,
        secretString: String? = nil,
        versionId: String? = nil,
        versionStages: [String]? = nil
    )
    {
        self.aRN = aRN
        self.createdDate = createdDate
        self.name = name
        self.secretBinary = secretBinary
        self.secretString = secretString
        self.versionId = versionId
        self.versionStages = versionStages
    }
}
