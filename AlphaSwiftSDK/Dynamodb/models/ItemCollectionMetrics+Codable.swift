// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ItemCollectionMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case itemCollectionKey = "ItemCollectionKey"
        case sizeEstimateRangeGB = "SizeEstimateRangeGB"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let itemCollectionKey = itemCollectionKey {
            var itemCollectionKeyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .itemCollectionKey)
            for (dictKey0, itemcollectionkeyattributemap0) in itemCollectionKey {
                try itemCollectionKeyContainer.encode(itemcollectionkeyattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sizeEstimateRangeGB = sizeEstimateRangeGB {
            var sizeEstimateRangeGBContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sizeEstimateRangeGB)
            for itemcollectionsizeestimaterange0 in sizeEstimateRangeGB {
                try sizeEstimateRangeGBContainer.encode(itemcollectionsizeestimaterange0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemCollectionKeyContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .itemCollectionKey)
        var itemCollectionKeyDecoded0: [String:AttributeValue]? = nil
        if let itemCollectionKeyContainer = itemCollectionKeyContainer {
            itemCollectionKeyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemCollectionKeyContainer {
                itemCollectionKeyDecoded0?[key0] = attributevalue0
            }
        }
        itemCollectionKey = itemCollectionKeyDecoded0
        let sizeEstimateRangeGBContainer = try containerValues.decodeIfPresent([Double].self, forKey: .sizeEstimateRangeGB)
        var sizeEstimateRangeGBDecoded0:[Double]? = nil
        if let sizeEstimateRangeGBContainer = sizeEstimateRangeGBContainer {
            sizeEstimateRangeGBDecoded0 = [Double]()
            for double0 in sizeEstimateRangeGBContainer {
                sizeEstimateRangeGBDecoded0?.append(double0)
            }
        }
        sizeEstimateRangeGB = sizeEstimateRangeGBDecoded0
    }
}
