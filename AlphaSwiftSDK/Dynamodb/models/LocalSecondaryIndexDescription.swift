// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the properties of a local secondary index.</p>
public struct LocalSecondaryIndexDescription: Equatable {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    public let indexArn: String?
    /// <p>Represents the name of the local secondary index.</p>
    public let indexName: String?
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let indexSizeBytes: Int
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let itemCount: Int
    /**
     <p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p>
              <ul>
                 <li>
                    <p>
                       <code>HASH</code> - partition key</p>
                 </li>
                 <li>
                    <p>
                       <code>RANGE</code> - sort key</p>
                 </li>
              </ul>
              <note>
                 <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
             term "hash attribute" derives from DynamoDB's usage of an internal hash function to
             evenly distribute data items across partitions, based on their partition key values.</p>
                 <p>The sort key of an item is also known as its <i>range attribute</i>.
             The term "range attribute" derives from the way DynamoDB stores items with the same
             partition key physically close together, in sorted order by the sort key value.</p>
              </note>
     */
    public let keySchema: [KeySchemaElement]?
    /**
     <p>Represents attributes that are copied (projected) from the table into the global
              secondary index. These are in addition to the primary key attributes and index key
              attributes, which are automatically projected. </p>
     */
    public let projection: Projection?

    public init (
        indexArn: String? = nil,
        indexName: String? = nil,
        indexSizeBytes: Int = 0,
        itemCount: Int = 0,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil
    )
    {
        self.indexArn = indexArn
        self.indexName = indexName
        self.indexSizeBytes = indexSizeBytes
        self.itemCount = itemCount
        self.keySchema = keySchema
        self.projection = projection
    }
}
