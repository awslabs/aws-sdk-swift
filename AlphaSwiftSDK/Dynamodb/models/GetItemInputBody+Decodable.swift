// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetItemInputBody: Equatable {
    public let tableName: String?
    public let key: [String:AttributeValue]?
    public let attributesToGet: [String]?
    public let consistentRead: Bool?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let projectionExpression: String?
    public let expressionAttributeNames: [String:String]?
}

extension GetItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                keyDecoded0?[key0] = attributevalue0
            }
        }
        key = keyDecoded0
        let attributesToGetContainer = try containerValues.decodeIfPresent([String].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [String]()
            for string0 in attributesToGetContainer {
                attributesToGetDecoded0?.append(string0)
            }
        }
        attributesToGet = attributesToGetDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                expressionAttributeNamesDecoded0?[key0] = attributename0
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}
