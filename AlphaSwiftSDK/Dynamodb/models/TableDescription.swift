// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents the properties of a table.</p>
public struct TableDescription: Equatable {
    /// <p>Contains information about the table archive.</p>
    public let archivalSummary: ArchivalSummary?
    /**
     <p>An array of <code>AttributeDefinition</code> objects. Each of these objects describes one attribute
           in the table and index key schema.</p>
              <p>Each <code>AttributeDefinition</code> object in this array is composed of:</p>
              <ul>
                 <li>
                    <p>
                       <code>AttributeName</code> - The name of the attribute.</p>
                 </li>
                 <li>
                    <p>
                       <code>AttributeType</code> - The data type for the attribute.</p>
                 </li>
              </ul>
     */
    public let attributeDefinitions: [AttributeDefinition]?
    /// <p>Contains the details for the read/write capacity mode.</p>
    public let billingModeSummary: BillingModeSummary?
    /// <p>The date and time when the table was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    public let creationDateTime: Date?
    /**
     <p>The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:</p>
              <ul>
                 <li>
                    <p>
                       <code>Backfilling</code> - If true, then the index is currently in the backfilling
                    phase. Backfilling occurs only when a new global secondary index is added to the
                    table. It is the process by which DynamoDB populates the new index with data from the
                    table. (This attribute does not appear for indexes that were created during a
                       <code>CreateTable</code> operation.) </p>
                    <p> You can delete an index that is being created during the <code>Backfilling</code>
                    phase when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code>
                    is true. You can't delete the index that is being created when
                       <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is false.
                    (This attribute does not appear for indexes that were created during a
                       <code>CreateTable</code> operation.)</p>
                 </li>
                 <li>
                    <p>
                       <code>IndexName</code> - The name of the global secondary index.</p>
                 </li>
                 <li>
                    <p>
                       <code>IndexSizeBytes</code> - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six
           hours. Recent changes might not be reflected in this value.
           </p>
                 </li>
                 <li>
                    <p>
                       <code>IndexStatus</code> - The current status of the global secondary index:</p>
                    <ul>
                       <li>
                          <p>
                             <code>CREATING</code> - The index is being created.</p>
                       </li>
                       <li>
                          <p>
                             <code>UPDATING</code> - The index is being updated.</p>
                       </li>
                       <li>
                          <p>
                             <code>DELETING</code> - The index is being deleted.</p>
                       </li>
                       <li>
                          <p>
                             <code>ACTIVE</code> - The index is ready for use.</p>
                       </li>
                    </ul>
                 </li>
                 <li>
                    <p>
                       <code>ItemCount</code> - The number of items in the global secondary index. DynamoDB updates this value approximately every six
           hours. Recent changes might not be reflected in this value.
           </p>
                 </li>
                 <li>
                    <p>
                       <code>KeySchema</code> - Specifies the complete index key schema. The attribute names in the
               key schema must be between 1 and 255 characters (inclusive). The key schema must begin
               with the same partition key as the table.</p>
                 </li>
                 <li>
                    <p>
                       <code>Projection</code> - Specifies
               attributes that are copied (projected) from the table into the index. These are in
               addition to the primary key attributes and index key
               attributes, which are automatically projected. Each
               attribute specification is composed of:</p>
                    <ul>
                       <li>
                          <p>
                             <code>ProjectionType</code> - One
                   of the following:</p>
                          <ul>
                             <li>
                                <p>
                                   <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
                       index.</p>
                             </li>
                             <li>
                                <p>
                                   <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p>
                             </li>
                             <li>
                                <p>
                                   <code>ALL</code> - All of the table attributes are projected into the
                       index.</p>
                             </li>
                          </ul>
                       </li>
                       <li>
                          <p>
                             <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
                   projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
                       </li>
                    </ul>
                 </li>
                 <li>
                    <p>
                       <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index,
               consisting of read and write capacity units, along with data about increases and
               decreases. </p>
                 </li>
              </ul>
              <p>If the table is in the <code>DELETING</code> state, no information about indexes will be
           returned.</p>
     */
    public let globalSecondaryIndexes: [GlobalSecondaryIndexDescription]?
    /// <p>Represents the version of <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html">global tables</a> in use, if the table is replicated across AWS Regions.</p>
    public let globalTableVersion: String?
    /// <p>The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let itemCount: Int
    /**
     <p>The primary key structure for the table. Each <code>KeySchemaElement</code> consists of:</p>
              <ul>
                 <li>
                    <p>
                       <code>AttributeName</code> - The name of the attribute.</p>
                 </li>
                 <li>
                    <p>
                       <code>KeyType</code> - The role of the attribute:</p>
                    <ul>
                       <li>
                          <p>
                             <code>HASH</code> -  partition key</p>
                       </li>
                       <li>
                          <p>
                             <code>RANGE</code> - sort key</p>
                       </li>
                    </ul>
                    <note>
                       <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
             term "hash attribute" derives from DynamoDB's usage of an internal hash function to
             evenly distribute data items across partitions, based on their partition key values.</p>
                       <p>The sort key of an item is also known as its <i>range attribute</i>.
             The term "range attribute" derives from the way DynamoDB stores items with the same
             partition key physically close together, in sorted order by the sort key value.</p>
                    </note>

                 </li>
              </ul>
              <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the
           <i>Amazon DynamoDB Developer Guide</i>.</p>
     */
    public let keySchema: [KeySchemaElement]?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.</p>
    public let latestStreamArn: String?
    /**
     <p>A timestamp, in ISO 8601 format, for this stream.</p>

              <p>Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:</p>
              <ul>
                 <li>
                    <p>AWS customer ID</p>
                 </li>
                 <li>
                    <p>Table name</p>
                 </li>
                 <li>
                    <p>
                       <code>StreamLabel</code>
                    </p>
                 </li>
              </ul>
     */
    public let latestStreamLabel: String?
    /**
     <p>Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:</p>
              <ul>
                 <li>
                    <p>
                       <code>IndexName</code> - The name of the local secondary index.</p>
                 </li>
                 <li>
                    <p>
                       <code>KeySchema</code> - Specifies the complete index key schema. The attribute names in the
               key schema must be between 1 and 255 characters (inclusive). The key schema must begin
               with the same partition key as the table.</p>
                 </li>
                 <li>
                    <p>
                       <code>Projection</code> - Specifies
               attributes that are copied (projected) from the table into the index. These are in
               addition to the primary key attributes and index key
               attributes, which are automatically projected. Each
               attribute specification is composed of:</p>
                    <ul>
                       <li>
                          <p>
                             <code>ProjectionType</code> - One
                   of the following:</p>
                          <ul>
                             <li>
                                <p>
                                   <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
                       index.</p>
                             </li>
                             <li>
                                <p>
                                   <code>INCLUDE</code> - Only the specified table attributes are projected
                                into the index. The list of projected attributes is in
                                   <code>NonKeyAttributes</code>.</p>
                             </li>
                             <li>
                                <p>
                                   <code>ALL</code> - All of the table attributes are projected into the
                       index.</p>
                             </li>
                          </ul>
                       </li>
                       <li>
                          <p>
                             <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
                   projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
                       </li>
                    </ul>
                 </li>
                 <li>
                    <p>
                       <code>IndexSizeBytes</code> - Represents the total size of the index, in bytes. DynamoDB updates
               this value approximately every six hours. Recent changes might not be reflected in this
               value.</p>
                 </li>
                 <li>
                    <p>
                       <code>ItemCount</code> - Represents the number of items in the index. DynamoDB updates this value
               approximately every six hours. Recent changes might not be reflected in this value.</p>
                 </li>
              </ul>
              <p>If the table is in the <code>DELETING</code> state, no information about indexes will be
           returned.</p>
     */
    public let localSecondaryIndexes: [LocalSecondaryIndexDescription]?
    /// <p>The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.</p>
    public let provisionedThroughput: ProvisionedThroughputDescription?
    /// <p>Represents replicas of the table.</p>
    public let replicas: [ReplicaDescription]?
    /// <p>Contains details for the restore.</p>
    public let restoreSummary: RestoreSummary?
    /// <p>The description of the server-side encryption status on the specified table.</p>
    public let sSEDescription: SSEDescription?
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    public let streamSpecification: StreamSpecification?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the table.</p>
    public let tableArn: String?
    /// <p>Unique identifier for the table for which the backup was created. </p>
    public let tableId: String?
    /// <p>The name of the table.</p>
    public let tableName: String?
    /// <p>The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let tableSizeBytes: Int
    /**
     <p>The current state of the table:</p>
              <ul>
                 <li>
                    <p>
                       <code>CREATING</code> - The table is being created.</p>
                 </li>
                 <li>
                    <p>
                       <code>UPDATING</code> - The table is being updated.</p>
                 </li>
                 <li>
                    <p>
                       <code>DELETING</code> - The table is being deleted.</p>
                 </li>
                 <li>
                    <p>
                       <code>ACTIVE</code> - The table is ready for use.</p>
                 </li>
                 <li>
                    <p>
                       <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> - The AWS KMS
                    key used to encrypt the table in inaccessible. Table operations
                    may fail due to failure to use the AWS KMS key. DynamoDB will
                    initiate the table archival process when a table's AWS KMS key
                    remains inaccessible for more than seven days.
                 </p>
                 </li>
                 <li>
                    <p>
                       <code>ARCHIVING</code> - The table is being archived. Operations
                    are not allowed until archival is complete.
                 </p>
                 </li>
                 <li>
                    <p>
                       <code>ARCHIVED</code> - The table has been archived. See the
                    ArchivalReason for more information.
                 </p>
                 </li>
              </ul>
     */
    public let tableStatus: TableStatus?

    public init (
        archivalSummary: ArchivalSummary? = nil,
        attributeDefinitions: [AttributeDefinition]? = nil,
        billingModeSummary: BillingModeSummary? = nil,
        creationDateTime: Date? = nil,
        globalSecondaryIndexes: [GlobalSecondaryIndexDescription]? = nil,
        globalTableVersion: String? = nil,
        itemCount: Int = 0,
        keySchema: [KeySchemaElement]? = nil,
        latestStreamArn: String? = nil,
        latestStreamLabel: String? = nil,
        localSecondaryIndexes: [LocalSecondaryIndexDescription]? = nil,
        provisionedThroughput: ProvisionedThroughputDescription? = nil,
        replicas: [ReplicaDescription]? = nil,
        restoreSummary: RestoreSummary? = nil,
        sSEDescription: SSEDescription? = nil,
        streamSpecification: StreamSpecification? = nil,
        tableArn: String? = nil,
        tableId: String? = nil,
        tableName: String? = nil,
        tableSizeBytes: Int = 0,
        tableStatus: TableStatus? = nil
    )
    {
        self.archivalSummary = archivalSummary
        self.attributeDefinitions = attributeDefinitions
        self.billingModeSummary = billingModeSummary
        self.creationDateTime = creationDateTime
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.globalTableVersion = globalTableVersion
        self.itemCount = itemCount
        self.keySchema = keySchema
        self.latestStreamArn = latestStreamArn
        self.latestStreamLabel = latestStreamLabel
        self.localSecondaryIndexes = localSecondaryIndexes
        self.provisionedThroughput = provisionedThroughput
        self.replicas = replicas
        self.restoreSummary = restoreSummary
        self.sSEDescription = sSEDescription
        self.streamSpecification = streamSpecification
        self.tableArn = tableArn
        self.tableId = tableId
        self.tableName = tableName
        self.tableSizeBytes = tableSizeBytes
        self.tableStatus = tableStatus
    }
}
