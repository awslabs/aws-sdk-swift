// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CancellationReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case item = "Item"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, attributemap0) in item {
                try itemContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                itemDecoded0?[key0] = attributevalue0
            }
        }
        item = itemDecoded0
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
