// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchGetItemOutputBody: Equatable {
    public let responses: [String:[[String:AttributeValue]?]?]?
    public let unprocessedKeys: [String:KeysAndAttributes]?
    public let consumedCapacity: [ConsumedCapacity]?
}

extension BatchGetItemOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
        case unprocessedKeys = "UnprocessedKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([String:[[String:AttributeValue]?]?].self, forKey: .responses)
        var responsesDecoded0: [String:[[String:AttributeValue]?]?]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [String:[[String:AttributeValue]?]?]()
            for (key0, itemlist0) in responsesContainer {
                var itemlist0Decoded0 = [[String:AttributeValue]?]()
                if let itemlist0 = itemlist0 {
                    for map1 in itemlist0 {
                        var itemlist0Decoded1 = [String:AttributeValue]()
                        if let map1 = map1 {
                            for (key2, attributevalue2) in map1 {
                                itemlist0Decoded1[key2] = attributevalue2
                            }
                        }
                        itemlist0Decoded0.append(itemlist0Decoded1)
                    }
                }
                responsesDecoded0?[key0] = itemlist0Decoded0
            }
        }
        responses = responsesDecoded0
        let unprocessedKeysContainer = try containerValues.decodeIfPresent([String:KeysAndAttributes].self, forKey: .unprocessedKeys)
        var unprocessedKeysDecoded0: [String:KeysAndAttributes]? = nil
        if let unprocessedKeysContainer = unprocessedKeysContainer {
            unprocessedKeysDecoded0 = [String:KeysAndAttributes]()
            for (key0, keysandattributes0) in unprocessedKeysContainer {
                unprocessedKeysDecoded0?[key0] = keysandattributes0
            }
        }
        unprocessedKeys = unprocessedKeysDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([ConsumedCapacity].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                consumedCapacityDecoded0?.append(structure0)
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}
