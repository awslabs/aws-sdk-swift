// Code generated by smithy-swift-codegen. DO NOT EDIT!



/**
 <p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes
       that make up the primary key of a table, or the key attributes of an index.</p>
          <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a
       simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite
        primary key would require one <code>KeySchemaElement</code> for the partition key, and another
         <code>KeySchemaElement</code> for the sort key.</p>
          <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary.  The attribute cannot be nested within a List or a Map.</p>
 */
public struct KeySchemaElement: Equatable {
    /// <p>The name of a key attribute.</p>
    public let attributeName: String?
    /**
     <p>The role that this key attribute will assume:</p>
              <ul>
                 <li>
                    <p>
                       <code>HASH</code> - partition key</p>
                 </li>
                 <li>
                    <p>
                       <code>RANGE</code> - sort key</p>
                 </li>
              </ul>
              <note>
                 <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
             term "hash attribute" derives from DynamoDB's usage of an internal hash function to
             evenly distribute data items across partitions, based on their partition key values.</p>
                 <p>The sort key of an item is also known as its <i>range attribute</i>.
             The term "range attribute" derives from the way DynamoDB stores items with the same
             partition key physically close together, in sorted order by the sort key value.</p>
              </note>
     */
    public let keyType: KeyType?

    public init (
        attributeName: String? = nil,
        keyType: KeyType? = nil
    )
    {
        self.attributeName = attributeName
        self.keyType = keyType
    }
}
