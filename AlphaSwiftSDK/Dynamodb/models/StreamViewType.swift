// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum StreamViewType {
    case keysOnly
    case newAndOldImages
    case newImage
    case oldImage
    case sdkUnknown(String)
}

extension StreamViewType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StreamViewType] {
        return [
            .keysOnly,
            .newAndOldImages,
            .newImage,
            .oldImage,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .keysOnly: return "KEYS_ONLY"
        case .newAndOldImages: return "NEW_AND_OLD_IMAGES"
        case .newImage: return "NEW_IMAGE"
        case .oldImage: return "OLD_IMAGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StreamViewType(rawValue: rawValue) ?? StreamViewType.sdkUnknown(rawValue)
    }
}
