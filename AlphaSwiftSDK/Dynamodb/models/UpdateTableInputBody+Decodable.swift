// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateTableInputBody: Equatable {
    public let attributeDefinitions: [AttributeDefinition]?
    public let tableName: String?
    public let billingMode: BillingMode?
    public let provisionedThroughput: ProvisionedThroughput?
    public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexUpdate]?
    public let streamSpecification: StreamSpecification?
    public let sSESpecification: SSESpecification?
    public let replicaUpdates: [ReplicationGroupUpdate]?
}

extension UpdateTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([AttributeDefinition].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                attributeDefinitionsDecoded0?.append(structure0)
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let globalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndexUpdate].self, forKey: .globalSecondaryIndexUpdates)
        var globalSecondaryIndexUpdatesDecoded0:[GlobalSecondaryIndexUpdate]? = nil
        if let globalSecondaryIndexUpdatesContainer = globalSecondaryIndexUpdatesContainer {
            globalSecondaryIndexUpdatesDecoded0 = [GlobalSecondaryIndexUpdate]()
            for structure0 in globalSecondaryIndexUpdatesContainer {
                globalSecondaryIndexUpdatesDecoded0?.append(structure0)
            }
        }
        globalSecondaryIndexUpdates = globalSecondaryIndexUpdatesDecoded0
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sSESpecificationDecoded = try containerValues.decodeIfPresent(SSESpecification.self, forKey: .sSESpecification)
        sSESpecification = sSESpecificationDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([ReplicationGroupUpdate].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[ReplicationGroupUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [ReplicationGroupUpdate]()
            for structure0 in replicaUpdatesContainer {
                replicaUpdatesDecoded0?.append(structure0)
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
    }
}
