// Code generated by smithy-swift-codegen. DO NOT EDIT!



/**
 <p>Represents a request to perform a check that an item exists or to check the condition of
          specific attributes of the item.</p>
 */
public struct ConditionCheck: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
    public let conditionExpression: String?
    /// <p>One or more substitution tokens for attribute names in an expression.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /**
     <p>The primary key of the item to be checked. Each element consists of an
           attribute name and a value for that attribute.</p>
     */
    public let key: [String:AttributeValue]?
    /**
     <p>Use <code>ReturnValuesOnConditionCheckFailure</code> to
             get the item attributes if the <code>ConditionCheck</code> condition fails.
             For <code>ReturnValuesOnConditionCheckFailure</code>, the valid
             values are: NONE and ALL_OLD.</p>
     */
    public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
    /// <p>Name of the table for the check item request.</p>
    public let tableName: String?

    public init (
        conditionExpression: String? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        key: [String:AttributeValue]? = nil,
        returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil,
        tableName: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
    }
}
