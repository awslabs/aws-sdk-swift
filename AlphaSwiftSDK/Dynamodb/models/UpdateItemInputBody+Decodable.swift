// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateItemInputBody: Equatable {
    public let tableName: String?
    public let key: [String:AttributeValue]?
    public let attributeUpdates: [String:AttributeValueUpdate]?
    public let expected: [String:ExpectedAttributeValue]?
    public let conditionalOperator: ConditionalOperator?
    public let returnValues: ReturnValue?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    public let updateExpression: String?
    public let conditionExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
}

extension UpdateItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                keyDecoded0?[key0] = attributevalue0
            }
        }
        key = keyDecoded0
        let attributeUpdatesContainer = try containerValues.decodeIfPresent([String:AttributeValueUpdate].self, forKey: .attributeUpdates)
        var attributeUpdatesDecoded0: [String:AttributeValueUpdate]? = nil
        if let attributeUpdatesContainer = attributeUpdatesContainer {
            attributeUpdatesDecoded0 = [String:AttributeValueUpdate]()
            for (key0, attributevalueupdate0) in attributeUpdatesContainer {
                attributeUpdatesDecoded0?[key0] = attributevalueupdate0
            }
        }
        attributeUpdates = attributeUpdatesDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([String:ExpectedAttributeValue].self, forKey: .expected)
        var expectedDecoded0: [String:ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [String:ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                expectedDecoded0?[key0] = expectedattributevalue0
            }
        }
        expected = expectedDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let returnValuesDecoded = try containerValues.decodeIfPresent(ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let updateExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateExpression)
        updateExpression = updateExpressionDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                expressionAttributeNamesDecoded0?[key0] = attributename0
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String:AttributeValue].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                expressionAttributeValuesDecoded0?[key0] = attributevalue0
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}
