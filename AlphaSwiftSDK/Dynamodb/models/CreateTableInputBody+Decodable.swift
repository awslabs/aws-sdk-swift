// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTableInputBody: Equatable {
    public let attributeDefinitions: [AttributeDefinition]?
    public let tableName: String?
    public let keySchema: [KeySchemaElement]?
    public let localSecondaryIndexes: [LocalSecondaryIndex]?
    public let globalSecondaryIndexes: [GlobalSecondaryIndex]?
    public let billingMode: BillingMode?
    public let provisionedThroughput: ProvisionedThroughput?
    public let streamSpecification: StreamSpecification?
    public let sSESpecification: SSESpecification?
    public let tags: [Tag]?
}

extension CreateTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableName = "TableName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([AttributeDefinition].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                attributeDefinitionsDecoded0?.append(structure0)
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                keySchemaDecoded0?.append(structure0)
            }
        }
        keySchema = keySchemaDecoded0
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([LocalSecondaryIndex].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[LocalSecondaryIndex]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexesContainer {
                localSecondaryIndexesDecoded0?.append(structure0)
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndex].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                globalSecondaryIndexesDecoded0?.append(structure0)
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let billingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sSESpecificationDecoded = try containerValues.decodeIfPresent(SSESpecification.self, forKey: .sSESpecification)
        sSESpecification = sSESpecificationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
