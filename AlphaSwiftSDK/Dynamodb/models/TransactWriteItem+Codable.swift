// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransactWriteItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionCheck = "ConditionCheck"
        case delete = "Delete"
        case put = "Put"
        case update = "Update"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionCheck = conditionCheck {
            try encodeContainer.encode(conditionCheck, forKey: .conditionCheck)
        }
        if let delete = delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let put = put {
            try encodeContainer.encode(put, forKey: .put)
        }
        if let update = update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionCheckDecoded = try containerValues.decodeIfPresent(ConditionCheck.self, forKey: .conditionCheck)
        conditionCheck = conditionCheckDecoded
        let putDecoded = try containerValues.decodeIfPresent(Put.self, forKey: .put)
        put = putDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(Delete.self, forKey: .delete)
        delete = deleteDecoded
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}
