// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct LookupDeveloperIdentityInputBody: Equatable {
    public let identityPoolId: String?
    public let identityId: String?
    public let developerUserIdentifier: String?
    public let maxResults: Int
    public let nextToken: String?
}

extension LookupDeveloperIdentityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case developerUserIdentifier = "DeveloperUserIdentifier"
        case identityId = "IdentityId"
        case identityPoolId = "IdentityPoolId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let developerUserIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .developerUserIdentifier)
        developerUserIdentifier = developerUserIdentifierDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
