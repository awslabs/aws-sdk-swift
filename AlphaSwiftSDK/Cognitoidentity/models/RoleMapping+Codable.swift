// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoleMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ambiguousRoleResolution = "AmbiguousRoleResolution"
        case rulesConfiguration = "RulesConfiguration"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ambiguousRoleResolution = ambiguousRoleResolution {
            try encodeContainer.encode(ambiguousRoleResolution.rawValue, forKey: .ambiguousRoleResolution)
        }
        if let rulesConfiguration = rulesConfiguration {
            try encodeContainer.encode(rulesConfiguration, forKey: .rulesConfiguration)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RoleMappingType.self, forKey: .type)
        type = typeDecoded
        let ambiguousRoleResolutionDecoded = try containerValues.decodeIfPresent(AmbiguousRoleResolutionType.self, forKey: .ambiguousRoleResolution)
        ambiguousRoleResolution = ambiguousRoleResolutionDecoded
        let rulesConfigurationDecoded = try containerValues.decodeIfPresent(RulesConfigurationType.self, forKey: .rulesConfiguration)
        rulesConfiguration = rulesConfigurationDecoded
    }
}
