// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetOpenIdTokenForDeveloperIdentityInputBody: Equatable {
    public let identityPoolId: String?
    public let identityId: String?
    public let logins: [String:String]?
    public let tokenDuration: Int?
}

extension GetOpenIdTokenForDeveloperIdentityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityPoolId = "IdentityPoolId"
        case logins = "Logins"
        case tokenDuration = "TokenDuration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let loginsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .logins)
        var loginsDecoded0: [String:String]? = nil
        if let loginsContainer = loginsContainer {
            loginsDecoded0 = [String:String]()
            for (key0, identityprovidertoken0) in loginsContainer {
                loginsDecoded0?[key0] = identityprovidertoken0
            }
        }
        logins = loginsDecoded0
        let tokenDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tokenDuration)
        tokenDuration = tokenDurationDecoded
    }
}
