// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Input to the <code>LookupDeveloperIdentityInput</code> action.</p>
public struct LookupDeveloperIdentityInput: Equatable {
    /**
     <p>A unique ID used by your backend authentication process to identify a user.
              Typically, a developer identity provider would issue many developer user identifiers, in
              keeping with the number of users.</p>
     */
    public let developerUserIdentifier: String?
    /// <p>A unique identifier in the format REGION:GUID.</p>
    public let identityId: String?
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    public let identityPoolId: String?
    /// <p>The maximum number of identities to return.</p>
    public let maxResults: Int
    /**
     <p>A pagination token. The first call you make will have <code>NextToken</code> set to
              null. After that the service will return <code>NextToken</code> values as needed. For
              example, let's say you make a request with <code>MaxResults</code> set to 10, and there are
              20 matches in the database. The service will return a pagination token as a part of the
              response. This token can be used to call the API again and get results starting from the
              11th match.</p>
     */
    public let nextToken: String?

    public init (
        developerUserIdentifier: String? = nil,
        identityId: String? = nil,
        identityPoolId: String? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.developerUserIdentifier = developerUserIdentifier
        self.identityId = identityId
        self.identityPoolId = identityPoolId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
