// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MappingRuleMatchType {
    case contains
    case equals
    case notEqual
    case startsWith
    case sdkUnknown(String)
}

extension MappingRuleMatchType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MappingRuleMatchType] {
        return [
            .contains,
            .equals,
            .notEqual,
            .startsWith,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .contains: return "Contains"
        case .equals: return "Equals"
        case .notEqual: return "NotEqual"
        case .startsWith: return "StartsWith"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MappingRuleMatchType(rawValue: rawValue) ?? MappingRuleMatchType.sdkUnknown(rawValue)
    }
}
