// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3Location: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessControlList = "AccessControlList"
        case bucketName = "BucketName"
        case cannedACL = "CannedACL"
        case encryption = "Encryption"
        case prefix = "Prefix"
        case storageClass = "StorageClass"
        case tagging = "Tagging"
        case userMetadata = "UserMetadata"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let accessControlList = accessControlList {
            var accessControlListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("accessControlList"))
            for grant0 in accessControlList {
                try accessControlListContainer.encode(grant0, forKey: Key("Grant"))
            }
        }
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: Key("bucketName"))
        }
        if let cannedACL = cannedACL {
            try container.encode(cannedACL, forKey: Key("cannedACL"))
        }
        if let encryption = encryption {
            try container.encode(encryption, forKey: Key("encryption"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: Key("prefix"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: Key("storageClass"))
        }
        if let tagging = tagging {
            try container.encode(tagging, forKey: Key("tagging"))
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("userMetadata"))
            for metadataentry0 in userMetadata {
                try userMetadataContainer.encode(metadataentry0, forKey: Key("MetadataEntry"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let cannedACLDecoded = try containerValues.decodeIfPresent(ObjectCannedACL.self, forKey: .cannedACL)
        cannedACL = cannedACLDecoded
        if containerValues.contains(.accessControlList) {
            struct KeyVal0{struct Grant{}}
            let accessControlListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .accessControlList)
            if let accessControlListWrappedContainer = accessControlListWrappedContainer {
                let accessControlListContainer = try accessControlListWrappedContainer.decodeIfPresent([Grant].self, forKey: .member)
                var accessControlListBuffer:[Grant]? = nil
                if let accessControlListContainer = accessControlListContainer {
                    accessControlListBuffer = [Grant]()
                    for structureContainer0 in accessControlListContainer {
                        accessControlListBuffer?.append(structureContainer0)
                    }
                }
                accessControlList = accessControlListBuffer
            } else {
                accessControlList = []
            }
        } else {
            accessControlList = nil
        }
        let taggingDecoded = try containerValues.decodeIfPresent(Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
        if containerValues.contains(.userMetadata) {
            struct KeyVal0{struct MetadataEntry{}}
            let userMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MetadataEntry>.CodingKeys.self, forKey: .userMetadata)
            if let userMetadataWrappedContainer = userMetadataWrappedContainer {
                let userMetadataContainer = try userMetadataWrappedContainer.decodeIfPresent([MetadataEntry].self, forKey: .member)
                var userMetadataBuffer:[MetadataEntry]? = nil
                if let userMetadataContainer = userMetadataContainer {
                    userMetadataBuffer = [MetadataEntry]()
                    for structureContainer0 in userMetadataContainer {
                        userMetadataBuffer?.append(structureContainer0)
                    }
                }
                userMetadata = userMetadataBuffer
            } else {
                userMetadata = []
            }
        } else {
            userMetadata = nil
        }
        let storageClassDecoded = try containerValues.decodeIfPresent(StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}
