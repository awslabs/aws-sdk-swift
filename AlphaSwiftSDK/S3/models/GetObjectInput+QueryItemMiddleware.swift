// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetObjectInputQueryItemMiddleware: Middleware {
    public let id: String = "GetObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetObjectInput>,
                  next: H) -> Swift.Result<OperationOutput<GetObjectOutput, GetObjectOutputError>, Swift.Error>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        input.builder.withQueryItem(URLQueryItem(name: "x-id", value: "GetObject"))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = URLQueryItem(name: "versionId".urlPercentEncoding(), value: String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        if let responseContentDisposition = input.operationInput.responseContentDisposition {
            let responseContentDispositionQueryItem = URLQueryItem(name: "response-content-disposition".urlPercentEncoding(), value: String(responseContentDisposition).urlPercentEncoding())
            input.builder.withQueryItem(responseContentDispositionQueryItem)
        }
        let partNumberQueryItem = URLQueryItem(name: "partNumber".urlPercentEncoding(), value: String(input.operationInput.partNumber).urlPercentEncoding())
        input.builder.withQueryItem(partNumberQueryItem)
        if let responseContentType = input.operationInput.responseContentType {
            let responseContentTypeQueryItem = URLQueryItem(name: "response-content-type".urlPercentEncoding(), value: String(responseContentType).urlPercentEncoding())
            input.builder.withQueryItem(responseContentTypeQueryItem)
        }
        if let responseExpires = input.operationInput.responseExpires {
            let responseExpiresQueryItem = URLQueryItem(name: "response-expires".urlPercentEncoding(), value: String(responseExpires.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(responseExpiresQueryItem)
        }
        if let responseContentEncoding = input.operationInput.responseContentEncoding {
            let responseContentEncodingQueryItem = URLQueryItem(name: "response-content-encoding".urlPercentEncoding(), value: String(responseContentEncoding).urlPercentEncoding())
            input.builder.withQueryItem(responseContentEncodingQueryItem)
        }
        if let responseCacheControl = input.operationInput.responseCacheControl {
            let responseCacheControlQueryItem = URLQueryItem(name: "response-cache-control".urlPercentEncoding(), value: String(responseCacheControl).urlPercentEncoding())
            input.builder.withQueryItem(responseCacheControlQueryItem)
        }
        if let responseContentLanguage = input.operationInput.responseContentLanguage {
            let responseContentLanguageQueryItem = URLQueryItem(name: "response-content-language".urlPercentEncoding(), value: String(responseContentLanguage).urlPercentEncoding())
            input.builder.withQueryItem(responseContentLanguageQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetObjectInput>
    public typealias MOutput = OperationOutput<GetObjectOutput, GetObjectOutputError>
    public typealias Context = HttpContext
}
