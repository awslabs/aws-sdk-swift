// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The bucket event for which to send notifications.</p>
public enum Event {
    case s3objectcreated
    case s3objectcreatedcompletemultipartupload
    case s3objectcreatedcopy
    case s3objectcreatedpost
    case s3objectcreatedput
    case s3objectremoved
    case s3objectremoveddelete
    case s3objectremoveddeletemarkercreated
    case s3objectrestore
    case s3objectrestorecompleted
    case s3objectrestorepost
    case s3reducedredundancylostobject
    case s3replication
    case s3replicationoperationfailedreplication
    case s3replicationoperationmissedthreshold
    case s3replicationoperationnottracked
    case s3replicationoperationreplicatedafterthreshold
    case sdkUnknown(String)
}

extension Event : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Event] {
        return [
            .s3objectcreated,
            .s3objectcreatedcompletemultipartupload,
            .s3objectcreatedcopy,
            .s3objectcreatedpost,
            .s3objectcreatedput,
            .s3objectremoved,
            .s3objectremoveddelete,
            .s3objectremoveddeletemarkercreated,
            .s3objectrestore,
            .s3objectrestorecompleted,
            .s3objectrestorepost,
            .s3reducedredundancylostobject,
            .s3replication,
            .s3replicationoperationfailedreplication,
            .s3replicationoperationmissedthreshold,
            .s3replicationoperationnottracked,
            .s3replicationoperationreplicatedafterthreshold,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .s3objectcreated: return "s3:ObjectCreated:*"
        case .s3objectcreatedcompletemultipartupload: return "s3:ObjectCreated:CompleteMultipartUpload"
        case .s3objectcreatedcopy: return "s3:ObjectCreated:Copy"
        case .s3objectcreatedpost: return "s3:ObjectCreated:Post"
        case .s3objectcreatedput: return "s3:ObjectCreated:Put"
        case .s3objectremoved: return "s3:ObjectRemoved:*"
        case .s3objectremoveddelete: return "s3:ObjectRemoved:Delete"
        case .s3objectremoveddeletemarkercreated: return "s3:ObjectRemoved:DeleteMarkerCreated"
        case .s3objectrestore: return "s3:ObjectRestore:*"
        case .s3objectrestorecompleted: return "s3:ObjectRestore:Completed"
        case .s3objectrestorepost: return "s3:ObjectRestore:Post"
        case .s3reducedredundancylostobject: return "s3:ReducedRedundancyLostObject"
        case .s3replication: return "s3:Replication:*"
        case .s3replicationoperationfailedreplication: return "s3:Replication:OperationFailedReplication"
        case .s3replicationoperationmissedthreshold: return "s3:Replication:OperationMissedThreshold"
        case .s3replicationoperationnottracked: return "s3:Replication:OperationNotTracked"
        case .s3replicationoperationreplicatedafterthreshold: return "s3:Replication:OperationReplicatedAfterThreshold"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Event(rawValue: rawValue) ?? Event.sdkUnknown(rawValue)
    }
}
