// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ObjectLockConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case objectLockEnabled = "ObjectLockEnabled"
        case rule = "Rule"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let objectLockEnabled = objectLockEnabled {
            try container.encode(objectLockEnabled, forKey: Key("objectLockEnabled"))
        }
        if let rule = rule {
            try container.encode(rule, forKey: Key("rule"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockEnabledDecoded = try containerValues.decodeIfPresent(ObjectLockEnabled.self, forKey: .objectLockEnabled)
        objectLockEnabled = objectLockEnabledDecoded
        let ruleDecoded = try containerValues.decodeIfPresent(ObjectLockRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}
