// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CompleteMultipartUploadOutput: Equatable {
    /**
     <p>The name of the bucket that contains the newly created object.</p>
              <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
              <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
     */
    public let bucket: String?
    /// <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Bool
    /**
     <p>Entity tag that identifies the newly created object's data. Objects with different
              object data will have different entity tags. The entity tag is an opaque string. The entity
              tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5
              digest of the object data, it will contain one or more nonhexadecimal characters and/or
              will consist of less than 32 or more than 32 hexadecimal digits.</p>
     */
    public let eTag: String?
    /**
     <p>If the object expiration is configured, this will contain the expiration date
              (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.</p>
     */
    public let expiration: String?
    /// <p>The object key of the newly created object.</p>
    public let key: String?
    /// <p>The URI that identifies the newly created object.</p>
    public let location: String?
    /**
     <p>If present, indicates that the requester was successfully charged for the
              request.</p>
     */
    public let requestCharged: RequestCharged?
    /**
     <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
              customer managed customer master key (CMK) that was used for the object.</p>
     */
    public let sSEKMSKeyId: String?
    /**
     <p>If you specified server-side encryption either with an Amazon S3-managed encryption key or an
              AWS KMS customer master key (CMK) in your initiate multipart upload request, the response
              includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the
              object.</p>
     */
    public let serverSideEncryption: ServerSideEncryption?
    /**
     <p>Version ID of the newly created object, in case the bucket has versioning turned
              on.</p>
     */
    public let versionId: String?

    public init (
        bucket: String? = nil,
        bucketKeyEnabled: Bool = false,
        eTag: String? = nil,
        expiration: String? = nil,
        key: String? = nil,
        location: String? = nil,
        requestCharged: RequestCharged? = nil,
        sSEKMSKeyId: String? = nil,
        serverSideEncryption: ServerSideEncryption? = nil,
        versionId: String? = nil
    )
    {
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.eTag = eTag
        self.expiration = expiration
        self.key = key
        self.location = location
        self.requestCharged = requestCharged
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.versionId = versionId
    }
}
