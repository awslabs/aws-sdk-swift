// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListPartsOutput: Equatable {
    /**
     <p>If the bucket has a lifecycle rule configured with an action to abort incomplete
              multipart uploads and the prefix in the lifecycle rule matches the object name in the
              request, then the response includes this header indicating when the initiated multipart
              upload will become eligible for abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
                 Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>

              <p>The response will also include the <code>x-amz-abort-rule-id</code> header that will
              provide the ID of the lifecycle configuration rule that defines this action.</p>
     */
    public let abortDate: Date?
    /**
     <p>This header is returned along with the <code>x-amz-abort-date</code> header. It
              identifies applicable lifecycle configuration rule that defines the action to abort
              incomplete multipart uploads.</p>
     */
    public let abortRuleId: String?
    /// <p>The name of the bucket to which the multipart upload was initiated.</p>
    public let bucket: String?
    /**
     <p>Container element that identifies who initiated the multipart upload. If the initiator
              is an AWS account, this element provides the same information as the <code>Owner</code>
              element. If the initiator is an IAM User, this element provides the user ARN and display
              name.</p>
     */
    public let initiator: Initiator?
    /**
     <p> Indicates whether the returned list of parts is truncated. A true value indicates that
              the list was truncated. A list can be truncated if the number of parts exceeds the limit
              returned in the MaxParts element.</p>
     */
    public let isTruncated: Bool
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: String?
    /// <p>Maximum number of parts that were allowed in the response.</p>
    public let maxParts: Int
    /**
     <p>When a list is truncated, this element specifies the last part in the list, as well as
              the value to use for the part-number-marker request parameter in a subsequent
              request.</p>
     */
    public let nextPartNumberMarker: String?
    /**
     <p> Container element that identifies the object owner, after the object is created. If
              multipart upload is initiated by an IAM user, this element provides the parent account ID
              and display name.</p>
     */
    public let owner: Owner?
    /**
     <p>When a list is truncated, this element specifies the last part in the list, as well as
              the value to use for the part-number-marker request parameter in a subsequent
              request.</p>
     */
    public let partNumberMarker: String?
    /**
     <p> Container for elements related to a particular part. A response can contain zero or
              more <code>Part</code> elements.</p>
     */
    public let parts: [Part]?
    /**
     <p>If present, indicates that the requester was successfully charged for the
              request.</p>
     */
    public let requestCharged: RequestCharged?
    /**
     <p>Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded
              object.</p>
     */
    public let storageClass: StorageClass?
    /// <p>Upload ID identifying the multipart upload whose parts are being listed.</p>
    public let uploadId: String?

    public init (
        abortDate: Date? = nil,
        abortRuleId: String? = nil,
        bucket: String? = nil,
        initiator: Initiator? = nil,
        isTruncated: Bool = false,
        key: String? = nil,
        maxParts: Int = 0,
        nextPartNumberMarker: String? = nil,
        owner: Owner? = nil,
        partNumberMarker: String? = nil,
        parts: [Part]? = nil,
        requestCharged: RequestCharged? = nil,
        storageClass: StorageClass? = nil,
        uploadId: String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.initiator = initiator
        self.isTruncated = isTruncated
        self.key = key
        self.maxParts = maxParts
        self.nextPartNumberMarker = nextPartNumberMarker
        self.owner = owner
        self.partNumberMarker = partNumberMarker
        self.parts = parts
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.uploadId = uploadId
    }
}
