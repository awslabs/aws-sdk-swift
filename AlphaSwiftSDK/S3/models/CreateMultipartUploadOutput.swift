// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateMultipartUploadOutput: Equatable {
    /**
     <p>If the bucket has a lifecycle rule configured with an action to abort incomplete
              multipart uploads and the prefix in the lifecycle rule matches the object name in the
              request, the response includes this header. The header indicates when the initiated
              multipart upload becomes eligible for an abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
                 Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>

              <p>The response also includes the <code>x-amz-abort-rule-id</code> header that provides the
              ID of the lifecycle configuration rule that defines this action.</p>
     */
    public let abortDate: Date?
    /**
     <p>This header is returned along with the <code>x-amz-abort-date</code> header. It
              identifies the applicable lifecycle configuration rule that defines the action to abort
              incomplete multipart uploads.</p>
     */
    public let abortRuleId: String?
    /**
     <p>The name of the bucket to which the multipart upload was initiated. </p>
              <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
              <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
     */
    public let bucket: String?
    /// <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Bool
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: String?
    /**
     <p>If present, indicates that the requester was successfully charged for the
              request.</p>
     */
    public let requestCharged: RequestCharged?
    /**
     <p>If server-side encryption with a customer-provided encryption key was requested, the
              response will include this header confirming the encryption algorithm used.</p>
     */
    public let sSECustomerAlgorithm: String?
    /**
     <p>If server-side encryption with a customer-provided encryption key was requested, the
              response will include this header to provide round-trip message integrity verification of
              the customer-provided encryption key.</p>
     */
    public let sSECustomerKeyMD5: String?
    /**
     <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The
              value of this header is a base64-encoded UTF-8 string holding JSON with the encryption
              context key-value pairs.</p>
     */
    public let sSEKMSEncryptionContext: String?
    /**
     <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
              customer managed customer master key (CMK) that was used for the object.</p>
     */
    public let sSEKMSKeyId: String?
    /**
     <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
              AES256, aws:kms).</p>
     */
    public let serverSideEncryption: ServerSideEncryption?
    /// <p>ID for the initiated multipart upload.</p>
    public let uploadId: String?

    public init (
        abortDate: Date? = nil,
        abortRuleId: String? = nil,
        bucket: String? = nil,
        bucketKeyEnabled: Bool = false,
        key: String? = nil,
        requestCharged: RequestCharged? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        sSEKMSEncryptionContext: String? = nil,
        sSEKMSKeyId: String? = nil,
        serverSideEncryption: ServerSideEncryption? = nil,
        uploadId: String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.key = key
        self.requestCharged = requestCharged
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.uploadId = uploadId
    }
}
