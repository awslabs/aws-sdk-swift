// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CSVInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
        case comments = "Comments"
        case fieldDelimiter = "FieldDelimiter"
        case fileHeaderInfo = "FileHeaderInfo"
        case quoteCharacter = "QuoteCharacter"
        case quoteEscapeCharacter = "QuoteEscapeCharacter"
        case recordDelimiter = "RecordDelimiter"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if allowQuotedRecordDelimiter != false {
            try container.encode(allowQuotedRecordDelimiter, forKey: Key("allowQuotedRecordDelimiter"))
        }
        if let comments = comments {
            try container.encode(comments, forKey: Key("comments"))
        }
        if let fieldDelimiter = fieldDelimiter {
            try container.encode(fieldDelimiter, forKey: Key("fieldDelimiter"))
        }
        if let fileHeaderInfo = fileHeaderInfo {
            try container.encode(fileHeaderInfo, forKey: Key("fileHeaderInfo"))
        }
        if let quoteCharacter = quoteCharacter {
            try container.encode(quoteCharacter, forKey: Key("quoteCharacter"))
        }
        if let quoteEscapeCharacter = quoteEscapeCharacter {
            try container.encode(quoteEscapeCharacter, forKey: Key("quoteEscapeCharacter"))
        }
        if let recordDelimiter = recordDelimiter {
            try container.encode(recordDelimiter, forKey: Key("recordDelimiter"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileHeaderInfoDecoded = try containerValues.decodeIfPresent(FileHeaderInfo.self, forKey: .fileHeaderInfo)
        fileHeaderInfo = fileHeaderInfoDecoded
        let commentsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .comments)
        comments = commentsDecoded
        let quoteEscapeCharacterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .quoteEscapeCharacter)
        quoteEscapeCharacter = quoteEscapeCharacterDecoded
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
        let fieldDelimiterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fieldDelimiter)
        fieldDelimiter = fieldDelimiterDecoded
        let quoteCharacterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .quoteCharacter)
        quoteCharacter = quoteCharacterDecoded
        let allowQuotedRecordDelimiterDecoded = try containerValues.decode(Bool.self, forKey: .allowQuotedRecordDelimiter)
        allowQuotedRecordDelimiter = allowQuotedRecordDelimiterDecoded
    }
}
