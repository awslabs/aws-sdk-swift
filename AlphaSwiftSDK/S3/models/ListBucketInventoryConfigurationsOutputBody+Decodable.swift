// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBucketInventoryConfigurationsOutputBody: Equatable {
    public let continuationToken: String?
    public let inventoryConfigurationList: [InventoryConfiguration]?
    public let isTruncated: Bool
    public let nextContinuationToken: String?
}

extension ListBucketInventoryConfigurationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case continuationToken = "ContinuationToken"
        case inventoryConfigurationList = "InventoryConfiguration"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        if containerValues.contains(.inventoryConfigurationList) {
            let inventoryConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .inventoryConfigurationList)
            if inventoryConfigurationListWrappedContainer != nil {
                let inventoryConfigurationListContainer = try containerValues.decodeIfPresent([InventoryConfiguration].self, forKey: .inventoryConfigurationList)
                var inventoryConfigurationListBuffer:[InventoryConfiguration]? = nil
                if let inventoryConfigurationListContainer = inventoryConfigurationListContainer {
                    inventoryConfigurationListBuffer = [InventoryConfiguration]()
                    for structureContainer0 in inventoryConfigurationListContainer {
                        inventoryConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                inventoryConfigurationList = inventoryConfigurationListBuffer
            } else {
                inventoryConfigurationList = []
            }
        } else {
            inventoryConfigurationList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
    }
}
