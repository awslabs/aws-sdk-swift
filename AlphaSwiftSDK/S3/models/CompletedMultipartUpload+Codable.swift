// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CompletedMultipartUpload: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case parts = "Part"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let parts = parts {
            if parts.isEmpty {
                var partsContainer = container.nestedUnkeyedContainer(forKey: Key("Part"))
                try partsContainer.encodeNil()
            } else {
                for completedpart0 in parts {
                    var partsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Part"))
                    try partsContainer0.encode(completedpart0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([CompletedPart].self, forKey: .parts)
                var partsBuffer:[CompletedPart]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [CompletedPart]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
    }
}
