// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IntelligentTieringFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let and = and {
            try container.encode(and, forKey: Key("and"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: Key("prefix"))
        }
        if let tag = tag {
            try container.encode(tag, forKey: Key("tag"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
        let tagDecoded = try containerValues.decodeIfPresent(Tag.self, forKey: .tag)
        tag = tagDecoded
        let andDecoded = try containerValues.decodeIfPresent(IntelligentTieringAndOperator.self, forKey: .and)
        and = andDecoded
    }
}
