// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension APNSMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aPNSPushType = "APNSPushType"
        case action = "Action"
        case badge = "Badge"
        case body = "Body"
        case category = "Category"
        case collapseId = "CollapseId"
        case data = "Data"
        case mediaUrl = "MediaUrl"
        case preferredAuthenticationMethod = "PreferredAuthenticationMethod"
        case priority = "Priority"
        case rawContent = "RawContent"
        case silentPush = "SilentPush"
        case sound = "Sound"
        case substitutions = "Substitutions"
        case threadId = "ThreadId"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aPNSPushType = aPNSPushType {
            try encodeContainer.encode(aPNSPushType, forKey: .aPNSPushType)
        }
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if badge != 0 {
            try encodeContainer.encode(badge, forKey: .badge)
        }
        if let body = body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let collapseId = collapseId {
            try encodeContainer.encode(collapseId, forKey: .collapseId)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .data)
            for (dictKey0, mapof__string0) in data {
                try dataContainer.encode(mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let mediaUrl = mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let preferredAuthenticationMethod = preferredAuthenticationMethod {
            try encodeContainer.encode(preferredAuthenticationMethod, forKey: .preferredAuthenticationMethod)
        }
        if let priority = priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let rawContent = rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if silentPush != false {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let sound = sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .substitutions)
            for (dictKey0, mapoflistof__string0) in substitutions {
                try substitutionsContainer.encode(mapoflistof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let threadId = threadId {
            try encodeContainer.encode(threadId, forKey: .threadId)
        }
        if timeToLive != 0 {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aPNSPushTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aPNSPushType)
        aPNSPushType = aPNSPushTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Action.self, forKey: .action)
        action = actionDecoded
        let badgeDecoded = try containerValues.decode(Int.self, forKey: .badge)
        badge = badgeDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .body)
        body = bodyDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let collapseIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .collapseId)
        collapseId = collapseIdDecoded
        let dataContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .data)
        var dataDecoded0: [String:String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [String:String]()
            for (key0, __string0) in dataContainer {
                dataDecoded0?[key0] = __string0
            }
        }
        data = dataDecoded0
        let mediaUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let preferredAuthenticationMethodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredAuthenticationMethod)
        preferredAuthenticationMethod = preferredAuthenticationMethodDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .priority)
        priority = priorityDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let silentPushDecoded = try containerValues.decode(Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let soundDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sound)
        sound = soundDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [String:[String]?]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [String:[String]?]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0 = [String]()
                if let listof__string0 = listof__string0 {
                    for string1 in listof__string0 {
                        listof__string0Decoded0.append(string1)
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let threadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .threadId)
        threadId = threadIdDecoded
        let timeToLiveDecoded = try containerValues.decode(Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}
