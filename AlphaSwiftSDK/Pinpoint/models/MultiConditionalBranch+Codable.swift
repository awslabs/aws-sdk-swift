// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MultiConditionalBranch: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case condition = "Condition"
        case nextActivity = "NextActivity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let nextActivity = nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(SimpleCondition.self, forKey: .condition)
        condition = conditionDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
    }
}
