// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Event: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appPackageName = "AppPackageName"
        case appTitle = "AppTitle"
        case appVersionCode = "AppVersionCode"
        case attributes = "Attributes"
        case clientSdkVersion = "ClientSdkVersion"
        case eventType = "EventType"
        case metrics = "Metrics"
        case sdkName = "SdkName"
        case session = "Session"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appPackageName = appPackageName {
            try encodeContainer.encode(appPackageName, forKey: .appPackageName)
        }
        if let appTitle = appTitle {
            try encodeContainer.encode(appTitle, forKey: .appTitle)
        }
        if let appVersionCode = appVersionCode {
            try encodeContainer.encode(appVersionCode, forKey: .appVersionCode)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, mapof__string0) in attributes {
                try attributesContainer.encode(mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let clientSdkVersion = clientSdkVersion {
            try encodeContainer.encode(clientSdkVersion, forKey: .clientSdkVersion)
        }
        if let eventType = eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .metrics)
            for (dictKey0, mapof__double0) in metrics {
                try metricsContainer.encode(mapof__double0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sdkName = sdkName {
            try encodeContainer.encode(sdkName, forKey: .sdkName)
        }
        if let session = session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appPackageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appPackageName)
        appPackageName = appPackageNameDecoded
        let appTitleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appTitle)
        appTitle = appTitleDecoded
        let appVersionCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appVersionCode)
        appVersionCode = appVersionCodeDecoded
        let attributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, __string0) in attributesContainer {
                attributesDecoded0?[key0] = __string0
            }
        }
        attributes = attributesDecoded0
        let clientSdkVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientSdkVersion)
        clientSdkVersion = clientSdkVersionDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([String:Double].self, forKey: .metrics)
        var metricsDecoded0: [String:Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [String:Double]()
            for (key0, __double0) in metricsContainer {
                metricsDecoded0?[key0] = __double0
            }
        }
        metrics = metricsDecoded0
        let sdkNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sdkName)
        sdkName = sdkNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Session.self, forKey: .session)
        session = sessionDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}
