// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PushNotificationTemplateRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aDM = "ADM"
        case aPNS = "APNS"
        case baidu = "Baidu"
        case `default` = "Default"
        case defaultSubstitutions = "DefaultSubstitutions"
        case gCM = "GCM"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDM = aDM {
            try encodeContainer.encode(aDM, forKey: .aDM)
        }
        if let aPNS = aPNS {
            try encodeContainer.encode(aPNS, forKey: .aPNS)
        }
        if let baidu = baidu {
            try encodeContainer.encode(baidu, forKey: .baidu)
        }
        if let `default` = `default` {
            try encodeContainer.encode(`default`, forKey: .`default`)
        }
        if let defaultSubstitutions = defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let gCM = gCM {
            try encodeContainer.encode(gCM, forKey: .gCM)
        }
        if let recommenderId = recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aDMDecoded = try containerValues.decodeIfPresent(AndroidPushNotificationTemplate.self, forKey: .aDM)
        aDM = aDMDecoded
        let aPNSDecoded = try containerValues.decodeIfPresent(APNSPushNotificationTemplate.self, forKey: .aPNS)
        aPNS = aPNSDecoded
        let baiduDecoded = try containerValues.decodeIfPresent(AndroidPushNotificationTemplate.self, forKey: .baidu)
        baidu = baiduDecoded
        let defaultDecoded = try containerValues.decodeIfPresent(DefaultPushNotificationTemplate.self, forKey: .default)
        `default` = defaultDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let gCMDecoded = try containerValues.decodeIfPresent(AndroidPushNotificationTemplate.self, forKey: .gCM)
        gCM = gCMDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}
