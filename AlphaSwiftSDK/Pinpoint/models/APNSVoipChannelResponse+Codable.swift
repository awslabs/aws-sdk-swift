// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension APNSVoipChannelResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case hasTokenKey = "HasTokenKey"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultAuthenticationMethod = defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if hasCredential != false {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if hasTokenKey != false {
            try encodeContainer.encode(hasTokenKey, forKey: .hasTokenKey)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if isArchived != false {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decode(Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let hasTokenKeyDecoded = try containerValues.decode(Bool.self, forKey: .hasTokenKey)
        hasTokenKey = hasTokenKeyDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decode(Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
    }
}
