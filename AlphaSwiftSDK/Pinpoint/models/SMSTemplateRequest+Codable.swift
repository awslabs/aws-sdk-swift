// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SMSTemplateRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case body = "Body"
        case defaultSubstitutions = "DefaultSubstitutions"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let defaultSubstitutions = defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let recommenderId = recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .body)
        body = bodyDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}
