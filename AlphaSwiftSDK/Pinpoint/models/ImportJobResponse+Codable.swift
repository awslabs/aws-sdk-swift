// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportJobResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationId = "ApplicationId"
        case completedPieces = "CompletedPieces"
        case completionDate = "CompletionDate"
        case creationDate = "CreationDate"
        case definition = "Definition"
        case failedPieces = "FailedPieces"
        case failures = "Failures"
        case id = "Id"
        case jobStatus = "JobStatus"
        case totalFailures = "TotalFailures"
        case totalPieces = "TotalPieces"
        case totalProcessed = "TotalProcessed"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if completedPieces != 0 {
            try encodeContainer.encode(completedPieces, forKey: .completedPieces)
        }
        if let completionDate = completionDate {
            try encodeContainer.encode(completionDate, forKey: .completionDate)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let definition = definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if failedPieces != 0 {
            try encodeContainer.encode(failedPieces, forKey: .failedPieces)
        }
        if let failures = failures {
            var failuresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failures)
            for listof__string0 in failures {
                try failuresContainer.encode(listof__string0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let jobStatus = jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if totalFailures != 0 {
            try encodeContainer.encode(totalFailures, forKey: .totalFailures)
        }
        if totalPieces != 0 {
            try encodeContainer.encode(totalPieces, forKey: .totalPieces)
        }
        if totalProcessed != 0 {
            try encodeContainer.encode(totalProcessed, forKey: .totalProcessed)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let completedPiecesDecoded = try containerValues.decode(Int.self, forKey: .completedPieces)
        completedPieces = completedPiecesDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(ImportJobResource.self, forKey: .definition)
        definition = definitionDecoded
        let failedPiecesDecoded = try containerValues.decode(Int.self, forKey: .failedPieces)
        failedPieces = failedPiecesDecoded
        let failuresContainer = try containerValues.decodeIfPresent([String].self, forKey: .failures)
        var failuresDecoded0:[String]? = nil
        if let failuresContainer = failuresContainer {
            failuresDecoded0 = [String]()
            for string0 in failuresContainer {
                failuresDecoded0?.append(string0)
            }
        }
        failures = failuresDecoded0
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let totalFailuresDecoded = try containerValues.decode(Int.self, forKey: .totalFailures)
        totalFailures = totalFailuresDecoded
        let totalPiecesDecoded = try containerValues.decode(Int.self, forKey: .totalPieces)
        totalPieces = totalPiecesDecoded
        let totalProcessedDecoded = try containerValues.decode(Int.self, forKey: .totalProcessed)
        totalProcessed = totalProcessedDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
    }
}
