// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WaitTime: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case waitFor = "WaitFor"
        case waitUntil = "WaitUntil"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let waitFor = waitFor {
            try encodeContainer.encode(waitFor, forKey: .waitFor)
        }
        if let waitUntil = waitUntil {
            try encodeContainer.encode(waitUntil, forKey: .waitUntil)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let waitForDecoded = try containerValues.decodeIfPresent(String.self, forKey: .waitFor)
        waitFor = waitForDecoded
        let waitUntilDecoded = try containerValues.decodeIfPresent(String.self, forKey: .waitUntil)
        waitUntil = waitUntilDecoded
    }
}
