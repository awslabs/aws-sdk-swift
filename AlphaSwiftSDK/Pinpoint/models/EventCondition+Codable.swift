// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventCondition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensions = "Dimensions"
        case messageActivity = "MessageActivity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let messageActivity = messageActivity {
            try encodeContainer.encode(messageActivity, forKey: .messageActivity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(EventDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let messageActivityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .messageActivity)
        messageActivity = messageActivityDecoded
    }
}
