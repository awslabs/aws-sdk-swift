// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MessageRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addresses = "Addresses"
        case context = "Context"
        case endpoints = "Endpoints"
        case messageConfiguration = "MessageConfiguration"
        case templateConfiguration = "TemplateConfiguration"
        case traceId = "TraceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .addresses)
            for (dictKey0, mapofaddressconfiguration0) in addresses {
                try addressesContainer.encode(mapofaddressconfiguration0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .context)
            for (dictKey0, mapof__string0) in context {
                try contextContainer.encode(mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .endpoints)
            for (dictKey0, mapofendpointsendconfiguration0) in endpoints {
                try endpointsContainer.encode(mapofendpointsendconfiguration0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let messageConfiguration = messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let templateConfiguration = templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let traceId = traceId {
            try encodeContainer.encode(traceId, forKey: .traceId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressesContainer = try containerValues.decodeIfPresent([String:AddressConfiguration].self, forKey: .addresses)
        var addressesDecoded0: [String:AddressConfiguration]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [String:AddressConfiguration]()
            for (key0, addressconfiguration0) in addressesContainer {
                addressesDecoded0?[key0] = addressconfiguration0
            }
        }
        addresses = addressesDecoded0
        let contextContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .context)
        var contextDecoded0: [String:String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [String:String]()
            for (key0, __string0) in contextContainer {
                contextDecoded0?[key0] = __string0
            }
        }
        context = contextDecoded0
        let endpointsContainer = try containerValues.decodeIfPresent([String:EndpointSendConfiguration].self, forKey: .endpoints)
        var endpointsDecoded0: [String:EndpointSendConfiguration]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [String:EndpointSendConfiguration]()
            for (key0, endpointsendconfiguration0) in endpointsContainer {
                endpointsDecoded0?[key0] = endpointsendconfiguration0
            }
        }
        endpoints = endpointsDecoded0
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(DirectMessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let traceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .traceId)
        traceId = traceIdDecoded
    }
}
