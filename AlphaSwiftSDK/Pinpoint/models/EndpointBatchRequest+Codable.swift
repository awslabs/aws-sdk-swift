// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EndpointBatchRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for listofendpointbatchitem0 in item {
                try itemContainer.encode(listofendpointbatchitem0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([EndpointBatchItem].self, forKey: .item)
        var itemDecoded0:[EndpointBatchItem]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [EndpointBatchItem]()
            for structure0 in itemContainer {
                itemDecoded0?.append(structure0)
            }
        }
        item = itemDecoded0
    }
}
