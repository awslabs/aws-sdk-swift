// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmailMessageActivity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case messageConfig = "MessageConfig"
        case nextActivity = "NextActivity"
        case templateName = "TemplateName"
        case templateVersion = "TemplateVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageConfig = messageConfig {
            try encodeContainer.encode(messageConfig, forKey: .messageConfig)
        }
        if let nextActivity = nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateVersion = templateVersion {
            try encodeContainer.encode(templateVersion, forKey: .templateVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageConfigDecoded = try containerValues.decodeIfPresent(JourneyEmailMessage.self, forKey: .messageConfig)
        messageConfig = messageConfigDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateVersion)
        templateVersion = templateVersionDecoded
    }
}
