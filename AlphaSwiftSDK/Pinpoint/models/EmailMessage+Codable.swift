// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmailMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case body = "Body"
        case feedbackForwardingAddress = "FeedbackForwardingAddress"
        case fromAddress = "FromAddress"
        case rawEmail = "RawEmail"
        case replyToAddresses = "ReplyToAddresses"
        case simpleEmail = "SimpleEmail"
        case substitutions = "Substitutions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let feedbackForwardingAddress = feedbackForwardingAddress {
            try encodeContainer.encode(feedbackForwardingAddress, forKey: .feedbackForwardingAddress)
        }
        if let fromAddress = fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let rawEmail = rawEmail {
            try encodeContainer.encode(rawEmail, forKey: .rawEmail)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for listof__string0 in replyToAddresses {
                try replyToAddressesContainer.encode(listof__string0)
            }
        }
        if let simpleEmail = simpleEmail {
            try encodeContainer.encode(simpleEmail, forKey: .simpleEmail)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .substitutions)
            for (dictKey0, mapoflistof__string0) in substitutions {
                try substitutionsContainer.encode(mapoflistof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .body)
        body = bodyDecoded
        let feedbackForwardingAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .feedbackForwardingAddress)
        feedbackForwardingAddress = feedbackForwardingAddressDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let rawEmailDecoded = try containerValues.decodeIfPresent(RawEmail.self, forKey: .rawEmail)
        rawEmail = rawEmailDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [String]()
            for string0 in replyToAddressesContainer {
                replyToAddressesDecoded0?.append(string0)
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let simpleEmailDecoded = try containerValues.decodeIfPresent(SimpleEmail.self, forKey: .simpleEmail)
        simpleEmail = simpleEmailDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [String:[String]?]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [String:[String]?]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0 = [String]()
                if let listof__string0 = listof__string0 {
                    for string1 in listof__string0 {
                        listof__string0Decoded0.append(string1)
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
    }
}
