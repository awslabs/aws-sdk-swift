// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies the configuration and other settings for an activity in a journey.</p>
public struct Activity: Equatable {
    /// <p>The settings for a custom message activity. This type of activity calls an AWS Lambda function or web hook that sends messages to participants.</p>
    public let cUSTOM: CustomMessageActivity?
    /// <p>The settings for a yes/no split activity. This type of activity sends participants down one of two paths in a journey, based on conditions that you specify.</p>
    public let conditionalSplit: ConditionalSplitActivity?
    /// <p>The custom description of the activity.</p>
    public let description: String?
    /// <p>The settings for an email activity. This type of activity sends an email message to participants.</p>
    public let eMAIL: EmailMessageActivity?
    /// <p>The settings for a holdout activity. This type of activity stops a journey for a specified percentage of participants.</p>
    public let holdout: HoldoutActivity?
    /// <p>The settings for a multivariate split activity. This type of activity sends participants down one of as many as five paths (including a default <i>Else</i> path) in a journey, based on conditions that you specify.</p>
    public let multiCondition: MultiConditionalSplitActivity?
    /// <p>The settings for a push notification activity. This type of activity sends a push notification to participants.</p>
    public let pUSH: PushMessageActivity?
    /// <p>The settings for a random split activity. This type of activity randomly sends specified percentages of participants down one of as many as five paths in a journey, based on conditions that you specify.</p>
    public let randomSplit: RandomSplitActivity?
    /// <p>The settings for an SMS activity. This type of activity sends a text message to participants.</p>
    public let sMS: SMSMessageActivity?
    /// <p>The settings for a wait activity. This type of activity waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p>
    public let wait: WaitActivity?

    public init (
        cUSTOM: CustomMessageActivity? = nil,
        conditionalSplit: ConditionalSplitActivity? = nil,
        description: String? = nil,
        eMAIL: EmailMessageActivity? = nil,
        holdout: HoldoutActivity? = nil,
        multiCondition: MultiConditionalSplitActivity? = nil,
        pUSH: PushMessageActivity? = nil,
        randomSplit: RandomSplitActivity? = nil,
        sMS: SMSMessageActivity? = nil,
        wait: WaitActivity? = nil
    )
    {
        self.cUSTOM = cUSTOM
        self.conditionalSplit = conditionalSplit
        self.description = description
        self.eMAIL = eMAIL
        self.holdout = holdout
        self.multiCondition = multiCondition
        self.pUSH = pUSH
        self.randomSplit = randomSplit
        self.sMS = sMS
        self.wait = wait
    }
}
