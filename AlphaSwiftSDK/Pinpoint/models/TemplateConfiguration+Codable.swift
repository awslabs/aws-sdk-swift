// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TemplateConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case emailTemplate = "EmailTemplate"
        case pushTemplate = "PushTemplate"
        case sMSTemplate = "SMSTemplate"
        case voiceTemplate = "VoiceTemplate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailTemplate = emailTemplate {
            try encodeContainer.encode(emailTemplate, forKey: .emailTemplate)
        }
        if let pushTemplate = pushTemplate {
            try encodeContainer.encode(pushTemplate, forKey: .pushTemplate)
        }
        if let sMSTemplate = sMSTemplate {
            try encodeContainer.encode(sMSTemplate, forKey: .sMSTemplate)
        }
        if let voiceTemplate = voiceTemplate {
            try encodeContainer.encode(voiceTemplate, forKey: .voiceTemplate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailTemplateDecoded = try containerValues.decodeIfPresent(Template.self, forKey: .emailTemplate)
        emailTemplate = emailTemplateDecoded
        let pushTemplateDecoded = try containerValues.decodeIfPresent(Template.self, forKey: .pushTemplate)
        pushTemplate = pushTemplateDecoded
        let sMSTemplateDecoded = try containerValues.decodeIfPresent(Template.self, forKey: .sMSTemplate)
        sMSTemplate = sMSTemplateDecoded
        let voiceTemplateDecoded = try containerValues.decodeIfPresent(Template.self, forKey: .voiceTemplate)
        voiceTemplate = voiceTemplateDecoded
    }
}
