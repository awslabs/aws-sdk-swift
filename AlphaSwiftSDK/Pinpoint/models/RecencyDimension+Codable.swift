// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RecencyDimension: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "Duration"
        case recencyType = "RecencyType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = duration {
            try encodeContainer.encode(duration.rawValue, forKey: .duration)
        }
        if let recencyType = recencyType {
            try encodeContainer.encode(recencyType.rawValue, forKey: .recencyType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Duration.self, forKey: .duration)
        duration = durationDecoded
        let recencyTypeDecoded = try containerValues.decodeIfPresent(RecencyType.self, forKey: .recencyType)
        recencyType = recencyTypeDecoded
    }
}
