// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SegmentImportResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelCounts = "ChannelCounts"
        case externalId = "ExternalId"
        case format = "Format"
        case roleArn = "RoleArn"
        case s3Url = "S3Url"
        case size = "Size"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelCounts = channelCounts {
            var channelCountsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .channelCounts)
            for (dictKey0, mapof__integer0) in channelCounts {
                try channelCountsContainer.encode(mapof__integer0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3Url = s3Url {
            try encodeContainer.encode(s3Url, forKey: .s3Url)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelCountsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .channelCounts)
        var channelCountsDecoded0: [String:Int]? = nil
        if let channelCountsContainer = channelCountsContainer {
            channelCountsDecoded0 = [String:Int]()
            for (key0, __integer0) in channelCountsContainer {
                channelCountsDecoded0?[key0] = __integer0
            }
        }
        channelCounts = channelCountsDecoded0
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let formatDecoded = try containerValues.decodeIfPresent(Format.self, forKey: .format)
        format = formatDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let s3UrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Url)
        s3Url = s3UrlDecoded
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
    }
}
