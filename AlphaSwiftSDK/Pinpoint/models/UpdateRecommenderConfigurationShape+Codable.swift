// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateRecommenderConfigurationShape: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case description = "Description"
        case name = "Name"
        case recommendationProviderIdType = "RecommendationProviderIdType"
        case recommendationProviderRoleArn = "RecommendationProviderRoleArn"
        case recommendationProviderUri = "RecommendationProviderUri"
        case recommendationTransformerUri = "RecommendationTransformerUri"
        case recommendationsDisplayName = "RecommendationsDisplayName"
        case recommendationsPerMessage = "RecommendationsPerMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, mapof__string0) in attributes {
                try attributesContainer.encode(mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendationProviderIdType = recommendationProviderIdType {
            try encodeContainer.encode(recommendationProviderIdType, forKey: .recommendationProviderIdType)
        }
        if let recommendationProviderRoleArn = recommendationProviderRoleArn {
            try encodeContainer.encode(recommendationProviderRoleArn, forKey: .recommendationProviderRoleArn)
        }
        if let recommendationProviderUri = recommendationProviderUri {
            try encodeContainer.encode(recommendationProviderUri, forKey: .recommendationProviderUri)
        }
        if let recommendationTransformerUri = recommendationTransformerUri {
            try encodeContainer.encode(recommendationTransformerUri, forKey: .recommendationTransformerUri)
        }
        if let recommendationsDisplayName = recommendationsDisplayName {
            try encodeContainer.encode(recommendationsDisplayName, forKey: .recommendationsDisplayName)
        }
        if recommendationsPerMessage != 0 {
            try encodeContainer.encode(recommendationsPerMessage, forKey: .recommendationsPerMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, __string0) in attributesContainer {
                attributesDecoded0?[key0] = __string0
            }
        }
        attributes = attributesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let recommendationProviderIdTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendationProviderIdType)
        recommendationProviderIdType = recommendationProviderIdTypeDecoded
        let recommendationProviderRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendationProviderRoleArn)
        recommendationProviderRoleArn = recommendationProviderRoleArnDecoded
        let recommendationProviderUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendationProviderUri)
        recommendationProviderUri = recommendationProviderUriDecoded
        let recommendationTransformerUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendationTransformerUri)
        recommendationTransformerUri = recommendationTransformerUriDecoded
        let recommendationsDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendationsDisplayName)
        recommendationsDisplayName = recommendationsDisplayNameDecoded
        let recommendationsPerMessageDecoded = try containerValues.decode(Int.self, forKey: .recommendationsPerMessage)
        recommendationsPerMessage = recommendationsPerMessageDecoded
    }
}
