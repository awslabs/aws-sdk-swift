// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ItemResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endpointItemResponse = "EndpointItemResponse"
        case eventsItemResponse = "EventsItemResponse"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointItemResponse = endpointItemResponse {
            try encodeContainer.encode(endpointItemResponse, forKey: .endpointItemResponse)
        }
        if let eventsItemResponse = eventsItemResponse {
            var eventsItemResponseContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .eventsItemResponse)
            for (dictKey0, mapofeventitemresponse0) in eventsItemResponse {
                try eventsItemResponseContainer.encode(mapofeventitemresponse0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointItemResponseDecoded = try containerValues.decodeIfPresent(EndpointItemResponse.self, forKey: .endpointItemResponse)
        endpointItemResponse = endpointItemResponseDecoded
        let eventsItemResponseContainer = try containerValues.decodeIfPresent([String:EventItemResponse].self, forKey: .eventsItemResponse)
        var eventsItemResponseDecoded0: [String:EventItemResponse]? = nil
        if let eventsItemResponseContainer = eventsItemResponseContainer {
            eventsItemResponseDecoded0 = [String:EventItemResponse]()
            for (key0, eventitemresponse0) in eventsItemResponseContainer {
                eventsItemResponseDecoded0?[key0] = eventitemresponse0
            }
        }
        eventsItemResponse = eventsItemResponseDecoded0
    }
}
