// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateEventSourceMappingInput: Equatable {
    /**
     <p>The maximum number of items to retrieve in a single batch.</p>
              <ul>
                 <li>
                    <p>
                       <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p>
                 </li>
                 <li>
                    <p>
                       <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p>
                 </li>
                 <li>
                    <p>
                       <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p>
                 </li>
                 <li>
                    <p>
                       <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p>
                 </li>
              </ul>
     */
    public let batchSize: Int?
    /// <p>(Streams) If the function returns an error, split the batch in two and retry.</p>
    public let bisectBatchOnFunctionError: Bool?
    /// <p>(Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.</p>
    public let destinationConfig: DestinationConfig?
    /// <p>If true, the event source mapping is active. Set to false to pause polling and invocation.</p>
    public let enabled: Bool?
    /**
     <p>The Amazon Resource Name (ARN) of the event source.</p>
              <ul>
                 <li>
                    <p>
                       <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p>
                 </li>
                 <li>
                    <p>
                       <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p>
                 </li>
                 <li>
                    <p>
                       <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p>
                 </li>
                 <li>
                    <p>
                       <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p>
                 </li>
              </ul>
     */
    public let eventSourceArn: String?
    /**
     <p>The name of the Lambda function.</p>
              <p class="title">
                 <b>Name formats</b>
              </p>
              <ul>
                 <li>
                    <p>
                       <b>Function name</b> - <code>MyFunction</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                 </li>
              </ul>
              <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64
           characters in length.</p>
     */
    public let functionName: String?
    /// <p>(Streams) The maximum amount of time to gather records before invoking the function, in seconds.</p>
    public let maximumBatchingWindowInSeconds: Int?
    /// <p>(Streams) Discard records older than the specified age. The default value is infinite (-1).</p>
    public let maximumRecordAgeInSeconds: Int?
    /// <p>(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.</p>
    public let maximumRetryAttempts: Int?
    /// <p>(Streams) The number of batches to process from each shard concurrently.</p>
    public let parallelizationFactor: Int?
    /**
     <p>
           (MQ) The name of the Amazon MQ broker destination queue to consume.
         </p>
     */
    public let queues: [String]?
    /**
     <p>
           (MQ) The Secrets Manager secret that stores your broker credentials. To store your secret, use the following format:
           <code>	  {
             "username": "your username",
             "password": "your password"
             }</code>
              </p>

              <p>To reference the secret, use the following format:
           <code>[
             {
             "Type": "BASIC_AUTH",
             "URI": "secretARN"
             }
             ]</code>
              </p>
              <p>The value of <code>Type</code> is always <code>BASIC_AUTH</code>. To encrypt the secret, you can use customer or service managed keys. When using a customer managed KMS key, the Lambda execution role requires <code>kms:Decrypt</code> permissions.</p>
     */
    public let sourceAccessConfigurations: [SourceAccessConfiguration]?
    /**
     <p>The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams
           sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams.</p>
     */
    public let startingPosition: EventSourcePosition?
    /**
     <p>With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start
           reading.</p>
     */
    public let startingPositionTimestamp: Date?
    /**
     <p>
           (MSK) The name of the Kafka topic.
         </p>
     */
    public let topics: [String]?

    public init (
        batchSize: Int? = nil,
        bisectBatchOnFunctionError: Bool? = nil,
        destinationConfig: DestinationConfig? = nil,
        enabled: Bool? = nil,
        eventSourceArn: String? = nil,
        functionName: String? = nil,
        maximumBatchingWindowInSeconds: Int? = nil,
        maximumRecordAgeInSeconds: Int? = nil,
        maximumRetryAttempts: Int? = nil,
        parallelizationFactor: Int? = nil,
        queues: [String]? = nil,
        sourceAccessConfigurations: [SourceAccessConfiguration]? = nil,
        startingPosition: EventSourcePosition? = nil,
        startingPositionTimestamp: Date? = nil,
        topics: [String]? = nil
    )
    {
        self.batchSize = batchSize
        self.bisectBatchOnFunctionError = bisectBatchOnFunctionError
        self.destinationConfig = destinationConfig
        self.enabled = enabled
        self.eventSourceArn = eventSourceArn
        self.functionName = functionName
        self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        self.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds
        self.maximumRetryAttempts = maximumRetryAttempts
        self.parallelizationFactor = parallelizationFactor
        self.queues = queues
        self.sourceAccessConfigurations = sourceAccessConfigurations
        self.startingPosition = startingPosition
        self.startingPositionTimestamp = startingPositionTimestamp
        self.topics = topics
    }
}
