// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListVersionsByFunctionOutputBody: Equatable {
    public let nextMarker: String?
    public let versions: [FunctionConfiguration]?
}

extension ListVersionsByFunctionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextMarker = "NextMarker"
        case versions = "Versions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let versionsContainer = try containerValues.decodeIfPresent([FunctionConfiguration].self, forKey: .versions)
        var versionsDecoded0:[FunctionConfiguration]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [FunctionConfiguration]()
            for structure0 in versionsContainer {
                versionsDecoded0?.append(structure0)
            }
        }
        versions = versionsDecoded0
    }
}
