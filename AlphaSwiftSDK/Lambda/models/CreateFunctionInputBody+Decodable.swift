// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFunctionInputBody: Equatable {
    public let functionName: String?
    public let runtime: Runtime?
    public let role: String?
    public let handler: String?
    public let code: FunctionCode?
    public let description: String?
    public let timeout: Int?
    public let memorySize: Int?
    public let publish: Bool
    public let vpcConfig: VpcConfig?
    public let packageType: PackageType?
    public let deadLetterConfig: DeadLetterConfig?
    public let environment: Environment?
    public let kMSKeyArn: String?
    public let tracingConfig: TracingConfig?
    public let tags: [String:String]?
    public let layers: [String]?
    public let fileSystemConfigs: [FileSystemConfig]?
    public let imageConfig: ImageConfig?
    public let codeSigningConfigArn: String?
}

extension CreateFunctionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case codeSigningConfigArn = "CodeSigningConfigArn"
        case deadLetterConfig = "DeadLetterConfig"
        case description = "Description"
        case environment = "Environment"
        case fileSystemConfigs = "FileSystemConfigs"
        case functionName = "FunctionName"
        case handler = "Handler"
        case imageConfig = "ImageConfig"
        case kMSKeyArn = "KMSKeyArn"
        case layers = "Layers"
        case memorySize = "MemorySize"
        case packageType = "PackageType"
        case publish = "Publish"
        case role = "Role"
        case runtime = "Runtime"
        case tags = "Tags"
        case timeout = "Timeout"
        case tracingConfig = "TracingConfig"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let runtimeDecoded = try containerValues.decodeIfPresent(Runtime.self, forKey: .runtime)
        runtime = runtimeDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let handlerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .handler)
        handler = handlerDecoded
        let codeDecoded = try containerValues.decodeIfPresent(FunctionCode.self, forKey: .code)
        code = codeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let memorySizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .memorySize)
        memorySize = memorySizeDecoded
        let publishDecoded = try containerValues.decode(Bool.self, forKey: .publish)
        publish = publishDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(Environment.self, forKey: .environment)
        environment = environmentDecoded
        let kMSKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSKeyArn)
        kMSKeyArn = kMSKeyArnDecoded
        let tracingConfigDecoded = try containerValues.decodeIfPresent(TracingConfig.self, forKey: .tracingConfig)
        tracingConfig = tracingConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let layersContainer = try containerValues.decodeIfPresent([String].self, forKey: .layers)
        var layersDecoded0:[String]? = nil
        if let layersContainer = layersContainer {
            layersDecoded0 = [String]()
            for string0 in layersContainer {
                layersDecoded0?.append(string0)
            }
        }
        layers = layersDecoded0
        let fileSystemConfigsContainer = try containerValues.decodeIfPresent([FileSystemConfig].self, forKey: .fileSystemConfigs)
        var fileSystemConfigsDecoded0:[FileSystemConfig]? = nil
        if let fileSystemConfigsContainer = fileSystemConfigsContainer {
            fileSystemConfigsDecoded0 = [FileSystemConfig]()
            for structure0 in fileSystemConfigsContainer {
                fileSystemConfigsDecoded0?.append(structure0)
            }
        }
        fileSystemConfigs = fileSystemConfigsDecoded0
        let imageConfigDecoded = try containerValues.decodeIfPresent(ImageConfig.self, forKey: .imageConfig)
        imageConfig = imageConfigDecoded
        let codeSigningConfigArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .codeSigningConfigArn)
        codeSigningConfigArn = codeSigningConfigArnDecoded
    }
}
