// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AliasRoutingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalVersionWeights = "AdditionalVersionWeights"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalVersionWeights = additionalVersionWeights {
            var additionalVersionWeightsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .additionalVersionWeights)
            for (dictKey0, additionalversionweights0) in additionalVersionWeights {
                try additionalVersionWeightsContainer.encode(additionalversionweights0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalVersionWeightsContainer = try containerValues.decodeIfPresent([String:Double].self, forKey: .additionalVersionWeights)
        var additionalVersionWeightsDecoded0: [String:Double]? = nil
        if let additionalVersionWeightsContainer = additionalVersionWeightsContainer {
            additionalVersionWeightsDecoded0 = [String:Double]()
            for (key0, weight0) in additionalVersionWeightsContainer {
                additionalVersionWeightsDecoded0?[key0] = weight0
            }
        }
        additionalVersionWeights = additionalVersionWeightsDecoded0
    }
}
