// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateFunctionInput: Equatable {
    /// <p>The code for the function.</p>
    public let code: FunctionCode?
    /**
     <p>To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration
     includes a set of signing profiles, which define the trusted publishers for this function.</p>
     */
    public let codeSigningConfigArn: String?
    /**
     <p>A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events
           when they fail processing. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">Dead Letter Queues</a>.</p>
     */
    public let deadLetterConfig: DeadLetterConfig?
    /// <p>A description of the function.</p>
    public let description: String?
    /// <p>Environment variables that are accessible from function code during execution.</p>
    public let environment: Environment?
    /// <p>Connection settings for an Amazon EFS file system.</p>
    public let fileSystemConfigs: [FileSystemConfig]?
    /**
     <p>The name of the Lambda function.</p>
              <p class="title">
                 <b>Name formats</b>
              </p>
              <ul>
                 <li>
                    <p>
                       <b>Function name</b> - <code>my-function</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                 </li>
              </ul>
              <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
           characters in length.</p>
     */
    public let functionName: String?
    /**
     <p>The name of the method within your code that Lambda calls to execute your function. The format includes the
           file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information,
           see <a href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming Model</a>.</p>
     */
    public let handler: String?
    /// <p>Configuration values that override the container image Dockerfile.</p>
    public let imageConfig: ImageConfig?
    /**
     <p>The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment
           variables. If it's not provided, AWS Lambda uses a default service key.</p>
     */
    public let kMSKeyArn: String?
    /**
     <p>A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a>
           to add to the function's execution environment. Specify each layer by its ARN, including the version.</p>
     */
    public let layers: [String]?
    /**
     <p>The amount of memory available to the function at runtime. Increasing the function's memory also increases its CPU
           allocation. The default value is 128 MB. The value can be any multiple of 1 MB.</p>
     */
    public let memorySize: Int?
    /// <p>The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for ZIP archive.</p>
    public let packageType: PackageType?
    /// <p>Set to true to publish the first version of the function during creation.</p>
    public let publish: Bool
    /// <p>The Amazon Resource Name (ARN) of the function's execution role.</p>
    public let role: String?
    /// <p>The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>.</p>
    public let runtime: Runtime?
    /**
     <p>A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to apply to the
           function.</p>
     */
    public let tags: [String:String]?
    /**
     <p>The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The
           maximum allowed value is 900 seconds.</p>
     */
    public let timeout: Int?
    /**
     <p>Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS
           X-Ray.</p>
     */
    public let tracingConfig: TracingConfig?
    /**
     <p>For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
           When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more
           information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.</p>
     */
    public let vpcConfig: VpcConfig?

    public init (
        code: FunctionCode? = nil,
        codeSigningConfigArn: String? = nil,
        deadLetterConfig: DeadLetterConfig? = nil,
        description: String? = nil,
        environment: Environment? = nil,
        fileSystemConfigs: [FileSystemConfig]? = nil,
        functionName: String? = nil,
        handler: String? = nil,
        imageConfig: ImageConfig? = nil,
        kMSKeyArn: String? = nil,
        layers: [String]? = nil,
        memorySize: Int? = nil,
        packageType: PackageType? = nil,
        publish: Bool = false,
        role: String? = nil,
        runtime: Runtime? = nil,
        tags: [String:String]? = nil,
        timeout: Int? = nil,
        tracingConfig: TracingConfig? = nil,
        vpcConfig: VpcConfig? = nil
    )
    {
        self.code = code
        self.codeSigningConfigArn = codeSigningConfigArn
        self.deadLetterConfig = deadLetterConfig
        self.description = description
        self.environment = environment
        self.fileSystemConfigs = fileSystemConfigs
        self.functionName = functionName
        self.handler = handler
        self.imageConfig = imageConfig
        self.kMSKeyArn = kMSKeyArn
        self.layers = layers
        self.memorySize = memorySize
        self.packageType = packageType
        self.publish = publish
        self.role = role
        self.runtime = runtime
        self.tags = tags
        self.timeout = timeout
        self.tracingConfig = tracingConfig
        self.vpcConfig = vpcConfig
    }
}
