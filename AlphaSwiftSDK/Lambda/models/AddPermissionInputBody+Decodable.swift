// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddPermissionInputBody: Equatable {
    public let statementId: String?
    public let action: String?
    public let principal: String?
    public let sourceArn: String?
    public let sourceAccount: String?
    public let eventSourceToken: String?
    public let revisionId: String?
}

extension AddPermissionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case eventSourceToken = "EventSourceToken"
        case principal = "Principal"
        case revisionId = "RevisionId"
        case sourceAccount = "SourceAccount"
        case sourceArn = "SourceArn"
        case statementId = "StatementId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statementId)
        statementId = statementIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .action)
        action = actionDecoded
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let sourceAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceAccount)
        sourceAccount = sourceAccountDecoded
        let eventSourceTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSourceToken)
        eventSourceToken = eventSourceTokenDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
    }
}
