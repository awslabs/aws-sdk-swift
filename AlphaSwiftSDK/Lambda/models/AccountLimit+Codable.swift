// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountLimit: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case codeSizeUnzipped = "CodeSizeUnzipped"
        case codeSizeZipped = "CodeSizeZipped"
        case concurrentExecutions = "ConcurrentExecutions"
        case totalCodeSize = "TotalCodeSize"
        case unreservedConcurrentExecutions = "UnreservedConcurrentExecutions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if codeSizeUnzipped != 0 {
            try encodeContainer.encode(codeSizeUnzipped, forKey: .codeSizeUnzipped)
        }
        if codeSizeZipped != 0 {
            try encodeContainer.encode(codeSizeZipped, forKey: .codeSizeZipped)
        }
        if concurrentExecutions != 0 {
            try encodeContainer.encode(concurrentExecutions, forKey: .concurrentExecutions)
        }
        if totalCodeSize != 0 {
            try encodeContainer.encode(totalCodeSize, forKey: .totalCodeSize)
        }
        if let unreservedConcurrentExecutions = unreservedConcurrentExecutions {
            try encodeContainer.encode(unreservedConcurrentExecutions, forKey: .unreservedConcurrentExecutions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalCodeSizeDecoded = try containerValues.decode(Int.self, forKey: .totalCodeSize)
        totalCodeSize = totalCodeSizeDecoded
        let codeSizeUnzippedDecoded = try containerValues.decode(Int.self, forKey: .codeSizeUnzipped)
        codeSizeUnzipped = codeSizeUnzippedDecoded
        let codeSizeZippedDecoded = try containerValues.decode(Int.self, forKey: .codeSizeZipped)
        codeSizeZipped = codeSizeZippedDecoded
        let concurrentExecutionsDecoded = try containerValues.decode(Int.self, forKey: .concurrentExecutions)
        concurrentExecutions = concurrentExecutionsDecoded
        let unreservedConcurrentExecutionsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .unreservedConcurrentExecutions)
        unreservedConcurrentExecutions = unreservedConcurrentExecutionsDecoded
    }
}
