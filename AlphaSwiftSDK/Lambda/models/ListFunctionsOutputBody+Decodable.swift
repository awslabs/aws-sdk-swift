// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFunctionsOutputBody: Equatable {
    public let nextMarker: String?
    public let functions: [FunctionConfiguration]?
}

extension ListFunctionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case functions = "Functions"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let functionsContainer = try containerValues.decodeIfPresent([FunctionConfiguration].self, forKey: .functions)
        var functionsDecoded0:[FunctionConfiguration]? = nil
        if let functionsContainer = functionsContainer {
            functionsDecoded0 = [FunctionConfiguration]()
            for structure0 in functionsContainer {
                functionsDecoded0?.append(structure0)
            }
        }
        functions = functionsDecoded0
    }
}
