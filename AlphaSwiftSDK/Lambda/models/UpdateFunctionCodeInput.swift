// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateFunctionCodeInput: Equatable {
    /**
     <p>Set to true to validate the request parameters and access permissions without modifying the function
           code.</p>
     */
    public let dryRun: Bool
    /**
     <p>The name of the Lambda function.</p>
              <p class="title">
                 <b>Name formats</b>
              </p>
              <ul>
                 <li>
                    <p>
                       <b>Function name</b> - <code>my-function</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                 </li>
                 <li>
                    <p>
                       <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                 </li>
              </ul>
              <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
           characters in length.</p>
     */
    public let functionName: String?
    /// <p>URI of a container image in the Amazon ECR registry.</p>
    public let imageUri: String?
    /**
     <p>Set to true to publish a new version of the function after updating the code. This has the same effect as
           calling <a>PublishVersion</a> separately.</p>
     */
    public let publish: Bool
    /**
     <p>Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a
           function that has changed since you last read it.</p>
     */
    public let revisionId: String?
    /// <p>An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.</p>
    public let s3Bucket: String?
    /// <p>The Amazon S3 key of the deployment package.</p>
    public let s3Key: String?
    /// <p>For versioned objects, the version of the deployment package object to use.</p>
    public let s3ObjectVersion: String?
    /**
     <p>The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for
           you.</p>
     */
    public let zipFile: Data?

    public init (
        dryRun: Bool = false,
        functionName: String? = nil,
        imageUri: String? = nil,
        publish: Bool = false,
        revisionId: String? = nil,
        s3Bucket: String? = nil,
        s3Key: String? = nil,
        s3ObjectVersion: String? = nil,
        zipFile: Data? = nil
    )
    {
        self.dryRun = dryRun
        self.functionName = functionName
        self.imageUri = imageUri
        self.publish = publish
        self.revisionId = revisionId
        self.s3Bucket = s3Bucket
        self.s3Key = s3Key
        self.s3ObjectVersion = s3ObjectVersion
        self.zipFile = zipFile
    }
}
