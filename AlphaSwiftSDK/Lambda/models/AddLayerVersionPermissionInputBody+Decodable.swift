// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddLayerVersionPermissionInputBody: Equatable {
    public let statementId: String?
    public let action: String?
    public let principal: String?
    public let organizationId: String?
}

extension AddLayerVersionPermissionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case organizationId = "OrganizationId"
        case principal = "Principal"
        case statementId = "StatementId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statementId)
        statementId = statementIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .action)
        action = actionDecoded
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let organizationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationId)
        organizationId = organizationIdDecoded
    }
}
