// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Environment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case variables = "Variables"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .variables)
            for (dictKey0, environmentvariables0) in variables {
                try variablesContainer.encode(environmentvariables0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .variables)
        var variablesDecoded0: [String:String]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [String:String]()
            for (key0, environmentvariablevalue0) in variablesContainer {
                variablesDecoded0?[key0] = environmentvariablevalue0
            }
        }
        variables = variablesDecoded0
    }
}
