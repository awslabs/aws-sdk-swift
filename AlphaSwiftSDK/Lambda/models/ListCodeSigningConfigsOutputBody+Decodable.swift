// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCodeSigningConfigsOutputBody: Equatable {
    public let nextMarker: String?
    public let codeSigningConfigs: [CodeSigningConfig]?
}

extension ListCodeSigningConfigsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case codeSigningConfigs = "CodeSigningConfigs"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let codeSigningConfigsContainer = try containerValues.decodeIfPresent([CodeSigningConfig].self, forKey: .codeSigningConfigs)
        var codeSigningConfigsDecoded0:[CodeSigningConfig]? = nil
        if let codeSigningConfigsContainer = codeSigningConfigsContainer {
            codeSigningConfigsDecoded0 = [CodeSigningConfig]()
            for structure0 in codeSigningConfigsContainer {
                codeSigningConfigsDecoded0?.append(structure0)
            }
        }
        codeSigningConfigs = codeSigningConfigsDecoded0
    }
}
