// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventSourceMappingsOutputBody: Equatable {
    public let nextMarker: String?
    public let eventSourceMappings: [EventSourceMappingConfiguration]?
}

extension ListEventSourceMappingsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventSourceMappings = "EventSourceMappings"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let eventSourceMappingsContainer = try containerValues.decodeIfPresent([EventSourceMappingConfiguration].self, forKey: .eventSourceMappings)
        var eventSourceMappingsDecoded0:[EventSourceMappingConfiguration]? = nil
        if let eventSourceMappingsContainer = eventSourceMappingsContainer {
            eventSourceMappingsDecoded0 = [EventSourceMappingConfiguration]()
            for structure0 in eventSourceMappingsContainer {
                eventSourceMappingsDecoded0?.append(structure0)
            }
        }
        eventSourceMappings = eventSourceMappingsDecoded0
    }
}
