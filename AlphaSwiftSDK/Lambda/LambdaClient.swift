// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class LambdaClient {
    let client: SdkHttpClient
    let config: LambdaClientConfiguration
    let serviceName = "Lambda"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: LambdaClientConfiguration) throws {
        client = try SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class LambdaClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        )
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> LambdaClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return LambdaClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension LambdaClient: LambdaClientProtocol {
    /**
     <p>Adds permissions to the resource-based policy of a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>. Use this action to grant layer
           usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all
           accounts in an organization.</p>
              <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you
           specified when you added it.</p>
     */
    public func addLayerVersionPermission(input: AddLayerVersionPermissionInput, completion: @escaping (SdkResult<AddLayerVersionPermissionOutput, AddLayerVersionPermissionOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let versionNumber = input.versionNumber
        let urlPath = "/2018-10-31/layers/\(layerName)/versions/\(versionNumber)/policy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "addLayerVersionPermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AddLayerVersionPermissionInput, AddLayerVersionPermissionOutput, AddLayerVersionPermissionOutputError>(id: "addLayerVersionPermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AddLayerVersionPermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AddLayerVersionPermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AddLayerVersionPermissionInput, AddLayerVersionPermissionOutput, AddLayerVersionPermissionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AddLayerVersionPermissionInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Grants an AWS service or another account permission to use a function. You can apply the policy at the
           function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier,
           the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.</p>

              <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. For AWS
           services, the principal is a domain-style identifier defined by the service, like <code>s3.amazonaws.com</code> or
             <code>sns.amazonaws.com</code>. For AWS services, you can also specify the ARN of the associated resource as the
             <code>SourceArn</code>. If you grant permission to a service principal without specifying the source, other
           accounts could potentially configure resources in their account to invoke your Lambda function.</p>

              <p>This action adds a statement to a resource-based permissions policy for the function. For more information
           about function policies, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda Function Policies</a>. </p>
     */
    public func addPermission(input: AddPermissionInput, completion: @escaping (SdkResult<AddPermissionOutput, AddPermissionOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/policy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "addPermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AddPermissionInput, AddPermissionOutput, AddPermissionOutputError>(id: "addPermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AddPermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AddPermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AddPermissionInput, AddPermissionOutput, AddPermissionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AddPermissionInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a> for a
           Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a
           different version.</p>
              <p>You can also map an alias to split invocation requests between two versions. Use the
             <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that
           it receives.</p>
     */
    public func createAlias(input: CreateAliasInput, completion: @escaping (SdkResult<CreateAliasOutput, CreateAliasOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/aliases"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAliasInput, CreateAliasOutput, CreateAliasOutputError>(id: "createAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAliasInput, CreateAliasOutput, CreateAliasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAliasInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Creates a code signing configuration. A <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">code signing configuration</a> defines a list of
           allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment
           validation checks fail). </p>
     */
    public func createCodeSigningConfig(input: CreateCodeSigningConfigInput, completion: @escaping (SdkResult<CreateCodeSigningConfigOutput, CreateCodeSigningConfigOutputError>) -> Void)
    {
        let urlPath = "/2020-04-22/code-signing-configs"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateCodeSigningConfigInput, CreateCodeSigningConfigOutput, CreateCodeSigningConfigOutputError>(id: "createCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateCodeSigningConfigInput, CreateCodeSigningConfigOutput, CreateCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateCodeSigningConfigInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source
           and triggers the function.</p>
              <p>For details about each event source type, see the following topics.</p>
              <ul>
                 <li>
                    <p>
                       <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html">Using AWS Lambda with Amazon
               DynamoDB</a>
                    </p>
                 </li>
                 <li>
                    <p>
                       <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html">Using AWS Lambda with Amazon
               Kinesis</a>
                    </p>
                 </li>
                 <li>
                    <p>
                       <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html">Using AWS Lambda with Amazon
               SQS</a>
                    </p>
                 </li>
                 <li>
                    <p>
                       <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html">Using AWS Lambda with Amazon
               MQ</a>
                    </p>
                 </li>
                 <li>
                    <p>
                       <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html">Using AWS Lambda with Amazon
               MSK</a>
                    </p>
                 </li>
              </ul>
              <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
              <ul>
                 <li>
                    <p>
                       <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
                 </li>
                 <li>
                    <p>
                       <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
                 </li>
                 <li>
                    <p>
                       <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
                 </li>
                 <li>
                    <p>
                       <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
                 </li>
                 <li>
                    <p>
                       <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
                 </li>
              </ul>
     */
    public func createEventSourceMapping(input: CreateEventSourceMappingInput, completion: @escaping (SdkResult<CreateEventSourceMappingOutput, CreateEventSourceMappingOutputError>) -> Void)
    {
        let urlPath = "/2015-03-31/event-source-mappings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createEventSourceMapping")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateEventSourceMappingInput, CreateEventSourceMappingOutput, CreateEventSourceMappingOutputError>(id: "createEventSourceMapping")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateEventSourceMappingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateEventSourceMappingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateEventSourceMappingInput, CreateEventSourceMappingOutput, CreateEventSourceMappingOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateEventSourceMappingInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Creates a Lambda function. To create a function, you need a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html">deployment package</a> and an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution role</a>. The
           deployment package is a .zip file  archive or container image that contains your function code. The execution role grants the function permission to use AWS
           services, such as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request tracing.</p>

              <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If
           your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or
           modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in
           the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For
           more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
             States</a>.</p>

              <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version
           changes when you update your function's code and configuration. A published version is a snapshot of your function
           code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be
           changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of
           your function from its initial configuration.</p>

              <p>The other parameters let you configure version-specific and function-level settings. You can modify
           version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply
           to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>)
           and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p>

              <p>You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function,
           specify the ARN of a code-signing configuration. When a user
           attempts to deploy a code package with <a>UpdateFunctionCode</a>, Lambda checks that the code
           package has a valid signature from a trusted publisher. The code-signing configuration
           includes set set of signing profiles, which define the trusted publishers for this function.</p>

              <p>If another account or an AWS service invokes your function, use <a>AddPermission</a> to grant
           permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version,
           or on an alias.</p>

              <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events
           in other AWS services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a
           function trigger in the other service. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html">Invoking Functions</a>.</p>
     */
    public func createFunction(input: CreateFunctionInput, completion: @escaping (SdkResult<CreateFunctionOutput, CreateFunctionOutputError>) -> Void)
    {
        let urlPath = "/2015-03-31/functions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createFunction")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateFunctionInput, CreateFunctionOutput, CreateFunctionOutputError>(id: "createFunction")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateFunctionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateFunctionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateFunctionInput, CreateFunctionOutput, CreateFunctionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateFunctionInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
    public func deleteAlias(input: DeleteAliasInput, completion: @escaping (SdkResult<DeleteAliasOutput, DeleteAliasOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        guard let name = input.name else {
            completion(.failure(.client(ClientError.serializationFailed("uri component name unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/aliases/\(name)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAliasInput, DeleteAliasOutput, DeleteAliasOutputError>(id: "deleteAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAliasInput, DeleteAliasOutput, DeleteAliasOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes the code signing configuration. You can delete the code signing configuration only if no function is
           using it. </p>
     */
    public func deleteCodeSigningConfig(input: DeleteCodeSigningConfigInput, completion: @escaping (SdkResult<DeleteCodeSigningConfigOutput, DeleteCodeSigningConfigOutputError>) -> Void)
    {
        guard let codeSigningConfigArn = input.codeSigningConfigArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component codeSigningConfigArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-04-22/code-signing-configs/\(codeSigningConfigArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteCodeSigningConfigInput, DeleteCodeSigningConfigOutput, DeleteCodeSigningConfigOutputError>(id: "deleteCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteCodeSigningConfigInput, DeleteCodeSigningConfigOutput, DeleteCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html">event source
           mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p>
              <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely
           deleted for several seconds.</p>
     */
    public func deleteEventSourceMapping(input: DeleteEventSourceMappingInput, completion: @escaping (SdkResult<DeleteEventSourceMappingOutput, DeleteEventSourceMappingOutputError>) -> Void)
    {
        guard let uUID = input.uUID else {
            completion(.failure(.client(ClientError.serializationFailed("uri component uUID unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/event-source-mappings/\(uUID)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteEventSourceMapping")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteEventSourceMappingInput, DeleteEventSourceMappingOutput, DeleteEventSourceMappingOutputError>(id: "deleteEventSourceMapping")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteEventSourceMappingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteEventSourceMappingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteEventSourceMappingInput, DeleteEventSourceMappingOutput, DeleteEventSourceMappingOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter.
           Otherwise, all versions and aliases are deleted.</p>

              <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>.
           For AWS services and resources that invoke your function directly, delete the trigger in the service where you
           originally configured it.</p>
     */
    public func deleteFunction(input: DeleteFunctionInput, completion: @escaping (SdkResult<DeleteFunctionOutput, DeleteFunctionOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteFunction")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteFunctionInput, DeleteFunctionOutput, DeleteFunctionOutputError>(id: "deleteFunction")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteFunctionInput, DeleteFunctionOutput, DeleteFunctionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes the code signing configuration from the function.</p>
    public func deleteFunctionCodeSigningConfig(input: DeleteFunctionCodeSigningConfigInput, completion: @escaping (SdkResult<DeleteFunctionCodeSigningConfigOutput, DeleteFunctionCodeSigningConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-06-30/functions/\(functionName)/code-signing-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteFunctionCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteFunctionCodeSigningConfigInput, DeleteFunctionCodeSigningConfigOutput, DeleteFunctionCodeSigningConfigOutputError>(id: "deleteFunctionCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteFunctionCodeSigningConfigInput, DeleteFunctionCodeSigningConfigOutput, DeleteFunctionCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a concurrent execution limit from a function.</p>
    public func deleteFunctionConcurrency(input: DeleteFunctionConcurrencyInput, completion: @escaping (SdkResult<DeleteFunctionConcurrencyOutput, DeleteFunctionConcurrencyOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2017-10-31/functions/\(functionName)/concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteFunctionConcurrency")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteFunctionConcurrencyInput, DeleteFunctionConcurrencyOutput, DeleteFunctionConcurrencyOutputError>(id: "deleteFunctionConcurrency")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionConcurrencyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionConcurrencyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteFunctionConcurrencyInput, DeleteFunctionConcurrencyOutput, DeleteFunctionConcurrencyOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p>
              <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
     */
    public func deleteFunctionEventInvokeConfig(input: DeleteFunctionEventInvokeConfigInput, completion: @escaping (SdkResult<DeleteFunctionEventInvokeConfigOutput, DeleteFunctionEventInvokeConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-25/functions/\(functionName)/event-invoke-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteFunctionEventInvokeConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteFunctionEventInvokeConfigInput, DeleteFunctionEventInvokeConfigOutput, DeleteFunctionEventInvokeConfigOutputError>(id: "deleteFunctionEventInvokeConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionEventInvokeConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteFunctionEventInvokeConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteFunctionEventInvokeConfigInput, DeleteFunctionEventInvokeConfigOutput, DeleteFunctionEventInvokeConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid
           breaking functions, a copy of the version remains in Lambda until no functions refer to it.</p>
     */
    public func deleteLayerVersion(input: DeleteLayerVersionInput, completion: @escaping (SdkResult<DeleteLayerVersionOutput, DeleteLayerVersionOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let versionNumber = input.versionNumber
        let urlPath = "/2018-10-31/layers/\(layerName)/versions/\(versionNumber)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteLayerVersion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteLayerVersionInput, DeleteLayerVersionOutput, DeleteLayerVersionOutputError>(id: "deleteLayerVersion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteLayerVersionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteLayerVersionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteLayerVersionInput, DeleteLayerVersionOutput, DeleteLayerVersionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the provisioned concurrency configuration for a function.</p>
    public func deleteProvisionedConcurrencyConfig(input: DeleteProvisionedConcurrencyConfigInput, completion: @escaping (SdkResult<DeleteProvisionedConcurrencyConfigOutput, DeleteProvisionedConcurrencyConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-30/functions/\(functionName)/provisioned-concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteProvisionedConcurrencyConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteProvisionedConcurrencyConfigInput, DeleteProvisionedConcurrencyConfigOutput, DeleteProvisionedConcurrencyConfigOutputError>(id: "deleteProvisionedConcurrencyConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteProvisionedConcurrencyConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteProvisionedConcurrencyConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteProvisionedConcurrencyConfigInput, DeleteProvisionedConcurrencyConfigOutput, DeleteProvisionedConcurrencyConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details about your account's <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a> and usage in an AWS Region.</p>
    public func getAccountSettings(input: GetAccountSettingsInput, completion: @escaping (SdkResult<GetAccountSettingsOutput, GetAccountSettingsOutputError>) -> Void)
    {
        let urlPath = "/2016-08-19/account-settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAccountSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAccountSettingsInput, GetAccountSettingsOutput, GetAccountSettingsOutputError>(id: "getAccountSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAccountSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAccountSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAccountSettingsInput, GetAccountSettingsOutput, GetAccountSettingsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns details about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
    public func getAlias(input: GetAliasInput, completion: @escaping (SdkResult<GetAliasOutput, GetAliasOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        guard let name = input.name else {
            completion(.failure(.client(ClientError.serializationFailed("uri component name unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/aliases/\(name)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAliasInput, GetAliasOutput, GetAliasOutputError>(id: "getAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAliasInput, GetAliasOutput, GetAliasOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about the specified code signing configuration.</p>
    public func getCodeSigningConfig(input: GetCodeSigningConfigInput, completion: @escaping (SdkResult<GetCodeSigningConfigOutput, GetCodeSigningConfigOutputError>) -> Void)
    {
        guard let codeSigningConfigArn = input.codeSigningConfigArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component codeSigningConfigArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-04-22/code-signing-configs/\(codeSigningConfigArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetCodeSigningConfigInput, GetCodeSigningConfigOutput, GetCodeSigningConfigOutputError>(id: "getCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetCodeSigningConfigInput, GetCodeSigningConfigOutput, GetCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns details about an event source mapping. You can get the identifier of a mapping from the output of
           <a>ListEventSourceMappings</a>.</p>
     */
    public func getEventSourceMapping(input: GetEventSourceMappingInput, completion: @escaping (SdkResult<GetEventSourceMappingOutput, GetEventSourceMappingOutputError>) -> Void)
    {
        guard let uUID = input.uUID else {
            completion(.failure(.client(ClientError.serializationFailed("uri component uUID unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/event-source-mappings/\(uUID)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getEventSourceMapping")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetEventSourceMappingInput, GetEventSourceMappingOutput, GetEventSourceMappingOutputError>(id: "getEventSourceMapping")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetEventSourceMappingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetEventSourceMappingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetEventSourceMappingInput, GetEventSourceMappingOutput, GetEventSourceMappingOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns information about the function or function version, with a link to download the deployment package
           that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are
           returned.</p>
     */
    public func getFunction(input: GetFunctionInput, completion: @escaping (SdkResult<GetFunctionOutput, GetFunctionOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFunction")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFunctionInput, GetFunctionOutput, GetFunctionOutputError>(id: "getFunction")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFunctionInput, GetFunctionOutput, GetFunctionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the code signing configuration for the specified function.</p>
    public func getFunctionCodeSigningConfig(input: GetFunctionCodeSigningConfigInput, completion: @escaping (SdkResult<GetFunctionCodeSigningConfigOutput, GetFunctionCodeSigningConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-06-30/functions/\(functionName)/code-signing-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFunctionCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFunctionCodeSigningConfigInput, GetFunctionCodeSigningConfigOutput, GetFunctionCodeSigningConfigOutputError>(id: "getFunctionCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFunctionCodeSigningConfigInput, GetFunctionCodeSigningConfigOutput, GetFunctionCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a
           function, use <a>PutFunctionConcurrency</a>.</p>
     */
    public func getFunctionConcurrency(input: GetFunctionConcurrencyInput, completion: @escaping (SdkResult<GetFunctionConcurrencyOutput, GetFunctionConcurrencyOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-30/functions/\(functionName)/concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFunctionConcurrency")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFunctionConcurrencyInput, GetFunctionConcurrencyOutput, GetFunctionConcurrencyOutputError>(id: "getFunctionConcurrency")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionConcurrencyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionConcurrencyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFunctionConcurrencyInput, GetFunctionConcurrencyOutput, GetFunctionConcurrencyOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns the version-specific settings of a Lambda function or version. The output includes only options that
           can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p>
              <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>
     */
    public func getFunctionConfiguration(input: GetFunctionConfigurationInput, completion: @escaping (SdkResult<GetFunctionConfigurationOutput, GetFunctionConfigurationOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFunctionConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFunctionConfigurationInput, GetFunctionConfigurationOutput, GetFunctionConfigurationOutputError>(id: "getFunctionConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFunctionConfigurationInput, GetFunctionConfigurationOutput, GetFunctionConfigurationOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p>
              <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
     */
    public func getFunctionEventInvokeConfig(input: GetFunctionEventInvokeConfigInput, completion: @escaping (SdkResult<GetFunctionEventInvokeConfigOutput, GetFunctionEventInvokeConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-25/functions/\(functionName)/event-invoke-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFunctionEventInvokeConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFunctionEventInvokeConfigInput, GetFunctionEventInvokeConfigOutput, GetFunctionEventInvokeConfigOutputError>(id: "getFunctionEventInvokeConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionEventInvokeConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFunctionEventInvokeConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFunctionEventInvokeConfigInput, GetFunctionEventInvokeConfigOutput, GetFunctionEventInvokeConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>, with a link to download the layer archive
             that's valid for 10 minutes.</p>
     */
    public func getLayerVersion(input: GetLayerVersionInput, completion: @escaping (SdkResult<GetLayerVersionOutput, GetLayerVersionOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let versionNumber = input.versionNumber
        let urlPath = "/2018-10-31/layers/\(layerName)/versions/\(versionNumber)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLayerVersion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLayerVersionInput, GetLayerVersionOutput, GetLayerVersionOutputError>(id: "getLayerVersion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLayerVersionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLayerVersionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLayerVersionInput, GetLayerVersionOutput, GetLayerVersionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>, with a link to download the layer archive
             that's valid for 10 minutes.</p>
     */
    public func getLayerVersionByArn(input: GetLayerVersionByArnInput, completion: @escaping (SdkResult<GetLayerVersionByArnOutput, GetLayerVersionByArnOutputError>) -> Void)
    {
        let urlPath = "/2018-10-31/layers"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLayerVersionByArn")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLayerVersionByArnInput, GetLayerVersionByArnOutput, GetLayerVersionByArnOutputError>(id: "getLayerVersionByArn")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLayerVersionByArnInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLayerVersionByArnInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLayerVersionByArnInput, GetLayerVersionByArnOutput, GetLayerVersionByArnOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns the permission policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>. For more information, see <a>AddLayerVersionPermission</a>.</p>
     */
    public func getLayerVersionPolicy(input: GetLayerVersionPolicyInput, completion: @escaping (SdkResult<GetLayerVersionPolicyOutput, GetLayerVersionPolicyOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let versionNumber = input.versionNumber
        let urlPath = "/2018-10-31/layers/\(layerName)/versions/\(versionNumber)/policy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLayerVersionPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLayerVersionPolicyInput, GetLayerVersionPolicyOutput, GetLayerVersionPolicyOutputError>(id: "getLayerVersionPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLayerVersionPolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLayerVersionPolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLayerVersionPolicyInput, GetLayerVersionPolicyOutput, GetLayerVersionPolicyOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">resource-based IAM policy</a> for a function, version, or alias.</p>
    public func getPolicy(input: GetPolicyInput, completion: @escaping (SdkResult<GetPolicyOutput, GetPolicyOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/policy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetPolicyInput, GetPolicyOutput, GetPolicyOutputError>(id: "getPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetPolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetPolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetPolicyInput, GetPolicyOutput, GetPolicyOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the provisioned concurrency configuration for a function's alias or version.</p>
    public func getProvisionedConcurrencyConfig(input: GetProvisionedConcurrencyConfigInput, completion: @escaping (SdkResult<GetProvisionedConcurrencyConfigOutput, GetProvisionedConcurrencyConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-30/functions/\(functionName)/provisioned-concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getProvisionedConcurrencyConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetProvisionedConcurrencyConfigInput, GetProvisionedConcurrencyConfigOutput, GetProvisionedConcurrencyConfigOutputError>(id: "getProvisionedConcurrencyConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetProvisionedConcurrencyConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetProvisionedConcurrencyConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetProvisionedConcurrencyConfigInput, GetProvisionedConcurrencyConfigOutput, GetProvisionedConcurrencyConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or
           asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p>

              <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html">synchronous invocation</a>,
           details about the function response, including errors, are included in the response body and headers. For either
           invocation type, you can find more information in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html">execution log</a> and <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html">trace</a>.</p>

              <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type,
           client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an
           error, Lambda executes the function up to two more times. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html">Retry Behavior</a>.</p>

              <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous invocation</a>,
           Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity
           to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple
           times, even if no error occurs. To retain events that were not processed, configure your function with a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a>.</p>

              <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that
           prevent your function from executing, such as permissions errors, <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limit errors</a>, or issues with your function's code and configuration.
           For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to
           exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or
           function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p>

              <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it
           waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long
           connections with timeout or keep-alive settings.</p>

              <p>This operation requires permission for the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html">lambda:InvokeFunction</a> action.</p>
     */
    public func invoke(input: InvokeInput, completion: @escaping (SdkResult<InvokeOutput, InvokeOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/invocations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "invoke")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<InvokeInput, InvokeOutput, InvokeOutputError>(id: "invoke")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: InvokeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: InvokeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<InvokeInput, InvokeOutput, InvokeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: InvokeInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <important>
                 <p>For asynchronous function invocation, use <a>Invoke</a>.</p>
              </important>
              <p>Invokes a function asynchronously.</p>
     */
    @available(*, deprecated)
    public func invokeAsync(input: InvokeAsyncInput, streamSource: StreamSource, completion: @escaping (SdkResult<InvokeAsyncOutput, InvokeAsyncOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2014-11-13/functions/\(functionName)/invoke-async"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "invokeAsync")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<InvokeAsyncInput, InvokeAsyncOutput, InvokeAsyncOutputError>(id: "invokeAsync")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: InvokeAsyncInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: InvokeAsyncInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<InvokeAsyncInput, InvokeAsyncOutput, InvokeAsyncOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: InvokeAsyncInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">aliases</a>
           for a Lambda function.</p>
     */
    public func listAliases(input: ListAliasesInput, completion: @escaping (SdkResult<ListAliasesOutput, ListAliasesOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/aliases"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAliases")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAliasesInput, ListAliasesOutput, ListAliasesOutputError>(id: "listAliases")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAliasesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAliasesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAliasesInput, ListAliasesOutput, ListAliasesOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html">code
             signing configurations</a>. A request returns up to 10,000 configurations per
           call. You can use the <code>MaxItems</code> parameter to return fewer configurations per call. </p>
     */
    public func listCodeSigningConfigs(input: ListCodeSigningConfigsInput, completion: @escaping (SdkResult<ListCodeSigningConfigsOutput, ListCodeSigningConfigsOutputError>) -> Void)
    {
        let urlPath = "/2020-04-22/code-signing-configs"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listCodeSigningConfigs")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListCodeSigningConfigsInput, ListCodeSigningConfigsOutput, ListCodeSigningConfigsOutputError>(id: "listCodeSigningConfigs")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListCodeSigningConfigsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListCodeSigningConfigsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListCodeSigningConfigsInput, ListCodeSigningConfigsOutput, ListCodeSigningConfigsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a
           single event source.</p>
     */
    public func listEventSourceMappings(input: ListEventSourceMappingsInput, completion: @escaping (SdkResult<ListEventSourceMappingsOutput, ListEventSourceMappingsOutputError>) -> Void)
    {
        let urlPath = "/2015-03-31/event-source-mappings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listEventSourceMappings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListEventSourceMappingsInput, ListEventSourceMappingsOutput, ListEventSourceMappingsOutputError>(id: "listEventSourceMappings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListEventSourceMappingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListEventSourceMappingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListEventSourceMappingsInput, ListEventSourceMappingsOutput, ListEventSourceMappingsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Retrieves a list of configurations for asynchronous invocation for a function.</p>
              <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
     */
    public func listFunctionEventInvokeConfigs(input: ListFunctionEventInvokeConfigsInput, completion: @escaping (SdkResult<ListFunctionEventInvokeConfigsOutput, ListFunctionEventInvokeConfigsOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-25/functions/\(functionName)/event-invoke-config/list"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listFunctionEventInvokeConfigs")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListFunctionEventInvokeConfigsInput, ListFunctionEventInvokeConfigsOutput, ListFunctionEventInvokeConfigsOutputError>(id: "listFunctionEventInvokeConfigs")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListFunctionEventInvokeConfigsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListFunctionEventInvokeConfigsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListFunctionEventInvokeConfigsInput, ListFunctionEventInvokeConfigsOutput, ListFunctionEventInvokeConfigsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50
           functions per call.</p>
              <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in
           addition to the unpublished version. To get more information about a function or version, use <a>GetFunction</a>.</p>
     */
    public func listFunctions(input: ListFunctionsInput, completion: @escaping (SdkResult<ListFunctionsOutput, ListFunctionsOutputError>) -> Void)
    {
        let urlPath = "/2015-03-31/functions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listFunctions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListFunctionsInput, ListFunctionsOutput, ListFunctionsOutputError>(id: "listFunctions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListFunctionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListFunctionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListFunctionsInput, ListFunctionsOutput, ListFunctionsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>List the functions that use the specified code signing configuration. You can use this method prior to deleting a
           code signing configuration, to verify that no functions are using it.</p>
     */
    public func listFunctionsByCodeSigningConfig(input: ListFunctionsByCodeSigningConfigInput, completion: @escaping (SdkResult<ListFunctionsByCodeSigningConfigOutput, ListFunctionsByCodeSigningConfigOutputError>) -> Void)
    {
        guard let codeSigningConfigArn = input.codeSigningConfigArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component codeSigningConfigArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-04-22/code-signing-configs/\(codeSigningConfigArn)/functions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listFunctionsByCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListFunctionsByCodeSigningConfigInput, ListFunctionsByCodeSigningConfigOutput, ListFunctionsByCodeSigningConfigOutputError>(id: "listFunctionsByCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListFunctionsByCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListFunctionsByCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListFunctionsByCodeSigningConfigInput, ListFunctionsByCodeSigningConfigOutput, ListFunctionsByCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Lists the versions of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>. Versions that have been deleted aren't listed. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only
           versions that indicate that they're compatible with that runtime.</p>
     */
    public func listLayerVersions(input: ListLayerVersionsInput, completion: @escaping (SdkResult<ListLayerVersionsOutput, ListLayerVersionsOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let urlPath = "/2018-10-31/layers/\(layerName)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLayerVersions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLayerVersionsInput, ListLayerVersionsOutput, ListLayerVersionsOutputError>(id: "listLayerVersions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLayerVersionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLayerVersionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLayerVersionsInput, ListLayerVersionsOutput, ListLayerVersionsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Lists <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layers</a> and shows information about the latest version of each. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only layers
           that indicate that they're compatible with that runtime.</p>
     */
    public func listLayers(input: ListLayersInput, completion: @escaping (SdkResult<ListLayersOutput, ListLayersOutputError>) -> Void)
    {
        let urlPath = "/2018-10-31/layers"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLayers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLayersInput, ListLayersOutput, ListLayersOutputError>(id: "listLayers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLayersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLayersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLayersInput, ListLayersOutput, ListLayersOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves a list of provisioned concurrency configurations for a function.</p>
    public func listProvisionedConcurrencyConfigs(input: ListProvisionedConcurrencyConfigsInput, completion: @escaping (SdkResult<ListProvisionedConcurrencyConfigsOutput, ListProvisionedConcurrencyConfigsOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-30/functions/\(functionName)/provisioned-concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listProvisionedConcurrencyConfigs")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListProvisionedConcurrencyConfigsInput, ListProvisionedConcurrencyConfigsOutput, ListProvisionedConcurrencyConfigsOutputError>(id: "listProvisionedConcurrencyConfigs")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListProvisionedConcurrencyConfigsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListProvisionedConcurrencyConfigsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListProvisionedConcurrencyConfigsInput, ListProvisionedConcurrencyConfigsOutput, ListProvisionedConcurrencyConfigsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns a function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>. You can
           also view tags with <a>GetFunction</a>.</p>
     */
    public func listTags(input: ListTagsInput, completion: @escaping (SdkResult<ListTagsOutput, ListTagsOutputError>) -> Void)
    {
        guard let resource = input.resource else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resource unexpectedly nil"))))
            return
        }
        let urlPath = "/2017-03-31/tags/\(resource)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTags")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsInput, ListTagsOutput, ListTagsOutputError>(id: "listTags")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsInput, ListTagsOutput, ListTagsOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">versions</a>,
           with the version-specific configuration of each. Lambda returns up to 50 versions per call.</p>
     */
    public func listVersionsByFunction(input: ListVersionsByFunctionInput, completion: @escaping (SdkResult<ListVersionsByFunctionOutput, ListVersionsByFunctionOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listVersionsByFunction")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListVersionsByFunctionInput, ListVersionsByFunctionOutput, ListVersionsByFunctionOutputError>(id: "listVersionsByFunction")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListVersionsByFunctionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListVersionsByFunctionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListVersionsByFunctionInput, ListVersionsByFunctionOutput, ListVersionsByFunctionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same
           layer name, a new version is created.</p>
              <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>
     */
    public func publishLayerVersion(input: PublishLayerVersionInput, completion: @escaping (SdkResult<PublishLayerVersionOutput, PublishLayerVersionOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let urlPath = "/2018-10-31/layers/\(layerName)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "publishLayerVersion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PublishLayerVersionInput, PublishLayerVersionOutput, PublishLayerVersionOutputError>(id: "publishLayerVersion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PublishLayerVersionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PublishLayerVersionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PublishLayerVersionInput, PublishLayerVersionOutput, PublishLayerVersionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PublishLayerVersionInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Creates a <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version</a> from the
           current code and configuration of a function. Use versions to create a snapshot of your function code and
           configuration that doesn't change.</p>

              <p>AWS Lambda doesn't publish a version if the function's configuration and code haven't changed since the last
           version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the
           function before publishing a version.</p>

              <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>
     */
    public func publishVersion(input: PublishVersionInput, completion: @escaping (SdkResult<PublishVersionOutput, PublishVersionOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/versions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "publishVersion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PublishVersionInput, PublishVersionOutput, PublishVersionOutputError>(id: "publishVersion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PublishVersionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PublishVersionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PublishVersionInput, PublishVersionOutput, PublishVersionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PublishVersionInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Update the code signing configuration for the function. Changes to the code signing configuration take effect the
           next time a user tries to deploy a code package to the function. </p>
     */
    public func putFunctionCodeSigningConfig(input: PutFunctionCodeSigningConfigInput, completion: @escaping (SdkResult<PutFunctionCodeSigningConfigOutput, PutFunctionCodeSigningConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-06-30/functions/\(functionName)/code-signing-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putFunctionCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutFunctionCodeSigningConfigInput, PutFunctionCodeSigningConfigOutput, PutFunctionCodeSigningConfigOutputError>(id: "putFunctionCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutFunctionCodeSigningConfigInput, PutFunctionCodeSigningConfigOutput, PutFunctionCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionCodeSigningConfigInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency
           level.</p>
              <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished
           version. Reserving concurrency both ensures that your function has capacity to process the specified number of
           events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see
           the current setting for a function.</p>
              <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency
           for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for
           functions that aren't configured with a per-function limit. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.</p>
     */
    public func putFunctionConcurrency(input: PutFunctionConcurrencyInput, completion: @escaping (SdkResult<PutFunctionConcurrencyOutput, PutFunctionConcurrencyOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2017-10-31/functions/\(functionName)/concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putFunctionConcurrency")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutFunctionConcurrencyInput, PutFunctionConcurrencyOutput, PutFunctionConcurrencyOutputError>(id: "putFunctionConcurrency")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionConcurrencyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionConcurrencyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutFunctionConcurrencyInput, PutFunctionConcurrencyOutput, PutFunctionConcurrencyOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionConcurrencyInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Configures options for <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous
             invocation</a> on a function, version, or alias. If a configuration already exists for a function, version,
           or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without
           affecting existing settings for other options, use <a>UpdateFunctionEventInvokeConfig</a>.</p>
              <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains
           events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous
           invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with
             <a>UpdateFunctionConfiguration</a>.</p>
              <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations">destination</a>. You can configure separate destinations for successful invocations (on-success) and events
           that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a
           dead-letter queue.</p>
     */
    public func putFunctionEventInvokeConfig(input: PutFunctionEventInvokeConfigInput, completion: @escaping (SdkResult<PutFunctionEventInvokeConfigOutput, PutFunctionEventInvokeConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-25/functions/\(functionName)/event-invoke-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putFunctionEventInvokeConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutFunctionEventInvokeConfigInput, PutFunctionEventInvokeConfigOutput, PutFunctionEventInvokeConfigOutputError>(id: "putFunctionEventInvokeConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionEventInvokeConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionEventInvokeConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutFunctionEventInvokeConfigInput, PutFunctionEventInvokeConfigOutput, PutFunctionEventInvokeConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutFunctionEventInvokeConfigInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds a provisioned concurrency configuration to a function's alias or version.</p>
    public func putProvisionedConcurrencyConfig(input: PutProvisionedConcurrencyConfigInput, completion: @escaping (SdkResult<PutProvisionedConcurrencyConfigOutput, PutProvisionedConcurrencyConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-30/functions/\(functionName)/provisioned-concurrency"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putProvisionedConcurrencyConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutProvisionedConcurrencyConfigInput, PutProvisionedConcurrencyConfigOutput, PutProvisionedConcurrencyConfigOutputError>(id: "putProvisionedConcurrencyConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutProvisionedConcurrencyConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutProvisionedConcurrencyConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutProvisionedConcurrencyConfigInput, PutProvisionedConcurrencyConfigOutput, PutProvisionedConcurrencyConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutProvisionedConcurrencyConfigInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Removes a statement from the permissions policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
             layer</a>. For more information, see
             <a>AddLayerVersionPermission</a>.</p>
     */
    public func removeLayerVersionPermission(input: RemoveLayerVersionPermissionInput, completion: @escaping (SdkResult<RemoveLayerVersionPermissionOutput, RemoveLayerVersionPermissionOutputError>) -> Void)
    {
        guard let layerName = input.layerName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component layerName unexpectedly nil"))))
            return
        }
        let versionNumber = input.versionNumber
        guard let statementId = input.statementId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component statementId unexpectedly nil"))))
            return
        }
        let urlPath = "/2018-10-31/layers/\(layerName)/versions/\(versionNumber)/policy/\(statementId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "removeLayerVersionPermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RemoveLayerVersionPermissionInput, RemoveLayerVersionPermissionOutput, RemoveLayerVersionPermissionOutputError>(id: "removeLayerVersionPermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RemoveLayerVersionPermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RemoveLayerVersionPermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RemoveLayerVersionPermissionInput, RemoveLayerVersionPermissionOutput, RemoveLayerVersionPermissionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Revokes function-use permission from an AWS service or another account. You can get the ID of the statement
           from the output of <a>GetPolicy</a>.</p>
     */
    public func removePermission(input: RemovePermissionInput, completion: @escaping (SdkResult<RemovePermissionOutput, RemovePermissionOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        guard let statementId = input.statementId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component statementId unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/policy/\(statementId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "removePermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RemovePermissionInput, RemovePermissionOutput, RemovePermissionOutputError>(id: "removePermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RemovePermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RemovePermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RemovePermissionInput, RemovePermissionOutput, RemovePermissionOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to a function.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        guard let resource = input.resource else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resource unexpectedly nil"))))
            return
        }
        let urlPath = "/2017-03-31/tags/\(resource)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> from a function.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        guard let resource = input.resource else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resource unexpectedly nil"))))
            return
        }
        let urlPath = "/2017-03-31/tags/\(resource)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the configuration of a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
    public func updateAlias(input: UpdateAliasInput, completion: @escaping (SdkResult<UpdateAliasOutput, UpdateAliasOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        guard let name = input.name else {
            completion(.failure(.client(ClientError.serializationFailed("uri component name unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/aliases/\(name)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAlias")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAliasInput, UpdateAliasOutput, UpdateAliasOutputError>(id: "updateAlias")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAliasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAliasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAliasInput, UpdateAliasOutput, UpdateAliasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAliasInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Update the code signing configuration. Changes to the code signing configuration take effect the next time a
           user tries to deploy a code package to the function. </p>
     */
    public func updateCodeSigningConfig(input: UpdateCodeSigningConfigInput, completion: @escaping (SdkResult<UpdateCodeSigningConfigOutput, UpdateCodeSigningConfigOutputError>) -> Void)
    {
        guard let codeSigningConfigArn = input.codeSigningConfigArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component codeSigningConfigArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-04-22/code-signing-configs/\(codeSigningConfigArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateCodeSigningConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateCodeSigningConfigInput, UpdateCodeSigningConfigOutput, UpdateCodeSigningConfigOutputError>(id: "updateCodeSigningConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateCodeSigningConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateCodeSigningConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateCodeSigningConfigInput, UpdateCodeSigningConfigOutput, UpdateCodeSigningConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateCodeSigningConfigInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and
           resume later from the same location.</p>
              <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
              <ul>
                 <li>
                    <p>
                       <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
                 </li>
                 <li>
                    <p>
                       <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
                 </li>
                 <li>
                    <p>
                       <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
                 </li>
                 <li>
                    <p>
                       <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
                 </li>
                 <li>
                    <p>
                       <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
                 </li>
              </ul>
     */
    public func updateEventSourceMapping(input: UpdateEventSourceMappingInput, completion: @escaping (SdkResult<UpdateEventSourceMappingOutput, UpdateEventSourceMappingOutputError>) -> Void)
    {
        guard let uUID = input.uUID else {
            completion(.failure(.client(ClientError.serializationFailed("uri component uUID unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/event-source-mappings/\(uUID)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateEventSourceMapping")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateEventSourceMappingInput, UpdateEventSourceMappingOutput, UpdateEventSourceMappingOutputError>(id: "updateEventSourceMapping")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateEventSourceMappingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateEventSourceMappingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateEventSourceMappingInput, UpdateEventSourceMappingOutput, UpdateEventSourceMappingOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateEventSourceMappingInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed
           by a trusted publisher. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">Configuring code signing</a>.</p>

              <p>The function's code is locked when you publish a version. You can't modify the code of a published version,
           only the unpublished version.</p>
              <note>
                 <p>For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if
             you update the image tag to a new image, Lambda does not automatically update the function.</p>
              </note>
     */
    public func updateFunctionCode(input: UpdateFunctionCodeInput, completion: @escaping (SdkResult<UpdateFunctionCodeOutput, UpdateFunctionCodeOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/code"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateFunctionCode")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateFunctionCodeInput, UpdateFunctionCodeOutput, UpdateFunctionCodeOutputError>(id: "updateFunctionCode")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionCodeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionCodeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateFunctionCodeInput, UpdateFunctionCodeOutput, UpdateFunctionCodeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionCodeInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Modify the version-specific settings of a Lambda function.</p>

              <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If
           your function connects to a VPC, this process can take a minute. During this time, you can't modify the function,
           but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and
             <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a>
           indicate when the update is complete and the function is processing events with the new configuration. For more
           information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
           States</a>.</p>

              <p>These settings can vary between versions of a function and are locked when you publish a version. You can't
           modify the configuration of a published version, only the unpublished version.</p>

              <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions
           to an account or AWS service, use <a>AddPermission</a>.</p>
     */
    public func updateFunctionConfiguration(input: UpdateFunctionConfigurationInput, completion: @escaping (SdkResult<UpdateFunctionConfigurationOutput, UpdateFunctionConfigurationOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2015-03-31/functions/\(functionName)/configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateFunctionConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateFunctionConfigurationInput, UpdateFunctionConfigurationOutput, UpdateFunctionConfigurationOutputError>(id: "updateFunctionConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateFunctionConfigurationInput, UpdateFunctionConfigurationOutput, UpdateFunctionConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionConfigurationInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p>
              <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
     */
    public func updateFunctionEventInvokeConfig(input: UpdateFunctionEventInvokeConfigInput, completion: @escaping (SdkResult<UpdateFunctionEventInvokeConfigOutput, UpdateFunctionEventInvokeConfigOutputError>) -> Void)
    {
        guard let functionName = input.functionName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component functionName unexpectedly nil"))))
            return
        }
        let urlPath = "/2019-09-25/functions/\(functionName)/event-invoke-config"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateFunctionEventInvokeConfig")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "lambda.\(config.region).amazonaws.com")
                      .withSigningName(value: "lambda")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateFunctionEventInvokeConfigInput, UpdateFunctionEventInvokeConfigOutput, UpdateFunctionEventInvokeConfigOutputError>(id: "updateFunctionEventInvokeConfig")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionEventInvokeConfigInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionEventInvokeConfigInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateFunctionEventInvokeConfigInput, UpdateFunctionEventInvokeConfigOutput, UpdateFunctionEventInvokeConfigOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateFunctionEventInvokeConfigInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        let config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(config: config))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
